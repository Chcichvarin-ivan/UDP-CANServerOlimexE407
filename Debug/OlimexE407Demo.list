
OlimexE407Demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014b88  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002f50  08014d18  08014d18  00024d18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017c68  08017c68  00030080  2**0
                  CONTENTS
  4 .ARM          00000008  08017c68  08017c68  00027c68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017c70  08017c70  00030080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08017c70  08017c70  00027c70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08017c74  08017c74  00027c74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08017c78  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030080  2**0
                  CONTENTS
 10 .bss          0000b4cc  20000080  20000080  00030080  2**2
                  ALLOC
 11 ._user_heap_stack 00000c04  2000b54c  2000b54c  00030080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030080  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002b6e8  00000000  00000000  000300b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00007237  00000000  00000000  0005b798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001f98  00000000  00000000  000629d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001e20  00000000  00000000  00064968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002e6e7  00000000  00000000  00066788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00034f12  00000000  00000000  00094e6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000eeea7  00000000  00000000  000c9d81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001b8c28  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000089d4  00000000  00000000  001b8c78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08014d00 	.word	0x08014d00

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	08014d00 	.word	0x08014d00

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000578:	4b0e      	ldr	r3, [pc, #56]	; (80005b4 <HAL_Init+0x40>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	4a0d      	ldr	r2, [pc, #52]	; (80005b4 <HAL_Init+0x40>)
 800057e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000582:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000584:	4b0b      	ldr	r3, [pc, #44]	; (80005b4 <HAL_Init+0x40>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a0a      	ldr	r2, [pc, #40]	; (80005b4 <HAL_Init+0x40>)
 800058a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800058e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000590:	4b08      	ldr	r3, [pc, #32]	; (80005b4 <HAL_Init+0x40>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4a07      	ldr	r2, [pc, #28]	; (80005b4 <HAL_Init+0x40>)
 8000596:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800059a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800059c:	2003      	movs	r0, #3
 800059e:	f000 f8fd 	bl	800079c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005a2:	200f      	movs	r0, #15
 80005a4:	f012 ff38 	bl	8013418 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005a8:	f012 ff0a 	bl	80133c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005ac:	2300      	movs	r3, #0
}
 80005ae:	4618      	mov	r0, r3
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	40023c00 	.word	0x40023c00

080005b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005bc:	4b06      	ldr	r3, [pc, #24]	; (80005d8 <HAL_IncTick+0x20>)
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	461a      	mov	r2, r3
 80005c2:	4b06      	ldr	r3, [pc, #24]	; (80005dc <HAL_IncTick+0x24>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	4413      	add	r3, r2
 80005c8:	4a04      	ldr	r2, [pc, #16]	; (80005dc <HAL_IncTick+0x24>)
 80005ca:	6013      	str	r3, [r2, #0]
}
 80005cc:	bf00      	nop
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	20000004 	.word	0x20000004
 80005dc:	2000009c 	.word	0x2000009c

080005e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
  return uwTick;
 80005e4:	4b03      	ldr	r3, [pc, #12]	; (80005f4 <HAL_GetTick+0x14>)
 80005e6:	681b      	ldr	r3, [r3, #0]
}
 80005e8:	4618      	mov	r0, r3
 80005ea:	46bd      	mov	sp, r7
 80005ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop
 80005f4:	2000009c 	.word	0x2000009c

080005f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b084      	sub	sp, #16
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000600:	f7ff ffee 	bl	80005e0 <HAL_GetTick>
 8000604:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000610:	d005      	beq.n	800061e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000612:	4b0a      	ldr	r3, [pc, #40]	; (800063c <HAL_Delay+0x44>)
 8000614:	781b      	ldrb	r3, [r3, #0]
 8000616:	461a      	mov	r2, r3
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	4413      	add	r3, r2
 800061c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800061e:	bf00      	nop
 8000620:	f7ff ffde 	bl	80005e0 <HAL_GetTick>
 8000624:	4602      	mov	r2, r0
 8000626:	68bb      	ldr	r3, [r7, #8]
 8000628:	1ad3      	subs	r3, r2, r3
 800062a:	68fa      	ldr	r2, [r7, #12]
 800062c:	429a      	cmp	r2, r3
 800062e:	d8f7      	bhi.n	8000620 <HAL_Delay+0x28>
  {
  }
}
 8000630:	bf00      	nop
 8000632:	bf00      	nop
 8000634:	3710      	adds	r7, #16
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	20000004 	.word	0x20000004

08000640 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000640:	b480      	push	{r7}
 8000642:	b085      	sub	sp, #20
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	f003 0307 	and.w	r3, r3, #7
 800064e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000650:	4b0c      	ldr	r3, [pc, #48]	; (8000684 <__NVIC_SetPriorityGrouping+0x44>)
 8000652:	68db      	ldr	r3, [r3, #12]
 8000654:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000656:	68ba      	ldr	r2, [r7, #8]
 8000658:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800065c:	4013      	ands	r3, r2
 800065e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000664:	68bb      	ldr	r3, [r7, #8]
 8000666:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000668:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800066c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000670:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000672:	4a04      	ldr	r2, [pc, #16]	; (8000684 <__NVIC_SetPriorityGrouping+0x44>)
 8000674:	68bb      	ldr	r3, [r7, #8]
 8000676:	60d3      	str	r3, [r2, #12]
}
 8000678:	bf00      	nop
 800067a:	3714      	adds	r7, #20
 800067c:	46bd      	mov	sp, r7
 800067e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000682:	4770      	bx	lr
 8000684:	e000ed00 	.word	0xe000ed00

08000688 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800068c:	4b04      	ldr	r3, [pc, #16]	; (80006a0 <__NVIC_GetPriorityGrouping+0x18>)
 800068e:	68db      	ldr	r3, [r3, #12]
 8000690:	0a1b      	lsrs	r3, r3, #8
 8000692:	f003 0307 	and.w	r3, r3, #7
}
 8000696:	4618      	mov	r0, r3
 8000698:	46bd      	mov	sp, r7
 800069a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069e:	4770      	bx	lr
 80006a0:	e000ed00 	.word	0xe000ed00

080006a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006a4:	b480      	push	{r7}
 80006a6:	b083      	sub	sp, #12
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	4603      	mov	r3, r0
 80006ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	db0b      	blt.n	80006ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006b6:	79fb      	ldrb	r3, [r7, #7]
 80006b8:	f003 021f 	and.w	r2, r3, #31
 80006bc:	4907      	ldr	r1, [pc, #28]	; (80006dc <__NVIC_EnableIRQ+0x38>)
 80006be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006c2:	095b      	lsrs	r3, r3, #5
 80006c4:	2001      	movs	r0, #1
 80006c6:	fa00 f202 	lsl.w	r2, r0, r2
 80006ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80006ce:	bf00      	nop
 80006d0:	370c      	adds	r7, #12
 80006d2:	46bd      	mov	sp, r7
 80006d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop
 80006dc:	e000e100 	.word	0xe000e100

080006e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006e0:	b480      	push	{r7}
 80006e2:	b083      	sub	sp, #12
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	4603      	mov	r3, r0
 80006e8:	6039      	str	r1, [r7, #0]
 80006ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	db0a      	blt.n	800070a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006f4:	683b      	ldr	r3, [r7, #0]
 80006f6:	b2da      	uxtb	r2, r3
 80006f8:	490c      	ldr	r1, [pc, #48]	; (800072c <__NVIC_SetPriority+0x4c>)
 80006fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006fe:	0112      	lsls	r2, r2, #4
 8000700:	b2d2      	uxtb	r2, r2
 8000702:	440b      	add	r3, r1
 8000704:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000708:	e00a      	b.n	8000720 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800070a:	683b      	ldr	r3, [r7, #0]
 800070c:	b2da      	uxtb	r2, r3
 800070e:	4908      	ldr	r1, [pc, #32]	; (8000730 <__NVIC_SetPriority+0x50>)
 8000710:	79fb      	ldrb	r3, [r7, #7]
 8000712:	f003 030f 	and.w	r3, r3, #15
 8000716:	3b04      	subs	r3, #4
 8000718:	0112      	lsls	r2, r2, #4
 800071a:	b2d2      	uxtb	r2, r2
 800071c:	440b      	add	r3, r1
 800071e:	761a      	strb	r2, [r3, #24]
}
 8000720:	bf00      	nop
 8000722:	370c      	adds	r7, #12
 8000724:	46bd      	mov	sp, r7
 8000726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072a:	4770      	bx	lr
 800072c:	e000e100 	.word	0xe000e100
 8000730:	e000ed00 	.word	0xe000ed00

08000734 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000734:	b480      	push	{r7}
 8000736:	b089      	sub	sp, #36	; 0x24
 8000738:	af00      	add	r7, sp, #0
 800073a:	60f8      	str	r0, [r7, #12]
 800073c:	60b9      	str	r1, [r7, #8]
 800073e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	f003 0307 	and.w	r3, r3, #7
 8000746:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000748:	69fb      	ldr	r3, [r7, #28]
 800074a:	f1c3 0307 	rsb	r3, r3, #7
 800074e:	2b04      	cmp	r3, #4
 8000750:	bf28      	it	cs
 8000752:	2304      	movcs	r3, #4
 8000754:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000756:	69fb      	ldr	r3, [r7, #28]
 8000758:	3304      	adds	r3, #4
 800075a:	2b06      	cmp	r3, #6
 800075c:	d902      	bls.n	8000764 <NVIC_EncodePriority+0x30>
 800075e:	69fb      	ldr	r3, [r7, #28]
 8000760:	3b03      	subs	r3, #3
 8000762:	e000      	b.n	8000766 <NVIC_EncodePriority+0x32>
 8000764:	2300      	movs	r3, #0
 8000766:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000768:	f04f 32ff 	mov.w	r2, #4294967295
 800076c:	69bb      	ldr	r3, [r7, #24]
 800076e:	fa02 f303 	lsl.w	r3, r2, r3
 8000772:	43da      	mvns	r2, r3
 8000774:	68bb      	ldr	r3, [r7, #8]
 8000776:	401a      	ands	r2, r3
 8000778:	697b      	ldr	r3, [r7, #20]
 800077a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800077c:	f04f 31ff 	mov.w	r1, #4294967295
 8000780:	697b      	ldr	r3, [r7, #20]
 8000782:	fa01 f303 	lsl.w	r3, r1, r3
 8000786:	43d9      	mvns	r1, r3
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800078c:	4313      	orrs	r3, r2
         );
}
 800078e:	4618      	mov	r0, r3
 8000790:	3724      	adds	r7, #36	; 0x24
 8000792:	46bd      	mov	sp, r7
 8000794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000798:	4770      	bx	lr
	...

0800079c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	2b07      	cmp	r3, #7
 80007a8:	d00f      	beq.n	80007ca <HAL_NVIC_SetPriorityGrouping+0x2e>
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	2b06      	cmp	r3, #6
 80007ae:	d00c      	beq.n	80007ca <HAL_NVIC_SetPriorityGrouping+0x2e>
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	2b05      	cmp	r3, #5
 80007b4:	d009      	beq.n	80007ca <HAL_NVIC_SetPriorityGrouping+0x2e>
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	2b04      	cmp	r3, #4
 80007ba:	d006      	beq.n	80007ca <HAL_NVIC_SetPriorityGrouping+0x2e>
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	2b03      	cmp	r3, #3
 80007c0:	d003      	beq.n	80007ca <HAL_NVIC_SetPriorityGrouping+0x2e>
 80007c2:	2192      	movs	r1, #146	; 0x92
 80007c4:	4804      	ldr	r0, [pc, #16]	; (80007d8 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 80007c6:	f012 fdf0 	bl	80133aa <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007ca:	6878      	ldr	r0, [r7, #4]
 80007cc:	f7ff ff38 	bl	8000640 <__NVIC_SetPriorityGrouping>
}
 80007d0:	bf00      	nop
 80007d2:	3708      	adds	r7, #8
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	08014d18 	.word	0x08014d18

080007dc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007dc:	b580      	push	{r7, lr}
 80007de:	b086      	sub	sp, #24
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	4603      	mov	r3, r0
 80007e4:	60b9      	str	r1, [r7, #8]
 80007e6:	607a      	str	r2, [r7, #4]
 80007e8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007ea:	2300      	movs	r3, #0
 80007ec:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	2b0f      	cmp	r3, #15
 80007f2:	d903      	bls.n	80007fc <HAL_NVIC_SetPriority+0x20>
 80007f4:	21aa      	movs	r1, #170	; 0xaa
 80007f6:	480e      	ldr	r0, [pc, #56]	; (8000830 <HAL_NVIC_SetPriority+0x54>)
 80007f8:	f012 fdd7 	bl	80133aa <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80007fc:	68bb      	ldr	r3, [r7, #8]
 80007fe:	2b0f      	cmp	r3, #15
 8000800:	d903      	bls.n	800080a <HAL_NVIC_SetPriority+0x2e>
 8000802:	21ab      	movs	r1, #171	; 0xab
 8000804:	480a      	ldr	r0, [pc, #40]	; (8000830 <HAL_NVIC_SetPriority+0x54>)
 8000806:	f012 fdd0 	bl	80133aa <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800080a:	f7ff ff3d 	bl	8000688 <__NVIC_GetPriorityGrouping>
 800080e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000810:	687a      	ldr	r2, [r7, #4]
 8000812:	68b9      	ldr	r1, [r7, #8]
 8000814:	6978      	ldr	r0, [r7, #20]
 8000816:	f7ff ff8d 	bl	8000734 <NVIC_EncodePriority>
 800081a:	4602      	mov	r2, r0
 800081c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000820:	4611      	mov	r1, r2
 8000822:	4618      	mov	r0, r3
 8000824:	f7ff ff5c 	bl	80006e0 <__NVIC_SetPriority>
}
 8000828:	bf00      	nop
 800082a:	3718      	adds	r7, #24
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	08014d18 	.word	0x08014d18

08000834 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
 800083a:	4603      	mov	r3, r0
 800083c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800083e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000842:	2b00      	cmp	r3, #0
 8000844:	da03      	bge.n	800084e <HAL_NVIC_EnableIRQ+0x1a>
 8000846:	21be      	movs	r1, #190	; 0xbe
 8000848:	4805      	ldr	r0, [pc, #20]	; (8000860 <HAL_NVIC_EnableIRQ+0x2c>)
 800084a:	f012 fdae 	bl	80133aa <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800084e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000852:	4618      	mov	r0, r3
 8000854:	f7ff ff26 	bl	80006a4 <__NVIC_EnableIRQ>
}
 8000858:	bf00      	nop
 800085a:	3708      	adds	r7, #8
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	08014d18 	.word	0x08014d18

08000864 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	2b00      	cmp	r3, #0
 8000870:	d101      	bne.n	8000876 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8000872:	2301      	movs	r3, #1
 8000874:	e017      	b.n	80008a6 <HAL_CRC_Init+0x42>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	4a0d      	ldr	r2, [pc, #52]	; (80008b0 <HAL_CRC_Init+0x4c>)
 800087c:	4293      	cmp	r3, r2
 800087e:	d003      	beq.n	8000888 <HAL_CRC_Init+0x24>
 8000880:	2168      	movs	r1, #104	; 0x68
 8000882:	480c      	ldr	r0, [pc, #48]	; (80008b4 <HAL_CRC_Init+0x50>)
 8000884:	f012 fd91 	bl	80133aa <assert_failed>

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	795b      	ldrb	r3, [r3, #5]
 800088c:	b2db      	uxtb	r3, r3
 800088e:	2b00      	cmp	r3, #0
 8000890:	d105      	bne.n	800089e <HAL_CRC_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	2200      	movs	r2, #0
 8000896:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8000898:	6878      	ldr	r0, [r7, #4]
 800089a:	f011 fe0b 	bl	80124b4 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	2201      	movs	r2, #1
 80008a2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80008a4:	2300      	movs	r3, #0
}
 80008a6:	4618      	mov	r0, r3
 80008a8:	3708      	adds	r7, #8
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	40023000 	.word	0x40023000
 80008b4:	08014d54 	.word	0x08014d54

080008b8 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b088      	sub	sp, #32
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 80008c0:	2300      	movs	r3, #0
 80008c2:	61fb      	str	r3, [r7, #28]
 80008c4:	2300      	movs	r3, #0
 80008c6:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 80008c8:	4b96      	ldr	r3, [pc, #600]	; (8000b24 <HAL_ETH_Init+0x26c>)
 80008ca:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 80008cc:	2300      	movs	r3, #0
 80008ce:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 80008d0:	2300      	movs	r3, #0
 80008d2:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d101      	bne.n	80008de <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 80008da:	2301      	movs	r3, #1
 80008dc:	e1d2      	b.n	8000c84 <HAL_ETH_Init+0x3cc>
  }
  
  /* Check parameters */
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	685b      	ldr	r3, [r3, #4]
 80008e2:	2b01      	cmp	r3, #1
 80008e4:	d007      	beq.n	80008f6 <HAL_ETH_Init+0x3e>
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	685b      	ldr	r3, [r3, #4]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d003      	beq.n	80008f6 <HAL_ETH_Init+0x3e>
 80008ee:	21e3      	movs	r1, #227	; 0xe3
 80008f0:	488d      	ldr	r0, [pc, #564]	; (8000b28 <HAL_ETH_Init+0x270>)
 80008f2:	f012 fd5a 	bl	80133aa <assert_failed>
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	699b      	ldr	r3, [r3, #24]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d007      	beq.n	800090e <HAL_ETH_Init+0x56>
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	699b      	ldr	r3, [r3, #24]
 8000902:	2b01      	cmp	r3, #1
 8000904:	d003      	beq.n	800090e <HAL_ETH_Init+0x56>
 8000906:	21e4      	movs	r1, #228	; 0xe4
 8000908:	4887      	ldr	r0, [pc, #540]	; (8000b28 <HAL_ETH_Init+0x270>)
 800090a:	f012 fd4e 	bl	80133aa <assert_failed>
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	69db      	ldr	r3, [r3, #28]
 8000912:	2b00      	cmp	r3, #0
 8000914:	d007      	beq.n	8000926 <HAL_ETH_Init+0x6e>
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	69db      	ldr	r3, [r3, #28]
 800091a:	2b01      	cmp	r3, #1
 800091c:	d003      	beq.n	8000926 <HAL_ETH_Init+0x6e>
 800091e:	21e5      	movs	r1, #229	; 0xe5
 8000920:	4881      	ldr	r0, [pc, #516]	; (8000b28 <HAL_ETH_Init+0x270>)
 8000922:	f012 fd42 	bl	80133aa <assert_failed>
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	6a1b      	ldr	r3, [r3, #32]
 800092a:	2b00      	cmp	r3, #0
 800092c:	d008      	beq.n	8000940 <HAL_ETH_Init+0x88>
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	6a1b      	ldr	r3, [r3, #32]
 8000932:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8000936:	d003      	beq.n	8000940 <HAL_ETH_Init+0x88>
 8000938:	21e6      	movs	r1, #230	; 0xe6
 800093a:	487b      	ldr	r0, [pc, #492]	; (8000b28 <HAL_ETH_Init+0x270>)
 800093c:	f012 fd35 	bl	80133aa <assert_failed>
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000946:	b2db      	uxtb	r3, r3
 8000948:	2b00      	cmp	r3, #0
 800094a:	d106      	bne.n	800095a <HAL_ETH_Init+0xa2>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	2200      	movs	r2, #0
 8000950:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8000954:	6878      	ldr	r0, [r7, #4]
 8000956:	f011 fdcf 	bl	80124f8 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	60bb      	str	r3, [r7, #8]
 800095e:	4b73      	ldr	r3, [pc, #460]	; (8000b2c <HAL_ETH_Init+0x274>)
 8000960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000962:	4a72      	ldr	r2, [pc, #456]	; (8000b2c <HAL_ETH_Init+0x274>)
 8000964:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000968:	6453      	str	r3, [r2, #68]	; 0x44
 800096a:	4b70      	ldr	r3, [pc, #448]	; (8000b2c <HAL_ETH_Init+0x274>)
 800096c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800096e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000972:	60bb      	str	r3, [r7, #8]
 8000974:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8000976:	4b6e      	ldr	r3, [pc, #440]	; (8000b30 <HAL_ETH_Init+0x278>)
 8000978:	685b      	ldr	r3, [r3, #4]
 800097a:	4a6d      	ldr	r2, [pc, #436]	; (8000b30 <HAL_ETH_Init+0x278>)
 800097c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000980:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8000982:	4b6b      	ldr	r3, [pc, #428]	; (8000b30 <HAL_ETH_Init+0x278>)
 8000984:	685a      	ldr	r2, [r3, #4]
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	6a1b      	ldr	r3, [r3, #32]
 800098a:	4969      	ldr	r1, [pc, #420]	; (8000b30 <HAL_ETH_Init+0x278>)
 800098c:	4313      	orrs	r3, r2
 800098e:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	687a      	ldr	r2, [r7, #4]
 800099c:	6812      	ldr	r2, [r2, #0]
 800099e:	f043 0301 	orr.w	r3, r3, #1
 80009a2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80009a6:	6013      	str	r3, [r2, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80009a8:	f7ff fe1a 	bl	80005e0 <HAL_GetTick>
 80009ac:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80009ae:	e011      	b.n	80009d4 <HAL_ETH_Init+0x11c>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 80009b0:	f7ff fe16 	bl	80005e0 <HAL_GetTick>
 80009b4:	4602      	mov	r2, r0
 80009b6:	697b      	ldr	r3, [r7, #20]
 80009b8:	1ad3      	subs	r3, r2, r3
 80009ba:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80009be:	d909      	bls.n	80009d4 <HAL_ETH_Init+0x11c>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	2203      	movs	r2, #3
 80009c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	2200      	movs	r2, #0
 80009cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 80009d0:	2303      	movs	r3, #3
 80009d2:	e157      	b.n	8000c84 <HAL_ETH_Init+0x3cc>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	f003 0301 	and.w	r3, r3, #1
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d1e4      	bne.n	80009b0 <HAL_ETH_Init+0xf8>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	691b      	ldr	r3, [r3, #16]
 80009ec:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 80009ee:	69fb      	ldr	r3, [r7, #28]
 80009f0:	f023 031c 	bic.w	r3, r3, #28
 80009f4:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80009f6:	f002 fbed 	bl	80031d4 <HAL_RCC_GetHCLKFreq>
 80009fa:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 80009fc:	69bb      	ldr	r3, [r7, #24]
 80009fe:	4a4d      	ldr	r2, [pc, #308]	; (8000b34 <HAL_ETH_Init+0x27c>)
 8000a00:	4293      	cmp	r3, r2
 8000a02:	d908      	bls.n	8000a16 <HAL_ETH_Init+0x15e>
 8000a04:	69bb      	ldr	r3, [r7, #24]
 8000a06:	4a4c      	ldr	r2, [pc, #304]	; (8000b38 <HAL_ETH_Init+0x280>)
 8000a08:	4293      	cmp	r3, r2
 8000a0a:	d804      	bhi.n	8000a16 <HAL_ETH_Init+0x15e>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8000a0c:	69fb      	ldr	r3, [r7, #28]
 8000a0e:	f043 0308 	orr.w	r3, r3, #8
 8000a12:	61fb      	str	r3, [r7, #28]
 8000a14:	e027      	b.n	8000a66 <HAL_ETH_Init+0x1ae>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8000a16:	69bb      	ldr	r3, [r7, #24]
 8000a18:	4a47      	ldr	r2, [pc, #284]	; (8000b38 <HAL_ETH_Init+0x280>)
 8000a1a:	4293      	cmp	r3, r2
 8000a1c:	d908      	bls.n	8000a30 <HAL_ETH_Init+0x178>
 8000a1e:	69bb      	ldr	r3, [r7, #24]
 8000a20:	4a40      	ldr	r2, [pc, #256]	; (8000b24 <HAL_ETH_Init+0x26c>)
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d204      	bcs.n	8000a30 <HAL_ETH_Init+0x178>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8000a26:	69fb      	ldr	r3, [r7, #28]
 8000a28:	f043 030c 	orr.w	r3, r3, #12
 8000a2c:	61fb      	str	r3, [r7, #28]
 8000a2e:	e01a      	b.n	8000a66 <HAL_ETH_Init+0x1ae>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8000a30:	69bb      	ldr	r3, [r7, #24]
 8000a32:	4a3c      	ldr	r2, [pc, #240]	; (8000b24 <HAL_ETH_Init+0x26c>)
 8000a34:	4293      	cmp	r3, r2
 8000a36:	d303      	bcc.n	8000a40 <HAL_ETH_Init+0x188>
 8000a38:	69bb      	ldr	r3, [r7, #24]
 8000a3a:	4a40      	ldr	r2, [pc, #256]	; (8000b3c <HAL_ETH_Init+0x284>)
 8000a3c:	4293      	cmp	r3, r2
 8000a3e:	d911      	bls.n	8000a64 <HAL_ETH_Init+0x1ac>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8000a40:	69bb      	ldr	r3, [r7, #24]
 8000a42:	4a3e      	ldr	r2, [pc, #248]	; (8000b3c <HAL_ETH_Init+0x284>)
 8000a44:	4293      	cmp	r3, r2
 8000a46:	d908      	bls.n	8000a5a <HAL_ETH_Init+0x1a2>
 8000a48:	69bb      	ldr	r3, [r7, #24]
 8000a4a:	4a3d      	ldr	r2, [pc, #244]	; (8000b40 <HAL_ETH_Init+0x288>)
 8000a4c:	4293      	cmp	r3, r2
 8000a4e:	d804      	bhi.n	8000a5a <HAL_ETH_Init+0x1a2>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8000a50:	69fb      	ldr	r3, [r7, #28]
 8000a52:	f043 0304 	orr.w	r3, r3, #4
 8000a56:	61fb      	str	r3, [r7, #28]
 8000a58:	e005      	b.n	8000a66 <HAL_ETH_Init+0x1ae>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8000a5a:	69fb      	ldr	r3, [r7, #28]
 8000a5c:	f043 0310 	orr.w	r3, r3, #16
 8000a60:	61fb      	str	r3, [r7, #28]
 8000a62:	e000      	b.n	8000a66 <HAL_ETH_Init+0x1ae>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8000a64:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	69fa      	ldr	r2, [r7, #28]
 8000a6c:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8000a6e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000a72:	2100      	movs	r1, #0
 8000a74:	6878      	ldr	r0, [r7, #4]
 8000a76:	f000 fc3d 	bl	80012f4 <HAL_ETH_WritePHYRegister>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d00b      	beq.n	8000a98 <HAL_ETH_Init+0x1e0>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8000a80:	2301      	movs	r3, #1
 8000a82:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8000a84:	6939      	ldr	r1, [r7, #16]
 8000a86:	6878      	ldr	r0, [r7, #4]
 8000a88:	f000 ffcc 	bl	8001a24 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	2201      	movs	r2, #1
 8000a90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8000a94:	2301      	movs	r3, #1
 8000a96:	e0f5      	b.n	8000c84 <HAL_ETH_Init+0x3cc>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8000a98:	20ff      	movs	r0, #255	; 0xff
 8000a9a:	f7ff fdad 	bl	80005f8 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	685b      	ldr	r3, [r3, #4]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	f000 80a7 	beq.w	8000bf6 <HAL_ETH_Init+0x33e>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8000aa8:	f7ff fd9a 	bl	80005e0 <HAL_GetTick>
 8000aac:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000aae:	f107 030c 	add.w	r3, r7, #12
 8000ab2:	461a      	mov	r2, r3
 8000ab4:	2101      	movs	r1, #1
 8000ab6:	6878      	ldr	r0, [r7, #4]
 8000ab8:	f000 fba8 	bl	800120c <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8000abc:	f7ff fd90 	bl	80005e0 <HAL_GetTick>
 8000ac0:	4602      	mov	r2, r0
 8000ac2:	697b      	ldr	r3, [r7, #20]
 8000ac4:	1ad3      	subs	r3, r2, r3
 8000ac6:	f241 3288 	movw	r2, #5000	; 0x1388
 8000aca:	4293      	cmp	r3, r2
 8000acc:	d90f      	bls.n	8000aee <HAL_ETH_Init+0x236>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8000ad2:	6939      	ldr	r1, [r7, #16]
 8000ad4:	6878      	ldr	r0, [r7, #4]
 8000ad6:	f000 ffa5 	bl	8001a24 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	2201      	movs	r2, #1
 8000ade:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8000aea:	2303      	movs	r3, #3
 8000aec:	e0ca      	b.n	8000c84 <HAL_ETH_Init+0x3cc>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	f003 0304 	and.w	r3, r3, #4
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d0da      	beq.n	8000aae <HAL_ETH_Init+0x1f6>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8000af8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000afc:	2100      	movs	r1, #0
 8000afe:	6878      	ldr	r0, [r7, #4]
 8000b00:	f000 fbf8 	bl	80012f4 <HAL_ETH_WritePHYRegister>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d01c      	beq.n	8000b44 <HAL_ETH_Init+0x28c>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8000b0e:	6939      	ldr	r1, [r7, #16]
 8000b10:	6878      	ldr	r0, [r7, #4]
 8000b12:	f000 ff87 	bl	8001a24 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	2201      	movs	r2, #1
 8000b1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8000b1e:	2301      	movs	r3, #1
 8000b20:	e0b0      	b.n	8000c84 <HAL_ETH_Init+0x3cc>
 8000b22:	bf00      	nop
 8000b24:	03938700 	.word	0x03938700
 8000b28:	08014d8c 	.word	0x08014d8c
 8000b2c:	40023800 	.word	0x40023800
 8000b30:	40013800 	.word	0x40013800
 8000b34:	01312cff 	.word	0x01312cff
 8000b38:	02160ebf 	.word	0x02160ebf
 8000b3c:	05f5e0ff 	.word	0x05f5e0ff
 8000b40:	08f0d17f 	.word	0x08f0d17f
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8000b44:	f7ff fd4c 	bl	80005e0 <HAL_GetTick>
 8000b48:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000b4a:	f107 030c 	add.w	r3, r7, #12
 8000b4e:	461a      	mov	r2, r3
 8000b50:	2101      	movs	r1, #1
 8000b52:	6878      	ldr	r0, [r7, #4]
 8000b54:	f000 fb5a 	bl	800120c <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8000b58:	f7ff fd42 	bl	80005e0 <HAL_GetTick>
 8000b5c:	4602      	mov	r2, r0
 8000b5e:	697b      	ldr	r3, [r7, #20]
 8000b60:	1ad3      	subs	r3, r2, r3
 8000b62:	f241 3288 	movw	r2, #5000	; 0x1388
 8000b66:	4293      	cmp	r3, r2
 8000b68:	d90f      	bls.n	8000b8a <HAL_ETH_Init+0x2d2>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8000b6e:	6939      	ldr	r1, [r7, #16]
 8000b70:	6878      	ldr	r0, [r7, #4]
 8000b72:	f000 ff57 	bl	8001a24 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	2201      	movs	r2, #1
 8000b7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	2200      	movs	r2, #0
 8000b82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8000b86:	2303      	movs	r3, #3
 8000b88:	e07c      	b.n	8000c84 <HAL_ETH_Init+0x3cc>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	f003 0320 	and.w	r3, r3, #32
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d0da      	beq.n	8000b4a <HAL_ETH_Init+0x292>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8000b94:	f107 030c 	add.w	r3, r7, #12
 8000b98:	461a      	mov	r2, r3
 8000b9a:	2110      	movs	r1, #16
 8000b9c:	6878      	ldr	r0, [r7, #4]
 8000b9e:	f000 fb35 	bl	800120c <HAL_ETH_ReadPHYRegister>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d00b      	beq.n	8000bc0 <HAL_ETH_Init+0x308>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8000ba8:	2301      	movs	r3, #1
 8000baa:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8000bac:	6939      	ldr	r1, [r7, #16]
 8000bae:	6878      	ldr	r0, [r7, #4]
 8000bb0:	f000 ff38 	bl	8001a24 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	e061      	b.n	8000c84 <HAL_ETH_Init+0x3cc>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	f003 0304 	and.w	r3, r3, #4
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d004      	beq.n	8000bd4 <HAL_ETH_Init+0x31c>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000bd0:	60da      	str	r2, [r3, #12]
 8000bd2:	e002      	b.n	8000bda <HAL_ETH_Init+0x322>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	f003 0302 	and.w	r3, r3, #2
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d003      	beq.n	8000bec <HAL_ETH_Init+0x334>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	2200      	movs	r2, #0
 8000be8:	609a      	str	r2, [r3, #8]
 8000bea:	e042      	b.n	8000c72 <HAL_ETH_Init+0x3ba>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000bf2:	609a      	str	r2, [r3, #8]
 8000bf4:	e03d      	b.n	8000c72 <HAL_ETH_Init+0x3ba>
    }
  }
  else /* AutoNegotiation Disable */
  {
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	689b      	ldr	r3, [r3, #8]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d009      	beq.n	8000c12 <HAL_ETH_Init+0x35a>
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	689b      	ldr	r3, [r3, #8]
 8000c02:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000c06:	d004      	beq.n	8000c12 <HAL_ETH_Init+0x35a>
 8000c08:	f240 11c9 	movw	r1, #457	; 0x1c9
 8000c0c:	481f      	ldr	r0, [pc, #124]	; (8000c8c <HAL_ETH_Init+0x3d4>)
 8000c0e:	f012 fbcc 	bl	80133aa <assert_failed>
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	68db      	ldr	r3, [r3, #12]
 8000c16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000c1a:	d008      	beq.n	8000c2e <HAL_ETH_Init+0x376>
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	68db      	ldr	r3, [r3, #12]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d004      	beq.n	8000c2e <HAL_ETH_Init+0x376>
 8000c24:	f44f 71e5 	mov.w	r1, #458	; 0x1ca
 8000c28:	4818      	ldr	r0, [pc, #96]	; (8000c8c <HAL_ETH_Init+0x3d4>)
 8000c2a:	f012 fbbe 	bl	80133aa <assert_failed>
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	68db      	ldr	r3, [r3, #12]
 8000c32:	08db      	lsrs	r3, r3, #3
 8000c34:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	689b      	ldr	r3, [r3, #8]
 8000c3a:	085b      	lsrs	r3, r3, #1
 8000c3c:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8000c3e:	4313      	orrs	r3, r2
 8000c40:	b29b      	uxth	r3, r3
 8000c42:	461a      	mov	r2, r3
 8000c44:	2100      	movs	r1, #0
 8000c46:	6878      	ldr	r0, [r7, #4]
 8000c48:	f000 fb54 	bl	80012f4 <HAL_ETH_WritePHYRegister>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d00b      	beq.n	8000c6a <HAL_ETH_Init+0x3b2>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8000c52:	2301      	movs	r3, #1
 8000c54:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8000c56:	6939      	ldr	r1, [r7, #16]
 8000c58:	6878      	ldr	r0, [r7, #4]
 8000c5a:	f000 fee3 	bl	8001a24 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	2201      	movs	r2, #1
 8000c62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8000c66:	2301      	movs	r3, #1
 8000c68:	e00c      	b.n	8000c84 <HAL_ETH_Init+0x3cc>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8000c6a:	f640 70ff 	movw	r0, #4095	; 0xfff
 8000c6e:	f7ff fcc3 	bl	80005f8 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8000c72:	6939      	ldr	r1, [r7, #16]
 8000c74:	6878      	ldr	r0, [r7, #4]
 8000c76:	f000 fed5 	bl	8001a24 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8000c82:	2300      	movs	r3, #0
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	3720      	adds	r7, #32
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	08014d8c 	.word	0x08014d8c

08000c90 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b087      	sub	sp, #28
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	60f8      	str	r0, [r7, #12]
 8000c98:	60b9      	str	r1, [r7, #8]
 8000c9a:	607a      	str	r2, [r7, #4]
 8000c9c:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000ca8:	2b01      	cmp	r3, #1
 8000caa:	d101      	bne.n	8000cb0 <HAL_ETH_DMATxDescListInit+0x20>
 8000cac:	2302      	movs	r3, #2
 8000cae:	e051      	b.n	8000d54 <HAL_ETH_DMATxDescListInit+0xc4>
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	2202      	movs	r2, #2
 8000cbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	68ba      	ldr	r2, [r7, #8]
 8000cc4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	617b      	str	r3, [r7, #20]
 8000cca:	e030      	b.n	8000d2e <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8000ccc:	697b      	ldr	r3, [r7, #20]
 8000cce:	015b      	lsls	r3, r3, #5
 8000cd0:	68ba      	ldr	r2, [r7, #8]
 8000cd2:	4413      	add	r3, r2
 8000cd4:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8000cd6:	693b      	ldr	r3, [r7, #16]
 8000cd8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000cdc:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8000cde:	697b      	ldr	r3, [r7, #20]
 8000ce0:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000ce4:	fb02 f303 	mul.w	r3, r2, r3
 8000ce8:	687a      	ldr	r2, [r7, #4]
 8000cea:	4413      	add	r3, r2
 8000cec:	461a      	mov	r2, r3
 8000cee:	693b      	ldr	r3, [r7, #16]
 8000cf0:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	69db      	ldr	r3, [r3, #28]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d105      	bne.n	8000d06 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8000cfa:	693b      	ldr	r3, [r7, #16]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8000d02:	693b      	ldr	r3, [r7, #16]
 8000d04:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	3b01      	subs	r3, #1
 8000d0a:	697a      	ldr	r2, [r7, #20]
 8000d0c:	429a      	cmp	r2, r3
 8000d0e:	d208      	bcs.n	8000d22 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	3301      	adds	r3, #1
 8000d14:	015b      	lsls	r3, r3, #5
 8000d16:	68ba      	ldr	r2, [r7, #8]
 8000d18:	4413      	add	r3, r2
 8000d1a:	461a      	mov	r2, r3
 8000d1c:	693b      	ldr	r3, [r7, #16]
 8000d1e:	60da      	str	r2, [r3, #12]
 8000d20:	e002      	b.n	8000d28 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8000d22:	68ba      	ldr	r2, [r7, #8]
 8000d24:	693b      	ldr	r3, [r7, #16]
 8000d26:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	3301      	adds	r3, #1
 8000d2c:	617b      	str	r3, [r7, #20]
 8000d2e:	697a      	ldr	r2, [r7, #20]
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	429a      	cmp	r2, r3
 8000d34:	d3ca      	bcc.n	8000ccc <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	681a      	ldr	r2, [r3, #0]
 8000d3a:	68bb      	ldr	r3, [r7, #8]
 8000d3c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8000d40:	6113      	str	r3, [r2, #16]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	2201      	movs	r2, #1
 8000d46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8000d52:	2300      	movs	r3, #0
}
 8000d54:	4618      	mov	r0, r3
 8000d56:	371c      	adds	r7, #28
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr

08000d60 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b087      	sub	sp, #28
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	60f8      	str	r0, [r7, #12]
 8000d68:	60b9      	str	r1, [r7, #8]
 8000d6a:	607a      	str	r2, [r7, #4]
 8000d6c:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000d78:	2b01      	cmp	r3, #1
 8000d7a:	d101      	bne.n	8000d80 <HAL_ETH_DMARxDescListInit+0x20>
 8000d7c:	2302      	movs	r3, #2
 8000d7e:	e055      	b.n	8000e2c <HAL_ETH_DMARxDescListInit+0xcc>
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	2201      	movs	r2, #1
 8000d84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	2202      	movs	r2, #2
 8000d8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	68ba      	ldr	r2, [r7, #8]
 8000d94:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 8000d96:	2300      	movs	r3, #0
 8000d98:	617b      	str	r3, [r7, #20]
 8000d9a:	e034      	b.n	8000e06 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	015b      	lsls	r3, r3, #5
 8000da0:	68ba      	ldr	r2, [r7, #8]
 8000da2:	4413      	add	r3, r2
 8000da4:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8000da6:	693b      	ldr	r3, [r7, #16]
 8000da8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000dac:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8000dae:	693b      	ldr	r3, [r7, #16]
 8000db0:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8000db4:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8000db6:	697b      	ldr	r3, [r7, #20]
 8000db8:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000dbc:	fb02 f303 	mul.w	r3, r2, r3
 8000dc0:	687a      	ldr	r2, [r7, #4]
 8000dc2:	4413      	add	r3, r2
 8000dc4:	461a      	mov	r2, r3
 8000dc6:	693b      	ldr	r3, [r7, #16]
 8000dc8:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	699b      	ldr	r3, [r3, #24]
 8000dce:	2b01      	cmp	r3, #1
 8000dd0:	d105      	bne.n	8000dde <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8000dd2:	693b      	ldr	r3, [r7, #16]
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000dda:	693b      	ldr	r3, [r7, #16]
 8000ddc:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	3b01      	subs	r3, #1
 8000de2:	697a      	ldr	r2, [r7, #20]
 8000de4:	429a      	cmp	r2, r3
 8000de6:	d208      	bcs.n	8000dfa <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	3301      	adds	r3, #1
 8000dec:	015b      	lsls	r3, r3, #5
 8000dee:	68ba      	ldr	r2, [r7, #8]
 8000df0:	4413      	add	r3, r2
 8000df2:	461a      	mov	r2, r3
 8000df4:	693b      	ldr	r3, [r7, #16]
 8000df6:	60da      	str	r2, [r3, #12]
 8000df8:	e002      	b.n	8000e00 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8000dfa:	68ba      	ldr	r2, [r7, #8]
 8000dfc:	693b      	ldr	r3, [r7, #16]
 8000dfe:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	3301      	adds	r3, #1
 8000e04:	617b      	str	r3, [r7, #20]
 8000e06:	697a      	ldr	r2, [r7, #20]
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	429a      	cmp	r2, r3
 8000e0c:	d3c6      	bcc.n	8000d9c <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	681a      	ldr	r2, [r3, #0]
 8000e12:	68bb      	ldr	r3, [r7, #8]
 8000e14:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8000e18:	60d3      	str	r3, [r2, #12]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	2200      	movs	r2, #0
 8000e26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8000e2a:	2300      	movs	r3, #0
}
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	371c      	adds	r7, #28
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr

08000e38 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b087      	sub	sp, #28
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
 8000e40:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 8000e42:	2300      	movs	r3, #0
 8000e44:	617b      	str	r3, [r7, #20]
 8000e46:	2300      	movs	r3, #0
 8000e48:	60fb      	str	r3, [r7, #12]
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000e54:	2b01      	cmp	r3, #1
 8000e56:	d101      	bne.n	8000e5c <HAL_ETH_TransmitFrame+0x24>
 8000e58:	2302      	movs	r3, #2
 8000e5a:	e0cc      	b.n	8000ff6 <HAL_ETH_TransmitFrame+0x1be>
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	2201      	movs	r2, #1
 8000e60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	2202      	movs	r2, #2
 8000e68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d109      	bne.n	8000e86 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	2201      	movs	r2, #1
 8000e76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8000e82:	2301      	movs	r3, #1
 8000e84:	e0b7      	b.n	8000ff6 <HAL_ETH_TransmitFrame+0x1be>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	da09      	bge.n	8000ea4 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	2212      	movs	r2, #18
 8000e94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	e0a8      	b.n	8000ff6 <HAL_ETH_TransmitFrame+0x1be>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d915      	bls.n	8000eda <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	4a54      	ldr	r2, [pc, #336]	; (8001004 <HAL_ETH_TransmitFrame+0x1cc>)
 8000eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8000eb6:	0a9b      	lsrs	r3, r3, #10
 8000eb8:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8000eba:	683a      	ldr	r2, [r7, #0]
 8000ebc:	4b51      	ldr	r3, [pc, #324]	; (8001004 <HAL_ETH_TransmitFrame+0x1cc>)
 8000ebe:	fba3 1302 	umull	r1, r3, r3, r2
 8000ec2:	0a9b      	lsrs	r3, r3, #10
 8000ec4:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8000ec8:	fb01 f303 	mul.w	r3, r1, r3
 8000ecc:	1ad3      	subs	r3, r2, r3
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d005      	beq.n	8000ede <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	3301      	adds	r3, #1
 8000ed6:	617b      	str	r3, [r7, #20]
 8000ed8:	e001      	b.n	8000ede <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 8000eda:	2301      	movs	r3, #1
 8000edc:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 8000ede:	697b      	ldr	r3, [r7, #20]
 8000ee0:	2b01      	cmp	r3, #1
 8000ee2:	d11c      	bne.n	8000f1e <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ee8:	681a      	ldr	r2, [r3, #0]
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eee:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8000ef2:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ef8:	683a      	ldr	r2, [r7, #0]
 8000efa:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8000efe:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f04:	681a      	ldr	r2, [r3, #0]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f0a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000f0e:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f14:	68db      	ldr	r3, [r3, #12]
 8000f16:	461a      	mov	r2, r3
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	62da      	str	r2, [r3, #44]	; 0x2c
 8000f1c:	e04b      	b.n	8000fb6 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 8000f1e:	2300      	movs	r3, #0
 8000f20:	613b      	str	r3, [r7, #16]
 8000f22:	e044      	b.n	8000fae <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f28:	681a      	ldr	r2, [r3, #0]
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f2e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000f32:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 8000f34:	693b      	ldr	r3, [r7, #16]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d107      	bne.n	8000f4a <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f3e:	681a      	ldr	r2, [r3, #0]
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f44:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000f48:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f4e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000f52:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	3b01      	subs	r3, #1
 8000f58:	693a      	ldr	r2, [r7, #16]
 8000f5a:	429a      	cmp	r2, r3
 8000f5c:	d116      	bne.n	8000f8c <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f62:	681a      	ldr	r2, [r3, #0]
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f68:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8000f6c:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	4a25      	ldr	r2, [pc, #148]	; (8001008 <HAL_ETH_TransmitFrame+0x1d0>)
 8000f72:	fb03 f202 	mul.w	r2, r3, r2
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	4413      	add	r3, r2
 8000f7a:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8000f7e:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f84:	68fa      	ldr	r2, [r7, #12]
 8000f86:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8000f8a:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f90:	681a      	ldr	r2, [r3, #0]
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f96:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000f9a:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fa0:	68db      	ldr	r3, [r3, #12]
 8000fa2:	461a      	mov	r2, r3
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 8000fa8:	693b      	ldr	r3, [r7, #16]
 8000faa:	3301      	adds	r3, #1
 8000fac:	613b      	str	r3, [r7, #16]
 8000fae:	693a      	ldr	r2, [r7, #16]
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	429a      	cmp	r2, r3
 8000fb4:	d3b6      	bcc.n	8000f24 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000fbe:	695b      	ldr	r3, [r3, #20]
 8000fc0:	f003 0304 	and.w	r3, r3, #4
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d00d      	beq.n	8000fe4 <HAL_ETH_TransmitFrame+0x1ac>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000fd0:	461a      	mov	r2, r3
 8000fd2:	2304      	movs	r3, #4
 8000fd4:	6153      	str	r3, [r2, #20]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000fde:	461a      	mov	r2, r3
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	6053      	str	r3, [r2, #4]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2200      	movs	r2, #0
 8000ff0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8000ff4:	2300      	movs	r3, #0
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	371c      	adds	r7, #28
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	ac02b00b 	.word	0xac02b00b
 8001008:	fffffa0c 	.word	0xfffffa0c

0800100c <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 800100c:	b480      	push	{r7}
 800100e:	b085      	sub	sp, #20
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0U;
 8001014:	2300      	movs	r3, #0
 8001016:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800101e:	2b01      	cmp	r3, #1
 8001020:	d101      	bne.n	8001026 <HAL_ETH_GetReceivedFrame_IT+0x1a>
 8001022:	2302      	movs	r3, #2
 8001024:	e074      	b.n	8001110 <HAL_ETH_GetReceivedFrame_IT+0x104>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2201      	movs	r2, #1
 800102a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2202      	movs	r2, #2
 8001032:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8001036:	e05a      	b.n	80010ee <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	3301      	adds	r3, #1
 800103c:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001048:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800104c:	d10d      	bne.n	800106a <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1U;   
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2201      	movs	r2, #1
 800105a:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001060:	68db      	ldr	r3, [r3, #12]
 8001062:	461a      	mov	r2, r3
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	629a      	str	r2, [r3, #40]	; 0x28
 8001068:	e041      	b.n	80010ee <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001074:	2b00      	cmp	r3, #0
 8001076:	d10b      	bne.n	8001090 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800107c:	1c5a      	adds	r2, r3, #1
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001086:	68db      	ldr	r3, [r3, #12]
 8001088:	461a      	mov	r2, r3
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	629a      	str	r2, [r3, #40]	; 0x28
 800108e:	e02e      	b.n	80010ee <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800109c:	1c5a      	adds	r2, r3, #1
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1U)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010a6:	2b01      	cmp	r3, #1
 80010a8:	d103      	bne.n	80010b2 <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	0c1b      	lsrs	r3, r3, #16
 80010ba:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80010be:	1f1a      	subs	r2, r3, #4
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c8:	689a      	ldr	r2, [r3, #8]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010d2:	68db      	ldr	r3, [r3, #12]
 80010d4:	461a      	mov	r2, r3
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2201      	movs	r2, #1
 80010de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2200      	movs	r2, #0
 80010e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 80010ea:	2300      	movs	r3, #0
 80010ec:	e010      	b.n	8001110 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	db02      	blt.n	80010fe <HAL_ETH_GetReceivedFrame_IT+0xf2>
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	2b03      	cmp	r3, #3
 80010fc:	d99c      	bls.n	8001038 <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2201      	movs	r2, #1
 8001102:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2200      	movs	r2, #0
 800110a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 800110e:	2301      	movs	r3, #1
}
 8001110:	4618      	mov	r0, r3
 8001112:	3714      	adds	r7, #20
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr

0800111c <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800112c:	695b      	ldr	r3, [r3, #20]
 800112e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001132:	2b40      	cmp	r3, #64	; 0x40
 8001134:	d112      	bne.n	800115c <HAL_ETH_IRQHandler+0x40>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8001136:	6878      	ldr	r0, [r7, #4]
 8001138:	f011 fa8c 	bl	8012654 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001144:	461a      	mov	r2, r3
 8001146:	2340      	movs	r3, #64	; 0x40
 8001148:	6153      	str	r3, [r2, #20]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2201      	movs	r2, #1
 800114e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2200      	movs	r2, #0
 8001156:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800115a:	e01a      	b.n	8001192 <HAL_ETH_IRQHandler+0x76>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001164:	695b      	ldr	r3, [r3, #20]
 8001166:	f003 0301 	and.w	r3, r3, #1
 800116a:	2b01      	cmp	r3, #1
 800116c:	d111      	bne.n	8001192 <HAL_ETH_IRQHandler+0x76>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 800116e:	6878      	ldr	r0, [r7, #4]
 8001170:	f000 f838 	bl	80011e4 <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800117c:	461a      	mov	r2, r3
 800117e:	2301      	movs	r3, #1
 8001180:	6153      	str	r3, [r2, #20]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2201      	movs	r2, #1
 8001186:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2200      	movs	r2, #0
 800118e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800119a:	461a      	mov	r2, r3
 800119c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011a0:	6153      	str	r3, [r2, #20]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80011aa:	695b      	ldr	r3, [r3, #20]
 80011ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80011b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80011b4:	d112      	bne.n	80011dc <HAL_ETH_IRQHandler+0xc0>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 80011b6:	6878      	ldr	r0, [r7, #4]
 80011b8:	f000 f81e 	bl	80011f8 <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80011c4:	461a      	mov	r2, r3
 80011c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80011ca:	6153      	str	r3, [r2, #20]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2201      	movs	r2, #1
 80011d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2200      	movs	r2, #0
 80011d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 80011dc:	bf00      	nop
 80011de:	3708      	adds	r7, #8
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}

080011e4 <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 80011ec:	bf00      	nop
 80011ee:	370c      	adds	r7, #12
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr

080011f8 <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8001200:	bf00      	nop
 8001202:	370c      	adds	r7, #12
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr

0800120c <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b086      	sub	sp, #24
 8001210:	af00      	add	r7, sp, #0
 8001212:	60f8      	str	r0, [r7, #12]
 8001214:	460b      	mov	r3, r1
 8001216:	607a      	str	r2, [r7, #4]
 8001218:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 800121a:	2300      	movs	r3, #0
 800121c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 800121e:	2300      	movs	r3, #0
 8001220:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	8a1b      	ldrh	r3, [r3, #16]
 8001226:	2b20      	cmp	r3, #32
 8001228:	d904      	bls.n	8001234 <HAL_ETH_ReadPHYRegister+0x28>
 800122a:	f240 5115 	movw	r1, #1301	; 0x515
 800122e:	4830      	ldr	r0, [pc, #192]	; (80012f0 <HAL_ETH_ReadPHYRegister+0xe4>)
 8001230:	f012 f8bb 	bl	80133aa <assert_failed>
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800123a:	b2db      	uxtb	r3, r3
 800123c:	2b82      	cmp	r3, #130	; 0x82
 800123e:	d101      	bne.n	8001244 <HAL_ETH_ReadPHYRegister+0x38>
  {
    return HAL_BUSY;
 8001240:	2302      	movs	r3, #2
 8001242:	e050      	b.n	80012e6 <HAL_ETH_ReadPHYRegister+0xda>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	2282      	movs	r2, #130	; 0x82
 8001248:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	691b      	ldr	r3, [r3, #16]
 8001252:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	f003 031c 	and.w	r3, r3, #28
 800125a:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	8a1b      	ldrh	r3, [r3, #16]
 8001260:	02db      	lsls	r3, r3, #11
 8001262:	b29b      	uxth	r3, r3
 8001264:	697a      	ldr	r2, [r7, #20]
 8001266:	4313      	orrs	r3, r2
 8001268:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 800126a:	897b      	ldrh	r3, [r7, #10]
 800126c:	019b      	lsls	r3, r3, #6
 800126e:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001272:	697a      	ldr	r2, [r7, #20]
 8001274:	4313      	orrs	r3, r2
 8001276:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	f023 0302 	bic.w	r3, r3, #2
 800127e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	f043 0301 	orr.w	r3, r3, #1
 8001286:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	697a      	ldr	r2, [r7, #20]
 800128e:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001290:	f7ff f9a6 	bl	80005e0 <HAL_GetTick>
 8001294:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001296:	e015      	b.n	80012c4 <HAL_ETH_ReadPHYRegister+0xb8>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8001298:	f7ff f9a2 	bl	80005e0 <HAL_GetTick>
 800129c:	4602      	mov	r2, r0
 800129e:	693b      	ldr	r3, [r7, #16]
 80012a0:	1ad3      	subs	r3, r2, r3
 80012a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012a6:	d309      	bcc.n	80012bc <HAL_ETH_ReadPHYRegister+0xb0>
    {
      heth->State= HAL_ETH_STATE_READY;
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	2201      	movs	r2, #1
 80012ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	2200      	movs	r2, #0
 80012b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80012b8:	2303      	movs	r3, #3
 80012ba:	e014      	b.n	80012e6 <HAL_ETH_ReadPHYRegister+0xda>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	691b      	ldr	r3, [r3, #16]
 80012c2:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	f003 0301 	and.w	r3, r3, #1
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d1e4      	bne.n	8001298 <HAL_ETH_ReadPHYRegister+0x8c>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	695b      	ldr	r3, [r3, #20]
 80012d4:	b29b      	uxth	r3, r3
 80012d6:	461a      	mov	r2, r3
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	2201      	movs	r2, #1
 80012e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80012e4:	2300      	movs	r3, #0
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3718      	adds	r7, #24
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	08014d8c 	.word	0x08014d8c

080012f4 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b086      	sub	sp, #24
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	60f8      	str	r0, [r7, #12]
 80012fc:	460b      	mov	r3, r1
 80012fe:	607a      	str	r2, [r7, #4]
 8001300:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8001302:	2300      	movs	r3, #0
 8001304:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001306:	2300      	movs	r3, #0
 8001308:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	8a1b      	ldrh	r3, [r3, #16]
 800130e:	2b20      	cmp	r3, #32
 8001310:	d904      	bls.n	800131c <HAL_ETH_WritePHYRegister+0x28>
 8001312:	f240 515d 	movw	r1, #1373	; 0x55d
 8001316:	482f      	ldr	r0, [pc, #188]	; (80013d4 <HAL_ETH_WritePHYRegister+0xe0>)
 8001318:	f012 f847 	bl	80133aa <assert_failed>
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001322:	b2db      	uxtb	r3, r3
 8001324:	2b42      	cmp	r3, #66	; 0x42
 8001326:	d101      	bne.n	800132c <HAL_ETH_WritePHYRegister+0x38>
  {
    return HAL_BUSY;
 8001328:	2302      	movs	r3, #2
 800132a:	e04e      	b.n	80013ca <HAL_ETH_WritePHYRegister+0xd6>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	2242      	movs	r2, #66	; 0x42
 8001330:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	691b      	ldr	r3, [r3, #16]
 800133a:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	f003 031c 	and.w	r3, r3, #28
 8001342:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	8a1b      	ldrh	r3, [r3, #16]
 8001348:	02db      	lsls	r3, r3, #11
 800134a:	b29b      	uxth	r3, r3
 800134c:	697a      	ldr	r2, [r7, #20]
 800134e:	4313      	orrs	r3, r2
 8001350:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001352:	897b      	ldrh	r3, [r7, #10]
 8001354:	019b      	lsls	r3, r3, #6
 8001356:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800135a:	697a      	ldr	r2, [r7, #20]
 800135c:	4313      	orrs	r3, r2
 800135e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	f043 0302 	orr.w	r3, r3, #2
 8001366:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	f043 0301 	orr.w	r3, r3, #1
 800136e:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	b29a      	uxth	r2, r3
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	697a      	ldr	r2, [r7, #20]
 8001380:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001382:	f7ff f92d 	bl	80005e0 <HAL_GetTick>
 8001386:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001388:	e015      	b.n	80013b6 <HAL_ETH_WritePHYRegister+0xc2>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 800138a:	f7ff f929 	bl	80005e0 <HAL_GetTick>
 800138e:	4602      	mov	r2, r0
 8001390:	693b      	ldr	r3, [r7, #16]
 8001392:	1ad3      	subs	r3, r2, r3
 8001394:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001398:	d309      	bcc.n	80013ae <HAL_ETH_WritePHYRegister+0xba>
    {
      heth->State= HAL_ETH_STATE_READY;
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	2201      	movs	r2, #1
 800139e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	2200      	movs	r2, #0
 80013a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80013aa:	2303      	movs	r3, #3
 80013ac:	e00d      	b.n	80013ca <HAL_ETH_WritePHYRegister+0xd6>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	691b      	ldr	r3, [r3, #16]
 80013b4:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	f003 0301 	and.w	r3, r3, #1
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d1e4      	bne.n	800138a <HAL_ETH_WritePHYRegister+0x96>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	2201      	movs	r2, #1
 80013c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 80013c8:	2300      	movs	r3, #0
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3718      	adds	r7, #24
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	08014d8c 	.word	0x08014d8c

080013d8 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80013e6:	2b01      	cmp	r3, #1
 80013e8:	d101      	bne.n	80013ee <HAL_ETH_Start+0x16>
 80013ea:	2302      	movs	r3, #2
 80013ec:	e01f      	b.n	800142e <HAL_ETH_Start+0x56>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2201      	movs	r2, #1
 80013f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2202      	movs	r2, #2
 80013fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 80013fe:	6878      	ldr	r0, [r7, #4]
 8001400:	f000 fd1e 	bl	8001e40 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8001404:	6878      	ldr	r0, [r7, #4]
 8001406:	f000 fd55 	bl	8001eb4 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	f000 fde4 	bl	8001fd8 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8001410:	6878      	ldr	r0, [r7, #4]
 8001412:	f000 fd89 	bl	8001f28 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8001416:	6878      	ldr	r0, [r7, #4]
 8001418:	f000 fdb2 	bl	8001f80 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2201      	movs	r2, #1
 8001420:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2200      	movs	r2, #0
 8001428:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800142c:	2300      	movs	r3, #0
}
 800142e:	4618      	mov	r0, r3
 8001430:	3708      	adds	r7, #8
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}

08001436 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8001436:	b580      	push	{r7, lr}
 8001438:	b082      	sub	sp, #8
 800143a:	af00      	add	r7, sp, #0
 800143c:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001444:	2b01      	cmp	r3, #1
 8001446:	d101      	bne.n	800144c <HAL_ETH_Stop+0x16>
 8001448:	2302      	movs	r3, #2
 800144a:	e01f      	b.n	800148c <HAL_ETH_Stop+0x56>
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2201      	movs	r2, #1
 8001450:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2202      	movs	r2, #2
 8001458:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 800145c:	6878      	ldr	r0, [r7, #4]
 800145e:	f000 fd79 	bl	8001f54 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8001462:	6878      	ldr	r0, [r7, #4]
 8001464:	f000 fda2 	bl	8001fac <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8001468:	6878      	ldr	r0, [r7, #4]
 800146a:	f000 fd40 	bl	8001eee <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 800146e:	6878      	ldr	r0, [r7, #4]
 8001470:	f000 fdb2 	bl	8001fd8 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8001474:	6878      	ldr	r0, [r7, #4]
 8001476:	f000 fd00 	bl	8001e7a <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2201      	movs	r2, #1
 800147e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2200      	movs	r2, #0
 8001486:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800148a:	2300      	movs	r3, #0
}
 800148c:	4618      	mov	r0, r3
 800148e:	3708      	adds	r7, #8
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}

08001494 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b084      	sub	sp, #16
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
 800149c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 800149e:	2300      	movs	r3, #0
 80014a0:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d101      	bne.n	80014b0 <HAL_ETH_ConfigMAC+0x1c>
 80014ac:	2302      	movs	r3, #2
 80014ae:	e2b5      	b.n	8001a1c <HAL_ETH_ConfigMAC+0x588>
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2201      	movs	r2, #1
 80014b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2202      	movs	r2, #2
 80014bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	689b      	ldr	r3, [r3, #8]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d009      	beq.n	80014dc <HAL_ETH_ConfigMAC+0x48>
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	689b      	ldr	r3, [r3, #8]
 80014cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80014d0:	d004      	beq.n	80014dc <HAL_ETH_ConfigMAC+0x48>
 80014d2:	f240 610c 	movw	r1, #1548	; 0x60c
 80014d6:	4896      	ldr	r0, [pc, #600]	; (8001730 <HAL_ETH_ConfigMAC+0x29c>)
 80014d8:	f011 ff67 	bl	80133aa <assert_failed>
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	68db      	ldr	r3, [r3, #12]
 80014e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80014e4:	d008      	beq.n	80014f8 <HAL_ETH_ConfigMAC+0x64>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	68db      	ldr	r3, [r3, #12]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d004      	beq.n	80014f8 <HAL_ETH_ConfigMAC+0x64>
 80014ee:	f240 610d 	movw	r1, #1549	; 0x60d
 80014f2:	488f      	ldr	r0, [pc, #572]	; (8001730 <HAL_ETH_ConfigMAC+0x29c>)
 80014f4:	f011 ff59 	bl	80133aa <assert_failed>
  
  if (macconf != NULL)
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	f000 8266 	beq.w	80019cc <HAL_ETH_ConfigMAC+0x538>
  {
    /* Check the parameters */
    assert_param(IS_ETH_WATCHDOG(macconf->Watchdog));
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d009      	beq.n	800151c <HAL_ETH_ConfigMAC+0x88>
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001510:	d004      	beq.n	800151c <HAL_ETH_ConfigMAC+0x88>
 8001512:	f240 6112 	movw	r1, #1554	; 0x612
 8001516:	4886      	ldr	r0, [pc, #536]	; (8001730 <HAL_ETH_ConfigMAC+0x29c>)
 8001518:	f011 ff47 	bl	80133aa <assert_failed>
    assert_param(IS_ETH_JABBER(macconf->Jabber));
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d009      	beq.n	8001538 <HAL_ETH_ConfigMAC+0xa4>
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800152c:	d004      	beq.n	8001538 <HAL_ETH_ConfigMAC+0xa4>
 800152e:	f240 6113 	movw	r1, #1555	; 0x613
 8001532:	487f      	ldr	r0, [pc, #508]	; (8001730 <HAL_ETH_ConfigMAC+0x29c>)
 8001534:	f011 ff39 	bl	80133aa <assert_failed>
    assert_param(IS_ETH_INTER_FRAME_GAP(macconf->InterFrameGap));
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	689b      	ldr	r3, [r3, #8]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d027      	beq.n	8001590 <HAL_ETH_ConfigMAC+0xfc>
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	689b      	ldr	r3, [r3, #8]
 8001544:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001548:	d022      	beq.n	8001590 <HAL_ETH_ConfigMAC+0xfc>
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	689b      	ldr	r3, [r3, #8]
 800154e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001552:	d01d      	beq.n	8001590 <HAL_ETH_ConfigMAC+0xfc>
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	689b      	ldr	r3, [r3, #8]
 8001558:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800155c:	d018      	beq.n	8001590 <HAL_ETH_ConfigMAC+0xfc>
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	689b      	ldr	r3, [r3, #8]
 8001562:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001566:	d013      	beq.n	8001590 <HAL_ETH_ConfigMAC+0xfc>
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	689b      	ldr	r3, [r3, #8]
 800156c:	f5b3 2f20 	cmp.w	r3, #655360	; 0xa0000
 8001570:	d00e      	beq.n	8001590 <HAL_ETH_ConfigMAC+0xfc>
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	689b      	ldr	r3, [r3, #8]
 8001576:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800157a:	d009      	beq.n	8001590 <HAL_ETH_ConfigMAC+0xfc>
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	689b      	ldr	r3, [r3, #8]
 8001580:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001584:	d004      	beq.n	8001590 <HAL_ETH_ConfigMAC+0xfc>
 8001586:	f240 6114 	movw	r1, #1556	; 0x614
 800158a:	4869      	ldr	r0, [pc, #420]	; (8001730 <HAL_ETH_ConfigMAC+0x29c>)
 800158c:	f011 ff0d 	bl	80133aa <assert_failed>
    assert_param(IS_ETH_CARRIER_SENSE(macconf->CarrierSense));
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d009      	beq.n	80015ac <HAL_ETH_ConfigMAC+0x118>
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	68db      	ldr	r3, [r3, #12]
 800159c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015a0:	d004      	beq.n	80015ac <HAL_ETH_ConfigMAC+0x118>
 80015a2:	f240 6115 	movw	r1, #1557	; 0x615
 80015a6:	4862      	ldr	r0, [pc, #392]	; (8001730 <HAL_ETH_ConfigMAC+0x29c>)
 80015a8:	f011 feff 	bl	80133aa <assert_failed>
    assert_param(IS_ETH_RECEIVE_OWN(macconf->ReceiveOwn));
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	691b      	ldr	r3, [r3, #16]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d009      	beq.n	80015c8 <HAL_ETH_ConfigMAC+0x134>
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	691b      	ldr	r3, [r3, #16]
 80015b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80015bc:	d004      	beq.n	80015c8 <HAL_ETH_ConfigMAC+0x134>
 80015be:	f240 6116 	movw	r1, #1558	; 0x616
 80015c2:	485b      	ldr	r0, [pc, #364]	; (8001730 <HAL_ETH_ConfigMAC+0x29c>)
 80015c4:	f011 fef1 	bl	80133aa <assert_failed>
    assert_param(IS_ETH_LOOPBACK_MODE(macconf->LoopbackMode));
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	695b      	ldr	r3, [r3, #20]
 80015cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80015d0:	d008      	beq.n	80015e4 <HAL_ETH_ConfigMAC+0x150>
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	695b      	ldr	r3, [r3, #20]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d004      	beq.n	80015e4 <HAL_ETH_ConfigMAC+0x150>
 80015da:	f240 6117 	movw	r1, #1559	; 0x617
 80015de:	4854      	ldr	r0, [pc, #336]	; (8001730 <HAL_ETH_ConfigMAC+0x29c>)
 80015e0:	f011 fee3 	bl	80133aa <assert_failed>
    assert_param(IS_ETH_CHECKSUM_OFFLOAD(macconf->ChecksumOffload));
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	699b      	ldr	r3, [r3, #24]
 80015e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015ec:	d008      	beq.n	8001600 <HAL_ETH_ConfigMAC+0x16c>
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	699b      	ldr	r3, [r3, #24]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d004      	beq.n	8001600 <HAL_ETH_ConfigMAC+0x16c>
 80015f6:	f44f 61c3 	mov.w	r1, #1560	; 0x618
 80015fa:	484d      	ldr	r0, [pc, #308]	; (8001730 <HAL_ETH_ConfigMAC+0x29c>)
 80015fc:	f011 fed5 	bl	80133aa <assert_failed>
    assert_param(IS_ETH_RETRY_TRANSMISSION(macconf->RetryTransmission));
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	69db      	ldr	r3, [r3, #28]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d009      	beq.n	800161c <HAL_ETH_ConfigMAC+0x188>
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	69db      	ldr	r3, [r3, #28]
 800160c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001610:	d004      	beq.n	800161c <HAL_ETH_ConfigMAC+0x188>
 8001612:	f240 6119 	movw	r1, #1561	; 0x619
 8001616:	4846      	ldr	r0, [pc, #280]	; (8001730 <HAL_ETH_ConfigMAC+0x29c>)
 8001618:	f011 fec7 	bl	80133aa <assert_failed>
    assert_param(IS_ETH_AUTOMATIC_PADCRC_STRIP(macconf->AutomaticPadCRCStrip));
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	6a1b      	ldr	r3, [r3, #32]
 8001620:	2b80      	cmp	r3, #128	; 0x80
 8001622:	d008      	beq.n	8001636 <HAL_ETH_ConfigMAC+0x1a2>
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	6a1b      	ldr	r3, [r3, #32]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d004      	beq.n	8001636 <HAL_ETH_ConfigMAC+0x1a2>
 800162c:	f240 611a 	movw	r1, #1562	; 0x61a
 8001630:	483f      	ldr	r0, [pc, #252]	; (8001730 <HAL_ETH_ConfigMAC+0x29c>)
 8001632:	f011 feba 	bl	80133aa <assert_failed>
    assert_param(IS_ETH_BACKOFF_LIMIT(macconf->BackOffLimit));
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800163a:	2b00      	cmp	r3, #0
 800163c:	d010      	beq.n	8001660 <HAL_ETH_ConfigMAC+0x1cc>
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001642:	2b20      	cmp	r3, #32
 8001644:	d00c      	beq.n	8001660 <HAL_ETH_ConfigMAC+0x1cc>
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800164a:	2b40      	cmp	r3, #64	; 0x40
 800164c:	d008      	beq.n	8001660 <HAL_ETH_ConfigMAC+0x1cc>
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001652:	2b60      	cmp	r3, #96	; 0x60
 8001654:	d004      	beq.n	8001660 <HAL_ETH_ConfigMAC+0x1cc>
 8001656:	f240 611b 	movw	r1, #1563	; 0x61b
 800165a:	4835      	ldr	r0, [pc, #212]	; (8001730 <HAL_ETH_ConfigMAC+0x29c>)
 800165c:	f011 fea5 	bl	80133aa <assert_failed>
    assert_param(IS_ETH_DEFERRAL_CHECK(macconf->DeferralCheck));
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001664:	2b10      	cmp	r3, #16
 8001666:	d008      	beq.n	800167a <HAL_ETH_ConfigMAC+0x1e6>
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800166c:	2b00      	cmp	r3, #0
 800166e:	d004      	beq.n	800167a <HAL_ETH_ConfigMAC+0x1e6>
 8001670:	f240 611c 	movw	r1, #1564	; 0x61c
 8001674:	482e      	ldr	r0, [pc, #184]	; (8001730 <HAL_ETH_ConfigMAC+0x29c>)
 8001676:	f011 fe98 	bl	80133aa <assert_failed>
    assert_param(IS_ETH_RECEIVE_ALL(macconf->ReceiveAll));
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800167e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001682:	d008      	beq.n	8001696 <HAL_ETH_ConfigMAC+0x202>
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001688:	2b00      	cmp	r3, #0
 800168a:	d004      	beq.n	8001696 <HAL_ETH_ConfigMAC+0x202>
 800168c:	f240 611d 	movw	r1, #1565	; 0x61d
 8001690:	4827      	ldr	r0, [pc, #156]	; (8001730 <HAL_ETH_ConfigMAC+0x29c>)
 8001692:	f011 fe8a 	bl	80133aa <assert_failed>
    assert_param(IS_ETH_SOURCE_ADDR_FILTER(macconf->SourceAddrFilter));
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800169e:	d00d      	beq.n	80016bc <HAL_ETH_ConfigMAC+0x228>
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80016a8:	d008      	beq.n	80016bc <HAL_ETH_ConfigMAC+0x228>
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d004      	beq.n	80016bc <HAL_ETH_ConfigMAC+0x228>
 80016b2:	f240 611e 	movw	r1, #1566	; 0x61e
 80016b6:	481e      	ldr	r0, [pc, #120]	; (8001730 <HAL_ETH_ConfigMAC+0x29c>)
 80016b8:	f011 fe77 	bl	80133aa <assert_failed>
    assert_param(IS_ETH_CONTROL_FRAMES(macconf->PassControlFrames));
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016c0:	2b40      	cmp	r3, #64	; 0x40
 80016c2:	d00c      	beq.n	80016de <HAL_ETH_ConfigMAC+0x24a>
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016c8:	2b80      	cmp	r3, #128	; 0x80
 80016ca:	d008      	beq.n	80016de <HAL_ETH_ConfigMAC+0x24a>
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016d0:	2bc0      	cmp	r3, #192	; 0xc0
 80016d2:	d004      	beq.n	80016de <HAL_ETH_ConfigMAC+0x24a>
 80016d4:	f240 611f 	movw	r1, #1567	; 0x61f
 80016d8:	4815      	ldr	r0, [pc, #84]	; (8001730 <HAL_ETH_ConfigMAC+0x29c>)
 80016da:	f011 fe66 	bl	80133aa <assert_failed>
    assert_param(IS_ETH_BROADCAST_FRAMES_RECEPTION(macconf->BroadcastFramesReception));
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d008      	beq.n	80016f8 <HAL_ETH_ConfigMAC+0x264>
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016ea:	2b20      	cmp	r3, #32
 80016ec:	d004      	beq.n	80016f8 <HAL_ETH_ConfigMAC+0x264>
 80016ee:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 80016f2:	480f      	ldr	r0, [pc, #60]	; (8001730 <HAL_ETH_ConfigMAC+0x29c>)
 80016f4:	f011 fe59 	bl	80133aa <assert_failed>
    assert_param(IS_ETH_DESTINATION_ADDR_FILTER(macconf->DestinationAddrFilter));
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d008      	beq.n	8001712 <HAL_ETH_ConfigMAC+0x27e>
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001704:	2b08      	cmp	r3, #8
 8001706:	d004      	beq.n	8001712 <HAL_ETH_ConfigMAC+0x27e>
 8001708:	f240 6121 	movw	r1, #1569	; 0x621
 800170c:	4808      	ldr	r0, [pc, #32]	; (8001730 <HAL_ETH_ConfigMAC+0x29c>)
 800170e:	f011 fe4c 	bl	80133aa <assert_failed>
    assert_param(IS_ETH_PROMISCUOUS_MODE(macconf->PromiscuousMode));
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001716:	2b01      	cmp	r3, #1
 8001718:	d00c      	beq.n	8001734 <HAL_ETH_ConfigMAC+0x2a0>
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171e:	2b00      	cmp	r3, #0
 8001720:	d008      	beq.n	8001734 <HAL_ETH_ConfigMAC+0x2a0>
 8001722:	f240 6122 	movw	r1, #1570	; 0x622
 8001726:	4802      	ldr	r0, [pc, #8]	; (8001730 <HAL_ETH_ConfigMAC+0x29c>)
 8001728:	f011 fe3f 	bl	80133aa <assert_failed>
 800172c:	e002      	b.n	8001734 <HAL_ETH_ConfigMAC+0x2a0>
 800172e:	bf00      	nop
 8001730:	08014d8c 	.word	0x08014d8c
    assert_param(IS_ETH_MULTICAST_FRAMES_FILTER(macconf->MulticastFramesFilter));
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001738:	f240 4204 	movw	r2, #1028	; 0x404
 800173c:	4293      	cmp	r3, r2
 800173e:	d010      	beq.n	8001762 <HAL_ETH_ConfigMAC+0x2ce>
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001744:	2b04      	cmp	r3, #4
 8001746:	d00c      	beq.n	8001762 <HAL_ETH_ConfigMAC+0x2ce>
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800174c:	2b00      	cmp	r3, #0
 800174e:	d008      	beq.n	8001762 <HAL_ETH_ConfigMAC+0x2ce>
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001754:	2b10      	cmp	r3, #16
 8001756:	d004      	beq.n	8001762 <HAL_ETH_ConfigMAC+0x2ce>
 8001758:	f240 6123 	movw	r1, #1571	; 0x623
 800175c:	4894      	ldr	r0, [pc, #592]	; (80019b0 <HAL_ETH_ConfigMAC+0x51c>)
 800175e:	f011 fe24 	bl	80133aa <assert_failed>
    assert_param(IS_ETH_UNICAST_FRAMES_FILTER(macconf->UnicastFramesFilter));
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001766:	f240 4202 	movw	r2, #1026	; 0x402
 800176a:	4293      	cmp	r3, r2
 800176c:	d00c      	beq.n	8001788 <HAL_ETH_ConfigMAC+0x2f4>
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001772:	2b02      	cmp	r3, #2
 8001774:	d008      	beq.n	8001788 <HAL_ETH_ConfigMAC+0x2f4>
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800177a:	2b00      	cmp	r3, #0
 800177c:	d004      	beq.n	8001788 <HAL_ETH_ConfigMAC+0x2f4>
 800177e:	f240 6124 	movw	r1, #1572	; 0x624
 8001782:	488b      	ldr	r0, [pc, #556]	; (80019b0 <HAL_ETH_ConfigMAC+0x51c>)
 8001784:	f011 fe11 	bl	80133aa <assert_failed>
    assert_param(IS_ETH_PAUSE_TIME(macconf->PauseTime));
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800178c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001790:	d304      	bcc.n	800179c <HAL_ETH_ConfigMAC+0x308>
 8001792:	f240 6125 	movw	r1, #1573	; 0x625
 8001796:	4886      	ldr	r0, [pc, #536]	; (80019b0 <HAL_ETH_ConfigMAC+0x51c>)
 8001798:	f011 fe07 	bl	80133aa <assert_failed>
    assert_param(IS_ETH_ZEROQUANTA_PAUSE(macconf->ZeroQuantaPause));
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d008      	beq.n	80017b6 <HAL_ETH_ConfigMAC+0x322>
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017a8:	2b80      	cmp	r3, #128	; 0x80
 80017aa:	d004      	beq.n	80017b6 <HAL_ETH_ConfigMAC+0x322>
 80017ac:	f240 6126 	movw	r1, #1574	; 0x626
 80017b0:	487f      	ldr	r0, [pc, #508]	; (80019b0 <HAL_ETH_ConfigMAC+0x51c>)
 80017b2:	f011 fdfa 	bl	80133aa <assert_failed>
    assert_param(IS_ETH_PAUSE_LOW_THRESHOLD(macconf->PauseLowThreshold));
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d010      	beq.n	80017e0 <HAL_ETH_ConfigMAC+0x34c>
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017c2:	2b10      	cmp	r3, #16
 80017c4:	d00c      	beq.n	80017e0 <HAL_ETH_ConfigMAC+0x34c>
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017ca:	2b20      	cmp	r3, #32
 80017cc:	d008      	beq.n	80017e0 <HAL_ETH_ConfigMAC+0x34c>
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017d2:	2b30      	cmp	r3, #48	; 0x30
 80017d4:	d004      	beq.n	80017e0 <HAL_ETH_ConfigMAC+0x34c>
 80017d6:	f240 6127 	movw	r1, #1575	; 0x627
 80017da:	4875      	ldr	r0, [pc, #468]	; (80019b0 <HAL_ETH_ConfigMAC+0x51c>)
 80017dc:	f011 fde5 	bl	80133aa <assert_failed>
    assert_param(IS_ETH_UNICAST_PAUSE_FRAME_DETECT(macconf->UnicastPauseFrameDetect));
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017e4:	2b08      	cmp	r3, #8
 80017e6:	d008      	beq.n	80017fa <HAL_ETH_ConfigMAC+0x366>
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d004      	beq.n	80017fa <HAL_ETH_ConfigMAC+0x366>
 80017f0:	f44f 61c5 	mov.w	r1, #1576	; 0x628
 80017f4:	486e      	ldr	r0, [pc, #440]	; (80019b0 <HAL_ETH_ConfigMAC+0x51c>)
 80017f6:	f011 fdd8 	bl	80133aa <assert_failed>
    assert_param(IS_ETH_RECEIVE_FLOWCONTROL(macconf->ReceiveFlowControl));
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80017fe:	2b04      	cmp	r3, #4
 8001800:	d008      	beq.n	8001814 <HAL_ETH_ConfigMAC+0x380>
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001806:	2b00      	cmp	r3, #0
 8001808:	d004      	beq.n	8001814 <HAL_ETH_ConfigMAC+0x380>
 800180a:	f240 6129 	movw	r1, #1577	; 0x629
 800180e:	4868      	ldr	r0, [pc, #416]	; (80019b0 <HAL_ETH_ConfigMAC+0x51c>)
 8001810:	f011 fdcb 	bl	80133aa <assert_failed>
    assert_param(IS_ETH_TRANSMIT_FLOWCONTROL(macconf->TransmitFlowControl));
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001818:	2b02      	cmp	r3, #2
 800181a:	d008      	beq.n	800182e <HAL_ETH_ConfigMAC+0x39a>
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001820:	2b00      	cmp	r3, #0
 8001822:	d004      	beq.n	800182e <HAL_ETH_ConfigMAC+0x39a>
 8001824:	f240 612a 	movw	r1, #1578	; 0x62a
 8001828:	4861      	ldr	r0, [pc, #388]	; (80019b0 <HAL_ETH_ConfigMAC+0x51c>)
 800182a:	f011 fdbe 	bl	80133aa <assert_failed>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001832:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001836:	d008      	beq.n	800184a <HAL_ETH_ConfigMAC+0x3b6>
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800183c:	2b00      	cmp	r3, #0
 800183e:	d004      	beq.n	800184a <HAL_ETH_ConfigMAC+0x3b6>
 8001840:	f240 612b 	movw	r1, #1579	; 0x62b
 8001844:	485a      	ldr	r0, [pc, #360]	; (80019b0 <HAL_ETH_ConfigMAC+0x51c>)
 8001846:	f011 fdb0 	bl	80133aa <assert_failed>
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800184e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001852:	d304      	bcc.n	800185e <HAL_ETH_ConfigMAC+0x3ca>
 8001854:	f240 612c 	movw	r1, #1580	; 0x62c
 8001858:	4855      	ldr	r0, [pc, #340]	; (80019b0 <HAL_ETH_ConfigMAC+0x51c>)
 800185a:	f011 fda6 	bl	80133aa <assert_failed>
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001866:	68fa      	ldr	r2, [r7, #12]
 8001868:	4b52      	ldr	r3, [pc, #328]	; (80019b4 <HAL_ETH_ConfigMAC+0x520>)
 800186a:	4013      	ands	r3, r2
 800186c:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8001876:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 800187c:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8001882:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8001888:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 800188e:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8001894:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 800189a:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 80018a0:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 80018a6:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 80018ac:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 80018b2:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 80018b8:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 80018ba:	68fa      	ldr	r2, [r7, #12]
 80018bc:	4313      	orrs	r3, r2
 80018be:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	68fa      	ldr	r2, [r7, #12]
 80018c6:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80018d0:	2001      	movs	r0, #1
 80018d2:	f7fe fe91 	bl	80005f8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	68fa      	ldr	r2, [r7, #12]
 80018dc:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80018e6:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 80018ec:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 80018f2:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 80018f8:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 80018fe:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8001904:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8001910:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001912:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800191c:	2001      	movs	r0, #1
 800191e:	f7fe fe6b 	bl	80005f8 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	68fa      	ldr	r2, [r7, #12]
 8001928:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	683a      	ldr	r2, [r7, #0]
 8001930:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001932:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	683a      	ldr	r2, [r7, #0]
 800193a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800193c:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	699b      	ldr	r3, [r3, #24]
 8001944:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001946:	68fa      	ldr	r2, [r7, #12]
 8001948:	f64f 7341 	movw	r3, #65345	; 0xff41
 800194c:	4013      	ands	r3, r2
 800194e:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001954:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 800195a:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8001960:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8001966:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 800196c:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8001972:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8001974:	68fa      	ldr	r2, [r7, #12]
 8001976:	4313      	orrs	r3, r2
 8001978:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	68fa      	ldr	r2, [r7, #12]
 8001980:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	699b      	ldr	r3, [r3, #24]
 8001988:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800198a:	2001      	movs	r0, #1
 800198c:	f7fe fe34 	bl	80005f8 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	68fa      	ldr	r2, [r7, #12]
 8001996:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	430a      	orrs	r2, r1
 80019a6:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	e004      	b.n	80019b8 <HAL_ETH_ConfigMAC+0x524>
 80019ae:	bf00      	nop
 80019b0:	08014d8c 	.word	0x08014d8c
 80019b4:	ff20810f 	.word	0xff20810f
 80019b8:	69db      	ldr	r3, [r3, #28]
 80019ba:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 80019bc:	2001      	movs	r0, #1
 80019be:	f7fe fe1b 	bl	80005f8 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	68fa      	ldr	r2, [r7, #12]
 80019c8:	61da      	str	r2, [r3, #28]
 80019ca:	e01e      	b.n	8001a0a <HAL_ETH_ConfigMAC+0x576>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80019da:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	689a      	ldr	r2, [r3, #8]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	68db      	ldr	r3, [r3, #12]
 80019e4:	4313      	orrs	r3, r2
 80019e6:	68fa      	ldr	r2, [r7, #12]
 80019e8:	4313      	orrs	r3, r2
 80019ea:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	68fa      	ldr	r2, [r7, #12]
 80019f2:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80019fc:	2001      	movs	r0, #1
 80019fe:	f7fe fdfb 	bl	80005f8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	68fa      	ldr	r2, [r7, #12]
 8001a08:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2200      	movs	r2, #0
 8001a16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8001a1a:	2300      	movs	r3, #0
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3710      	adds	r7, #16
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}

08001a24 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b0b0      	sub	sp, #192	; 0xc0
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d007      	beq.n	8001a4a <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a40:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a48:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8001a52:	2300      	movs	r3, #0
 8001a54:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8001a56:	2300      	movs	r3, #0
 8001a58:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	69db      	ldr	r3, [r3, #28]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d103      	bne.n	8001a72 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8001a6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a6e:	663b      	str	r3, [r7, #96]	; 0x60
 8001a70:	e001      	b.n	8001a76 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8001a72:	2300      	movs	r3, #0
 8001a74:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8001a76:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a7a:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001a80:	2300      	movs	r3, #0
 8001a82:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8001a84:	2300      	movs	r3, #0
 8001a86:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8001a90:	2340      	movs	r3, #64	; 0x40
 8001a92:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8001a94:	2300      	movs	r3, #0
 8001a96:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8001aac:	2300      	movs	r3, #0
 8001aae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8001ac4:	2380      	movs	r3, #128	; 0x80
 8001ac6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001aca:	2300      	movs	r3, #0
 8001acc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8001adc:	2300      	movs	r3, #0
 8001ade:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001af8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001afc:	4baa      	ldr	r3, [pc, #680]	; (8001da8 <ETH_MACDMAConfig+0x384>)
 8001afe:	4013      	ands	r3, r2
 8001b00:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001b04:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8001b06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001b08:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8001b0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8001b0c:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8001b0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8001b10:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8001b16:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8001b18:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8001b1a:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8001b1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8001b1e:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8001b24:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8001b26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8001b28:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8001b2a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8001b2c:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8001b2e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8001b30:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8001b32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8001b34:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8001b36:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8001b38:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001b3a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001b4c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b58:	2001      	movs	r0, #1
 8001b5a:	f7fe fd4d 	bl	80005f8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001b66:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001b68:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8001b6a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001b6c:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8001b6e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8001b70:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8001b72:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8001b76:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8001b78:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8001b7c:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8001b7e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8001b82:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8001b84:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8001b88:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8001b8c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8001b94:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001b96:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ba2:	2001      	movs	r0, #1
 8001ba4:	f7fe fd28 	bl	80005f8 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001bb0:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001bba:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001bc4:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	699b      	ldr	r3, [r3, #24]
 8001bcc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001bd0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001bd4:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001bd8:	4013      	ands	r3, r2
 8001bda:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001bde:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001be2:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8001be4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001be8:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8001bea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8001bee:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8001bf0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8001bf4:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8001bf6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8001bfa:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8001bfc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8001c00:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001c02:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001c06:	4313      	orrs	r3, r2
 8001c08:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001c14:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	699b      	ldr	r3, [r3, #24]
 8001c1c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c20:	2001      	movs	r0, #1
 8001c22:	f7fe fce9 	bl	80005f8 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001c2e:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001c30:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8001c34:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	430a      	orrs	r2, r1
 8001c3e:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	69db      	ldr	r3, [r3, #28]
 8001c46:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c4a:	2001      	movs	r0, #1
 8001c4c:	f7fe fcd4 	bl	80005f8 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001c58:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8001c5e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c62:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8001c64:	2300      	movs	r3, #0
 8001c66:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8001c68:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001c6c:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8001c72:	2300      	movs	r3, #0
 8001c74:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8001c76:	2300      	movs	r3, #0
 8001c78:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8001c7e:	2304      	movs	r3, #4
 8001c80:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8001c82:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c86:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8001c88:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c8c:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001c8e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c92:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001c94:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c98:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8001c9a:	2380      	movs	r3, #128	; 0x80
 8001c9c:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cae:	699b      	ldr	r3, [r3, #24]
 8001cb0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001cb4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001cb8:	4b3c      	ldr	r3, [pc, #240]	; (8001dac <ETH_MACDMAConfig+0x388>)
 8001cba:	4013      	ands	r3, r2
 8001cbc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001cc0:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8001cc2:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001cc4:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8001cc6:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8001cc8:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8001cca:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8001ccc:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8001cce:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8001cd0:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8001cd2:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8001cd4:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8001cd6:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8001cd8:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8001cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8001cdc:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8001cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8001ce0:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001ce2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cf4:	461a      	mov	r2, r3
 8001cf6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001cfa:	6193      	str	r3, [r2, #24]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d04:	699b      	ldr	r3, [r3, #24]
 8001d06:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d0a:	2001      	movs	r0, #1
 8001d0c:	f7fe fc74 	bl	80005f8 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d18:	461a      	mov	r2, r3
 8001d1a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001d1e:	6193      	str	r3, [r2, #24]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001d20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8001d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001d24:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001d26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8001d28:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8001d2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001d2c:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8001d2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8001d30:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 8001d32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d34:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8001d36:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8001d38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 8001d3a:	4313      	orrs	r3, r2
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001d3c:	687a      	ldr	r2, [r7, #4]
 8001d3e:	6812      	ldr	r2, [r2, #0]
 8001d40:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001d44:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001d48:	6013      	str	r3, [r2, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d58:	2001      	movs	r0, #1
 8001d5a:	f7fe fc4d 	bl	80005f8 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d66:	461a      	mov	r2, r3
 8001d68:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001d6c:	6013      	str	r3, [r2, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	699b      	ldr	r3, [r3, #24]
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d10d      	bne.n	8001d92 <ETH_MACDMAConfig+0x36e>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d7e:	69db      	ldr	r3, [r3, #28]
 8001d80:	687a      	ldr	r2, [r7, #4]
 8001d82:	6812      	ldr	r2, [r2, #0]
 8001d84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d8c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001d90:	61d3      	str	r3, [r2, #28]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	695b      	ldr	r3, [r3, #20]
 8001d96:	461a      	mov	r2, r3
 8001d98:	2100      	movs	r1, #0
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f000 f808 	bl	8001db0 <ETH_MACAddressConfig>
}
 8001da0:	bf00      	nop
 8001da2:	37c0      	adds	r7, #192	; 0xc0
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	ff20810f 	.word	0xff20810f
 8001dac:	f8de3f23 	.word	0xf8de3f23

08001db0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b086      	sub	sp, #24
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	60f8      	str	r0, [r7, #12]
 8001db8:	60b9      	str	r1, [r7, #8]
 8001dba:	607a      	str	r2, [r7, #4]
  
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d00d      	beq.n	8001dde <ETH_MACAddressConfig+0x2e>
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	2b08      	cmp	r3, #8
 8001dc6:	d00a      	beq.n	8001dde <ETH_MACAddressConfig+0x2e>
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	2b10      	cmp	r3, #16
 8001dcc:	d007      	beq.n	8001dde <ETH_MACAddressConfig+0x2e>
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	2b18      	cmp	r3, #24
 8001dd2:	d004      	beq.n	8001dde <ETH_MACAddressConfig+0x2e>
 8001dd4:	f640 013c 	movw	r1, #2108	; 0x83c
 8001dd8:	4816      	ldr	r0, [pc, #88]	; (8001e34 <ETH_MACAddressConfig+0x84>)
 8001dda:	f011 fae6 	bl	80133aa <assert_failed>
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	3305      	adds	r3, #5
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	021b      	lsls	r3, r3, #8
 8001de6:	687a      	ldr	r2, [r7, #4]
 8001de8:	3204      	adds	r2, #4
 8001dea:	7812      	ldrb	r2, [r2, #0]
 8001dec:	4313      	orrs	r3, r2
 8001dee:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001df0:	68ba      	ldr	r2, [r7, #8]
 8001df2:	4b11      	ldr	r3, [pc, #68]	; (8001e38 <ETH_MACAddressConfig+0x88>)
 8001df4:	4413      	add	r3, r2
 8001df6:	461a      	mov	r2, r3
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	3303      	adds	r3, #3
 8001e00:	781b      	ldrb	r3, [r3, #0]
 8001e02:	061a      	lsls	r2, r3, #24
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	3302      	adds	r3, #2
 8001e08:	781b      	ldrb	r3, [r3, #0]
 8001e0a:	041b      	lsls	r3, r3, #16
 8001e0c:	431a      	orrs	r2, r3
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	3301      	adds	r3, #1
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	021b      	lsls	r3, r3, #8
 8001e16:	4313      	orrs	r3, r2
 8001e18:	687a      	ldr	r2, [r7, #4]
 8001e1a:	7812      	ldrb	r2, [r2, #0]
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001e20:	68ba      	ldr	r2, [r7, #8]
 8001e22:	4b06      	ldr	r3, [pc, #24]	; (8001e3c <ETH_MACAddressConfig+0x8c>)
 8001e24:	4413      	add	r3, r2
 8001e26:	461a      	mov	r2, r3
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	6013      	str	r3, [r2, #0]
}
 8001e2c:	bf00      	nop
 8001e2e:	3718      	adds	r7, #24
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	08014d8c 	.word	0x08014d8c
 8001e38:	40028040 	.word	0x40028040
 8001e3c:	40028044 	.word	0x40028044

08001e40 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b084      	sub	sp, #16
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f042 0208 	orr.w	r2, r2, #8
 8001e5a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8001e64:	2001      	movs	r0, #1
 8001e66:	f000 f8dd 	bl	8002024 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	68fa      	ldr	r2, [r7, #12]
 8001e70:	601a      	str	r2, [r3, #0]
}
 8001e72:	bf00      	nop
 8001e74:	3710      	adds	r7, #16
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}

08001e7a <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8001e7a:	b580      	push	{r7, lr}
 8001e7c:	b084      	sub	sp, #16
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8001e82:	2300      	movs	r3, #0
 8001e84:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f022 0208 	bic.w	r2, r2, #8
 8001e94:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8001e9e:	2001      	movs	r0, #1
 8001ea0:	f000 f8c0 	bl	8002024 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	68fa      	ldr	r2, [r7, #12]
 8001eaa:	601a      	str	r2, [r3, #0]
}
 8001eac:	bf00      	nop
 8001eae:	3710      	adds	r7, #16
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}

08001eb4 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b084      	sub	sp, #16
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f042 0204 	orr.w	r2, r2, #4
 8001ece:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8001ed8:	2001      	movs	r0, #1
 8001eda:	f000 f8a3 	bl	8002024 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	68fa      	ldr	r2, [r7, #12]
 8001ee4:	601a      	str	r2, [r3, #0]
}
 8001ee6:	bf00      	nop
 8001ee8:	3710      	adds	r7, #16
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}

08001eee <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8001eee:	b580      	push	{r7, lr}
 8001ef0:	b084      	sub	sp, #16
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f022 0204 	bic.w	r2, r2, #4
 8001f08:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8001f12:	2001      	movs	r0, #1
 8001f14:	f000 f886 	bl	8002024 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	68fa      	ldr	r2, [r7, #12]
 8001f1e:	601a      	str	r2, [r3, #0]
}
 8001f20:	bf00      	nop
 8001f22:	3710      	adds	r7, #16
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}

08001f28 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f38:	699b      	ldr	r3, [r3, #24]
 8001f3a:	687a      	ldr	r2, [r7, #4]
 8001f3c:	6812      	ldr	r2, [r2, #0]
 8001f3e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001f42:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001f46:	6193      	str	r3, [r2, #24]
}
 8001f48:	bf00      	nop
 8001f4a:	370c      	adds	r7, #12
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr

08001f54 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8001f54:	b480      	push	{r7}
 8001f56:	b083      	sub	sp, #12
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f64:	699b      	ldr	r3, [r3, #24]
 8001f66:	687a      	ldr	r2, [r7, #4]
 8001f68:	6812      	ldr	r2, [r2, #0]
 8001f6a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001f6e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001f72:	6193      	str	r3, [r2, #24]
}
 8001f74:	bf00      	nop
 8001f76:	370c      	adds	r7, #12
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr

08001f80 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8001f80:	b480      	push	{r7}
 8001f82:	b083      	sub	sp, #12
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f90:	699b      	ldr	r3, [r3, #24]
 8001f92:	687a      	ldr	r2, [r7, #4]
 8001f94:	6812      	ldr	r2, [r2, #0]
 8001f96:	f043 0302 	orr.w	r3, r3, #2
 8001f9a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001f9e:	6193      	str	r3, [r2, #24]
}
 8001fa0:	bf00      	nop
 8001fa2:	370c      	adds	r7, #12
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr

08001fac <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fbc:	699b      	ldr	r3, [r3, #24]
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	6812      	ldr	r2, [r2, #0]
 8001fc2:	f023 0302 	bic.w	r3, r3, #2
 8001fc6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001fca:	6193      	str	r3, [r2, #24]
}
 8001fcc:	bf00      	nop
 8001fce:	370c      	adds	r7, #12
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr

08001fd8 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b084      	sub	sp, #16
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fec:	699b      	ldr	r3, [r3, #24]
 8001fee:	687a      	ldr	r2, [r7, #4]
 8001ff0:	6812      	ldr	r2, [r2, #0]
 8001ff2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001ff6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001ffa:	6193      	str	r3, [r2, #24]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002004:	699b      	ldr	r3, [r3, #24]
 8002006:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002008:	2001      	movs	r0, #1
 800200a:	f000 f80b 	bl	8002024 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002018:	6193      	str	r3, [r2, #24]
}
 800201a:	bf00      	nop
 800201c:	3710      	adds	r7, #16
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
	...

08002024 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8002024:	b480      	push	{r7}
 8002026:	b085      	sub	sp, #20
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800202c:	4b0b      	ldr	r3, [pc, #44]	; (800205c <ETH_Delay+0x38>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a0b      	ldr	r2, [pc, #44]	; (8002060 <ETH_Delay+0x3c>)
 8002032:	fba2 2303 	umull	r2, r3, r2, r3
 8002036:	0a5b      	lsrs	r3, r3, #9
 8002038:	687a      	ldr	r2, [r7, #4]
 800203a:	fb02 f303 	mul.w	r3, r2, r3
 800203e:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 8002040:	bf00      	nop
  } 
  while (Delay --);
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	1e5a      	subs	r2, r3, #1
 8002046:	60fa      	str	r2, [r7, #12]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d1f9      	bne.n	8002040 <ETH_Delay+0x1c>
}
 800204c:	bf00      	nop
 800204e:	bf00      	nop
 8002050:	3714      	adds	r7, #20
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr
 800205a:	bf00      	nop
 800205c:	20000018 	.word	0x20000018
 8002060:	10624dd3 	.word	0x10624dd3

08002064 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b088      	sub	sp, #32
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800206e:	2300      	movs	r3, #0
 8002070:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002072:	2300      	movs	r3, #0
 8002074:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002076:	2300      	movs	r3, #0
 8002078:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4a39      	ldr	r2, [pc, #228]	; (8002164 <HAL_GPIO_Init+0x100>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d023      	beq.n	80020ca <HAL_GPIO_Init+0x66>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4a38      	ldr	r2, [pc, #224]	; (8002168 <HAL_GPIO_Init+0x104>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d01f      	beq.n	80020ca <HAL_GPIO_Init+0x66>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4a37      	ldr	r2, [pc, #220]	; (800216c <HAL_GPIO_Init+0x108>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d01b      	beq.n	80020ca <HAL_GPIO_Init+0x66>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4a36      	ldr	r2, [pc, #216]	; (8002170 <HAL_GPIO_Init+0x10c>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d017      	beq.n	80020ca <HAL_GPIO_Init+0x66>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4a35      	ldr	r2, [pc, #212]	; (8002174 <HAL_GPIO_Init+0x110>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d013      	beq.n	80020ca <HAL_GPIO_Init+0x66>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4a34      	ldr	r2, [pc, #208]	; (8002178 <HAL_GPIO_Init+0x114>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d00f      	beq.n	80020ca <HAL_GPIO_Init+0x66>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4a33      	ldr	r2, [pc, #204]	; (800217c <HAL_GPIO_Init+0x118>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d00b      	beq.n	80020ca <HAL_GPIO_Init+0x66>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4a32      	ldr	r2, [pc, #200]	; (8002180 <HAL_GPIO_Init+0x11c>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d007      	beq.n	80020ca <HAL_GPIO_Init+0x66>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4a31      	ldr	r2, [pc, #196]	; (8002184 <HAL_GPIO_Init+0x120>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d003      	beq.n	80020ca <HAL_GPIO_Init+0x66>
 80020c2:	21ac      	movs	r1, #172	; 0xac
 80020c4:	4830      	ldr	r0, [pc, #192]	; (8002188 <HAL_GPIO_Init+0x124>)
 80020c6:	f011 f970 	bl	80133aa <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	b29b      	uxth	r3, r3
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d005      	beq.n	80020e0 <HAL_GPIO_Init+0x7c>
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	0c1b      	lsrs	r3, r3, #16
 80020da:	041b      	lsls	r3, r3, #16
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d003      	beq.n	80020e8 <HAL_GPIO_Init+0x84>
 80020e0:	21ad      	movs	r1, #173	; 0xad
 80020e2:	4829      	ldr	r0, [pc, #164]	; (8002188 <HAL_GPIO_Init+0x124>)
 80020e4:	f011 f961 	bl	80133aa <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d035      	beq.n	800215c <HAL_GPIO_Init+0xf8>
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d031      	beq.n	800215c <HAL_GPIO_Init+0xf8>
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	2b11      	cmp	r3, #17
 80020fe:	d02d      	beq.n	800215c <HAL_GPIO_Init+0xf8>
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	2b02      	cmp	r3, #2
 8002106:	d029      	beq.n	800215c <HAL_GPIO_Init+0xf8>
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	2b12      	cmp	r3, #18
 800210e:	d025      	beq.n	800215c <HAL_GPIO_Init+0xf8>
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8002118:	d020      	beq.n	800215c <HAL_GPIO_Init+0xf8>
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8002122:	d01b      	beq.n	800215c <HAL_GPIO_Init+0xf8>
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 800212c:	d016      	beq.n	800215c <HAL_GPIO_Init+0xf8>
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 8002136:	d011      	beq.n	800215c <HAL_GPIO_Init+0xf8>
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 8002140:	d00c      	beq.n	800215c <HAL_GPIO_Init+0xf8>
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 800214a:	d007      	beq.n	800215c <HAL_GPIO_Init+0xf8>
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	2b03      	cmp	r3, #3
 8002152:	d003      	beq.n	800215c <HAL_GPIO_Init+0xf8>
 8002154:	21ae      	movs	r1, #174	; 0xae
 8002156:	480c      	ldr	r0, [pc, #48]	; (8002188 <HAL_GPIO_Init+0x124>)
 8002158:	f011 f927 	bl	80133aa <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800215c:	2300      	movs	r3, #0
 800215e:	61fb      	str	r3, [r7, #28]
 8002160:	e242      	b.n	80025e8 <HAL_GPIO_Init+0x584>
 8002162:	bf00      	nop
 8002164:	40020000 	.word	0x40020000
 8002168:	40020400 	.word	0x40020400
 800216c:	40020800 	.word	0x40020800
 8002170:	40020c00 	.word	0x40020c00
 8002174:	40021000 	.word	0x40021000
 8002178:	40021400 	.word	0x40021400
 800217c:	40021800 	.word	0x40021800
 8002180:	40021c00 	.word	0x40021c00
 8002184:	40022000 	.word	0x40022000
 8002188:	08014dc4 	.word	0x08014dc4
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800218c:	2201      	movs	r2, #1
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	fa02 f303 	lsl.w	r3, r2, r3
 8002194:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	697a      	ldr	r2, [r7, #20]
 800219c:	4013      	ands	r3, r2
 800219e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80021a0:	693a      	ldr	r2, [r7, #16]
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	429a      	cmp	r2, r3
 80021a6:	f040 821c 	bne.w	80025e2 <HAL_GPIO_Init+0x57e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	f003 0303 	and.w	r3, r3, #3
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d005      	beq.n	80021c2 <HAL_GPIO_Init+0x15e>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021be:	2b02      	cmp	r3, #2
 80021c0:	d144      	bne.n	800224c <HAL_GPIO_Init+0x1e8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	68db      	ldr	r3, [r3, #12]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d00f      	beq.n	80021ea <HAL_GPIO_Init+0x186>
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	68db      	ldr	r3, [r3, #12]
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d00b      	beq.n	80021ea <HAL_GPIO_Init+0x186>
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	68db      	ldr	r3, [r3, #12]
 80021d6:	2b02      	cmp	r3, #2
 80021d8:	d007      	beq.n	80021ea <HAL_GPIO_Init+0x186>
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	68db      	ldr	r3, [r3, #12]
 80021de:	2b03      	cmp	r3, #3
 80021e0:	d003      	beq.n	80021ea <HAL_GPIO_Init+0x186>
 80021e2:	21c0      	movs	r1, #192	; 0xc0
 80021e4:	4881      	ldr	r0, [pc, #516]	; (80023ec <HAL_GPIO_Init+0x388>)
 80021e6:	f011 f8e0 	bl	80133aa <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021f0:	69fb      	ldr	r3, [r7, #28]
 80021f2:	005b      	lsls	r3, r3, #1
 80021f4:	2203      	movs	r2, #3
 80021f6:	fa02 f303 	lsl.w	r3, r2, r3
 80021fa:	43db      	mvns	r3, r3
 80021fc:	69ba      	ldr	r2, [r7, #24]
 80021fe:	4013      	ands	r3, r2
 8002200:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	68da      	ldr	r2, [r3, #12]
 8002206:	69fb      	ldr	r3, [r7, #28]
 8002208:	005b      	lsls	r3, r3, #1
 800220a:	fa02 f303 	lsl.w	r3, r2, r3
 800220e:	69ba      	ldr	r2, [r7, #24]
 8002210:	4313      	orrs	r3, r2
 8002212:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	69ba      	ldr	r2, [r7, #24]
 8002218:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002220:	2201      	movs	r2, #1
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	fa02 f303 	lsl.w	r3, r2, r3
 8002228:	43db      	mvns	r3, r3
 800222a:	69ba      	ldr	r2, [r7, #24]
 800222c:	4013      	ands	r3, r2
 800222e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	091b      	lsrs	r3, r3, #4
 8002236:	f003 0201 	and.w	r2, r3, #1
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	fa02 f303 	lsl.w	r3, r2, r3
 8002240:	69ba      	ldr	r2, [r7, #24]
 8002242:	4313      	orrs	r3, r2
 8002244:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	69ba      	ldr	r2, [r7, #24]
 800224a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f003 0303 	and.w	r3, r3, #3
 8002254:	2b03      	cmp	r3, #3
 8002256:	d027      	beq.n	80022a8 <HAL_GPIO_Init+0x244>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d00b      	beq.n	8002278 <HAL_GPIO_Init+0x214>
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	2b01      	cmp	r3, #1
 8002266:	d007      	beq.n	8002278 <HAL_GPIO_Init+0x214>
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	2b02      	cmp	r3, #2
 800226e:	d003      	beq.n	8002278 <HAL_GPIO_Init+0x214>
 8002270:	21d1      	movs	r1, #209	; 0xd1
 8002272:	485e      	ldr	r0, [pc, #376]	; (80023ec <HAL_GPIO_Init+0x388>)
 8002274:	f011 f899 	bl	80133aa <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	005b      	lsls	r3, r3, #1
 8002282:	2203      	movs	r2, #3
 8002284:	fa02 f303 	lsl.w	r3, r2, r3
 8002288:	43db      	mvns	r3, r3
 800228a:	69ba      	ldr	r2, [r7, #24]
 800228c:	4013      	ands	r3, r2
 800228e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	689a      	ldr	r2, [r3, #8]
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	005b      	lsls	r3, r3, #1
 8002298:	fa02 f303 	lsl.w	r3, r2, r3
 800229c:	69ba      	ldr	r2, [r7, #24]
 800229e:	4313      	orrs	r3, r2
 80022a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	69ba      	ldr	r2, [r7, #24]
 80022a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	f003 0303 	and.w	r3, r3, #3
 80022b0:	2b02      	cmp	r3, #2
 80022b2:	f040 80c1 	bne.w	8002438 <HAL_GPIO_Init+0x3d4>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	691b      	ldr	r3, [r3, #16]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	f000 8098 	beq.w	80023f0 <HAL_GPIO_Init+0x38c>
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	691b      	ldr	r3, [r3, #16]
 80022c4:	2b09      	cmp	r3, #9
 80022c6:	f000 8093 	beq.w	80023f0 <HAL_GPIO_Init+0x38c>
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	691b      	ldr	r3, [r3, #16]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	f000 808e 	beq.w	80023f0 <HAL_GPIO_Init+0x38c>
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	691b      	ldr	r3, [r3, #16]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	f000 8089 	beq.w	80023f0 <HAL_GPIO_Init+0x38c>
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	691b      	ldr	r3, [r3, #16]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	f000 8084 	beq.w	80023f0 <HAL_GPIO_Init+0x38c>
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	691b      	ldr	r3, [r3, #16]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d07f      	beq.n	80023f0 <HAL_GPIO_Init+0x38c>
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	691b      	ldr	r3, [r3, #16]
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d07b      	beq.n	80023f0 <HAL_GPIO_Init+0x38c>
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	691b      	ldr	r3, [r3, #16]
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d077      	beq.n	80023f0 <HAL_GPIO_Init+0x38c>
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	691b      	ldr	r3, [r3, #16]
 8002304:	2b02      	cmp	r3, #2
 8002306:	d073      	beq.n	80023f0 <HAL_GPIO_Init+0x38c>
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	691b      	ldr	r3, [r3, #16]
 800230c:	2b02      	cmp	r3, #2
 800230e:	d06f      	beq.n	80023f0 <HAL_GPIO_Init+0x38c>
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	691b      	ldr	r3, [r3, #16]
 8002314:	2b02      	cmp	r3, #2
 8002316:	d06b      	beq.n	80023f0 <HAL_GPIO_Init+0x38c>
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	691b      	ldr	r3, [r3, #16]
 800231c:	2b03      	cmp	r3, #3
 800231e:	d067      	beq.n	80023f0 <HAL_GPIO_Init+0x38c>
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	691b      	ldr	r3, [r3, #16]
 8002324:	2b04      	cmp	r3, #4
 8002326:	d063      	beq.n	80023f0 <HAL_GPIO_Init+0x38c>
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	691b      	ldr	r3, [r3, #16]
 800232c:	2b04      	cmp	r3, #4
 800232e:	d05f      	beq.n	80023f0 <HAL_GPIO_Init+0x38c>
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	691b      	ldr	r3, [r3, #16]
 8002334:	2b04      	cmp	r3, #4
 8002336:	d05b      	beq.n	80023f0 <HAL_GPIO_Init+0x38c>
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	691b      	ldr	r3, [r3, #16]
 800233c:	2b05      	cmp	r3, #5
 800233e:	d057      	beq.n	80023f0 <HAL_GPIO_Init+0x38c>
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	691b      	ldr	r3, [r3, #16]
 8002344:	2b05      	cmp	r3, #5
 8002346:	d053      	beq.n	80023f0 <HAL_GPIO_Init+0x38c>
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	691b      	ldr	r3, [r3, #16]
 800234c:	2b09      	cmp	r3, #9
 800234e:	d04f      	beq.n	80023f0 <HAL_GPIO_Init+0x38c>
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	691b      	ldr	r3, [r3, #16]
 8002354:	2b06      	cmp	r3, #6
 8002356:	d04b      	beq.n	80023f0 <HAL_GPIO_Init+0x38c>
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	691b      	ldr	r3, [r3, #16]
 800235c:	2b09      	cmp	r3, #9
 800235e:	d047      	beq.n	80023f0 <HAL_GPIO_Init+0x38c>
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	691b      	ldr	r3, [r3, #16]
 8002364:	2b07      	cmp	r3, #7
 8002366:	d043      	beq.n	80023f0 <HAL_GPIO_Init+0x38c>
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	691b      	ldr	r3, [r3, #16]
 800236c:	2b07      	cmp	r3, #7
 800236e:	d03f      	beq.n	80023f0 <HAL_GPIO_Init+0x38c>
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	691b      	ldr	r3, [r3, #16]
 8002374:	2b07      	cmp	r3, #7
 8002376:	d03b      	beq.n	80023f0 <HAL_GPIO_Init+0x38c>
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	691b      	ldr	r3, [r3, #16]
 800237c:	2b08      	cmp	r3, #8
 800237e:	d037      	beq.n	80023f0 <HAL_GPIO_Init+0x38c>
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	691b      	ldr	r3, [r3, #16]
 8002384:	2b08      	cmp	r3, #8
 8002386:	d033      	beq.n	80023f0 <HAL_GPIO_Init+0x38c>
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	691b      	ldr	r3, [r3, #16]
 800238c:	2b08      	cmp	r3, #8
 800238e:	d02f      	beq.n	80023f0 <HAL_GPIO_Init+0x38c>
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	691b      	ldr	r3, [r3, #16]
 8002394:	2b09      	cmp	r3, #9
 8002396:	d02b      	beq.n	80023f0 <HAL_GPIO_Init+0x38c>
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	691b      	ldr	r3, [r3, #16]
 800239c:	2b09      	cmp	r3, #9
 800239e:	d027      	beq.n	80023f0 <HAL_GPIO_Init+0x38c>
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	691b      	ldr	r3, [r3, #16]
 80023a4:	2b0a      	cmp	r3, #10
 80023a6:	d023      	beq.n	80023f0 <HAL_GPIO_Init+0x38c>
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	691b      	ldr	r3, [r3, #16]
 80023ac:	2b0a      	cmp	r3, #10
 80023ae:	d01f      	beq.n	80023f0 <HAL_GPIO_Init+0x38c>
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	691b      	ldr	r3, [r3, #16]
 80023b4:	2b0b      	cmp	r3, #11
 80023b6:	d01b      	beq.n	80023f0 <HAL_GPIO_Init+0x38c>
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	691b      	ldr	r3, [r3, #16]
 80023bc:	2b0c      	cmp	r3, #12
 80023be:	d017      	beq.n	80023f0 <HAL_GPIO_Init+0x38c>
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	691b      	ldr	r3, [r3, #16]
 80023c4:	2b0c      	cmp	r3, #12
 80023c6:	d013      	beq.n	80023f0 <HAL_GPIO_Init+0x38c>
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	691b      	ldr	r3, [r3, #16]
 80023cc:	2b0d      	cmp	r3, #13
 80023ce:	d00f      	beq.n	80023f0 <HAL_GPIO_Init+0x38c>
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	691b      	ldr	r3, [r3, #16]
 80023d4:	2b0c      	cmp	r3, #12
 80023d6:	d00b      	beq.n	80023f0 <HAL_GPIO_Init+0x38c>
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	691b      	ldr	r3, [r3, #16]
 80023dc:	2b0f      	cmp	r3, #15
 80023de:	d007      	beq.n	80023f0 <HAL_GPIO_Init+0x38c>
 80023e0:	21de      	movs	r1, #222	; 0xde
 80023e2:	4802      	ldr	r0, [pc, #8]	; (80023ec <HAL_GPIO_Init+0x388>)
 80023e4:	f010 ffe1 	bl	80133aa <assert_failed>
 80023e8:	e002      	b.n	80023f0 <HAL_GPIO_Init+0x38c>
 80023ea:	bf00      	nop
 80023ec:	08014dc4 	.word	0x08014dc4
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023f0:	69fb      	ldr	r3, [r7, #28]
 80023f2:	08da      	lsrs	r2, r3, #3
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	3208      	adds	r2, #8
 80023f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	f003 0307 	and.w	r3, r3, #7
 8002404:	009b      	lsls	r3, r3, #2
 8002406:	220f      	movs	r2, #15
 8002408:	fa02 f303 	lsl.w	r3, r2, r3
 800240c:	43db      	mvns	r3, r3
 800240e:	69ba      	ldr	r2, [r7, #24]
 8002410:	4013      	ands	r3, r2
 8002412:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	691a      	ldr	r2, [r3, #16]
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	f003 0307 	and.w	r3, r3, #7
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	fa02 f303 	lsl.w	r3, r2, r3
 8002424:	69ba      	ldr	r2, [r7, #24]
 8002426:	4313      	orrs	r3, r2
 8002428:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	08da      	lsrs	r2, r3, #3
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	3208      	adds	r2, #8
 8002432:	69b9      	ldr	r1, [r7, #24]
 8002434:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800243e:	69fb      	ldr	r3, [r7, #28]
 8002440:	005b      	lsls	r3, r3, #1
 8002442:	2203      	movs	r2, #3
 8002444:	fa02 f303 	lsl.w	r3, r2, r3
 8002448:	43db      	mvns	r3, r3
 800244a:	69ba      	ldr	r2, [r7, #24]
 800244c:	4013      	ands	r3, r2
 800244e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	f003 0203 	and.w	r2, r3, #3
 8002458:	69fb      	ldr	r3, [r7, #28]
 800245a:	005b      	lsls	r3, r3, #1
 800245c:	fa02 f303 	lsl.w	r3, r2, r3
 8002460:	69ba      	ldr	r2, [r7, #24]
 8002462:	4313      	orrs	r3, r2
 8002464:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	69ba      	ldr	r2, [r7, #24]
 800246a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002474:	2b00      	cmp	r3, #0
 8002476:	f000 80b4 	beq.w	80025e2 <HAL_GPIO_Init+0x57e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800247a:	2300      	movs	r3, #0
 800247c:	60fb      	str	r3, [r7, #12]
 800247e:	4b5f      	ldr	r3, [pc, #380]	; (80025fc <HAL_GPIO_Init+0x598>)
 8002480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002482:	4a5e      	ldr	r2, [pc, #376]	; (80025fc <HAL_GPIO_Init+0x598>)
 8002484:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002488:	6453      	str	r3, [r2, #68]	; 0x44
 800248a:	4b5c      	ldr	r3, [pc, #368]	; (80025fc <HAL_GPIO_Init+0x598>)
 800248c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800248e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002492:	60fb      	str	r3, [r7, #12]
 8002494:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002496:	4a5a      	ldr	r2, [pc, #360]	; (8002600 <HAL_GPIO_Init+0x59c>)
 8002498:	69fb      	ldr	r3, [r7, #28]
 800249a:	089b      	lsrs	r3, r3, #2
 800249c:	3302      	adds	r3, #2
 800249e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	f003 0303 	and.w	r3, r3, #3
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	220f      	movs	r2, #15
 80024ae:	fa02 f303 	lsl.w	r3, r2, r3
 80024b2:	43db      	mvns	r3, r3
 80024b4:	69ba      	ldr	r2, [r7, #24]
 80024b6:	4013      	ands	r3, r2
 80024b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	4a51      	ldr	r2, [pc, #324]	; (8002604 <HAL_GPIO_Init+0x5a0>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d02b      	beq.n	800251a <HAL_GPIO_Init+0x4b6>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	4a50      	ldr	r2, [pc, #320]	; (8002608 <HAL_GPIO_Init+0x5a4>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d025      	beq.n	8002516 <HAL_GPIO_Init+0x4b2>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	4a4f      	ldr	r2, [pc, #316]	; (800260c <HAL_GPIO_Init+0x5a8>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d01f      	beq.n	8002512 <HAL_GPIO_Init+0x4ae>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	4a4e      	ldr	r2, [pc, #312]	; (8002610 <HAL_GPIO_Init+0x5ac>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d019      	beq.n	800250e <HAL_GPIO_Init+0x4aa>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	4a4d      	ldr	r2, [pc, #308]	; (8002614 <HAL_GPIO_Init+0x5b0>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d013      	beq.n	800250a <HAL_GPIO_Init+0x4a6>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4a4c      	ldr	r2, [pc, #304]	; (8002618 <HAL_GPIO_Init+0x5b4>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d00d      	beq.n	8002506 <HAL_GPIO_Init+0x4a2>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	4a4b      	ldr	r2, [pc, #300]	; (800261c <HAL_GPIO_Init+0x5b8>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d007      	beq.n	8002502 <HAL_GPIO_Init+0x49e>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	4a4a      	ldr	r2, [pc, #296]	; (8002620 <HAL_GPIO_Init+0x5bc>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d101      	bne.n	80024fe <HAL_GPIO_Init+0x49a>
 80024fa:	2307      	movs	r3, #7
 80024fc:	e00e      	b.n	800251c <HAL_GPIO_Init+0x4b8>
 80024fe:	2308      	movs	r3, #8
 8002500:	e00c      	b.n	800251c <HAL_GPIO_Init+0x4b8>
 8002502:	2306      	movs	r3, #6
 8002504:	e00a      	b.n	800251c <HAL_GPIO_Init+0x4b8>
 8002506:	2305      	movs	r3, #5
 8002508:	e008      	b.n	800251c <HAL_GPIO_Init+0x4b8>
 800250a:	2304      	movs	r3, #4
 800250c:	e006      	b.n	800251c <HAL_GPIO_Init+0x4b8>
 800250e:	2303      	movs	r3, #3
 8002510:	e004      	b.n	800251c <HAL_GPIO_Init+0x4b8>
 8002512:	2302      	movs	r3, #2
 8002514:	e002      	b.n	800251c <HAL_GPIO_Init+0x4b8>
 8002516:	2301      	movs	r3, #1
 8002518:	e000      	b.n	800251c <HAL_GPIO_Init+0x4b8>
 800251a:	2300      	movs	r3, #0
 800251c:	69fa      	ldr	r2, [r7, #28]
 800251e:	f002 0203 	and.w	r2, r2, #3
 8002522:	0092      	lsls	r2, r2, #2
 8002524:	4093      	lsls	r3, r2
 8002526:	69ba      	ldr	r2, [r7, #24]
 8002528:	4313      	orrs	r3, r2
 800252a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800252c:	4934      	ldr	r1, [pc, #208]	; (8002600 <HAL_GPIO_Init+0x59c>)
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	089b      	lsrs	r3, r3, #2
 8002532:	3302      	adds	r3, #2
 8002534:	69ba      	ldr	r2, [r7, #24]
 8002536:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800253a:	4b3a      	ldr	r3, [pc, #232]	; (8002624 <HAL_GPIO_Init+0x5c0>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	43db      	mvns	r3, r3
 8002544:	69ba      	ldr	r2, [r7, #24]
 8002546:	4013      	ands	r3, r2
 8002548:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d003      	beq.n	800255e <HAL_GPIO_Init+0x4fa>
        {
          temp |= iocurrent;
 8002556:	69ba      	ldr	r2, [r7, #24]
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	4313      	orrs	r3, r2
 800255c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800255e:	4a31      	ldr	r2, [pc, #196]	; (8002624 <HAL_GPIO_Init+0x5c0>)
 8002560:	69bb      	ldr	r3, [r7, #24]
 8002562:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002564:	4b2f      	ldr	r3, [pc, #188]	; (8002624 <HAL_GPIO_Init+0x5c0>)
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	43db      	mvns	r3, r3
 800256e:	69ba      	ldr	r2, [r7, #24]
 8002570:	4013      	ands	r3, r2
 8002572:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800257c:	2b00      	cmp	r3, #0
 800257e:	d003      	beq.n	8002588 <HAL_GPIO_Init+0x524>
        {
          temp |= iocurrent;
 8002580:	69ba      	ldr	r2, [r7, #24]
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	4313      	orrs	r3, r2
 8002586:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002588:	4a26      	ldr	r2, [pc, #152]	; (8002624 <HAL_GPIO_Init+0x5c0>)
 800258a:	69bb      	ldr	r3, [r7, #24]
 800258c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800258e:	4b25      	ldr	r3, [pc, #148]	; (8002624 <HAL_GPIO_Init+0x5c0>)
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	43db      	mvns	r3, r3
 8002598:	69ba      	ldr	r2, [r7, #24]
 800259a:	4013      	ands	r3, r2
 800259c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d003      	beq.n	80025b2 <HAL_GPIO_Init+0x54e>
        {
          temp |= iocurrent;
 80025aa:	69ba      	ldr	r2, [r7, #24]
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	4313      	orrs	r3, r2
 80025b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80025b2:	4a1c      	ldr	r2, [pc, #112]	; (8002624 <HAL_GPIO_Init+0x5c0>)
 80025b4:	69bb      	ldr	r3, [r7, #24]
 80025b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80025b8:	4b1a      	ldr	r3, [pc, #104]	; (8002624 <HAL_GPIO_Init+0x5c0>)
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	43db      	mvns	r3, r3
 80025c2:	69ba      	ldr	r2, [r7, #24]
 80025c4:	4013      	ands	r3, r2
 80025c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d003      	beq.n	80025dc <HAL_GPIO_Init+0x578>
        {
          temp |= iocurrent;
 80025d4:	69ba      	ldr	r2, [r7, #24]
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	4313      	orrs	r3, r2
 80025da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80025dc:	4a11      	ldr	r2, [pc, #68]	; (8002624 <HAL_GPIO_Init+0x5c0>)
 80025de:	69bb      	ldr	r3, [r7, #24]
 80025e0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025e2:	69fb      	ldr	r3, [r7, #28]
 80025e4:	3301      	adds	r3, #1
 80025e6:	61fb      	str	r3, [r7, #28]
 80025e8:	69fb      	ldr	r3, [r7, #28]
 80025ea:	2b0f      	cmp	r3, #15
 80025ec:	f67f adce 	bls.w	800218c <HAL_GPIO_Init+0x128>
      }
    }
  }
}
 80025f0:	bf00      	nop
 80025f2:	bf00      	nop
 80025f4:	3720      	adds	r7, #32
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	40023800 	.word	0x40023800
 8002600:	40013800 	.word	0x40013800
 8002604:	40020000 	.word	0x40020000
 8002608:	40020400 	.word	0x40020400
 800260c:	40020800 	.word	0x40020800
 8002610:	40020c00 	.word	0x40020c00
 8002614:	40021000 	.word	0x40021000
 8002618:	40021400 	.word	0x40021400
 800261c:	40021800 	.word	0x40021800
 8002620:	40021c00 	.word	0x40021c00
 8002624:	40013c00 	.word	0x40013c00

08002628 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b082      	sub	sp, #8
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	460b      	mov	r3, r1
 8002632:	807b      	strh	r3, [r7, #2]
 8002634:	4613      	mov	r3, r2
 8002636:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002638:	887b      	ldrh	r3, [r7, #2]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d004      	beq.n	8002648 <HAL_GPIO_WritePin+0x20>
 800263e:	887b      	ldrh	r3, [r7, #2]
 8002640:	0c1b      	lsrs	r3, r3, #16
 8002642:	041b      	lsls	r3, r3, #16
 8002644:	2b00      	cmp	r3, #0
 8002646:	d004      	beq.n	8002652 <HAL_GPIO_WritePin+0x2a>
 8002648:	f240 119d 	movw	r1, #413	; 0x19d
 800264c:	480e      	ldr	r0, [pc, #56]	; (8002688 <HAL_GPIO_WritePin+0x60>)
 800264e:	f010 feac 	bl	80133aa <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8002652:	787b      	ldrb	r3, [r7, #1]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d007      	beq.n	8002668 <HAL_GPIO_WritePin+0x40>
 8002658:	787b      	ldrb	r3, [r7, #1]
 800265a:	2b01      	cmp	r3, #1
 800265c:	d004      	beq.n	8002668 <HAL_GPIO_WritePin+0x40>
 800265e:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 8002662:	4809      	ldr	r0, [pc, #36]	; (8002688 <HAL_GPIO_WritePin+0x60>)
 8002664:	f010 fea1 	bl	80133aa <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8002668:	787b      	ldrb	r3, [r7, #1]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d003      	beq.n	8002676 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800266e:	887a      	ldrh	r2, [r7, #2]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002674:	e003      	b.n	800267e <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002676:	887b      	ldrh	r3, [r7, #2]
 8002678:	041a      	lsls	r2, r3, #16
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	619a      	str	r2, [r3, #24]
}
 800267e:	bf00      	nop
 8002680:	3708      	adds	r7, #8
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	08014dc4 	.word	0x08014dc4

0800268c <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b084      	sub	sp, #16
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
 8002694:	460b      	mov	r3, r1
 8002696:	807b      	strh	r3, [r7, #2]
  uint32_t odr;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002698:	887b      	ldrh	r3, [r7, #2]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d004      	beq.n	80026a8 <HAL_GPIO_TogglePin+0x1c>
 800269e:	887b      	ldrh	r3, [r7, #2]
 80026a0:	0c1b      	lsrs	r3, r3, #16
 80026a2:	041b      	lsls	r3, r3, #16
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d004      	beq.n	80026b2 <HAL_GPIO_TogglePin+0x26>
 80026a8:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 80026ac:	480a      	ldr	r0, [pc, #40]	; (80026d8 <HAL_GPIO_TogglePin+0x4c>)
 80026ae:	f010 fe7c 	bl	80133aa <assert_failed>

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	695b      	ldr	r3, [r3, #20]
 80026b6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80026b8:	887a      	ldrh	r2, [r7, #2]
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	4013      	ands	r3, r2
 80026be:	041a      	lsls	r2, r3, #16
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	43d9      	mvns	r1, r3
 80026c4:	887b      	ldrh	r3, [r7, #2]
 80026c6:	400b      	ands	r3, r1
 80026c8:	431a      	orrs	r2, r3
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	619a      	str	r2, [r3, #24]
}
 80026ce:	bf00      	nop
 80026d0:	3710      	adds	r7, #16
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	08014dc4 	.word	0x08014dc4

080026dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b086      	sub	sp, #24
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d101      	bne.n	80026ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e314      	b.n	8002d18 <HAL_RCC_OscConfig+0x63c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	2b0f      	cmp	r3, #15
 80026f4:	d903      	bls.n	80026fe <HAL_RCC_OscConfig+0x22>
 80026f6:	21e8      	movs	r1, #232	; 0xe8
 80026f8:	4897      	ldr	r0, [pc, #604]	; (8002958 <HAL_RCC_OscConfig+0x27c>)
 80026fa:	f010 fe56 	bl	80133aa <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0301 	and.w	r3, r3, #1
 8002706:	2b00      	cmp	r3, #0
 8002708:	f000 8088 	beq.w	800281c <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d00d      	beq.n	8002730 <HAL_RCC_OscConfig+0x54>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800271c:	d008      	beq.n	8002730 <HAL_RCC_OscConfig+0x54>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002726:	d003      	beq.n	8002730 <HAL_RCC_OscConfig+0x54>
 8002728:	21ed      	movs	r1, #237	; 0xed
 800272a:	488b      	ldr	r0, [pc, #556]	; (8002958 <HAL_RCC_OscConfig+0x27c>)
 800272c:	f010 fe3d 	bl	80133aa <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002730:	4b8a      	ldr	r3, [pc, #552]	; (800295c <HAL_RCC_OscConfig+0x280>)
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	f003 030c 	and.w	r3, r3, #12
 8002738:	2b04      	cmp	r3, #4
 800273a:	d00c      	beq.n	8002756 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800273c:	4b87      	ldr	r3, [pc, #540]	; (800295c <HAL_RCC_OscConfig+0x280>)
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002744:	2b08      	cmp	r3, #8
 8002746:	d112      	bne.n	800276e <HAL_RCC_OscConfig+0x92>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002748:	4b84      	ldr	r3, [pc, #528]	; (800295c <HAL_RCC_OscConfig+0x280>)
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002750:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002754:	d10b      	bne.n	800276e <HAL_RCC_OscConfig+0x92>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002756:	4b81      	ldr	r3, [pc, #516]	; (800295c <HAL_RCC_OscConfig+0x280>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d05b      	beq.n	800281a <HAL_RCC_OscConfig+0x13e>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d157      	bne.n	800281a <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e2d4      	b.n	8002d18 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002776:	d106      	bne.n	8002786 <HAL_RCC_OscConfig+0xaa>
 8002778:	4b78      	ldr	r3, [pc, #480]	; (800295c <HAL_RCC_OscConfig+0x280>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a77      	ldr	r2, [pc, #476]	; (800295c <HAL_RCC_OscConfig+0x280>)
 800277e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002782:	6013      	str	r3, [r2, #0]
 8002784:	e01d      	b.n	80027c2 <HAL_RCC_OscConfig+0xe6>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800278e:	d10c      	bne.n	80027aa <HAL_RCC_OscConfig+0xce>
 8002790:	4b72      	ldr	r3, [pc, #456]	; (800295c <HAL_RCC_OscConfig+0x280>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a71      	ldr	r2, [pc, #452]	; (800295c <HAL_RCC_OscConfig+0x280>)
 8002796:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800279a:	6013      	str	r3, [r2, #0]
 800279c:	4b6f      	ldr	r3, [pc, #444]	; (800295c <HAL_RCC_OscConfig+0x280>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a6e      	ldr	r2, [pc, #440]	; (800295c <HAL_RCC_OscConfig+0x280>)
 80027a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027a6:	6013      	str	r3, [r2, #0]
 80027a8:	e00b      	b.n	80027c2 <HAL_RCC_OscConfig+0xe6>
 80027aa:	4b6c      	ldr	r3, [pc, #432]	; (800295c <HAL_RCC_OscConfig+0x280>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a6b      	ldr	r2, [pc, #428]	; (800295c <HAL_RCC_OscConfig+0x280>)
 80027b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027b4:	6013      	str	r3, [r2, #0]
 80027b6:	4b69      	ldr	r3, [pc, #420]	; (800295c <HAL_RCC_OscConfig+0x280>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a68      	ldr	r2, [pc, #416]	; (800295c <HAL_RCC_OscConfig+0x280>)
 80027bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027c0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d013      	beq.n	80027f2 <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ca:	f7fd ff09 	bl	80005e0 <HAL_GetTick>
 80027ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027d0:	e008      	b.n	80027e4 <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027d2:	f7fd ff05 	bl	80005e0 <HAL_GetTick>
 80027d6:	4602      	mov	r2, r0
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	1ad3      	subs	r3, r2, r3
 80027dc:	2b64      	cmp	r3, #100	; 0x64
 80027de:	d901      	bls.n	80027e4 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80027e0:	2303      	movs	r3, #3
 80027e2:	e299      	b.n	8002d18 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027e4:	4b5d      	ldr	r3, [pc, #372]	; (800295c <HAL_RCC_OscConfig+0x280>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d0f0      	beq.n	80027d2 <HAL_RCC_OscConfig+0xf6>
 80027f0:	e014      	b.n	800281c <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027f2:	f7fd fef5 	bl	80005e0 <HAL_GetTick>
 80027f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027f8:	e008      	b.n	800280c <HAL_RCC_OscConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027fa:	f7fd fef1 	bl	80005e0 <HAL_GetTick>
 80027fe:	4602      	mov	r2, r0
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	1ad3      	subs	r3, r2, r3
 8002804:	2b64      	cmp	r3, #100	; 0x64
 8002806:	d901      	bls.n	800280c <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8002808:	2303      	movs	r3, #3
 800280a:	e285      	b.n	8002d18 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800280c:	4b53      	ldr	r3, [pc, #332]	; (800295c <HAL_RCC_OscConfig+0x280>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002814:	2b00      	cmp	r3, #0
 8002816:	d1f0      	bne.n	80027fa <HAL_RCC_OscConfig+0x11e>
 8002818:	e000      	b.n	800281c <HAL_RCC_OscConfig+0x140>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800281a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 0302 	and.w	r3, r3, #2
 8002824:	2b00      	cmp	r3, #0
 8002826:	d079      	beq.n	800291c <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d008      	beq.n	8002842 <HAL_RCC_OscConfig+0x166>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	2b01      	cmp	r3, #1
 8002836:	d004      	beq.n	8002842 <HAL_RCC_OscConfig+0x166>
 8002838:	f240 111f 	movw	r1, #287	; 0x11f
 800283c:	4846      	ldr	r0, [pc, #280]	; (8002958 <HAL_RCC_OscConfig+0x27c>)
 800283e:	f010 fdb4 	bl	80133aa <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	691b      	ldr	r3, [r3, #16]
 8002846:	2b1f      	cmp	r3, #31
 8002848:	d904      	bls.n	8002854 <HAL_RCC_OscConfig+0x178>
 800284a:	f44f 7190 	mov.w	r1, #288	; 0x120
 800284e:	4842      	ldr	r0, [pc, #264]	; (8002958 <HAL_RCC_OscConfig+0x27c>)
 8002850:	f010 fdab 	bl	80133aa <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002854:	4b41      	ldr	r3, [pc, #260]	; (800295c <HAL_RCC_OscConfig+0x280>)
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	f003 030c 	and.w	r3, r3, #12
 800285c:	2b00      	cmp	r3, #0
 800285e:	d00b      	beq.n	8002878 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002860:	4b3e      	ldr	r3, [pc, #248]	; (800295c <HAL_RCC_OscConfig+0x280>)
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002868:	2b08      	cmp	r3, #8
 800286a:	d11c      	bne.n	80028a6 <HAL_RCC_OscConfig+0x1ca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800286c:	4b3b      	ldr	r3, [pc, #236]	; (800295c <HAL_RCC_OscConfig+0x280>)
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002874:	2b00      	cmp	r3, #0
 8002876:	d116      	bne.n	80028a6 <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002878:	4b38      	ldr	r3, [pc, #224]	; (800295c <HAL_RCC_OscConfig+0x280>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 0302 	and.w	r3, r3, #2
 8002880:	2b00      	cmp	r3, #0
 8002882:	d005      	beq.n	8002890 <HAL_RCC_OscConfig+0x1b4>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	2b01      	cmp	r3, #1
 800288a:	d001      	beq.n	8002890 <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	e243      	b.n	8002d18 <HAL_RCC_OscConfig+0x63c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002890:	4b32      	ldr	r3, [pc, #200]	; (800295c <HAL_RCC_OscConfig+0x280>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	691b      	ldr	r3, [r3, #16]
 800289c:	00db      	lsls	r3, r3, #3
 800289e:	492f      	ldr	r1, [pc, #188]	; (800295c <HAL_RCC_OscConfig+0x280>)
 80028a0:	4313      	orrs	r3, r2
 80028a2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028a4:	e03a      	b.n	800291c <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	68db      	ldr	r3, [r3, #12]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d020      	beq.n	80028f0 <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028ae:	4b2c      	ldr	r3, [pc, #176]	; (8002960 <HAL_RCC_OscConfig+0x284>)
 80028b0:	2201      	movs	r2, #1
 80028b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028b4:	f7fd fe94 	bl	80005e0 <HAL_GetTick>
 80028b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028ba:	e008      	b.n	80028ce <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028bc:	f7fd fe90 	bl	80005e0 <HAL_GetTick>
 80028c0:	4602      	mov	r2, r0
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	2b02      	cmp	r3, #2
 80028c8:	d901      	bls.n	80028ce <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80028ca:	2303      	movs	r3, #3
 80028cc:	e224      	b.n	8002d18 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028ce:	4b23      	ldr	r3, [pc, #140]	; (800295c <HAL_RCC_OscConfig+0x280>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 0302 	and.w	r3, r3, #2
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d0f0      	beq.n	80028bc <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028da:	4b20      	ldr	r3, [pc, #128]	; (800295c <HAL_RCC_OscConfig+0x280>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	691b      	ldr	r3, [r3, #16]
 80028e6:	00db      	lsls	r3, r3, #3
 80028e8:	491c      	ldr	r1, [pc, #112]	; (800295c <HAL_RCC_OscConfig+0x280>)
 80028ea:	4313      	orrs	r3, r2
 80028ec:	600b      	str	r3, [r1, #0]
 80028ee:	e015      	b.n	800291c <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028f0:	4b1b      	ldr	r3, [pc, #108]	; (8002960 <HAL_RCC_OscConfig+0x284>)
 80028f2:	2200      	movs	r2, #0
 80028f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028f6:	f7fd fe73 	bl	80005e0 <HAL_GetTick>
 80028fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028fc:	e008      	b.n	8002910 <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028fe:	f7fd fe6f 	bl	80005e0 <HAL_GetTick>
 8002902:	4602      	mov	r2, r0
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	1ad3      	subs	r3, r2, r3
 8002908:	2b02      	cmp	r3, #2
 800290a:	d901      	bls.n	8002910 <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 800290c:	2303      	movs	r3, #3
 800290e:	e203      	b.n	8002d18 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002910:	4b12      	ldr	r3, [pc, #72]	; (800295c <HAL_RCC_OscConfig+0x280>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 0302 	and.w	r3, r3, #2
 8002918:	2b00      	cmp	r3, #0
 800291a:	d1f0      	bne.n	80028fe <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 0308 	and.w	r3, r3, #8
 8002924:	2b00      	cmp	r3, #0
 8002926:	d045      	beq.n	80029b4 <HAL_RCC_OscConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	695b      	ldr	r3, [r3, #20]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d008      	beq.n	8002942 <HAL_RCC_OscConfig+0x266>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	695b      	ldr	r3, [r3, #20]
 8002934:	2b01      	cmp	r3, #1
 8002936:	d004      	beq.n	8002942 <HAL_RCC_OscConfig+0x266>
 8002938:	f44f 71b0 	mov.w	r1, #352	; 0x160
 800293c:	4806      	ldr	r0, [pc, #24]	; (8002958 <HAL_RCC_OscConfig+0x27c>)
 800293e:	f010 fd34 	bl	80133aa <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	695b      	ldr	r3, [r3, #20]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d01e      	beq.n	8002988 <HAL_RCC_OscConfig+0x2ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800294a:	4b06      	ldr	r3, [pc, #24]	; (8002964 <HAL_RCC_OscConfig+0x288>)
 800294c:	2201      	movs	r2, #1
 800294e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002950:	f7fd fe46 	bl	80005e0 <HAL_GetTick>
 8002954:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002956:	e010      	b.n	800297a <HAL_RCC_OscConfig+0x29e>
 8002958:	08014e00 	.word	0x08014e00
 800295c:	40023800 	.word	0x40023800
 8002960:	42470000 	.word	0x42470000
 8002964:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002968:	f7fd fe3a 	bl	80005e0 <HAL_GetTick>
 800296c:	4602      	mov	r2, r0
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	2b02      	cmp	r3, #2
 8002974:	d901      	bls.n	800297a <HAL_RCC_OscConfig+0x29e>
        {
          return HAL_TIMEOUT;
 8002976:	2303      	movs	r3, #3
 8002978:	e1ce      	b.n	8002d18 <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800297a:	4b5e      	ldr	r3, [pc, #376]	; (8002af4 <HAL_RCC_OscConfig+0x418>)
 800297c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800297e:	f003 0302 	and.w	r3, r3, #2
 8002982:	2b00      	cmp	r3, #0
 8002984:	d0f0      	beq.n	8002968 <HAL_RCC_OscConfig+0x28c>
 8002986:	e015      	b.n	80029b4 <HAL_RCC_OscConfig+0x2d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002988:	4b5b      	ldr	r3, [pc, #364]	; (8002af8 <HAL_RCC_OscConfig+0x41c>)
 800298a:	2200      	movs	r2, #0
 800298c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800298e:	f7fd fe27 	bl	80005e0 <HAL_GetTick>
 8002992:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002994:	e008      	b.n	80029a8 <HAL_RCC_OscConfig+0x2cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002996:	f7fd fe23 	bl	80005e0 <HAL_GetTick>
 800299a:	4602      	mov	r2, r0
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	1ad3      	subs	r3, r2, r3
 80029a0:	2b02      	cmp	r3, #2
 80029a2:	d901      	bls.n	80029a8 <HAL_RCC_OscConfig+0x2cc>
        {
          return HAL_TIMEOUT;
 80029a4:	2303      	movs	r3, #3
 80029a6:	e1b7      	b.n	8002d18 <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029a8:	4b52      	ldr	r3, [pc, #328]	; (8002af4 <HAL_RCC_OscConfig+0x418>)
 80029aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029ac:	f003 0302 	and.w	r3, r3, #2
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d1f0      	bne.n	8002996 <HAL_RCC_OscConfig+0x2ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 0304 	and.w	r3, r3, #4
 80029bc:	2b00      	cmp	r3, #0
 80029be:	f000 80b0 	beq.w	8002b22 <HAL_RCC_OscConfig+0x446>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029c2:	2300      	movs	r3, #0
 80029c4:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d00c      	beq.n	80029e8 <HAL_RCC_OscConfig+0x30c>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d008      	beq.n	80029e8 <HAL_RCC_OscConfig+0x30c>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	2b05      	cmp	r3, #5
 80029dc:	d004      	beq.n	80029e8 <HAL_RCC_OscConfig+0x30c>
 80029de:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 80029e2:	4846      	ldr	r0, [pc, #280]	; (8002afc <HAL_RCC_OscConfig+0x420>)
 80029e4:	f010 fce1 	bl	80133aa <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029e8:	4b42      	ldr	r3, [pc, #264]	; (8002af4 <HAL_RCC_OscConfig+0x418>)
 80029ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d10f      	bne.n	8002a14 <HAL_RCC_OscConfig+0x338>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029f4:	2300      	movs	r3, #0
 80029f6:	60bb      	str	r3, [r7, #8]
 80029f8:	4b3e      	ldr	r3, [pc, #248]	; (8002af4 <HAL_RCC_OscConfig+0x418>)
 80029fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fc:	4a3d      	ldr	r2, [pc, #244]	; (8002af4 <HAL_RCC_OscConfig+0x418>)
 80029fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a02:	6413      	str	r3, [r2, #64]	; 0x40
 8002a04:	4b3b      	ldr	r3, [pc, #236]	; (8002af4 <HAL_RCC_OscConfig+0x418>)
 8002a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a0c:	60bb      	str	r3, [r7, #8]
 8002a0e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a10:	2301      	movs	r3, #1
 8002a12:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a14:	4b3a      	ldr	r3, [pc, #232]	; (8002b00 <HAL_RCC_OscConfig+0x424>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d118      	bne.n	8002a52 <HAL_RCC_OscConfig+0x376>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a20:	4b37      	ldr	r3, [pc, #220]	; (8002b00 <HAL_RCC_OscConfig+0x424>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a36      	ldr	r2, [pc, #216]	; (8002b00 <HAL_RCC_OscConfig+0x424>)
 8002a26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a2a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a2c:	f7fd fdd8 	bl	80005e0 <HAL_GetTick>
 8002a30:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a32:	e008      	b.n	8002a46 <HAL_RCC_OscConfig+0x36a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a34:	f7fd fdd4 	bl	80005e0 <HAL_GetTick>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	2b02      	cmp	r3, #2
 8002a40:	d901      	bls.n	8002a46 <HAL_RCC_OscConfig+0x36a>
        {
          return HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	e168      	b.n	8002d18 <HAL_RCC_OscConfig+0x63c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a46:	4b2e      	ldr	r3, [pc, #184]	; (8002b00 <HAL_RCC_OscConfig+0x424>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d0f0      	beq.n	8002a34 <HAL_RCC_OscConfig+0x358>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	d106      	bne.n	8002a68 <HAL_RCC_OscConfig+0x38c>
 8002a5a:	4b26      	ldr	r3, [pc, #152]	; (8002af4 <HAL_RCC_OscConfig+0x418>)
 8002a5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a5e:	4a25      	ldr	r2, [pc, #148]	; (8002af4 <HAL_RCC_OscConfig+0x418>)
 8002a60:	f043 0301 	orr.w	r3, r3, #1
 8002a64:	6713      	str	r3, [r2, #112]	; 0x70
 8002a66:	e01c      	b.n	8002aa2 <HAL_RCC_OscConfig+0x3c6>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	2b05      	cmp	r3, #5
 8002a6e:	d10c      	bne.n	8002a8a <HAL_RCC_OscConfig+0x3ae>
 8002a70:	4b20      	ldr	r3, [pc, #128]	; (8002af4 <HAL_RCC_OscConfig+0x418>)
 8002a72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a74:	4a1f      	ldr	r2, [pc, #124]	; (8002af4 <HAL_RCC_OscConfig+0x418>)
 8002a76:	f043 0304 	orr.w	r3, r3, #4
 8002a7a:	6713      	str	r3, [r2, #112]	; 0x70
 8002a7c:	4b1d      	ldr	r3, [pc, #116]	; (8002af4 <HAL_RCC_OscConfig+0x418>)
 8002a7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a80:	4a1c      	ldr	r2, [pc, #112]	; (8002af4 <HAL_RCC_OscConfig+0x418>)
 8002a82:	f043 0301 	orr.w	r3, r3, #1
 8002a86:	6713      	str	r3, [r2, #112]	; 0x70
 8002a88:	e00b      	b.n	8002aa2 <HAL_RCC_OscConfig+0x3c6>
 8002a8a:	4b1a      	ldr	r3, [pc, #104]	; (8002af4 <HAL_RCC_OscConfig+0x418>)
 8002a8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a8e:	4a19      	ldr	r2, [pc, #100]	; (8002af4 <HAL_RCC_OscConfig+0x418>)
 8002a90:	f023 0301 	bic.w	r3, r3, #1
 8002a94:	6713      	str	r3, [r2, #112]	; 0x70
 8002a96:	4b17      	ldr	r3, [pc, #92]	; (8002af4 <HAL_RCC_OscConfig+0x418>)
 8002a98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a9a:	4a16      	ldr	r2, [pc, #88]	; (8002af4 <HAL_RCC_OscConfig+0x418>)
 8002a9c:	f023 0304 	bic.w	r3, r3, #4
 8002aa0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d015      	beq.n	8002ad6 <HAL_RCC_OscConfig+0x3fa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aaa:	f7fd fd99 	bl	80005e0 <HAL_GetTick>
 8002aae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ab0:	e00a      	b.n	8002ac8 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ab2:	f7fd fd95 	bl	80005e0 <HAL_GetTick>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	1ad3      	subs	r3, r2, r3
 8002abc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d901      	bls.n	8002ac8 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8002ac4:	2303      	movs	r3, #3
 8002ac6:	e127      	b.n	8002d18 <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ac8:	4b0a      	ldr	r3, [pc, #40]	; (8002af4 <HAL_RCC_OscConfig+0x418>)
 8002aca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002acc:	f003 0302 	and.w	r3, r3, #2
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d0ee      	beq.n	8002ab2 <HAL_RCC_OscConfig+0x3d6>
 8002ad4:	e01c      	b.n	8002b10 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ad6:	f7fd fd83 	bl	80005e0 <HAL_GetTick>
 8002ada:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002adc:	e012      	b.n	8002b04 <HAL_RCC_OscConfig+0x428>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ade:	f7fd fd7f 	bl	80005e0 <HAL_GetTick>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	1ad3      	subs	r3, r2, r3
 8002ae8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d909      	bls.n	8002b04 <HAL_RCC_OscConfig+0x428>
        {
          return HAL_TIMEOUT;
 8002af0:	2303      	movs	r3, #3
 8002af2:	e111      	b.n	8002d18 <HAL_RCC_OscConfig+0x63c>
 8002af4:	40023800 	.word	0x40023800
 8002af8:	42470e80 	.word	0x42470e80
 8002afc:	08014e00 	.word	0x08014e00
 8002b00:	40007000 	.word	0x40007000
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b04:	4b86      	ldr	r3, [pc, #536]	; (8002d20 <HAL_RCC_OscConfig+0x644>)
 8002b06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b08:	f003 0302 	and.w	r3, r3, #2
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d1e6      	bne.n	8002ade <HAL_RCC_OscConfig+0x402>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b10:	7dfb      	ldrb	r3, [r7, #23]
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d105      	bne.n	8002b22 <HAL_RCC_OscConfig+0x446>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b16:	4b82      	ldr	r3, [pc, #520]	; (8002d20 <HAL_RCC_OscConfig+0x644>)
 8002b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1a:	4a81      	ldr	r2, [pc, #516]	; (8002d20 <HAL_RCC_OscConfig+0x644>)
 8002b1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b20:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	699b      	ldr	r3, [r3, #24]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d00c      	beq.n	8002b44 <HAL_RCC_OscConfig+0x468>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	699b      	ldr	r3, [r3, #24]
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d008      	beq.n	8002b44 <HAL_RCC_OscConfig+0x468>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	699b      	ldr	r3, [r3, #24]
 8002b36:	2b02      	cmp	r3, #2
 8002b38:	d004      	beq.n	8002b44 <HAL_RCC_OscConfig+0x468>
 8002b3a:	f240 11cf 	movw	r1, #463	; 0x1cf
 8002b3e:	4879      	ldr	r0, [pc, #484]	; (8002d24 <HAL_RCC_OscConfig+0x648>)
 8002b40:	f010 fc33 	bl	80133aa <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	699b      	ldr	r3, [r3, #24]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	f000 80e4 	beq.w	8002d16 <HAL_RCC_OscConfig+0x63a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b4e:	4b74      	ldr	r3, [pc, #464]	; (8002d20 <HAL_RCC_OscConfig+0x644>)
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	f003 030c 	and.w	r3, r3, #12
 8002b56:	2b08      	cmp	r3, #8
 8002b58:	f000 80a5 	beq.w	8002ca6 <HAL_RCC_OscConfig+0x5ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	699b      	ldr	r3, [r3, #24]
 8002b60:	2b02      	cmp	r3, #2
 8002b62:	f040 8089 	bne.w	8002c78 <HAL_RCC_OscConfig+0x59c>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	69db      	ldr	r3, [r3, #28]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d009      	beq.n	8002b82 <HAL_RCC_OscConfig+0x4a6>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	69db      	ldr	r3, [r3, #28]
 8002b72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b76:	d004      	beq.n	8002b82 <HAL_RCC_OscConfig+0x4a6>
 8002b78:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8002b7c:	4869      	ldr	r0, [pc, #420]	; (8002d24 <HAL_RCC_OscConfig+0x648>)
 8002b7e:	f010 fc14 	bl	80133aa <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6a1b      	ldr	r3, [r3, #32]
 8002b86:	2b3f      	cmp	r3, #63	; 0x3f
 8002b88:	d904      	bls.n	8002b94 <HAL_RCC_OscConfig+0x4b8>
 8002b8a:	f240 11d9 	movw	r1, #473	; 0x1d9
 8002b8e:	4865      	ldr	r0, [pc, #404]	; (8002d24 <HAL_RCC_OscConfig+0x648>)
 8002b90:	f010 fc0b 	bl	80133aa <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b98:	2b31      	cmp	r3, #49	; 0x31
 8002b9a:	d904      	bls.n	8002ba6 <HAL_RCC_OscConfig+0x4ca>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba0:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8002ba4:	d904      	bls.n	8002bb0 <HAL_RCC_OscConfig+0x4d4>
 8002ba6:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 8002baa:	485e      	ldr	r0, [pc, #376]	; (8002d24 <HAL_RCC_OscConfig+0x648>)
 8002bac:	f010 fbfd 	bl	80133aa <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bb4:	2b02      	cmp	r3, #2
 8002bb6:	d010      	beq.n	8002bda <HAL_RCC_OscConfig+0x4fe>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bbc:	2b04      	cmp	r3, #4
 8002bbe:	d00c      	beq.n	8002bda <HAL_RCC_OscConfig+0x4fe>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bc4:	2b06      	cmp	r3, #6
 8002bc6:	d008      	beq.n	8002bda <HAL_RCC_OscConfig+0x4fe>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bcc:	2b08      	cmp	r3, #8
 8002bce:	d004      	beq.n	8002bda <HAL_RCC_OscConfig+0x4fe>
 8002bd0:	f240 11db 	movw	r1, #475	; 0x1db
 8002bd4:	4853      	ldr	r0, [pc, #332]	; (8002d24 <HAL_RCC_OscConfig+0x648>)
 8002bd6:	f010 fbe8 	bl	80133aa <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d903      	bls.n	8002bea <HAL_RCC_OscConfig+0x50e>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be6:	2b0f      	cmp	r3, #15
 8002be8:	d904      	bls.n	8002bf4 <HAL_RCC_OscConfig+0x518>
 8002bea:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 8002bee:	484d      	ldr	r0, [pc, #308]	; (8002d24 <HAL_RCC_OscConfig+0x648>)
 8002bf0:	f010 fbdb 	bl	80133aa <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bf4:	4b4c      	ldr	r3, [pc, #304]	; (8002d28 <HAL_RCC_OscConfig+0x64c>)
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bfa:	f7fd fcf1 	bl	80005e0 <HAL_GetTick>
 8002bfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c00:	e008      	b.n	8002c14 <HAL_RCC_OscConfig+0x538>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c02:	f7fd fced 	bl	80005e0 <HAL_GetTick>
 8002c06:	4602      	mov	r2, r0
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	2b02      	cmp	r3, #2
 8002c0e:	d901      	bls.n	8002c14 <HAL_RCC_OscConfig+0x538>
          {
            return HAL_TIMEOUT;
 8002c10:	2303      	movs	r3, #3
 8002c12:	e081      	b.n	8002d18 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c14:	4b42      	ldr	r3, [pc, #264]	; (8002d20 <HAL_RCC_OscConfig+0x644>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d1f0      	bne.n	8002c02 <HAL_RCC_OscConfig+0x526>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	69da      	ldr	r2, [r3, #28]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6a1b      	ldr	r3, [r3, #32]
 8002c28:	431a      	orrs	r2, r3
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c2e:	019b      	lsls	r3, r3, #6
 8002c30:	431a      	orrs	r2, r3
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c36:	085b      	lsrs	r3, r3, #1
 8002c38:	3b01      	subs	r3, #1
 8002c3a:	041b      	lsls	r3, r3, #16
 8002c3c:	431a      	orrs	r2, r3
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c42:	061b      	lsls	r3, r3, #24
 8002c44:	4936      	ldr	r1, [pc, #216]	; (8002d20 <HAL_RCC_OscConfig+0x644>)
 8002c46:	4313      	orrs	r3, r2
 8002c48:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c4a:	4b37      	ldr	r3, [pc, #220]	; (8002d28 <HAL_RCC_OscConfig+0x64c>)
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c50:	f7fd fcc6 	bl	80005e0 <HAL_GetTick>
 8002c54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c56:	e008      	b.n	8002c6a <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c58:	f7fd fcc2 	bl	80005e0 <HAL_GetTick>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	2b02      	cmp	r3, #2
 8002c64:	d901      	bls.n	8002c6a <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	e056      	b.n	8002d18 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c6a:	4b2d      	ldr	r3, [pc, #180]	; (8002d20 <HAL_RCC_OscConfig+0x644>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d0f0      	beq.n	8002c58 <HAL_RCC_OscConfig+0x57c>
 8002c76:	e04e      	b.n	8002d16 <HAL_RCC_OscConfig+0x63a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c78:	4b2b      	ldr	r3, [pc, #172]	; (8002d28 <HAL_RCC_OscConfig+0x64c>)
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c7e:	f7fd fcaf 	bl	80005e0 <HAL_GetTick>
 8002c82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c84:	e008      	b.n	8002c98 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c86:	f7fd fcab 	bl	80005e0 <HAL_GetTick>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	1ad3      	subs	r3, r2, r3
 8002c90:	2b02      	cmp	r3, #2
 8002c92:	d901      	bls.n	8002c98 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8002c94:	2303      	movs	r3, #3
 8002c96:	e03f      	b.n	8002d18 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c98:	4b21      	ldr	r3, [pc, #132]	; (8002d20 <HAL_RCC_OscConfig+0x644>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d1f0      	bne.n	8002c86 <HAL_RCC_OscConfig+0x5aa>
 8002ca4:	e037      	b.n	8002d16 <HAL_RCC_OscConfig+0x63a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	699b      	ldr	r3, [r3, #24]
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	d101      	bne.n	8002cb2 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e032      	b.n	8002d18 <HAL_RCC_OscConfig+0x63c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002cb2:	4b1b      	ldr	r3, [pc, #108]	; (8002d20 <HAL_RCC_OscConfig+0x644>)
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	699b      	ldr	r3, [r3, #24]
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d028      	beq.n	8002d12 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	d121      	bne.n	8002d12 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d11a      	bne.n	8002d12 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002cdc:	68fa      	ldr	r2, [r7, #12]
 8002cde:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	687a      	ldr	r2, [r7, #4]
 8002ce6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002ce8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d111      	bne.n	8002d12 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cf8:	085b      	lsrs	r3, r3, #1
 8002cfa:	3b01      	subs	r3, #1
 8002cfc:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002cfe:	429a      	cmp	r2, r3
 8002d00:	d107      	bne.n	8002d12 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d0c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d001      	beq.n	8002d16 <HAL_RCC_OscConfig+0x63a>
#endif
        {
          return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e000      	b.n	8002d18 <HAL_RCC_OscConfig+0x63c>
        }
      }
    }
  }
  return HAL_OK;
 8002d16:	2300      	movs	r3, #0
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	3718      	adds	r7, #24
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}
 8002d20:	40023800 	.word	0x40023800
 8002d24:	08014e00 	.word	0x08014e00
 8002d28:	42470060 	.word	0x42470060

08002d2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b084      	sub	sp, #16
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
 8002d34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d101      	bne.n	8002d40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e174      	b.n	800302a <HAL_RCC_ClockConfig+0x2fe>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d003      	beq.n	8002d50 <HAL_RCC_ClockConfig+0x24>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	2b0f      	cmp	r3, #15
 8002d4e:	d904      	bls.n	8002d5a <HAL_RCC_ClockConfig+0x2e>
 8002d50:	f44f 7117 	mov.w	r1, #604	; 0x25c
 8002d54:	487b      	ldr	r0, [pc, #492]	; (8002f44 <HAL_RCC_ClockConfig+0x218>)
 8002d56:	f010 fb28 	bl	80133aa <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d019      	beq.n	8002d94 <HAL_RCC_ClockConfig+0x68>
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d016      	beq.n	8002d94 <HAL_RCC_ClockConfig+0x68>
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	2b02      	cmp	r3, #2
 8002d6a:	d013      	beq.n	8002d94 <HAL_RCC_ClockConfig+0x68>
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	2b03      	cmp	r3, #3
 8002d70:	d010      	beq.n	8002d94 <HAL_RCC_ClockConfig+0x68>
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	2b04      	cmp	r3, #4
 8002d76:	d00d      	beq.n	8002d94 <HAL_RCC_ClockConfig+0x68>
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	2b05      	cmp	r3, #5
 8002d7c:	d00a      	beq.n	8002d94 <HAL_RCC_ClockConfig+0x68>
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	2b06      	cmp	r3, #6
 8002d82:	d007      	beq.n	8002d94 <HAL_RCC_ClockConfig+0x68>
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	2b07      	cmp	r3, #7
 8002d88:	d004      	beq.n	8002d94 <HAL_RCC_ClockConfig+0x68>
 8002d8a:	f240 215d 	movw	r1, #605	; 0x25d
 8002d8e:	486d      	ldr	r0, [pc, #436]	; (8002f44 <HAL_RCC_ClockConfig+0x218>)
 8002d90:	f010 fb0b 	bl	80133aa <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d94:	4b6c      	ldr	r3, [pc, #432]	; (8002f48 <HAL_RCC_ClockConfig+0x21c>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f003 0307 	and.w	r3, r3, #7
 8002d9c:	683a      	ldr	r2, [r7, #0]
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	d90c      	bls.n	8002dbc <HAL_RCC_ClockConfig+0x90>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002da2:	4b69      	ldr	r3, [pc, #420]	; (8002f48 <HAL_RCC_ClockConfig+0x21c>)
 8002da4:	683a      	ldr	r2, [r7, #0]
 8002da6:	b2d2      	uxtb	r2, r2
 8002da8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002daa:	4b67      	ldr	r3, [pc, #412]	; (8002f48 <HAL_RCC_ClockConfig+0x21c>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0307 	and.w	r3, r3, #7
 8002db2:	683a      	ldr	r2, [r7, #0]
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d001      	beq.n	8002dbc <HAL_RCC_ClockConfig+0x90>
    {
      return HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e136      	b.n	800302a <HAL_RCC_ClockConfig+0x2fe>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 0302 	and.w	r3, r3, #2
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d049      	beq.n	8002e5c <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 0304 	and.w	r3, r3, #4
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d005      	beq.n	8002de0 <HAL_RCC_ClockConfig+0xb4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002dd4:	4b5d      	ldr	r3, [pc, #372]	; (8002f4c <HAL_RCC_ClockConfig+0x220>)
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	4a5c      	ldr	r2, [pc, #368]	; (8002f4c <HAL_RCC_ClockConfig+0x220>)
 8002dda:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002dde:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 0308 	and.w	r3, r3, #8
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d005      	beq.n	8002df8 <HAL_RCC_ClockConfig+0xcc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002dec:	4b57      	ldr	r3, [pc, #348]	; (8002f4c <HAL_RCC_ClockConfig+0x220>)
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	4a56      	ldr	r2, [pc, #344]	; (8002f4c <HAL_RCC_ClockConfig+0x220>)
 8002df2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002df6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d024      	beq.n	8002e4a <HAL_RCC_ClockConfig+0x11e>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	2b80      	cmp	r3, #128	; 0x80
 8002e06:	d020      	beq.n	8002e4a <HAL_RCC_ClockConfig+0x11e>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	2b90      	cmp	r3, #144	; 0x90
 8002e0e:	d01c      	beq.n	8002e4a <HAL_RCC_ClockConfig+0x11e>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	2ba0      	cmp	r3, #160	; 0xa0
 8002e16:	d018      	beq.n	8002e4a <HAL_RCC_ClockConfig+0x11e>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	2bb0      	cmp	r3, #176	; 0xb0
 8002e1e:	d014      	beq.n	8002e4a <HAL_RCC_ClockConfig+0x11e>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	2bc0      	cmp	r3, #192	; 0xc0
 8002e26:	d010      	beq.n	8002e4a <HAL_RCC_ClockConfig+0x11e>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	2bd0      	cmp	r3, #208	; 0xd0
 8002e2e:	d00c      	beq.n	8002e4a <HAL_RCC_ClockConfig+0x11e>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	2be0      	cmp	r3, #224	; 0xe0
 8002e36:	d008      	beq.n	8002e4a <HAL_RCC_ClockConfig+0x11e>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	2bf0      	cmp	r3, #240	; 0xf0
 8002e3e:	d004      	beq.n	8002e4a <HAL_RCC_ClockConfig+0x11e>
 8002e40:	f44f 7120 	mov.w	r1, #640	; 0x280
 8002e44:	483f      	ldr	r0, [pc, #252]	; (8002f44 <HAL_RCC_ClockConfig+0x218>)
 8002e46:	f010 fab0 	bl	80133aa <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e4a:	4b40      	ldr	r3, [pc, #256]	; (8002f4c <HAL_RCC_ClockConfig+0x220>)
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	493d      	ldr	r1, [pc, #244]	; (8002f4c <HAL_RCC_ClockConfig+0x220>)
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 0301 	and.w	r3, r3, #1
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d059      	beq.n	8002f1c <HAL_RCC_ClockConfig+0x1f0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d010      	beq.n	8002e92 <HAL_RCC_ClockConfig+0x166>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d00c      	beq.n	8002e92 <HAL_RCC_ClockConfig+0x166>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	2b02      	cmp	r3, #2
 8002e7e:	d008      	beq.n	8002e92 <HAL_RCC_ClockConfig+0x166>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	2b03      	cmp	r3, #3
 8002e86:	d004      	beq.n	8002e92 <HAL_RCC_ClockConfig+0x166>
 8002e88:	f240 2187 	movw	r1, #647	; 0x287
 8002e8c:	482d      	ldr	r0, [pc, #180]	; (8002f44 <HAL_RCC_ClockConfig+0x218>)
 8002e8e:	f010 fa8c 	bl	80133aa <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d107      	bne.n	8002eaa <HAL_RCC_ClockConfig+0x17e>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e9a:	4b2c      	ldr	r3, [pc, #176]	; (8002f4c <HAL_RCC_ClockConfig+0x220>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d119      	bne.n	8002eda <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e0bf      	b.n	800302a <HAL_RCC_ClockConfig+0x2fe>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	2b02      	cmp	r3, #2
 8002eb0:	d003      	beq.n	8002eba <HAL_RCC_ClockConfig+0x18e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002eb6:	2b03      	cmp	r3, #3
 8002eb8:	d107      	bne.n	8002eca <HAL_RCC_ClockConfig+0x19e>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002eba:	4b24      	ldr	r3, [pc, #144]	; (8002f4c <HAL_RCC_ClockConfig+0x220>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d109      	bne.n	8002eda <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e0af      	b.n	800302a <HAL_RCC_ClockConfig+0x2fe>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002eca:	4b20      	ldr	r3, [pc, #128]	; (8002f4c <HAL_RCC_ClockConfig+0x220>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 0302 	and.w	r3, r3, #2
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d101      	bne.n	8002eda <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e0a7      	b.n	800302a <HAL_RCC_ClockConfig+0x2fe>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002eda:	4b1c      	ldr	r3, [pc, #112]	; (8002f4c <HAL_RCC_ClockConfig+0x220>)
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	f023 0203 	bic.w	r2, r3, #3
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	4919      	ldr	r1, [pc, #100]	; (8002f4c <HAL_RCC_ClockConfig+0x220>)
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002eec:	f7fd fb78 	bl	80005e0 <HAL_GetTick>
 8002ef0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ef2:	e00a      	b.n	8002f0a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ef4:	f7fd fb74 	bl	80005e0 <HAL_GetTick>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d901      	bls.n	8002f0a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002f06:	2303      	movs	r3, #3
 8002f08:	e08f      	b.n	800302a <HAL_RCC_ClockConfig+0x2fe>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f0a:	4b10      	ldr	r3, [pc, #64]	; (8002f4c <HAL_RCC_ClockConfig+0x220>)
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	f003 020c 	and.w	r2, r3, #12
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	009b      	lsls	r3, r3, #2
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d1eb      	bne.n	8002ef4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f1c:	4b0a      	ldr	r3, [pc, #40]	; (8002f48 <HAL_RCC_ClockConfig+0x21c>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f003 0307 	and.w	r3, r3, #7
 8002f24:	683a      	ldr	r2, [r7, #0]
 8002f26:	429a      	cmp	r2, r3
 8002f28:	d212      	bcs.n	8002f50 <HAL_RCC_ClockConfig+0x224>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f2a:	4b07      	ldr	r3, [pc, #28]	; (8002f48 <HAL_RCC_ClockConfig+0x21c>)
 8002f2c:	683a      	ldr	r2, [r7, #0]
 8002f2e:	b2d2      	uxtb	r2, r2
 8002f30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f32:	4b05      	ldr	r3, [pc, #20]	; (8002f48 <HAL_RCC_ClockConfig+0x21c>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 0307 	and.w	r3, r3, #7
 8002f3a:	683a      	ldr	r2, [r7, #0]
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	d007      	beq.n	8002f50 <HAL_RCC_ClockConfig+0x224>
    {
      return HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	e072      	b.n	800302a <HAL_RCC_ClockConfig+0x2fe>
 8002f44:	08014e00 	.word	0x08014e00
 8002f48:	40023c00 	.word	0x40023c00
 8002f4c:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 0304 	and.w	r3, r3, #4
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d025      	beq.n	8002fa8 <HAL_RCC_ClockConfig+0x27c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	68db      	ldr	r3, [r3, #12]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d018      	beq.n	8002f96 <HAL_RCC_ClockConfig+0x26a>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	68db      	ldr	r3, [r3, #12]
 8002f68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f6c:	d013      	beq.n	8002f96 <HAL_RCC_ClockConfig+0x26a>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	68db      	ldr	r3, [r3, #12]
 8002f72:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002f76:	d00e      	beq.n	8002f96 <HAL_RCC_ClockConfig+0x26a>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8002f80:	d009      	beq.n	8002f96 <HAL_RCC_ClockConfig+0x26a>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	68db      	ldr	r3, [r3, #12]
 8002f86:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8002f8a:	d004      	beq.n	8002f96 <HAL_RCC_ClockConfig+0x26a>
 8002f8c:	f240 21c5 	movw	r1, #709	; 0x2c5
 8002f90:	4828      	ldr	r0, [pc, #160]	; (8003034 <HAL_RCC_ClockConfig+0x308>)
 8002f92:	f010 fa0a 	bl	80133aa <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f96:	4b28      	ldr	r3, [pc, #160]	; (8003038 <HAL_RCC_ClockConfig+0x30c>)
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	68db      	ldr	r3, [r3, #12]
 8002fa2:	4925      	ldr	r1, [pc, #148]	; (8003038 <HAL_RCC_ClockConfig+0x30c>)
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 0308 	and.w	r3, r3, #8
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d026      	beq.n	8003002 <HAL_RCC_ClockConfig+0x2d6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	691b      	ldr	r3, [r3, #16]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d018      	beq.n	8002fee <HAL_RCC_ClockConfig+0x2c2>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	691b      	ldr	r3, [r3, #16]
 8002fc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fc4:	d013      	beq.n	8002fee <HAL_RCC_ClockConfig+0x2c2>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	691b      	ldr	r3, [r3, #16]
 8002fca:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002fce:	d00e      	beq.n	8002fee <HAL_RCC_ClockConfig+0x2c2>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	691b      	ldr	r3, [r3, #16]
 8002fd4:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8002fd8:	d009      	beq.n	8002fee <HAL_RCC_ClockConfig+0x2c2>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	691b      	ldr	r3, [r3, #16]
 8002fde:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8002fe2:	d004      	beq.n	8002fee <HAL_RCC_ClockConfig+0x2c2>
 8002fe4:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8002fe8:	4812      	ldr	r0, [pc, #72]	; (8003034 <HAL_RCC_ClockConfig+0x308>)
 8002fea:	f010 f9de 	bl	80133aa <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002fee:	4b12      	ldr	r3, [pc, #72]	; (8003038 <HAL_RCC_ClockConfig+0x30c>)
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	691b      	ldr	r3, [r3, #16]
 8002ffa:	00db      	lsls	r3, r3, #3
 8002ffc:	490e      	ldr	r1, [pc, #56]	; (8003038 <HAL_RCC_ClockConfig+0x30c>)
 8002ffe:	4313      	orrs	r3, r2
 8003000:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003002:	f000 f821 	bl	8003048 <HAL_RCC_GetSysClockFreq>
 8003006:	4602      	mov	r2, r0
 8003008:	4b0b      	ldr	r3, [pc, #44]	; (8003038 <HAL_RCC_ClockConfig+0x30c>)
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	091b      	lsrs	r3, r3, #4
 800300e:	f003 030f 	and.w	r3, r3, #15
 8003012:	490a      	ldr	r1, [pc, #40]	; (800303c <HAL_RCC_ClockConfig+0x310>)
 8003014:	5ccb      	ldrb	r3, [r1, r3]
 8003016:	fa22 f303 	lsr.w	r3, r2, r3
 800301a:	4a09      	ldr	r2, [pc, #36]	; (8003040 <HAL_RCC_ClockConfig+0x314>)
 800301c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800301e:	4b09      	ldr	r3, [pc, #36]	; (8003044 <HAL_RCC_ClockConfig+0x318>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4618      	mov	r0, r3
 8003024:	f010 f9f8 	bl	8013418 <HAL_InitTick>

  return HAL_OK;
 8003028:	2300      	movs	r3, #0
}
 800302a:	4618      	mov	r0, r3
 800302c:	3710      	adds	r7, #16
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}
 8003032:	bf00      	nop
 8003034:	08014e00 	.word	0x08014e00
 8003038:	40023800 	.word	0x40023800
 800303c:	08017b08 	.word	0x08017b08
 8003040:	20000018 	.word	0x20000018
 8003044:	20000000 	.word	0x20000000

08003048 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003048:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800304c:	b090      	sub	sp, #64	; 0x40
 800304e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003050:	2300      	movs	r3, #0
 8003052:	637b      	str	r3, [r7, #52]	; 0x34
 8003054:	2300      	movs	r3, #0
 8003056:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003058:	2300      	movs	r3, #0
 800305a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800305c:	2300      	movs	r3, #0
 800305e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003060:	4b59      	ldr	r3, [pc, #356]	; (80031c8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	f003 030c 	and.w	r3, r3, #12
 8003068:	2b08      	cmp	r3, #8
 800306a:	d00d      	beq.n	8003088 <HAL_RCC_GetSysClockFreq+0x40>
 800306c:	2b08      	cmp	r3, #8
 800306e:	f200 80a1 	bhi.w	80031b4 <HAL_RCC_GetSysClockFreq+0x16c>
 8003072:	2b00      	cmp	r3, #0
 8003074:	d002      	beq.n	800307c <HAL_RCC_GetSysClockFreq+0x34>
 8003076:	2b04      	cmp	r3, #4
 8003078:	d003      	beq.n	8003082 <HAL_RCC_GetSysClockFreq+0x3a>
 800307a:	e09b      	b.n	80031b4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800307c:	4b53      	ldr	r3, [pc, #332]	; (80031cc <HAL_RCC_GetSysClockFreq+0x184>)
 800307e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003080:	e09b      	b.n	80031ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003082:	4b53      	ldr	r3, [pc, #332]	; (80031d0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003084:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003086:	e098      	b.n	80031ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003088:	4b4f      	ldr	r3, [pc, #316]	; (80031c8 <HAL_RCC_GetSysClockFreq+0x180>)
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003090:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003092:	4b4d      	ldr	r3, [pc, #308]	; (80031c8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800309a:	2b00      	cmp	r3, #0
 800309c:	d028      	beq.n	80030f0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800309e:	4b4a      	ldr	r3, [pc, #296]	; (80031c8 <HAL_RCC_GetSysClockFreq+0x180>)
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	099b      	lsrs	r3, r3, #6
 80030a4:	2200      	movs	r2, #0
 80030a6:	623b      	str	r3, [r7, #32]
 80030a8:	627a      	str	r2, [r7, #36]	; 0x24
 80030aa:	6a3b      	ldr	r3, [r7, #32]
 80030ac:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80030b0:	2100      	movs	r1, #0
 80030b2:	4b47      	ldr	r3, [pc, #284]	; (80031d0 <HAL_RCC_GetSysClockFreq+0x188>)
 80030b4:	fb03 f201 	mul.w	r2, r3, r1
 80030b8:	2300      	movs	r3, #0
 80030ba:	fb00 f303 	mul.w	r3, r0, r3
 80030be:	4413      	add	r3, r2
 80030c0:	4a43      	ldr	r2, [pc, #268]	; (80031d0 <HAL_RCC_GetSysClockFreq+0x188>)
 80030c2:	fba0 1202 	umull	r1, r2, r0, r2
 80030c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80030c8:	460a      	mov	r2, r1
 80030ca:	62ba      	str	r2, [r7, #40]	; 0x28
 80030cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030ce:	4413      	add	r3, r2
 80030d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030d4:	2200      	movs	r2, #0
 80030d6:	61bb      	str	r3, [r7, #24]
 80030d8:	61fa      	str	r2, [r7, #28]
 80030da:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80030de:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80030e2:	f7fd f8c5 	bl	8000270 <__aeabi_uldivmod>
 80030e6:	4602      	mov	r2, r0
 80030e8:	460b      	mov	r3, r1
 80030ea:	4613      	mov	r3, r2
 80030ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030ee:	e053      	b.n	8003198 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030f0:	4b35      	ldr	r3, [pc, #212]	; (80031c8 <HAL_RCC_GetSysClockFreq+0x180>)
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	099b      	lsrs	r3, r3, #6
 80030f6:	2200      	movs	r2, #0
 80030f8:	613b      	str	r3, [r7, #16]
 80030fa:	617a      	str	r2, [r7, #20]
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003102:	f04f 0b00 	mov.w	fp, #0
 8003106:	4652      	mov	r2, sl
 8003108:	465b      	mov	r3, fp
 800310a:	f04f 0000 	mov.w	r0, #0
 800310e:	f04f 0100 	mov.w	r1, #0
 8003112:	0159      	lsls	r1, r3, #5
 8003114:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003118:	0150      	lsls	r0, r2, #5
 800311a:	4602      	mov	r2, r0
 800311c:	460b      	mov	r3, r1
 800311e:	ebb2 080a 	subs.w	r8, r2, sl
 8003122:	eb63 090b 	sbc.w	r9, r3, fp
 8003126:	f04f 0200 	mov.w	r2, #0
 800312a:	f04f 0300 	mov.w	r3, #0
 800312e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003132:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003136:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800313a:	ebb2 0408 	subs.w	r4, r2, r8
 800313e:	eb63 0509 	sbc.w	r5, r3, r9
 8003142:	f04f 0200 	mov.w	r2, #0
 8003146:	f04f 0300 	mov.w	r3, #0
 800314a:	00eb      	lsls	r3, r5, #3
 800314c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003150:	00e2      	lsls	r2, r4, #3
 8003152:	4614      	mov	r4, r2
 8003154:	461d      	mov	r5, r3
 8003156:	eb14 030a 	adds.w	r3, r4, sl
 800315a:	603b      	str	r3, [r7, #0]
 800315c:	eb45 030b 	adc.w	r3, r5, fp
 8003160:	607b      	str	r3, [r7, #4]
 8003162:	f04f 0200 	mov.w	r2, #0
 8003166:	f04f 0300 	mov.w	r3, #0
 800316a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800316e:	4629      	mov	r1, r5
 8003170:	028b      	lsls	r3, r1, #10
 8003172:	4621      	mov	r1, r4
 8003174:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003178:	4621      	mov	r1, r4
 800317a:	028a      	lsls	r2, r1, #10
 800317c:	4610      	mov	r0, r2
 800317e:	4619      	mov	r1, r3
 8003180:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003182:	2200      	movs	r2, #0
 8003184:	60bb      	str	r3, [r7, #8]
 8003186:	60fa      	str	r2, [r7, #12]
 8003188:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800318c:	f7fd f870 	bl	8000270 <__aeabi_uldivmod>
 8003190:	4602      	mov	r2, r0
 8003192:	460b      	mov	r3, r1
 8003194:	4613      	mov	r3, r2
 8003196:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003198:	4b0b      	ldr	r3, [pc, #44]	; (80031c8 <HAL_RCC_GetSysClockFreq+0x180>)
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	0c1b      	lsrs	r3, r3, #16
 800319e:	f003 0303 	and.w	r3, r3, #3
 80031a2:	3301      	adds	r3, #1
 80031a4:	005b      	lsls	r3, r3, #1
 80031a6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80031a8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80031aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80031b0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80031b2:	e002      	b.n	80031ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80031b4:	4b05      	ldr	r3, [pc, #20]	; (80031cc <HAL_RCC_GetSysClockFreq+0x184>)
 80031b6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80031b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80031bc:	4618      	mov	r0, r3
 80031be:	3740      	adds	r7, #64	; 0x40
 80031c0:	46bd      	mov	sp, r7
 80031c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80031c6:	bf00      	nop
 80031c8:	40023800 	.word	0x40023800
 80031cc:	00f42400 	.word	0x00f42400
 80031d0:	00b71b00 	.word	0x00b71b00

080031d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031d4:	b480      	push	{r7}
 80031d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031d8:	4b03      	ldr	r3, [pc, #12]	; (80031e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80031da:	681b      	ldr	r3, [r3, #0]
}
 80031dc:	4618      	mov	r0, r3
 80031de:	46bd      	mov	sp, r7
 80031e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e4:	4770      	bx	lr
 80031e6:	bf00      	nop
 80031e8:	20000018 	.word	0x20000018

080031ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80031f0:	f7ff fff0 	bl	80031d4 <HAL_RCC_GetHCLKFreq>
 80031f4:	4602      	mov	r2, r0
 80031f6:	4b05      	ldr	r3, [pc, #20]	; (800320c <HAL_RCC_GetPCLK2Freq+0x20>)
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	0b5b      	lsrs	r3, r3, #13
 80031fc:	f003 0307 	and.w	r3, r3, #7
 8003200:	4903      	ldr	r1, [pc, #12]	; (8003210 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003202:	5ccb      	ldrb	r3, [r1, r3]
 8003204:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003208:	4618      	mov	r0, r3
 800320a:	bd80      	pop	{r7, pc}
 800320c:	40023800 	.word	0x40023800
 8003210:	08017b18 	.word	0x08017b18

08003214 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003214:	b480      	push	{r7}
 8003216:	b083      	sub	sp, #12
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
 800321c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	220f      	movs	r2, #15
 8003222:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003224:	4b12      	ldr	r3, [pc, #72]	; (8003270 <HAL_RCC_GetClockConfig+0x5c>)
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	f003 0203 	and.w	r2, r3, #3
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003230:	4b0f      	ldr	r3, [pc, #60]	; (8003270 <HAL_RCC_GetClockConfig+0x5c>)
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800323c:	4b0c      	ldr	r3, [pc, #48]	; (8003270 <HAL_RCC_GetClockConfig+0x5c>)
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003248:	4b09      	ldr	r3, [pc, #36]	; (8003270 <HAL_RCC_GetClockConfig+0x5c>)
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	08db      	lsrs	r3, r3, #3
 800324e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003256:	4b07      	ldr	r3, [pc, #28]	; (8003274 <HAL_RCC_GetClockConfig+0x60>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 0207 	and.w	r2, r3, #7
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	601a      	str	r2, [r3, #0]
}
 8003262:	bf00      	nop
 8003264:	370c      	adds	r7, #12
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr
 800326e:	bf00      	nop
 8003270:	40023800 	.word	0x40023800
 8003274:	40023c00 	.word	0x40023c00

08003278 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b082      	sub	sp, #8
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d101      	bne.n	800328a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e0c5      	b.n	8003416 <HAL_TIM_Base_Init+0x19e>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a64      	ldr	r2, [pc, #400]	; (8003420 <HAL_TIM_Base_Init+0x1a8>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d045      	beq.n	8003320 <HAL_TIM_Base_Init+0xa8>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800329c:	d040      	beq.n	8003320 <HAL_TIM_Base_Init+0xa8>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a60      	ldr	r2, [pc, #384]	; (8003424 <HAL_TIM_Base_Init+0x1ac>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d03b      	beq.n	8003320 <HAL_TIM_Base_Init+0xa8>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a5e      	ldr	r2, [pc, #376]	; (8003428 <HAL_TIM_Base_Init+0x1b0>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d036      	beq.n	8003320 <HAL_TIM_Base_Init+0xa8>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a5d      	ldr	r2, [pc, #372]	; (800342c <HAL_TIM_Base_Init+0x1b4>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d031      	beq.n	8003320 <HAL_TIM_Base_Init+0xa8>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a5b      	ldr	r2, [pc, #364]	; (8003430 <HAL_TIM_Base_Init+0x1b8>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d02c      	beq.n	8003320 <HAL_TIM_Base_Init+0xa8>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a5a      	ldr	r2, [pc, #360]	; (8003434 <HAL_TIM_Base_Init+0x1bc>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d027      	beq.n	8003320 <HAL_TIM_Base_Init+0xa8>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a58      	ldr	r2, [pc, #352]	; (8003438 <HAL_TIM_Base_Init+0x1c0>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d022      	beq.n	8003320 <HAL_TIM_Base_Init+0xa8>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a57      	ldr	r2, [pc, #348]	; (800343c <HAL_TIM_Base_Init+0x1c4>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d01d      	beq.n	8003320 <HAL_TIM_Base_Init+0xa8>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a55      	ldr	r2, [pc, #340]	; (8003440 <HAL_TIM_Base_Init+0x1c8>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d018      	beq.n	8003320 <HAL_TIM_Base_Init+0xa8>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a54      	ldr	r2, [pc, #336]	; (8003444 <HAL_TIM_Base_Init+0x1cc>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d013      	beq.n	8003320 <HAL_TIM_Base_Init+0xa8>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a52      	ldr	r2, [pc, #328]	; (8003448 <HAL_TIM_Base_Init+0x1d0>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d00e      	beq.n	8003320 <HAL_TIM_Base_Init+0xa8>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a51      	ldr	r2, [pc, #324]	; (800344c <HAL_TIM_Base_Init+0x1d4>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d009      	beq.n	8003320 <HAL_TIM_Base_Init+0xa8>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a4f      	ldr	r2, [pc, #316]	; (8003450 <HAL_TIM_Base_Init+0x1d8>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d004      	beq.n	8003320 <HAL_TIM_Base_Init+0xa8>
 8003316:	f240 1113 	movw	r1, #275	; 0x113
 800331a:	484e      	ldr	r0, [pc, #312]	; (8003454 <HAL_TIM_Base_Init+0x1dc>)
 800331c:	f010 f845 	bl	80133aa <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d014      	beq.n	8003352 <HAL_TIM_Base_Init+0xda>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	2b10      	cmp	r3, #16
 800332e:	d010      	beq.n	8003352 <HAL_TIM_Base_Init+0xda>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	2b20      	cmp	r3, #32
 8003336:	d00c      	beq.n	8003352 <HAL_TIM_Base_Init+0xda>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	2b40      	cmp	r3, #64	; 0x40
 800333e:	d008      	beq.n	8003352 <HAL_TIM_Base_Init+0xda>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	2b60      	cmp	r3, #96	; 0x60
 8003346:	d004      	beq.n	8003352 <HAL_TIM_Base_Init+0xda>
 8003348:	f44f 718a 	mov.w	r1, #276	; 0x114
 800334c:	4841      	ldr	r0, [pc, #260]	; (8003454 <HAL_TIM_Base_Init+0x1dc>)
 800334e:	f010 f82c 	bl	80133aa <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	691b      	ldr	r3, [r3, #16]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d00e      	beq.n	8003378 <HAL_TIM_Base_Init+0x100>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	691b      	ldr	r3, [r3, #16]
 800335e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003362:	d009      	beq.n	8003378 <HAL_TIM_Base_Init+0x100>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	691b      	ldr	r3, [r3, #16]
 8003368:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800336c:	d004      	beq.n	8003378 <HAL_TIM_Base_Init+0x100>
 800336e:	f240 1115 	movw	r1, #277	; 0x115
 8003372:	4838      	ldr	r0, [pc, #224]	; (8003454 <HAL_TIM_Base_Init+0x1dc>)
 8003374:	f010 f819 	bl	80133aa <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	699b      	ldr	r3, [r3, #24]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d008      	beq.n	8003392 <HAL_TIM_Base_Init+0x11a>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	699b      	ldr	r3, [r3, #24]
 8003384:	2b80      	cmp	r3, #128	; 0x80
 8003386:	d004      	beq.n	8003392 <HAL_TIM_Base_Init+0x11a>
 8003388:	f44f 718b 	mov.w	r1, #278	; 0x116
 800338c:	4831      	ldr	r0, [pc, #196]	; (8003454 <HAL_TIM_Base_Init+0x1dc>)
 800338e:	f010 f80c 	bl	80133aa <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003398:	b2db      	uxtb	r3, r3
 800339a:	2b00      	cmp	r3, #0
 800339c:	d106      	bne.n	80033ac <HAL_TIM_Base_Init+0x134>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2200      	movs	r2, #0
 80033a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	f000 f856 	bl	8003458 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2202      	movs	r2, #2
 80033b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	3304      	adds	r3, #4
 80033bc:	4619      	mov	r1, r3
 80033be:	4610      	mov	r0, r2
 80033c0:	f000 fa4a 	bl	8003858 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2201      	movs	r2, #1
 80033c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2201      	movs	r2, #1
 80033d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2201      	movs	r2, #1
 80033d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2201      	movs	r2, #1
 80033e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2201      	movs	r2, #1
 80033e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2201      	movs	r2, #1
 80033f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2201      	movs	r2, #1
 80033f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2201      	movs	r2, #1
 8003400:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2201      	movs	r2, #1
 8003408:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2201      	movs	r2, #1
 8003410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003414:	2300      	movs	r3, #0
}
 8003416:	4618      	mov	r0, r3
 8003418:	3708      	adds	r7, #8
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}
 800341e:	bf00      	nop
 8003420:	40010000 	.word	0x40010000
 8003424:	40000400 	.word	0x40000400
 8003428:	40000800 	.word	0x40000800
 800342c:	40000c00 	.word	0x40000c00
 8003430:	40001000 	.word	0x40001000
 8003434:	40001400 	.word	0x40001400
 8003438:	40010400 	.word	0x40010400
 800343c:	40014000 	.word	0x40014000
 8003440:	40014400 	.word	0x40014400
 8003444:	40014800 	.word	0x40014800
 8003448:	40001800 	.word	0x40001800
 800344c:	40001c00 	.word	0x40001c00
 8003450:	40002000 	.word	0x40002000
 8003454:	08014e38 	.word	0x08014e38

08003458 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003458:	b480      	push	{r7}
 800345a:	b083      	sub	sp, #12
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003460:	bf00      	nop
 8003462:	370c      	adds	r7, #12
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr

0800346c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b084      	sub	sp, #16
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a51      	ldr	r2, [pc, #324]	; (80035c0 <HAL_TIM_Base_Start_IT+0x154>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d045      	beq.n	800350a <HAL_TIM_Base_Start_IT+0x9e>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003486:	d040      	beq.n	800350a <HAL_TIM_Base_Start_IT+0x9e>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a4d      	ldr	r2, [pc, #308]	; (80035c4 <HAL_TIM_Base_Start_IT+0x158>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d03b      	beq.n	800350a <HAL_TIM_Base_Start_IT+0x9e>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a4c      	ldr	r2, [pc, #304]	; (80035c8 <HAL_TIM_Base_Start_IT+0x15c>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d036      	beq.n	800350a <HAL_TIM_Base_Start_IT+0x9e>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a4a      	ldr	r2, [pc, #296]	; (80035cc <HAL_TIM_Base_Start_IT+0x160>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d031      	beq.n	800350a <HAL_TIM_Base_Start_IT+0x9e>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a49      	ldr	r2, [pc, #292]	; (80035d0 <HAL_TIM_Base_Start_IT+0x164>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d02c      	beq.n	800350a <HAL_TIM_Base_Start_IT+0x9e>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a47      	ldr	r2, [pc, #284]	; (80035d4 <HAL_TIM_Base_Start_IT+0x168>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d027      	beq.n	800350a <HAL_TIM_Base_Start_IT+0x9e>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a46      	ldr	r2, [pc, #280]	; (80035d8 <HAL_TIM_Base_Start_IT+0x16c>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d022      	beq.n	800350a <HAL_TIM_Base_Start_IT+0x9e>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a44      	ldr	r2, [pc, #272]	; (80035dc <HAL_TIM_Base_Start_IT+0x170>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d01d      	beq.n	800350a <HAL_TIM_Base_Start_IT+0x9e>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a43      	ldr	r2, [pc, #268]	; (80035e0 <HAL_TIM_Base_Start_IT+0x174>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d018      	beq.n	800350a <HAL_TIM_Base_Start_IT+0x9e>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a41      	ldr	r2, [pc, #260]	; (80035e4 <HAL_TIM_Base_Start_IT+0x178>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d013      	beq.n	800350a <HAL_TIM_Base_Start_IT+0x9e>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a40      	ldr	r2, [pc, #256]	; (80035e8 <HAL_TIM_Base_Start_IT+0x17c>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d00e      	beq.n	800350a <HAL_TIM_Base_Start_IT+0x9e>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a3e      	ldr	r2, [pc, #248]	; (80035ec <HAL_TIM_Base_Start_IT+0x180>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d009      	beq.n	800350a <HAL_TIM_Base_Start_IT+0x9e>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a3d      	ldr	r2, [pc, #244]	; (80035f0 <HAL_TIM_Base_Start_IT+0x184>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d004      	beq.n	800350a <HAL_TIM_Base_Start_IT+0x9e>
 8003500:	f240 11cf 	movw	r1, #463	; 0x1cf
 8003504:	483b      	ldr	r0, [pc, #236]	; (80035f4 <HAL_TIM_Base_Start_IT+0x188>)
 8003506:	f00f ff50 	bl	80133aa <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003510:	b2db      	uxtb	r3, r3
 8003512:	2b01      	cmp	r3, #1
 8003514:	d001      	beq.n	800351a <HAL_TIM_Base_Start_IT+0xae>
  {
    return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	e04e      	b.n	80035b8 <HAL_TIM_Base_Start_IT+0x14c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2202      	movs	r2, #2
 800351e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	68da      	ldr	r2, [r3, #12]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f042 0201 	orr.w	r2, r2, #1
 8003530:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a22      	ldr	r2, [pc, #136]	; (80035c0 <HAL_TIM_Base_Start_IT+0x154>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d022      	beq.n	8003582 <HAL_TIM_Base_Start_IT+0x116>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003544:	d01d      	beq.n	8003582 <HAL_TIM_Base_Start_IT+0x116>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a1e      	ldr	r2, [pc, #120]	; (80035c4 <HAL_TIM_Base_Start_IT+0x158>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d018      	beq.n	8003582 <HAL_TIM_Base_Start_IT+0x116>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a1c      	ldr	r2, [pc, #112]	; (80035c8 <HAL_TIM_Base_Start_IT+0x15c>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d013      	beq.n	8003582 <HAL_TIM_Base_Start_IT+0x116>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a1b      	ldr	r2, [pc, #108]	; (80035cc <HAL_TIM_Base_Start_IT+0x160>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d00e      	beq.n	8003582 <HAL_TIM_Base_Start_IT+0x116>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a1b      	ldr	r2, [pc, #108]	; (80035d8 <HAL_TIM_Base_Start_IT+0x16c>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d009      	beq.n	8003582 <HAL_TIM_Base_Start_IT+0x116>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a1a      	ldr	r2, [pc, #104]	; (80035dc <HAL_TIM_Base_Start_IT+0x170>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d004      	beq.n	8003582 <HAL_TIM_Base_Start_IT+0x116>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a1a      	ldr	r2, [pc, #104]	; (80035e8 <HAL_TIM_Base_Start_IT+0x17c>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d111      	bne.n	80035a6 <HAL_TIM_Base_Start_IT+0x13a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	f003 0307 	and.w	r3, r3, #7
 800358c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2b06      	cmp	r3, #6
 8003592:	d010      	beq.n	80035b6 <HAL_TIM_Base_Start_IT+0x14a>
    {
      __HAL_TIM_ENABLE(htim);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f042 0201 	orr.w	r2, r2, #1
 80035a2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035a4:	e007      	b.n	80035b6 <HAL_TIM_Base_Start_IT+0x14a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f042 0201 	orr.w	r2, r2, #1
 80035b4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80035b6:	2300      	movs	r3, #0
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	3710      	adds	r7, #16
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}
 80035c0:	40010000 	.word	0x40010000
 80035c4:	40000400 	.word	0x40000400
 80035c8:	40000800 	.word	0x40000800
 80035cc:	40000c00 	.word	0x40000c00
 80035d0:	40001000 	.word	0x40001000
 80035d4:	40001400 	.word	0x40001400
 80035d8:	40010400 	.word	0x40010400
 80035dc:	40014000 	.word	0x40014000
 80035e0:	40014400 	.word	0x40014400
 80035e4:	40014800 	.word	0x40014800
 80035e8:	40001800 	.word	0x40001800
 80035ec:	40001c00 	.word	0x40001c00
 80035f0:	40002000 	.word	0x40002000
 80035f4:	08014e38 	.word	0x08014e38

080035f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b082      	sub	sp, #8
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	691b      	ldr	r3, [r3, #16]
 8003606:	f003 0302 	and.w	r3, r3, #2
 800360a:	2b02      	cmp	r3, #2
 800360c:	d122      	bne.n	8003654 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	68db      	ldr	r3, [r3, #12]
 8003614:	f003 0302 	and.w	r3, r3, #2
 8003618:	2b02      	cmp	r3, #2
 800361a:	d11b      	bne.n	8003654 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f06f 0202 	mvn.w	r2, #2
 8003624:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2201      	movs	r2, #1
 800362a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	699b      	ldr	r3, [r3, #24]
 8003632:	f003 0303 	and.w	r3, r3, #3
 8003636:	2b00      	cmp	r3, #0
 8003638:	d003      	beq.n	8003642 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f000 f8ee 	bl	800381c <HAL_TIM_IC_CaptureCallback>
 8003640:	e005      	b.n	800364e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f000 f8e0 	bl	8003808 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003648:	6878      	ldr	r0, [r7, #4]
 800364a:	f000 f8f1 	bl	8003830 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2200      	movs	r2, #0
 8003652:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	691b      	ldr	r3, [r3, #16]
 800365a:	f003 0304 	and.w	r3, r3, #4
 800365e:	2b04      	cmp	r3, #4
 8003660:	d122      	bne.n	80036a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	68db      	ldr	r3, [r3, #12]
 8003668:	f003 0304 	and.w	r3, r3, #4
 800366c:	2b04      	cmp	r3, #4
 800366e:	d11b      	bne.n	80036a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f06f 0204 	mvn.w	r2, #4
 8003678:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2202      	movs	r2, #2
 800367e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	699b      	ldr	r3, [r3, #24]
 8003686:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800368a:	2b00      	cmp	r3, #0
 800368c:	d003      	beq.n	8003696 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f000 f8c4 	bl	800381c <HAL_TIM_IC_CaptureCallback>
 8003694:	e005      	b.n	80036a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f000 f8b6 	bl	8003808 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	f000 f8c7 	bl	8003830 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2200      	movs	r2, #0
 80036a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	691b      	ldr	r3, [r3, #16]
 80036ae:	f003 0308 	and.w	r3, r3, #8
 80036b2:	2b08      	cmp	r3, #8
 80036b4:	d122      	bne.n	80036fc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	68db      	ldr	r3, [r3, #12]
 80036bc:	f003 0308 	and.w	r3, r3, #8
 80036c0:	2b08      	cmp	r3, #8
 80036c2:	d11b      	bne.n	80036fc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f06f 0208 	mvn.w	r2, #8
 80036cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2204      	movs	r2, #4
 80036d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	69db      	ldr	r3, [r3, #28]
 80036da:	f003 0303 	and.w	r3, r3, #3
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d003      	beq.n	80036ea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f000 f89a 	bl	800381c <HAL_TIM_IC_CaptureCallback>
 80036e8:	e005      	b.n	80036f6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f000 f88c 	bl	8003808 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036f0:	6878      	ldr	r0, [r7, #4]
 80036f2:	f000 f89d 	bl	8003830 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2200      	movs	r2, #0
 80036fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	691b      	ldr	r3, [r3, #16]
 8003702:	f003 0310 	and.w	r3, r3, #16
 8003706:	2b10      	cmp	r3, #16
 8003708:	d122      	bne.n	8003750 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	68db      	ldr	r3, [r3, #12]
 8003710:	f003 0310 	and.w	r3, r3, #16
 8003714:	2b10      	cmp	r3, #16
 8003716:	d11b      	bne.n	8003750 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f06f 0210 	mvn.w	r2, #16
 8003720:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2208      	movs	r2, #8
 8003726:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	69db      	ldr	r3, [r3, #28]
 800372e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003732:	2b00      	cmp	r3, #0
 8003734:	d003      	beq.n	800373e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f000 f870 	bl	800381c <HAL_TIM_IC_CaptureCallback>
 800373c:	e005      	b.n	800374a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f000 f862 	bl	8003808 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003744:	6878      	ldr	r0, [r7, #4]
 8003746:	f000 f873 	bl	8003830 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2200      	movs	r2, #0
 800374e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	691b      	ldr	r3, [r3, #16]
 8003756:	f003 0301 	and.w	r3, r3, #1
 800375a:	2b01      	cmp	r3, #1
 800375c:	d10e      	bne.n	800377c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	68db      	ldr	r3, [r3, #12]
 8003764:	f003 0301 	and.w	r3, r3, #1
 8003768:	2b01      	cmp	r3, #1
 800376a:	d107      	bne.n	800377c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f06f 0201 	mvn.w	r2, #1
 8003774:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f00f fe00 	bl	801337c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	691b      	ldr	r3, [r3, #16]
 8003782:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003786:	2b80      	cmp	r3, #128	; 0x80
 8003788:	d10e      	bne.n	80037a8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	68db      	ldr	r3, [r3, #12]
 8003790:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003794:	2b80      	cmp	r3, #128	; 0x80
 8003796:	d107      	bne.n	80037a8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80037a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f000 f902 	bl	80039ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	691b      	ldr	r3, [r3, #16]
 80037ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037b2:	2b40      	cmp	r3, #64	; 0x40
 80037b4:	d10e      	bne.n	80037d4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037c0:	2b40      	cmp	r3, #64	; 0x40
 80037c2:	d107      	bne.n	80037d4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80037cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f000 f838 	bl	8003844 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	691b      	ldr	r3, [r3, #16]
 80037da:	f003 0320 	and.w	r3, r3, #32
 80037de:	2b20      	cmp	r3, #32
 80037e0:	d10e      	bne.n	8003800 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	f003 0320 	and.w	r3, r3, #32
 80037ec:	2b20      	cmp	r3, #32
 80037ee:	d107      	bne.n	8003800 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f06f 0220 	mvn.w	r2, #32
 80037f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f000 f8cc 	bl	8003998 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003800:	bf00      	nop
 8003802:	3708      	adds	r7, #8
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}

08003808 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003808:	b480      	push	{r7}
 800380a:	b083      	sub	sp, #12
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003810:	bf00      	nop
 8003812:	370c      	adds	r7, #12
 8003814:	46bd      	mov	sp, r7
 8003816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381a:	4770      	bx	lr

0800381c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800381c:	b480      	push	{r7}
 800381e:	b083      	sub	sp, #12
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003824:	bf00      	nop
 8003826:	370c      	adds	r7, #12
 8003828:	46bd      	mov	sp, r7
 800382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382e:	4770      	bx	lr

08003830 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003830:	b480      	push	{r7}
 8003832:	b083      	sub	sp, #12
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003838:	bf00      	nop
 800383a:	370c      	adds	r7, #12
 800383c:	46bd      	mov	sp, r7
 800383e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003842:	4770      	bx	lr

08003844 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003844:	b480      	push	{r7}
 8003846:	b083      	sub	sp, #12
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800384c:	bf00      	nop
 800384e:	370c      	adds	r7, #12
 8003850:	46bd      	mov	sp, r7
 8003852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003856:	4770      	bx	lr

08003858 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003858:	b480      	push	{r7}
 800385a:	b085      	sub	sp, #20
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
 8003860:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	4a40      	ldr	r2, [pc, #256]	; (800396c <TIM_Base_SetConfig+0x114>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d013      	beq.n	8003898 <TIM_Base_SetConfig+0x40>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003876:	d00f      	beq.n	8003898 <TIM_Base_SetConfig+0x40>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	4a3d      	ldr	r2, [pc, #244]	; (8003970 <TIM_Base_SetConfig+0x118>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d00b      	beq.n	8003898 <TIM_Base_SetConfig+0x40>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	4a3c      	ldr	r2, [pc, #240]	; (8003974 <TIM_Base_SetConfig+0x11c>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d007      	beq.n	8003898 <TIM_Base_SetConfig+0x40>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	4a3b      	ldr	r2, [pc, #236]	; (8003978 <TIM_Base_SetConfig+0x120>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d003      	beq.n	8003898 <TIM_Base_SetConfig+0x40>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	4a3a      	ldr	r2, [pc, #232]	; (800397c <TIM_Base_SetConfig+0x124>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d108      	bne.n	80038aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800389e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	68fa      	ldr	r2, [r7, #12]
 80038a6:	4313      	orrs	r3, r2
 80038a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	4a2f      	ldr	r2, [pc, #188]	; (800396c <TIM_Base_SetConfig+0x114>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d02b      	beq.n	800390a <TIM_Base_SetConfig+0xb2>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038b8:	d027      	beq.n	800390a <TIM_Base_SetConfig+0xb2>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	4a2c      	ldr	r2, [pc, #176]	; (8003970 <TIM_Base_SetConfig+0x118>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d023      	beq.n	800390a <TIM_Base_SetConfig+0xb2>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4a2b      	ldr	r2, [pc, #172]	; (8003974 <TIM_Base_SetConfig+0x11c>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d01f      	beq.n	800390a <TIM_Base_SetConfig+0xb2>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	4a2a      	ldr	r2, [pc, #168]	; (8003978 <TIM_Base_SetConfig+0x120>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d01b      	beq.n	800390a <TIM_Base_SetConfig+0xb2>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4a29      	ldr	r2, [pc, #164]	; (800397c <TIM_Base_SetConfig+0x124>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d017      	beq.n	800390a <TIM_Base_SetConfig+0xb2>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	4a28      	ldr	r2, [pc, #160]	; (8003980 <TIM_Base_SetConfig+0x128>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d013      	beq.n	800390a <TIM_Base_SetConfig+0xb2>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4a27      	ldr	r2, [pc, #156]	; (8003984 <TIM_Base_SetConfig+0x12c>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d00f      	beq.n	800390a <TIM_Base_SetConfig+0xb2>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4a26      	ldr	r2, [pc, #152]	; (8003988 <TIM_Base_SetConfig+0x130>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d00b      	beq.n	800390a <TIM_Base_SetConfig+0xb2>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	4a25      	ldr	r2, [pc, #148]	; (800398c <TIM_Base_SetConfig+0x134>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d007      	beq.n	800390a <TIM_Base_SetConfig+0xb2>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4a24      	ldr	r2, [pc, #144]	; (8003990 <TIM_Base_SetConfig+0x138>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d003      	beq.n	800390a <TIM_Base_SetConfig+0xb2>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4a23      	ldr	r2, [pc, #140]	; (8003994 <TIM_Base_SetConfig+0x13c>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d108      	bne.n	800391c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003910:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	68db      	ldr	r3, [r3, #12]
 8003916:	68fa      	ldr	r2, [r7, #12]
 8003918:	4313      	orrs	r3, r2
 800391a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	695b      	ldr	r3, [r3, #20]
 8003926:	4313      	orrs	r3, r2
 8003928:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	68fa      	ldr	r2, [r7, #12]
 800392e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	689a      	ldr	r2, [r3, #8]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	4a0a      	ldr	r2, [pc, #40]	; (800396c <TIM_Base_SetConfig+0x114>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d003      	beq.n	8003950 <TIM_Base_SetConfig+0xf8>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	4a0c      	ldr	r2, [pc, #48]	; (800397c <TIM_Base_SetConfig+0x124>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d103      	bne.n	8003958 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	691a      	ldr	r2, [r3, #16]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2201      	movs	r2, #1
 800395c:	615a      	str	r2, [r3, #20]
}
 800395e:	bf00      	nop
 8003960:	3714      	adds	r7, #20
 8003962:	46bd      	mov	sp, r7
 8003964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003968:	4770      	bx	lr
 800396a:	bf00      	nop
 800396c:	40010000 	.word	0x40010000
 8003970:	40000400 	.word	0x40000400
 8003974:	40000800 	.word	0x40000800
 8003978:	40000c00 	.word	0x40000c00
 800397c:	40010400 	.word	0x40010400
 8003980:	40014000 	.word	0x40014000
 8003984:	40014400 	.word	0x40014400
 8003988:	40014800 	.word	0x40014800
 800398c:	40001800 	.word	0x40001800
 8003990:	40001c00 	.word	0x40001c00
 8003994:	40002000 	.word	0x40002000

08003998 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003998:	b480      	push	{r7}
 800399a:	b083      	sub	sp, #12
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80039a0:	bf00      	nop
 80039a2:	370c      	adds	r7, #12
 80039a4:	46bd      	mov	sp, r7
 80039a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039aa:	4770      	bx	lr

080039ac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b083      	sub	sp, #12
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80039b4:	bf00      	nop
 80039b6:	370c      	adds	r7, #12
 80039b8:	46bd      	mov	sp, r7
 80039ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039be:	4770      	bx	lr

080039c0 <__NVIC_SetPriority>:
{
 80039c0:	b480      	push	{r7}
 80039c2:	b083      	sub	sp, #12
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	4603      	mov	r3, r0
 80039c8:	6039      	str	r1, [r7, #0]
 80039ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	db0a      	blt.n	80039ea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	b2da      	uxtb	r2, r3
 80039d8:	490c      	ldr	r1, [pc, #48]	; (8003a0c <__NVIC_SetPriority+0x4c>)
 80039da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039de:	0112      	lsls	r2, r2, #4
 80039e0:	b2d2      	uxtb	r2, r2
 80039e2:	440b      	add	r3, r1
 80039e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80039e8:	e00a      	b.n	8003a00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	b2da      	uxtb	r2, r3
 80039ee:	4908      	ldr	r1, [pc, #32]	; (8003a10 <__NVIC_SetPriority+0x50>)
 80039f0:	79fb      	ldrb	r3, [r7, #7]
 80039f2:	f003 030f 	and.w	r3, r3, #15
 80039f6:	3b04      	subs	r3, #4
 80039f8:	0112      	lsls	r2, r2, #4
 80039fa:	b2d2      	uxtb	r2, r2
 80039fc:	440b      	add	r3, r1
 80039fe:	761a      	strb	r2, [r3, #24]
}
 8003a00:	bf00      	nop
 8003a02:	370c      	adds	r7, #12
 8003a04:	46bd      	mov	sp, r7
 8003a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0a:	4770      	bx	lr
 8003a0c:	e000e100 	.word	0xe000e100
 8003a10:	e000ed00 	.word	0xe000ed00

08003a14 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003a14:	b580      	push	{r7, lr}
 8003a16:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003a18:	4b05      	ldr	r3, [pc, #20]	; (8003a30 <SysTick_Handler+0x1c>)
 8003a1a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003a1c:	f002 fc96 	bl	800634c <xTaskGetSchedulerState>
 8003a20:	4603      	mov	r3, r0
 8003a22:	2b01      	cmp	r3, #1
 8003a24:	d001      	beq.n	8003a2a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003a26:	f003 fb7f 	bl	8007128 <xPortSysTickHandler>
  }
}
 8003a2a:	bf00      	nop
 8003a2c:	bd80      	pop	{r7, pc}
 8003a2e:	bf00      	nop
 8003a30:	e000e010 	.word	0xe000e010

08003a34 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003a34:	b580      	push	{r7, lr}
 8003a36:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003a38:	2100      	movs	r1, #0
 8003a3a:	f06f 0004 	mvn.w	r0, #4
 8003a3e:	f7ff ffbf 	bl	80039c0 <__NVIC_SetPriority>
#endif
}
 8003a42:	bf00      	nop
 8003a44:	bd80      	pop	{r7, pc}
	...

08003a48 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003a48:	b480      	push	{r7}
 8003a4a:	b083      	sub	sp, #12
 8003a4c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a4e:	f3ef 8305 	mrs	r3, IPSR
 8003a52:	603b      	str	r3, [r7, #0]
  return(result);
 8003a54:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d003      	beq.n	8003a62 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003a5a:	f06f 0305 	mvn.w	r3, #5
 8003a5e:	607b      	str	r3, [r7, #4]
 8003a60:	e00c      	b.n	8003a7c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003a62:	4b0a      	ldr	r3, [pc, #40]	; (8003a8c <osKernelInitialize+0x44>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d105      	bne.n	8003a76 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003a6a:	4b08      	ldr	r3, [pc, #32]	; (8003a8c <osKernelInitialize+0x44>)
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003a70:	2300      	movs	r3, #0
 8003a72:	607b      	str	r3, [r7, #4]
 8003a74:	e002      	b.n	8003a7c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003a76:	f04f 33ff 	mov.w	r3, #4294967295
 8003a7a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003a7c:	687b      	ldr	r3, [r7, #4]
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	370c      	adds	r7, #12
 8003a82:	46bd      	mov	sp, r7
 8003a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a88:	4770      	bx	lr
 8003a8a:	bf00      	nop
 8003a8c:	200000a0 	.word	0x200000a0

08003a90 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b082      	sub	sp, #8
 8003a94:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a96:	f3ef 8305 	mrs	r3, IPSR
 8003a9a:	603b      	str	r3, [r7, #0]
  return(result);
 8003a9c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d003      	beq.n	8003aaa <osKernelStart+0x1a>
    stat = osErrorISR;
 8003aa2:	f06f 0305 	mvn.w	r3, #5
 8003aa6:	607b      	str	r3, [r7, #4]
 8003aa8:	e010      	b.n	8003acc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003aaa:	4b0b      	ldr	r3, [pc, #44]	; (8003ad8 <osKernelStart+0x48>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	2b01      	cmp	r3, #1
 8003ab0:	d109      	bne.n	8003ac6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003ab2:	f7ff ffbf 	bl	8003a34 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003ab6:	4b08      	ldr	r3, [pc, #32]	; (8003ad8 <osKernelStart+0x48>)
 8003ab8:	2202      	movs	r2, #2
 8003aba:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003abc:	f001 ffc8 	bl	8005a50 <vTaskStartScheduler>
      stat = osOK;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	607b      	str	r3, [r7, #4]
 8003ac4:	e002      	b.n	8003acc <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003ac6:	f04f 33ff 	mov.w	r3, #4294967295
 8003aca:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003acc:	687b      	ldr	r3, [r7, #4]
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	3708      	adds	r7, #8
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}
 8003ad6:	bf00      	nop
 8003ad8:	200000a0 	.word	0x200000a0

08003adc <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b082      	sub	sp, #8
 8003ae0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ae2:	f3ef 8305 	mrs	r3, IPSR
 8003ae6:	603b      	str	r3, [r7, #0]
  return(result);
 8003ae8:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d003      	beq.n	8003af6 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8003aee:	f002 f8db 	bl	8005ca8 <xTaskGetTickCountFromISR>
 8003af2:	6078      	str	r0, [r7, #4]
 8003af4:	e002      	b.n	8003afc <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 8003af6:	f002 f8c7 	bl	8005c88 <xTaskGetTickCount>
 8003afa:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8003afc:	687b      	ldr	r3, [r7, #4]
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	3708      	adds	r7, #8
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}

08003b06 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003b06:	b580      	push	{r7, lr}
 8003b08:	b08e      	sub	sp, #56	; 0x38
 8003b0a:	af04      	add	r7, sp, #16
 8003b0c:	60f8      	str	r0, [r7, #12]
 8003b0e:	60b9      	str	r1, [r7, #8]
 8003b10:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003b12:	2300      	movs	r3, #0
 8003b14:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003b16:	f3ef 8305 	mrs	r3, IPSR
 8003b1a:	617b      	str	r3, [r7, #20]
  return(result);
 8003b1c:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d17e      	bne.n	8003c20 <osThreadNew+0x11a>
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d07b      	beq.n	8003c20 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003b28:	2380      	movs	r3, #128	; 0x80
 8003b2a:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003b2c:	2318      	movs	r3, #24
 8003b2e:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003b30:	2300      	movs	r3, #0
 8003b32:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8003b34:	f04f 33ff 	mov.w	r3, #4294967295
 8003b38:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d045      	beq.n	8003bcc <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d002      	beq.n	8003b4e <osThreadNew+0x48>
        name = attr->name;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	699b      	ldr	r3, [r3, #24]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d002      	beq.n	8003b5c <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	699b      	ldr	r3, [r3, #24]
 8003b5a:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003b5c:	69fb      	ldr	r3, [r7, #28]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d008      	beq.n	8003b74 <osThreadNew+0x6e>
 8003b62:	69fb      	ldr	r3, [r7, #28]
 8003b64:	2b38      	cmp	r3, #56	; 0x38
 8003b66:	d805      	bhi.n	8003b74 <osThreadNew+0x6e>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	f003 0301 	and.w	r3, r3, #1
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d001      	beq.n	8003b78 <osThreadNew+0x72>
        return (NULL);
 8003b74:	2300      	movs	r3, #0
 8003b76:	e054      	b.n	8003c22 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	695b      	ldr	r3, [r3, #20]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d003      	beq.n	8003b88 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	695b      	ldr	r3, [r3, #20]
 8003b84:	089b      	lsrs	r3, r3, #2
 8003b86:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d00e      	beq.n	8003bae <osThreadNew+0xa8>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	2bbb      	cmp	r3, #187	; 0xbb
 8003b96:	d90a      	bls.n	8003bae <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d006      	beq.n	8003bae <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	695b      	ldr	r3, [r3, #20]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d002      	beq.n	8003bae <osThreadNew+0xa8>
        mem = 1;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	61bb      	str	r3, [r7, #24]
 8003bac:	e010      	b.n	8003bd0 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d10c      	bne.n	8003bd0 <osThreadNew+0xca>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	68db      	ldr	r3, [r3, #12]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d108      	bne.n	8003bd0 <osThreadNew+0xca>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	691b      	ldr	r3, [r3, #16]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d104      	bne.n	8003bd0 <osThreadNew+0xca>
          mem = 0;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	61bb      	str	r3, [r7, #24]
 8003bca:	e001      	b.n	8003bd0 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003bd0:	69bb      	ldr	r3, [r7, #24]
 8003bd2:	2b01      	cmp	r3, #1
 8003bd4:	d110      	bne.n	8003bf8 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003bda:	687a      	ldr	r2, [r7, #4]
 8003bdc:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003bde:	9202      	str	r2, [sp, #8]
 8003be0:	9301      	str	r3, [sp, #4]
 8003be2:	69fb      	ldr	r3, [r7, #28]
 8003be4:	9300      	str	r3, [sp, #0]
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	6a3a      	ldr	r2, [r7, #32]
 8003bea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003bec:	68f8      	ldr	r0, [r7, #12]
 8003bee:	f001 fd43 	bl	8005678 <xTaskCreateStatic>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	613b      	str	r3, [r7, #16]
 8003bf6:	e013      	b.n	8003c20 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003bf8:	69bb      	ldr	r3, [r7, #24]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d110      	bne.n	8003c20 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003bfe:	6a3b      	ldr	r3, [r7, #32]
 8003c00:	b29a      	uxth	r2, r3
 8003c02:	f107 0310 	add.w	r3, r7, #16
 8003c06:	9301      	str	r3, [sp, #4]
 8003c08:	69fb      	ldr	r3, [r7, #28]
 8003c0a:	9300      	str	r3, [sp, #0]
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003c10:	68f8      	ldr	r0, [r7, #12]
 8003c12:	f001 fd8e 	bl	8005732 <xTaskCreate>
 8003c16:	4603      	mov	r3, r0
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	d001      	beq.n	8003c20 <osThreadNew+0x11a>
            hTask = NULL;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003c20:	693b      	ldr	r3, [r7, #16]
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	3728      	adds	r7, #40	; 0x28
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}

08003c2a <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003c2a:	b580      	push	{r7, lr}
 8003c2c:	b084      	sub	sp, #16
 8003c2e:	af00      	add	r7, sp, #0
 8003c30:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003c32:	f3ef 8305 	mrs	r3, IPSR
 8003c36:	60bb      	str	r3, [r7, #8]
  return(result);
 8003c38:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d003      	beq.n	8003c46 <osDelay+0x1c>
    stat = osErrorISR;
 8003c3e:	f06f 0305 	mvn.w	r3, #5
 8003c42:	60fb      	str	r3, [r7, #12]
 8003c44:	e007      	b.n	8003c56 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003c46:	2300      	movs	r3, #0
 8003c48:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d002      	beq.n	8003c56 <osDelay+0x2c>
      vTaskDelay(ticks);
 8003c50:	6878      	ldr	r0, [r7, #4]
 8003c52:	f001 fec9 	bl	80059e8 <vTaskDelay>
    }
  }

  return (stat);
 8003c56:	68fb      	ldr	r3, [r7, #12]
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	3710      	adds	r7, #16
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}

08003c60 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b088      	sub	sp, #32
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003c6c:	f3ef 8305 	mrs	r3, IPSR
 8003c70:	60bb      	str	r3, [r7, #8]
  return(result);
 8003c72:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d174      	bne.n	8003d62 <osMutexNew+0x102>
    if (attr != NULL) {
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d003      	beq.n	8003c86 <osMutexNew+0x26>
      type = attr->attr_bits;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	61bb      	str	r3, [r7, #24]
 8003c84:	e001      	b.n	8003c8a <osMutexNew+0x2a>
    } else {
      type = 0U;
 8003c86:	2300      	movs	r3, #0
 8003c88:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8003c8a:	69bb      	ldr	r3, [r7, #24]
 8003c8c:	f003 0301 	and.w	r3, r3, #1
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d002      	beq.n	8003c9a <osMutexNew+0x3a>
      rmtx = 1U;
 8003c94:	2301      	movs	r3, #1
 8003c96:	617b      	str	r3, [r7, #20]
 8003c98:	e001      	b.n	8003c9e <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8003c9e:	69bb      	ldr	r3, [r7, #24]
 8003ca0:	f003 0308 	and.w	r3, r3, #8
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d15c      	bne.n	8003d62 <osMutexNew+0x102>
      mem = -1;
 8003ca8:	f04f 33ff 	mov.w	r3, #4294967295
 8003cac:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d015      	beq.n	8003ce0 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d006      	beq.n	8003cca <osMutexNew+0x6a>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	68db      	ldr	r3, [r3, #12]
 8003cc0:	2b4f      	cmp	r3, #79	; 0x4f
 8003cc2:	d902      	bls.n	8003cca <osMutexNew+0x6a>
          mem = 1;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	613b      	str	r3, [r7, #16]
 8003cc8:	e00c      	b.n	8003ce4 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d108      	bne.n	8003ce4 <osMutexNew+0x84>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	68db      	ldr	r3, [r3, #12]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d104      	bne.n	8003ce4 <osMutexNew+0x84>
            mem = 0;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	613b      	str	r3, [r7, #16]
 8003cde:	e001      	b.n	8003ce4 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	2b01      	cmp	r3, #1
 8003ce8:	d112      	bne.n	8003d10 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d007      	beq.n	8003d00 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	4619      	mov	r1, r3
 8003cf6:	2004      	movs	r0, #4
 8003cf8:	f000 fd69 	bl	80047ce <xQueueCreateMutexStatic>
 8003cfc:	61f8      	str	r0, [r7, #28]
 8003cfe:	e016      	b.n	8003d2e <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	4619      	mov	r1, r3
 8003d06:	2001      	movs	r0, #1
 8003d08:	f000 fd61 	bl	80047ce <xQueueCreateMutexStatic>
 8003d0c:	61f8      	str	r0, [r7, #28]
 8003d0e:	e00e      	b.n	8003d2e <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d10b      	bne.n	8003d2e <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d004      	beq.n	8003d26 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8003d1c:	2004      	movs	r0, #4
 8003d1e:	f000 fd3e 	bl	800479e <xQueueCreateMutex>
 8003d22:	61f8      	str	r0, [r7, #28]
 8003d24:	e003      	b.n	8003d2e <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8003d26:	2001      	movs	r0, #1
 8003d28:	f000 fd39 	bl	800479e <xQueueCreateMutex>
 8003d2c:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8003d2e:	69fb      	ldr	r3, [r7, #28]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d00c      	beq.n	8003d4e <osMutexNew+0xee>
        if (attr != NULL) {
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d003      	beq.n	8003d42 <osMutexNew+0xe2>
          name = attr->name;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	60fb      	str	r3, [r7, #12]
 8003d40:	e001      	b.n	8003d46 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8003d42:	2300      	movs	r3, #0
 8003d44:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8003d46:	68f9      	ldr	r1, [r7, #12]
 8003d48:	69f8      	ldr	r0, [r7, #28]
 8003d4a:	f001 fc0d 	bl	8005568 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8003d4e:	69fb      	ldr	r3, [r7, #28]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d006      	beq.n	8003d62 <osMutexNew+0x102>
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d003      	beq.n	8003d62 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8003d5a:	69fb      	ldr	r3, [r7, #28]
 8003d5c:	f043 0301 	orr.w	r3, r3, #1
 8003d60:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8003d62:	69fb      	ldr	r3, [r7, #28]
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	3720      	adds	r7, #32
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}

08003d6c <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b086      	sub	sp, #24
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
 8003d74:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	f023 0301 	bic.w	r3, r3, #1
 8003d7c:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	f003 0301 	and.w	r3, r3, #1
 8003d84:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8003d86:	2300      	movs	r3, #0
 8003d88:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003d8a:	f3ef 8305 	mrs	r3, IPSR
 8003d8e:	60bb      	str	r3, [r7, #8]
  return(result);
 8003d90:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d003      	beq.n	8003d9e <osMutexAcquire+0x32>
    stat = osErrorISR;
 8003d96:	f06f 0305 	mvn.w	r3, #5
 8003d9a:	617b      	str	r3, [r7, #20]
 8003d9c:	e02c      	b.n	8003df8 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d103      	bne.n	8003dac <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8003da4:	f06f 0303 	mvn.w	r3, #3
 8003da8:	617b      	str	r3, [r7, #20]
 8003daa:	e025      	b.n	8003df8 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d011      	beq.n	8003dd6 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8003db2:	6839      	ldr	r1, [r7, #0]
 8003db4:	6938      	ldr	r0, [r7, #16]
 8003db6:	f000 fd59 	bl	800486c <xQueueTakeMutexRecursive>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	2b01      	cmp	r3, #1
 8003dbe:	d01b      	beq.n	8003df8 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d003      	beq.n	8003dce <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8003dc6:	f06f 0301 	mvn.w	r3, #1
 8003dca:	617b      	str	r3, [r7, #20]
 8003dcc:	e014      	b.n	8003df8 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8003dce:	f06f 0302 	mvn.w	r3, #2
 8003dd2:	617b      	str	r3, [r7, #20]
 8003dd4:	e010      	b.n	8003df8 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8003dd6:	6839      	ldr	r1, [r7, #0]
 8003dd8:	6938      	ldr	r0, [r7, #16]
 8003dda:	f001 f8ed 	bl	8004fb8 <xQueueSemaphoreTake>
 8003dde:	4603      	mov	r3, r0
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	d009      	beq.n	8003df8 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d003      	beq.n	8003df2 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8003dea:	f06f 0301 	mvn.w	r3, #1
 8003dee:	617b      	str	r3, [r7, #20]
 8003df0:	e002      	b.n	8003df8 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8003df2:	f06f 0302 	mvn.w	r3, #2
 8003df6:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8003df8:	697b      	ldr	r3, [r7, #20]
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3718      	adds	r7, #24
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}

08003e02 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8003e02:	b580      	push	{r7, lr}
 8003e04:	b086      	sub	sp, #24
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	f023 0301 	bic.w	r3, r3, #1
 8003e10:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	f003 0301 	and.w	r3, r3, #1
 8003e18:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003e1e:	f3ef 8305 	mrs	r3, IPSR
 8003e22:	60bb      	str	r3, [r7, #8]
  return(result);
 8003e24:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d003      	beq.n	8003e32 <osMutexRelease+0x30>
    stat = osErrorISR;
 8003e2a:	f06f 0305 	mvn.w	r3, #5
 8003e2e:	617b      	str	r3, [r7, #20]
 8003e30:	e01f      	b.n	8003e72 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d103      	bne.n	8003e40 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8003e38:	f06f 0303 	mvn.w	r3, #3
 8003e3c:	617b      	str	r3, [r7, #20]
 8003e3e:	e018      	b.n	8003e72 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d009      	beq.n	8003e5a <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8003e46:	6938      	ldr	r0, [r7, #16]
 8003e48:	f000 fcdc 	bl	8004804 <xQueueGiveMutexRecursive>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	2b01      	cmp	r3, #1
 8003e50:	d00f      	beq.n	8003e72 <osMutexRelease+0x70>
        stat = osErrorResource;
 8003e52:	f06f 0302 	mvn.w	r3, #2
 8003e56:	617b      	str	r3, [r7, #20]
 8003e58:	e00b      	b.n	8003e72 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	2100      	movs	r1, #0
 8003e60:	6938      	ldr	r0, [r7, #16]
 8003e62:	f000 fda3 	bl	80049ac <xQueueGenericSend>
 8003e66:	4603      	mov	r3, r0
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d002      	beq.n	8003e72 <osMutexRelease+0x70>
        stat = osErrorResource;
 8003e6c:	f06f 0302 	mvn.w	r3, #2
 8003e70:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8003e72:	697b      	ldr	r3, [r7, #20]
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	3718      	adds	r7, #24
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}

08003e7c <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b08a      	sub	sp, #40	; 0x28
 8003e80:	af02      	add	r7, sp, #8
 8003e82:	60f8      	str	r0, [r7, #12]
 8003e84:	60b9      	str	r1, [r7, #8]
 8003e86:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003e8c:	f3ef 8305 	mrs	r3, IPSR
 8003e90:	613b      	str	r3, [r7, #16]
  return(result);
 8003e92:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d175      	bne.n	8003f84 <osSemaphoreNew+0x108>
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d072      	beq.n	8003f84 <osSemaphoreNew+0x108>
 8003e9e:	68ba      	ldr	r2, [r7, #8]
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	429a      	cmp	r2, r3
 8003ea4:	d86e      	bhi.n	8003f84 <osSemaphoreNew+0x108>
    mem = -1;
 8003ea6:	f04f 33ff 	mov.w	r3, #4294967295
 8003eaa:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d015      	beq.n	8003ede <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d006      	beq.n	8003ec8 <osSemaphoreNew+0x4c>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	68db      	ldr	r3, [r3, #12]
 8003ebe:	2b4f      	cmp	r3, #79	; 0x4f
 8003ec0:	d902      	bls.n	8003ec8 <osSemaphoreNew+0x4c>
        mem = 1;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	61bb      	str	r3, [r7, #24]
 8003ec6:	e00c      	b.n	8003ee2 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d108      	bne.n	8003ee2 <osSemaphoreNew+0x66>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	68db      	ldr	r3, [r3, #12]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d104      	bne.n	8003ee2 <osSemaphoreNew+0x66>
          mem = 0;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	61bb      	str	r3, [r7, #24]
 8003edc:	e001      	b.n	8003ee2 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8003ee2:	69bb      	ldr	r3, [r7, #24]
 8003ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ee8:	d04c      	beq.n	8003f84 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	d128      	bne.n	8003f42 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8003ef0:	69bb      	ldr	r3, [r7, #24]
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d10a      	bne.n	8003f0c <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	2203      	movs	r2, #3
 8003efc:	9200      	str	r2, [sp, #0]
 8003efe:	2200      	movs	r2, #0
 8003f00:	2100      	movs	r1, #0
 8003f02:	2001      	movs	r0, #1
 8003f04:	f000 fb5c 	bl	80045c0 <xQueueGenericCreateStatic>
 8003f08:	61f8      	str	r0, [r7, #28]
 8003f0a:	e005      	b.n	8003f18 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8003f0c:	2203      	movs	r2, #3
 8003f0e:	2100      	movs	r1, #0
 8003f10:	2001      	movs	r0, #1
 8003f12:	f000 fbcd 	bl	80046b0 <xQueueGenericCreate>
 8003f16:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8003f18:	69fb      	ldr	r3, [r7, #28]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d022      	beq.n	8003f64 <osSemaphoreNew+0xe8>
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d01f      	beq.n	8003f64 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8003f24:	2300      	movs	r3, #0
 8003f26:	2200      	movs	r2, #0
 8003f28:	2100      	movs	r1, #0
 8003f2a:	69f8      	ldr	r0, [r7, #28]
 8003f2c:	f000 fd3e 	bl	80049ac <xQueueGenericSend>
 8003f30:	4603      	mov	r3, r0
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d016      	beq.n	8003f64 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8003f36:	69f8      	ldr	r0, [r7, #28]
 8003f38:	f001 f9ca 	bl	80052d0 <vQueueDelete>
            hSemaphore = NULL;
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	61fb      	str	r3, [r7, #28]
 8003f40:	e010      	b.n	8003f64 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8003f42:	69bb      	ldr	r3, [r7, #24]
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d108      	bne.n	8003f5a <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	461a      	mov	r2, r3
 8003f4e:	68b9      	ldr	r1, [r7, #8]
 8003f50:	68f8      	ldr	r0, [r7, #12]
 8003f52:	f000 fcc1 	bl	80048d8 <xQueueCreateCountingSemaphoreStatic>
 8003f56:	61f8      	str	r0, [r7, #28]
 8003f58:	e004      	b.n	8003f64 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8003f5a:	68b9      	ldr	r1, [r7, #8]
 8003f5c:	68f8      	ldr	r0, [r7, #12]
 8003f5e:	f000 fcf2 	bl	8004946 <xQueueCreateCountingSemaphore>
 8003f62:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8003f64:	69fb      	ldr	r3, [r7, #28]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d00c      	beq.n	8003f84 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d003      	beq.n	8003f78 <osSemaphoreNew+0xfc>
          name = attr->name;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	617b      	str	r3, [r7, #20]
 8003f76:	e001      	b.n	8003f7c <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8003f7c:	6979      	ldr	r1, [r7, #20]
 8003f7e:	69f8      	ldr	r0, [r7, #28]
 8003f80:	f001 faf2 	bl	8005568 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8003f84:	69fb      	ldr	r3, [r7, #28]
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3720      	adds	r7, #32
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}
	...

08003f90 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b086      	sub	sp, #24
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
 8003f98:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d103      	bne.n	8003fb0 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8003fa8:	f06f 0303 	mvn.w	r3, #3
 8003fac:	617b      	str	r3, [r7, #20]
 8003fae:	e039      	b.n	8004024 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003fb0:	f3ef 8305 	mrs	r3, IPSR
 8003fb4:	60fb      	str	r3, [r7, #12]
  return(result);
 8003fb6:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d022      	beq.n	8004002 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d003      	beq.n	8003fca <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8003fc2:	f06f 0303 	mvn.w	r3, #3
 8003fc6:	617b      	str	r3, [r7, #20]
 8003fc8:	e02c      	b.n	8004024 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8003fce:	f107 0308 	add.w	r3, r7, #8
 8003fd2:	461a      	mov	r2, r3
 8003fd4:	2100      	movs	r1, #0
 8003fd6:	6938      	ldr	r0, [r7, #16]
 8003fd8:	f001 f8fa 	bl	80051d0 <xQueueReceiveFromISR>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d003      	beq.n	8003fea <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8003fe2:	f06f 0302 	mvn.w	r3, #2
 8003fe6:	617b      	str	r3, [r7, #20]
 8003fe8:	e01c      	b.n	8004024 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d019      	beq.n	8004024 <osSemaphoreAcquire+0x94>
 8003ff0:	4b0f      	ldr	r3, [pc, #60]	; (8004030 <osSemaphoreAcquire+0xa0>)
 8003ff2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ff6:	601a      	str	r2, [r3, #0]
 8003ff8:	f3bf 8f4f 	dsb	sy
 8003ffc:	f3bf 8f6f 	isb	sy
 8004000:	e010      	b.n	8004024 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8004002:	6839      	ldr	r1, [r7, #0]
 8004004:	6938      	ldr	r0, [r7, #16]
 8004006:	f000 ffd7 	bl	8004fb8 <xQueueSemaphoreTake>
 800400a:	4603      	mov	r3, r0
 800400c:	2b01      	cmp	r3, #1
 800400e:	d009      	beq.n	8004024 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d003      	beq.n	800401e <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8004016:	f06f 0301 	mvn.w	r3, #1
 800401a:	617b      	str	r3, [r7, #20]
 800401c:	e002      	b.n	8004024 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800401e:	f06f 0302 	mvn.w	r3, #2
 8004022:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8004024:	697b      	ldr	r3, [r7, #20]
}
 8004026:	4618      	mov	r0, r3
 8004028:	3718      	adds	r7, #24
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}
 800402e:	bf00      	nop
 8004030:	e000ed04 	.word	0xe000ed04

08004034 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8004034:	b580      	push	{r7, lr}
 8004036:	b086      	sub	sp, #24
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8004040:	2300      	movs	r3, #0
 8004042:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d103      	bne.n	8004052 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800404a:	f06f 0303 	mvn.w	r3, #3
 800404e:	617b      	str	r3, [r7, #20]
 8004050:	e02c      	b.n	80040ac <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004052:	f3ef 8305 	mrs	r3, IPSR
 8004056:	60fb      	str	r3, [r7, #12]
  return(result);
 8004058:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800405a:	2b00      	cmp	r3, #0
 800405c:	d01a      	beq.n	8004094 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800405e:	2300      	movs	r3, #0
 8004060:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8004062:	f107 0308 	add.w	r3, r7, #8
 8004066:	4619      	mov	r1, r3
 8004068:	6938      	ldr	r0, [r7, #16]
 800406a:	f000 fe38 	bl	8004cde <xQueueGiveFromISR>
 800406e:	4603      	mov	r3, r0
 8004070:	2b01      	cmp	r3, #1
 8004072:	d003      	beq.n	800407c <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8004074:	f06f 0302 	mvn.w	r3, #2
 8004078:	617b      	str	r3, [r7, #20]
 800407a:	e017      	b.n	80040ac <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d014      	beq.n	80040ac <osSemaphoreRelease+0x78>
 8004082:	4b0d      	ldr	r3, [pc, #52]	; (80040b8 <osSemaphoreRelease+0x84>)
 8004084:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004088:	601a      	str	r2, [r3, #0]
 800408a:	f3bf 8f4f 	dsb	sy
 800408e:	f3bf 8f6f 	isb	sy
 8004092:	e00b      	b.n	80040ac <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8004094:	2300      	movs	r3, #0
 8004096:	2200      	movs	r2, #0
 8004098:	2100      	movs	r1, #0
 800409a:	6938      	ldr	r0, [r7, #16]
 800409c:	f000 fc86 	bl	80049ac <xQueueGenericSend>
 80040a0:	4603      	mov	r3, r0
 80040a2:	2b01      	cmp	r3, #1
 80040a4:	d002      	beq.n	80040ac <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 80040a6:	f06f 0302 	mvn.w	r3, #2
 80040aa:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80040ac:	697b      	ldr	r3, [r7, #20]
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3718      	adds	r7, #24
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}
 80040b6:	bf00      	nop
 80040b8:	e000ed04 	.word	0xe000ed04

080040bc <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80040bc:	b580      	push	{r7, lr}
 80040be:	b08a      	sub	sp, #40	; 0x28
 80040c0:	af02      	add	r7, sp, #8
 80040c2:	60f8      	str	r0, [r7, #12]
 80040c4:	60b9      	str	r1, [r7, #8]
 80040c6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80040c8:	2300      	movs	r3, #0
 80040ca:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80040cc:	f3ef 8305 	mrs	r3, IPSR
 80040d0:	613b      	str	r3, [r7, #16]
  return(result);
 80040d2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d15f      	bne.n	8004198 <osMessageQueueNew+0xdc>
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d05c      	beq.n	8004198 <osMessageQueueNew+0xdc>
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d059      	beq.n	8004198 <osMessageQueueNew+0xdc>
    mem = -1;
 80040e4:	f04f 33ff 	mov.w	r3, #4294967295
 80040e8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d029      	beq.n	8004144 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d012      	beq.n	800411e <osMessageQueueNew+0x62>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	68db      	ldr	r3, [r3, #12]
 80040fc:	2b4f      	cmp	r3, #79	; 0x4f
 80040fe:	d90e      	bls.n	800411e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004104:	2b00      	cmp	r3, #0
 8004106:	d00a      	beq.n	800411e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	695a      	ldr	r2, [r3, #20]
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	68b9      	ldr	r1, [r7, #8]
 8004110:	fb01 f303 	mul.w	r3, r1, r3
 8004114:	429a      	cmp	r2, r3
 8004116:	d302      	bcc.n	800411e <osMessageQueueNew+0x62>
        mem = 1;
 8004118:	2301      	movs	r3, #1
 800411a:	61bb      	str	r3, [r7, #24]
 800411c:	e014      	b.n	8004148 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d110      	bne.n	8004148 <osMessageQueueNew+0x8c>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	68db      	ldr	r3, [r3, #12]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d10c      	bne.n	8004148 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004132:	2b00      	cmp	r3, #0
 8004134:	d108      	bne.n	8004148 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	695b      	ldr	r3, [r3, #20]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d104      	bne.n	8004148 <osMessageQueueNew+0x8c>
          mem = 0;
 800413e:	2300      	movs	r3, #0
 8004140:	61bb      	str	r3, [r7, #24]
 8004142:	e001      	b.n	8004148 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8004144:	2300      	movs	r3, #0
 8004146:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004148:	69bb      	ldr	r3, [r7, #24]
 800414a:	2b01      	cmp	r3, #1
 800414c:	d10b      	bne.n	8004166 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	691a      	ldr	r2, [r3, #16]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	2100      	movs	r1, #0
 8004158:	9100      	str	r1, [sp, #0]
 800415a:	68b9      	ldr	r1, [r7, #8]
 800415c:	68f8      	ldr	r0, [r7, #12]
 800415e:	f000 fa2f 	bl	80045c0 <xQueueGenericCreateStatic>
 8004162:	61f8      	str	r0, [r7, #28]
 8004164:	e008      	b.n	8004178 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8004166:	69bb      	ldr	r3, [r7, #24]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d105      	bne.n	8004178 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800416c:	2200      	movs	r2, #0
 800416e:	68b9      	ldr	r1, [r7, #8]
 8004170:	68f8      	ldr	r0, [r7, #12]
 8004172:	f000 fa9d 	bl	80046b0 <xQueueGenericCreate>
 8004176:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8004178:	69fb      	ldr	r3, [r7, #28]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d00c      	beq.n	8004198 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d003      	beq.n	800418c <osMessageQueueNew+0xd0>
        name = attr->name;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	617b      	str	r3, [r7, #20]
 800418a:	e001      	b.n	8004190 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800418c:	2300      	movs	r3, #0
 800418e:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8004190:	6979      	ldr	r1, [r7, #20]
 8004192:	69f8      	ldr	r0, [r7, #28]
 8004194:	f001 f9e8 	bl	8005568 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8004198:	69fb      	ldr	r3, [r7, #28]
}
 800419a:	4618      	mov	r0, r3
 800419c:	3720      	adds	r7, #32
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}
	...

080041a4 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b088      	sub	sp, #32
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	60f8      	str	r0, [r7, #12]
 80041ac:	60b9      	str	r1, [r7, #8]
 80041ae:	603b      	str	r3, [r7, #0]
 80041b0:	4613      	mov	r3, r2
 80041b2:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80041b8:	2300      	movs	r3, #0
 80041ba:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80041bc:	f3ef 8305 	mrs	r3, IPSR
 80041c0:	617b      	str	r3, [r7, #20]
  return(result);
 80041c2:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d028      	beq.n	800421a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80041c8:	69bb      	ldr	r3, [r7, #24]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d005      	beq.n	80041da <osMessageQueuePut+0x36>
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d002      	beq.n	80041da <osMessageQueuePut+0x36>
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d003      	beq.n	80041e2 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80041da:	f06f 0303 	mvn.w	r3, #3
 80041de:	61fb      	str	r3, [r7, #28]
 80041e0:	e038      	b.n	8004254 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 80041e2:	2300      	movs	r3, #0
 80041e4:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80041e6:	f107 0210 	add.w	r2, r7, #16
 80041ea:	2300      	movs	r3, #0
 80041ec:	68b9      	ldr	r1, [r7, #8]
 80041ee:	69b8      	ldr	r0, [r7, #24]
 80041f0:	f000 fcda 	bl	8004ba8 <xQueueGenericSendFromISR>
 80041f4:	4603      	mov	r3, r0
 80041f6:	2b01      	cmp	r3, #1
 80041f8:	d003      	beq.n	8004202 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80041fa:	f06f 0302 	mvn.w	r3, #2
 80041fe:	61fb      	str	r3, [r7, #28]
 8004200:	e028      	b.n	8004254 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d025      	beq.n	8004254 <osMessageQueuePut+0xb0>
 8004208:	4b15      	ldr	r3, [pc, #84]	; (8004260 <osMessageQueuePut+0xbc>)
 800420a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800420e:	601a      	str	r2, [r3, #0]
 8004210:	f3bf 8f4f 	dsb	sy
 8004214:	f3bf 8f6f 	isb	sy
 8004218:	e01c      	b.n	8004254 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800421a:	69bb      	ldr	r3, [r7, #24]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d002      	beq.n	8004226 <osMessageQueuePut+0x82>
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d103      	bne.n	800422e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8004226:	f06f 0303 	mvn.w	r3, #3
 800422a:	61fb      	str	r3, [r7, #28]
 800422c:	e012      	b.n	8004254 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800422e:	2300      	movs	r3, #0
 8004230:	683a      	ldr	r2, [r7, #0]
 8004232:	68b9      	ldr	r1, [r7, #8]
 8004234:	69b8      	ldr	r0, [r7, #24]
 8004236:	f000 fbb9 	bl	80049ac <xQueueGenericSend>
 800423a:	4603      	mov	r3, r0
 800423c:	2b01      	cmp	r3, #1
 800423e:	d009      	beq.n	8004254 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d003      	beq.n	800424e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8004246:	f06f 0301 	mvn.w	r3, #1
 800424a:	61fb      	str	r3, [r7, #28]
 800424c:	e002      	b.n	8004254 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800424e:	f06f 0302 	mvn.w	r3, #2
 8004252:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8004254:	69fb      	ldr	r3, [r7, #28]
}
 8004256:	4618      	mov	r0, r3
 8004258:	3720      	adds	r7, #32
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}
 800425e:	bf00      	nop
 8004260:	e000ed04 	.word	0xe000ed04

08004264 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8004264:	b580      	push	{r7, lr}
 8004266:	b088      	sub	sp, #32
 8004268:	af00      	add	r7, sp, #0
 800426a:	60f8      	str	r0, [r7, #12]
 800426c:	60b9      	str	r1, [r7, #8]
 800426e:	607a      	str	r2, [r7, #4]
 8004270:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8004276:	2300      	movs	r3, #0
 8004278:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800427a:	f3ef 8305 	mrs	r3, IPSR
 800427e:	617b      	str	r3, [r7, #20]
  return(result);
 8004280:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8004282:	2b00      	cmp	r3, #0
 8004284:	d028      	beq.n	80042d8 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004286:	69bb      	ldr	r3, [r7, #24]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d005      	beq.n	8004298 <osMessageQueueGet+0x34>
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d002      	beq.n	8004298 <osMessageQueueGet+0x34>
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d003      	beq.n	80042a0 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8004298:	f06f 0303 	mvn.w	r3, #3
 800429c:	61fb      	str	r3, [r7, #28]
 800429e:	e037      	b.n	8004310 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80042a0:	2300      	movs	r3, #0
 80042a2:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80042a4:	f107 0310 	add.w	r3, r7, #16
 80042a8:	461a      	mov	r2, r3
 80042aa:	68b9      	ldr	r1, [r7, #8]
 80042ac:	69b8      	ldr	r0, [r7, #24]
 80042ae:	f000 ff8f 	bl	80051d0 <xQueueReceiveFromISR>
 80042b2:	4603      	mov	r3, r0
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d003      	beq.n	80042c0 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80042b8:	f06f 0302 	mvn.w	r3, #2
 80042bc:	61fb      	str	r3, [r7, #28]
 80042be:	e027      	b.n	8004310 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d024      	beq.n	8004310 <osMessageQueueGet+0xac>
 80042c6:	4b15      	ldr	r3, [pc, #84]	; (800431c <osMessageQueueGet+0xb8>)
 80042c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042cc:	601a      	str	r2, [r3, #0]
 80042ce:	f3bf 8f4f 	dsb	sy
 80042d2:	f3bf 8f6f 	isb	sy
 80042d6:	e01b      	b.n	8004310 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80042d8:	69bb      	ldr	r3, [r7, #24]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d002      	beq.n	80042e4 <osMessageQueueGet+0x80>
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d103      	bne.n	80042ec <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 80042e4:	f06f 0303 	mvn.w	r3, #3
 80042e8:	61fb      	str	r3, [r7, #28]
 80042ea:	e011      	b.n	8004310 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80042ec:	683a      	ldr	r2, [r7, #0]
 80042ee:	68b9      	ldr	r1, [r7, #8]
 80042f0:	69b8      	ldr	r0, [r7, #24]
 80042f2:	f000 fd81 	bl	8004df8 <xQueueReceive>
 80042f6:	4603      	mov	r3, r0
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	d009      	beq.n	8004310 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d003      	beq.n	800430a <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8004302:	f06f 0301 	mvn.w	r3, #1
 8004306:	61fb      	str	r3, [r7, #28]
 8004308:	e002      	b.n	8004310 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800430a:	f06f 0302 	mvn.w	r3, #2
 800430e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8004310:	69fb      	ldr	r3, [r7, #28]
}
 8004312:	4618      	mov	r0, r3
 8004314:	3720      	adds	r7, #32
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}
 800431a:	bf00      	nop
 800431c:	e000ed04 	.word	0xe000ed04

08004320 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004320:	b480      	push	{r7}
 8004322:	b085      	sub	sp, #20
 8004324:	af00      	add	r7, sp, #0
 8004326:	60f8      	str	r0, [r7, #12]
 8004328:	60b9      	str	r1, [r7, #8]
 800432a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	4a07      	ldr	r2, [pc, #28]	; (800434c <vApplicationGetIdleTaskMemory+0x2c>)
 8004330:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	4a06      	ldr	r2, [pc, #24]	; (8004350 <vApplicationGetIdleTaskMemory+0x30>)
 8004336:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2280      	movs	r2, #128	; 0x80
 800433c:	601a      	str	r2, [r3, #0]
}
 800433e:	bf00      	nop
 8004340:	3714      	adds	r7, #20
 8004342:	46bd      	mov	sp, r7
 8004344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004348:	4770      	bx	lr
 800434a:	bf00      	nop
 800434c:	200000a4 	.word	0x200000a4
 8004350:	20000160 	.word	0x20000160

08004354 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004354:	b480      	push	{r7}
 8004356:	b085      	sub	sp, #20
 8004358:	af00      	add	r7, sp, #0
 800435a:	60f8      	str	r0, [r7, #12]
 800435c:	60b9      	str	r1, [r7, #8]
 800435e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	4a07      	ldr	r2, [pc, #28]	; (8004380 <vApplicationGetTimerTaskMemory+0x2c>)
 8004364:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	4a06      	ldr	r2, [pc, #24]	; (8004384 <vApplicationGetTimerTaskMemory+0x30>)
 800436a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004372:	601a      	str	r2, [r3, #0]
}
 8004374:	bf00      	nop
 8004376:	3714      	adds	r7, #20
 8004378:	46bd      	mov	sp, r7
 800437a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437e:	4770      	bx	lr
 8004380:	20000360 	.word	0x20000360
 8004384:	2000041c 	.word	0x2000041c

08004388 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004388:	b480      	push	{r7}
 800438a:	b083      	sub	sp, #12
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	f103 0208 	add.w	r2, r3, #8
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	f04f 32ff 	mov.w	r2, #4294967295
 80043a0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	f103 0208 	add.w	r2, r3, #8
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	f103 0208 	add.w	r2, r3, #8
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2200      	movs	r2, #0
 80043ba:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80043bc:	bf00      	nop
 80043be:	370c      	adds	r7, #12
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr

080043c8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80043c8:	b480      	push	{r7}
 80043ca:	b083      	sub	sp, #12
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2200      	movs	r2, #0
 80043d4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80043d6:	bf00      	nop
 80043d8:	370c      	adds	r7, #12
 80043da:	46bd      	mov	sp, r7
 80043dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e0:	4770      	bx	lr

080043e2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80043e2:	b480      	push	{r7}
 80043e4:	b085      	sub	sp, #20
 80043e6:	af00      	add	r7, sp, #0
 80043e8:	6078      	str	r0, [r7, #4]
 80043ea:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	68fa      	ldr	r2, [r7, #12]
 80043f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	689a      	ldr	r2, [r3, #8]
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	683a      	ldr	r2, [r7, #0]
 8004406:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	683a      	ldr	r2, [r7, #0]
 800440c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	687a      	ldr	r2, [r7, #4]
 8004412:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	1c5a      	adds	r2, r3, #1
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	601a      	str	r2, [r3, #0]
}
 800441e:	bf00      	nop
 8004420:	3714      	adds	r7, #20
 8004422:	46bd      	mov	sp, r7
 8004424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004428:	4770      	bx	lr

0800442a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800442a:	b480      	push	{r7}
 800442c:	b085      	sub	sp, #20
 800442e:	af00      	add	r7, sp, #0
 8004430:	6078      	str	r0, [r7, #4]
 8004432:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004440:	d103      	bne.n	800444a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	691b      	ldr	r3, [r3, #16]
 8004446:	60fb      	str	r3, [r7, #12]
 8004448:	e00c      	b.n	8004464 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	3308      	adds	r3, #8
 800444e:	60fb      	str	r3, [r7, #12]
 8004450:	e002      	b.n	8004458 <vListInsert+0x2e>
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	60fb      	str	r3, [r7, #12]
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	68ba      	ldr	r2, [r7, #8]
 8004460:	429a      	cmp	r2, r3
 8004462:	d2f6      	bcs.n	8004452 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	685a      	ldr	r2, [r3, #4]
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	683a      	ldr	r2, [r7, #0]
 8004472:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	68fa      	ldr	r2, [r7, #12]
 8004478:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	683a      	ldr	r2, [r7, #0]
 800447e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	687a      	ldr	r2, [r7, #4]
 8004484:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	1c5a      	adds	r2, r3, #1
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	601a      	str	r2, [r3, #0]
}
 8004490:	bf00      	nop
 8004492:	3714      	adds	r7, #20
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr

0800449c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800449c:	b480      	push	{r7}
 800449e:	b085      	sub	sp, #20
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	691b      	ldr	r3, [r3, #16]
 80044a8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	687a      	ldr	r2, [r7, #4]
 80044b0:	6892      	ldr	r2, [r2, #8]
 80044b2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	687a      	ldr	r2, [r7, #4]
 80044ba:	6852      	ldr	r2, [r2, #4]
 80044bc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	687a      	ldr	r2, [r7, #4]
 80044c4:	429a      	cmp	r2, r3
 80044c6:	d103      	bne.n	80044d0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	689a      	ldr	r2, [r3, #8]
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2200      	movs	r2, #0
 80044d4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	1e5a      	subs	r2, r3, #1
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	3714      	adds	r7, #20
 80044e8:	46bd      	mov	sp, r7
 80044ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ee:	4770      	bx	lr

080044f0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b084      	sub	sp, #16
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
 80044f8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d10a      	bne.n	800451a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004508:	f383 8811 	msr	BASEPRI, r3
 800450c:	f3bf 8f6f 	isb	sy
 8004510:	f3bf 8f4f 	dsb	sy
 8004514:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004516:	bf00      	nop
 8004518:	e7fe      	b.n	8004518 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800451a:	f002 fd73 	bl	8007004 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004526:	68f9      	ldr	r1, [r7, #12]
 8004528:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800452a:	fb01 f303 	mul.w	r3, r1, r3
 800452e:	441a      	add	r2, r3
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2200      	movs	r2, #0
 8004538:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681a      	ldr	r2, [r3, #0]
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681a      	ldr	r2, [r3, #0]
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800454a:	3b01      	subs	r3, #1
 800454c:	68f9      	ldr	r1, [r7, #12]
 800454e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004550:	fb01 f303 	mul.w	r3, r1, r3
 8004554:	441a      	add	r2, r3
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	22ff      	movs	r2, #255	; 0xff
 800455e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	22ff      	movs	r2, #255	; 0xff
 8004566:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d114      	bne.n	800459a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	691b      	ldr	r3, [r3, #16]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d01a      	beq.n	80045ae <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	3310      	adds	r3, #16
 800457c:	4618      	mov	r0, r3
 800457e:	f001 fd13 	bl	8005fa8 <xTaskRemoveFromEventList>
 8004582:	4603      	mov	r3, r0
 8004584:	2b00      	cmp	r3, #0
 8004586:	d012      	beq.n	80045ae <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004588:	4b0c      	ldr	r3, [pc, #48]	; (80045bc <xQueueGenericReset+0xcc>)
 800458a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800458e:	601a      	str	r2, [r3, #0]
 8004590:	f3bf 8f4f 	dsb	sy
 8004594:	f3bf 8f6f 	isb	sy
 8004598:	e009      	b.n	80045ae <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	3310      	adds	r3, #16
 800459e:	4618      	mov	r0, r3
 80045a0:	f7ff fef2 	bl	8004388 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	3324      	adds	r3, #36	; 0x24
 80045a8:	4618      	mov	r0, r3
 80045aa:	f7ff feed 	bl	8004388 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80045ae:	f002 fd59 	bl	8007064 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80045b2:	2301      	movs	r3, #1
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	3710      	adds	r7, #16
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}
 80045bc:	e000ed04 	.word	0xe000ed04

080045c0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b08e      	sub	sp, #56	; 0x38
 80045c4:	af02      	add	r7, sp, #8
 80045c6:	60f8      	str	r0, [r7, #12]
 80045c8:	60b9      	str	r1, [r7, #8]
 80045ca:	607a      	str	r2, [r7, #4]
 80045cc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d10a      	bne.n	80045ea <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80045d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045d8:	f383 8811 	msr	BASEPRI, r3
 80045dc:	f3bf 8f6f 	isb	sy
 80045e0:	f3bf 8f4f 	dsb	sy
 80045e4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80045e6:	bf00      	nop
 80045e8:	e7fe      	b.n	80045e8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d10a      	bne.n	8004606 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80045f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045f4:	f383 8811 	msr	BASEPRI, r3
 80045f8:	f3bf 8f6f 	isb	sy
 80045fc:	f3bf 8f4f 	dsb	sy
 8004600:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004602:	bf00      	nop
 8004604:	e7fe      	b.n	8004604 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d002      	beq.n	8004612 <xQueueGenericCreateStatic+0x52>
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d001      	beq.n	8004616 <xQueueGenericCreateStatic+0x56>
 8004612:	2301      	movs	r3, #1
 8004614:	e000      	b.n	8004618 <xQueueGenericCreateStatic+0x58>
 8004616:	2300      	movs	r3, #0
 8004618:	2b00      	cmp	r3, #0
 800461a:	d10a      	bne.n	8004632 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800461c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004620:	f383 8811 	msr	BASEPRI, r3
 8004624:	f3bf 8f6f 	isb	sy
 8004628:	f3bf 8f4f 	dsb	sy
 800462c:	623b      	str	r3, [r7, #32]
}
 800462e:	bf00      	nop
 8004630:	e7fe      	b.n	8004630 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d102      	bne.n	800463e <xQueueGenericCreateStatic+0x7e>
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d101      	bne.n	8004642 <xQueueGenericCreateStatic+0x82>
 800463e:	2301      	movs	r3, #1
 8004640:	e000      	b.n	8004644 <xQueueGenericCreateStatic+0x84>
 8004642:	2300      	movs	r3, #0
 8004644:	2b00      	cmp	r3, #0
 8004646:	d10a      	bne.n	800465e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800464c:	f383 8811 	msr	BASEPRI, r3
 8004650:	f3bf 8f6f 	isb	sy
 8004654:	f3bf 8f4f 	dsb	sy
 8004658:	61fb      	str	r3, [r7, #28]
}
 800465a:	bf00      	nop
 800465c:	e7fe      	b.n	800465c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800465e:	2350      	movs	r3, #80	; 0x50
 8004660:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	2b50      	cmp	r3, #80	; 0x50
 8004666:	d00a      	beq.n	800467e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800466c:	f383 8811 	msr	BASEPRI, r3
 8004670:	f3bf 8f6f 	isb	sy
 8004674:	f3bf 8f4f 	dsb	sy
 8004678:	61bb      	str	r3, [r7, #24]
}
 800467a:	bf00      	nop
 800467c:	e7fe      	b.n	800467c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800467e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004686:	2b00      	cmp	r3, #0
 8004688:	d00d      	beq.n	80046a6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800468a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800468c:	2201      	movs	r2, #1
 800468e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004692:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004698:	9300      	str	r3, [sp, #0]
 800469a:	4613      	mov	r3, r2
 800469c:	687a      	ldr	r2, [r7, #4]
 800469e:	68b9      	ldr	r1, [r7, #8]
 80046a0:	68f8      	ldr	r0, [r7, #12]
 80046a2:	f000 f83f 	bl	8004724 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80046a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80046a8:	4618      	mov	r0, r3
 80046aa:	3730      	adds	r7, #48	; 0x30
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}

080046b0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b08a      	sub	sp, #40	; 0x28
 80046b4:	af02      	add	r7, sp, #8
 80046b6:	60f8      	str	r0, [r7, #12]
 80046b8:	60b9      	str	r1, [r7, #8]
 80046ba:	4613      	mov	r3, r2
 80046bc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d10a      	bne.n	80046da <xQueueGenericCreate+0x2a>
	__asm volatile
 80046c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046c8:	f383 8811 	msr	BASEPRI, r3
 80046cc:	f3bf 8f6f 	isb	sy
 80046d0:	f3bf 8f4f 	dsb	sy
 80046d4:	613b      	str	r3, [r7, #16]
}
 80046d6:	bf00      	nop
 80046d8:	e7fe      	b.n	80046d8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	68ba      	ldr	r2, [r7, #8]
 80046de:	fb02 f303 	mul.w	r3, r2, r3
 80046e2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80046e4:	69fb      	ldr	r3, [r7, #28]
 80046e6:	3350      	adds	r3, #80	; 0x50
 80046e8:	4618      	mov	r0, r3
 80046ea:	f002 fdad 	bl	8007248 <pvPortMalloc>
 80046ee:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80046f0:	69bb      	ldr	r3, [r7, #24]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d011      	beq.n	800471a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80046f6:	69bb      	ldr	r3, [r7, #24]
 80046f8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	3350      	adds	r3, #80	; 0x50
 80046fe:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004700:	69bb      	ldr	r3, [r7, #24]
 8004702:	2200      	movs	r2, #0
 8004704:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004708:	79fa      	ldrb	r2, [r7, #7]
 800470a:	69bb      	ldr	r3, [r7, #24]
 800470c:	9300      	str	r3, [sp, #0]
 800470e:	4613      	mov	r3, r2
 8004710:	697a      	ldr	r2, [r7, #20]
 8004712:	68b9      	ldr	r1, [r7, #8]
 8004714:	68f8      	ldr	r0, [r7, #12]
 8004716:	f000 f805 	bl	8004724 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800471a:	69bb      	ldr	r3, [r7, #24]
	}
 800471c:	4618      	mov	r0, r3
 800471e:	3720      	adds	r7, #32
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}

08004724 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b084      	sub	sp, #16
 8004728:	af00      	add	r7, sp, #0
 800472a:	60f8      	str	r0, [r7, #12]
 800472c:	60b9      	str	r1, [r7, #8]
 800472e:	607a      	str	r2, [r7, #4]
 8004730:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d103      	bne.n	8004740 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004738:	69bb      	ldr	r3, [r7, #24]
 800473a:	69ba      	ldr	r2, [r7, #24]
 800473c:	601a      	str	r2, [r3, #0]
 800473e:	e002      	b.n	8004746 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004740:	69bb      	ldr	r3, [r7, #24]
 8004742:	687a      	ldr	r2, [r7, #4]
 8004744:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004746:	69bb      	ldr	r3, [r7, #24]
 8004748:	68fa      	ldr	r2, [r7, #12]
 800474a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800474c:	69bb      	ldr	r3, [r7, #24]
 800474e:	68ba      	ldr	r2, [r7, #8]
 8004750:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004752:	2101      	movs	r1, #1
 8004754:	69b8      	ldr	r0, [r7, #24]
 8004756:	f7ff fecb 	bl	80044f0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800475a:	69bb      	ldr	r3, [r7, #24]
 800475c:	78fa      	ldrb	r2, [r7, #3]
 800475e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004762:	bf00      	nop
 8004764:	3710      	adds	r7, #16
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}

0800476a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800476a:	b580      	push	{r7, lr}
 800476c:	b082      	sub	sp, #8
 800476e:	af00      	add	r7, sp, #0
 8004770:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d00e      	beq.n	8004796 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2200      	movs	r2, #0
 800477c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2200      	movs	r2, #0
 8004782:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2200      	movs	r2, #0
 8004788:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800478a:	2300      	movs	r3, #0
 800478c:	2200      	movs	r2, #0
 800478e:	2100      	movs	r1, #0
 8004790:	6878      	ldr	r0, [r7, #4]
 8004792:	f000 f90b 	bl	80049ac <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8004796:	bf00      	nop
 8004798:	3708      	adds	r7, #8
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}

0800479e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800479e:	b580      	push	{r7, lr}
 80047a0:	b086      	sub	sp, #24
 80047a2:	af00      	add	r7, sp, #0
 80047a4:	4603      	mov	r3, r0
 80047a6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80047a8:	2301      	movs	r3, #1
 80047aa:	617b      	str	r3, [r7, #20]
 80047ac:	2300      	movs	r3, #0
 80047ae:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80047b0:	79fb      	ldrb	r3, [r7, #7]
 80047b2:	461a      	mov	r2, r3
 80047b4:	6939      	ldr	r1, [r7, #16]
 80047b6:	6978      	ldr	r0, [r7, #20]
 80047b8:	f7ff ff7a 	bl	80046b0 <xQueueGenericCreate>
 80047bc:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80047be:	68f8      	ldr	r0, [r7, #12]
 80047c0:	f7ff ffd3 	bl	800476a <prvInitialiseMutex>

		return xNewQueue;
 80047c4:	68fb      	ldr	r3, [r7, #12]
	}
 80047c6:	4618      	mov	r0, r3
 80047c8:	3718      	adds	r7, #24
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}

080047ce <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80047ce:	b580      	push	{r7, lr}
 80047d0:	b088      	sub	sp, #32
 80047d2:	af02      	add	r7, sp, #8
 80047d4:	4603      	mov	r3, r0
 80047d6:	6039      	str	r1, [r7, #0]
 80047d8:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80047da:	2301      	movs	r3, #1
 80047dc:	617b      	str	r3, [r7, #20]
 80047de:	2300      	movs	r3, #0
 80047e0:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80047e2:	79fb      	ldrb	r3, [r7, #7]
 80047e4:	9300      	str	r3, [sp, #0]
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	2200      	movs	r2, #0
 80047ea:	6939      	ldr	r1, [r7, #16]
 80047ec:	6978      	ldr	r0, [r7, #20]
 80047ee:	f7ff fee7 	bl	80045c0 <xQueueGenericCreateStatic>
 80047f2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80047f4:	68f8      	ldr	r0, [r7, #12]
 80047f6:	f7ff ffb8 	bl	800476a <prvInitialiseMutex>

		return xNewQueue;
 80047fa:	68fb      	ldr	r3, [r7, #12]
	}
 80047fc:	4618      	mov	r0, r3
 80047fe:	3718      	adds	r7, #24
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}

08004804 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8004804:	b590      	push	{r4, r7, lr}
 8004806:	b087      	sub	sp, #28
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d10a      	bne.n	800482c <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8004816:	f04f 0350 	mov.w	r3, #80	; 0x50
 800481a:	f383 8811 	msr	BASEPRI, r3
 800481e:	f3bf 8f6f 	isb	sy
 8004822:	f3bf 8f4f 	dsb	sy
 8004826:	60fb      	str	r3, [r7, #12]
}
 8004828:	bf00      	nop
 800482a:	e7fe      	b.n	800482a <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	689c      	ldr	r4, [r3, #8]
 8004830:	f001 fd7c 	bl	800632c <xTaskGetCurrentTaskHandle>
 8004834:	4603      	mov	r3, r0
 8004836:	429c      	cmp	r4, r3
 8004838:	d111      	bne.n	800485e <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	68db      	ldr	r3, [r3, #12]
 800483e:	1e5a      	subs	r2, r3, #1
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	68db      	ldr	r3, [r3, #12]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d105      	bne.n	8004858 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800484c:	2300      	movs	r3, #0
 800484e:	2200      	movs	r2, #0
 8004850:	2100      	movs	r1, #0
 8004852:	6938      	ldr	r0, [r7, #16]
 8004854:	f000 f8aa 	bl	80049ac <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8004858:	2301      	movs	r3, #1
 800485a:	617b      	str	r3, [r7, #20]
 800485c:	e001      	b.n	8004862 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800485e:	2300      	movs	r3, #0
 8004860:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8004862:	697b      	ldr	r3, [r7, #20]
	}
 8004864:	4618      	mov	r0, r3
 8004866:	371c      	adds	r7, #28
 8004868:	46bd      	mov	sp, r7
 800486a:	bd90      	pop	{r4, r7, pc}

0800486c <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800486c:	b590      	push	{r4, r7, lr}
 800486e:	b087      	sub	sp, #28
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
 8004874:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d10a      	bne.n	8004896 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8004880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004884:	f383 8811 	msr	BASEPRI, r3
 8004888:	f3bf 8f6f 	isb	sy
 800488c:	f3bf 8f4f 	dsb	sy
 8004890:	60fb      	str	r3, [r7, #12]
}
 8004892:	bf00      	nop
 8004894:	e7fe      	b.n	8004894 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	689c      	ldr	r4, [r3, #8]
 800489a:	f001 fd47 	bl	800632c <xTaskGetCurrentTaskHandle>
 800489e:	4603      	mov	r3, r0
 80048a0:	429c      	cmp	r4, r3
 80048a2:	d107      	bne.n	80048b4 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	68db      	ldr	r3, [r3, #12]
 80048a8:	1c5a      	adds	r2, r3, #1
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 80048ae:	2301      	movs	r3, #1
 80048b0:	617b      	str	r3, [r7, #20]
 80048b2:	e00c      	b.n	80048ce <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80048b4:	6839      	ldr	r1, [r7, #0]
 80048b6:	6938      	ldr	r0, [r7, #16]
 80048b8:	f000 fb7e 	bl	8004fb8 <xQueueSemaphoreTake>
 80048bc:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d004      	beq.n	80048ce <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	68db      	ldr	r3, [r3, #12]
 80048c8:	1c5a      	adds	r2, r3, #1
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 80048ce:	697b      	ldr	r3, [r7, #20]
	}
 80048d0:	4618      	mov	r0, r3
 80048d2:	371c      	adds	r7, #28
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd90      	pop	{r4, r7, pc}

080048d8 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b08a      	sub	sp, #40	; 0x28
 80048dc:	af02      	add	r7, sp, #8
 80048de:	60f8      	str	r0, [r7, #12]
 80048e0:	60b9      	str	r1, [r7, #8]
 80048e2:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d10a      	bne.n	8004900 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 80048ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ee:	f383 8811 	msr	BASEPRI, r3
 80048f2:	f3bf 8f6f 	isb	sy
 80048f6:	f3bf 8f4f 	dsb	sy
 80048fa:	61bb      	str	r3, [r7, #24]
}
 80048fc:	bf00      	nop
 80048fe:	e7fe      	b.n	80048fe <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8004900:	68ba      	ldr	r2, [r7, #8]
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	429a      	cmp	r2, r3
 8004906:	d90a      	bls.n	800491e <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8004908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800490c:	f383 8811 	msr	BASEPRI, r3
 8004910:	f3bf 8f6f 	isb	sy
 8004914:	f3bf 8f4f 	dsb	sy
 8004918:	617b      	str	r3, [r7, #20]
}
 800491a:	bf00      	nop
 800491c:	e7fe      	b.n	800491c <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800491e:	2302      	movs	r3, #2
 8004920:	9300      	str	r3, [sp, #0]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2200      	movs	r2, #0
 8004926:	2100      	movs	r1, #0
 8004928:	68f8      	ldr	r0, [r7, #12]
 800492a:	f7ff fe49 	bl	80045c0 <xQueueGenericCreateStatic>
 800492e:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8004930:	69fb      	ldr	r3, [r7, #28]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d002      	beq.n	800493c <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8004936:	69fb      	ldr	r3, [r7, #28]
 8004938:	68ba      	ldr	r2, [r7, #8]
 800493a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800493c:	69fb      	ldr	r3, [r7, #28]
	}
 800493e:	4618      	mov	r0, r3
 8004940:	3720      	adds	r7, #32
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}

08004946 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8004946:	b580      	push	{r7, lr}
 8004948:	b086      	sub	sp, #24
 800494a:	af00      	add	r7, sp, #0
 800494c:	6078      	str	r0, [r7, #4]
 800494e:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d10a      	bne.n	800496c <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8004956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800495a:	f383 8811 	msr	BASEPRI, r3
 800495e:	f3bf 8f6f 	isb	sy
 8004962:	f3bf 8f4f 	dsb	sy
 8004966:	613b      	str	r3, [r7, #16]
}
 8004968:	bf00      	nop
 800496a:	e7fe      	b.n	800496a <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800496c:	683a      	ldr	r2, [r7, #0]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	429a      	cmp	r2, r3
 8004972:	d90a      	bls.n	800498a <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8004974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004978:	f383 8811 	msr	BASEPRI, r3
 800497c:	f3bf 8f6f 	isb	sy
 8004980:	f3bf 8f4f 	dsb	sy
 8004984:	60fb      	str	r3, [r7, #12]
}
 8004986:	bf00      	nop
 8004988:	e7fe      	b.n	8004988 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800498a:	2202      	movs	r2, #2
 800498c:	2100      	movs	r1, #0
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f7ff fe8e 	bl	80046b0 <xQueueGenericCreate>
 8004994:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d002      	beq.n	80049a2 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	683a      	ldr	r2, [r7, #0]
 80049a0:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80049a2:	697b      	ldr	r3, [r7, #20]
	}
 80049a4:	4618      	mov	r0, r3
 80049a6:	3718      	adds	r7, #24
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bd80      	pop	{r7, pc}

080049ac <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b08e      	sub	sp, #56	; 0x38
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	60f8      	str	r0, [r7, #12]
 80049b4:	60b9      	str	r1, [r7, #8]
 80049b6:	607a      	str	r2, [r7, #4]
 80049b8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80049ba:	2300      	movs	r3, #0
 80049bc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80049c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d10a      	bne.n	80049de <xQueueGenericSend+0x32>
	__asm volatile
 80049c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049cc:	f383 8811 	msr	BASEPRI, r3
 80049d0:	f3bf 8f6f 	isb	sy
 80049d4:	f3bf 8f4f 	dsb	sy
 80049d8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80049da:	bf00      	nop
 80049dc:	e7fe      	b.n	80049dc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d103      	bne.n	80049ec <xQueueGenericSend+0x40>
 80049e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d101      	bne.n	80049f0 <xQueueGenericSend+0x44>
 80049ec:	2301      	movs	r3, #1
 80049ee:	e000      	b.n	80049f2 <xQueueGenericSend+0x46>
 80049f0:	2300      	movs	r3, #0
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d10a      	bne.n	8004a0c <xQueueGenericSend+0x60>
	__asm volatile
 80049f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049fa:	f383 8811 	msr	BASEPRI, r3
 80049fe:	f3bf 8f6f 	isb	sy
 8004a02:	f3bf 8f4f 	dsb	sy
 8004a06:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004a08:	bf00      	nop
 8004a0a:	e7fe      	b.n	8004a0a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	2b02      	cmp	r3, #2
 8004a10:	d103      	bne.n	8004a1a <xQueueGenericSend+0x6e>
 8004a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a16:	2b01      	cmp	r3, #1
 8004a18:	d101      	bne.n	8004a1e <xQueueGenericSend+0x72>
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e000      	b.n	8004a20 <xQueueGenericSend+0x74>
 8004a1e:	2300      	movs	r3, #0
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d10a      	bne.n	8004a3a <xQueueGenericSend+0x8e>
	__asm volatile
 8004a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a28:	f383 8811 	msr	BASEPRI, r3
 8004a2c:	f3bf 8f6f 	isb	sy
 8004a30:	f3bf 8f4f 	dsb	sy
 8004a34:	623b      	str	r3, [r7, #32]
}
 8004a36:	bf00      	nop
 8004a38:	e7fe      	b.n	8004a38 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004a3a:	f001 fc87 	bl	800634c <xTaskGetSchedulerState>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d102      	bne.n	8004a4a <xQueueGenericSend+0x9e>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d101      	bne.n	8004a4e <xQueueGenericSend+0xa2>
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	e000      	b.n	8004a50 <xQueueGenericSend+0xa4>
 8004a4e:	2300      	movs	r3, #0
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d10a      	bne.n	8004a6a <xQueueGenericSend+0xbe>
	__asm volatile
 8004a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a58:	f383 8811 	msr	BASEPRI, r3
 8004a5c:	f3bf 8f6f 	isb	sy
 8004a60:	f3bf 8f4f 	dsb	sy
 8004a64:	61fb      	str	r3, [r7, #28]
}
 8004a66:	bf00      	nop
 8004a68:	e7fe      	b.n	8004a68 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004a6a:	f002 facb 	bl	8007004 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a76:	429a      	cmp	r2, r3
 8004a78:	d302      	bcc.n	8004a80 <xQueueGenericSend+0xd4>
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	2b02      	cmp	r3, #2
 8004a7e:	d129      	bne.n	8004ad4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004a80:	683a      	ldr	r2, [r7, #0]
 8004a82:	68b9      	ldr	r1, [r7, #8]
 8004a84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a86:	f000 fc5e 	bl	8005346 <prvCopyDataToQueue>
 8004a8a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d010      	beq.n	8004ab6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a96:	3324      	adds	r3, #36	; 0x24
 8004a98:	4618      	mov	r0, r3
 8004a9a:	f001 fa85 	bl	8005fa8 <xTaskRemoveFromEventList>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d013      	beq.n	8004acc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004aa4:	4b3f      	ldr	r3, [pc, #252]	; (8004ba4 <xQueueGenericSend+0x1f8>)
 8004aa6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004aaa:	601a      	str	r2, [r3, #0]
 8004aac:	f3bf 8f4f 	dsb	sy
 8004ab0:	f3bf 8f6f 	isb	sy
 8004ab4:	e00a      	b.n	8004acc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d007      	beq.n	8004acc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004abc:	4b39      	ldr	r3, [pc, #228]	; (8004ba4 <xQueueGenericSend+0x1f8>)
 8004abe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ac2:	601a      	str	r2, [r3, #0]
 8004ac4:	f3bf 8f4f 	dsb	sy
 8004ac8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004acc:	f002 faca 	bl	8007064 <vPortExitCritical>
				return pdPASS;
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	e063      	b.n	8004b9c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d103      	bne.n	8004ae2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004ada:	f002 fac3 	bl	8007064 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	e05c      	b.n	8004b9c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004ae2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d106      	bne.n	8004af6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004ae8:	f107 0314 	add.w	r3, r7, #20
 8004aec:	4618      	mov	r0, r3
 8004aee:	f001 fabf 	bl	8006070 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004af2:	2301      	movs	r3, #1
 8004af4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004af6:	f002 fab5 	bl	8007064 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004afa:	f001 f819 	bl	8005b30 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004afe:	f002 fa81 	bl	8007004 <vPortEnterCritical>
 8004b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b04:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004b08:	b25b      	sxtb	r3, r3
 8004b0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b0e:	d103      	bne.n	8004b18 <xQueueGenericSend+0x16c>
 8004b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b12:	2200      	movs	r2, #0
 8004b14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b1a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b1e:	b25b      	sxtb	r3, r3
 8004b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b24:	d103      	bne.n	8004b2e <xQueueGenericSend+0x182>
 8004b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b28:	2200      	movs	r2, #0
 8004b2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b2e:	f002 fa99 	bl	8007064 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004b32:	1d3a      	adds	r2, r7, #4
 8004b34:	f107 0314 	add.w	r3, r7, #20
 8004b38:	4611      	mov	r1, r2
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f001 faae 	bl	800609c <xTaskCheckForTimeOut>
 8004b40:	4603      	mov	r3, r0
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d124      	bne.n	8004b90 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004b46:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b48:	f000 fcf5 	bl	8005536 <prvIsQueueFull>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d018      	beq.n	8004b84 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b54:	3310      	adds	r3, #16
 8004b56:	687a      	ldr	r2, [r7, #4]
 8004b58:	4611      	mov	r1, r2
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f001 f9d4 	bl	8005f08 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004b60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b62:	f000 fc80 	bl	8005466 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004b66:	f000 fff1 	bl	8005b4c <xTaskResumeAll>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	f47f af7c 	bne.w	8004a6a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004b72:	4b0c      	ldr	r3, [pc, #48]	; (8004ba4 <xQueueGenericSend+0x1f8>)
 8004b74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b78:	601a      	str	r2, [r3, #0]
 8004b7a:	f3bf 8f4f 	dsb	sy
 8004b7e:	f3bf 8f6f 	isb	sy
 8004b82:	e772      	b.n	8004a6a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004b84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b86:	f000 fc6e 	bl	8005466 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004b8a:	f000 ffdf 	bl	8005b4c <xTaskResumeAll>
 8004b8e:	e76c      	b.n	8004a6a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004b90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b92:	f000 fc68 	bl	8005466 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004b96:	f000 ffd9 	bl	8005b4c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004b9a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	3738      	adds	r7, #56	; 0x38
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd80      	pop	{r7, pc}
 8004ba4:	e000ed04 	.word	0xe000ed04

08004ba8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b090      	sub	sp, #64	; 0x40
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	60f8      	str	r0, [r7, #12]
 8004bb0:	60b9      	str	r1, [r7, #8]
 8004bb2:	607a      	str	r2, [r7, #4]
 8004bb4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004bba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d10a      	bne.n	8004bd6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bc4:	f383 8811 	msr	BASEPRI, r3
 8004bc8:	f3bf 8f6f 	isb	sy
 8004bcc:	f3bf 8f4f 	dsb	sy
 8004bd0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004bd2:	bf00      	nop
 8004bd4:	e7fe      	b.n	8004bd4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d103      	bne.n	8004be4 <xQueueGenericSendFromISR+0x3c>
 8004bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d101      	bne.n	8004be8 <xQueueGenericSendFromISR+0x40>
 8004be4:	2301      	movs	r3, #1
 8004be6:	e000      	b.n	8004bea <xQueueGenericSendFromISR+0x42>
 8004be8:	2300      	movs	r3, #0
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d10a      	bne.n	8004c04 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bf2:	f383 8811 	msr	BASEPRI, r3
 8004bf6:	f3bf 8f6f 	isb	sy
 8004bfa:	f3bf 8f4f 	dsb	sy
 8004bfe:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004c00:	bf00      	nop
 8004c02:	e7fe      	b.n	8004c02 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	2b02      	cmp	r3, #2
 8004c08:	d103      	bne.n	8004c12 <xQueueGenericSendFromISR+0x6a>
 8004c0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c0e:	2b01      	cmp	r3, #1
 8004c10:	d101      	bne.n	8004c16 <xQueueGenericSendFromISR+0x6e>
 8004c12:	2301      	movs	r3, #1
 8004c14:	e000      	b.n	8004c18 <xQueueGenericSendFromISR+0x70>
 8004c16:	2300      	movs	r3, #0
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d10a      	bne.n	8004c32 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c20:	f383 8811 	msr	BASEPRI, r3
 8004c24:	f3bf 8f6f 	isb	sy
 8004c28:	f3bf 8f4f 	dsb	sy
 8004c2c:	623b      	str	r3, [r7, #32]
}
 8004c2e:	bf00      	nop
 8004c30:	e7fe      	b.n	8004c30 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004c32:	f002 fac9 	bl	80071c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004c36:	f3ef 8211 	mrs	r2, BASEPRI
 8004c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c3e:	f383 8811 	msr	BASEPRI, r3
 8004c42:	f3bf 8f6f 	isb	sy
 8004c46:	f3bf 8f4f 	dsb	sy
 8004c4a:	61fa      	str	r2, [r7, #28]
 8004c4c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004c4e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004c50:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004c52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c5a:	429a      	cmp	r2, r3
 8004c5c:	d302      	bcc.n	8004c64 <xQueueGenericSendFromISR+0xbc>
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	2b02      	cmp	r3, #2
 8004c62:	d12f      	bne.n	8004cc4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004c64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c66:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004c6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004c6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c72:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004c74:	683a      	ldr	r2, [r7, #0]
 8004c76:	68b9      	ldr	r1, [r7, #8]
 8004c78:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004c7a:	f000 fb64 	bl	8005346 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004c7e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004c82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c86:	d112      	bne.n	8004cae <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004c88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d016      	beq.n	8004cbe <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c92:	3324      	adds	r3, #36	; 0x24
 8004c94:	4618      	mov	r0, r3
 8004c96:	f001 f987 	bl	8005fa8 <xTaskRemoveFromEventList>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d00e      	beq.n	8004cbe <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d00b      	beq.n	8004cbe <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2201      	movs	r2, #1
 8004caa:	601a      	str	r2, [r3, #0]
 8004cac:	e007      	b.n	8004cbe <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004cae:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004cb2:	3301      	adds	r3, #1
 8004cb4:	b2db      	uxtb	r3, r3
 8004cb6:	b25a      	sxtb	r2, r3
 8004cb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004cc2:	e001      	b.n	8004cc8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004cc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cca:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004cd2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004cd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	3740      	adds	r7, #64	; 0x40
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd80      	pop	{r7, pc}

08004cde <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004cde:	b580      	push	{r7, lr}
 8004ce0:	b08e      	sub	sp, #56	; 0x38
 8004ce2:	af00      	add	r7, sp, #0
 8004ce4:	6078      	str	r0, [r7, #4]
 8004ce6:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8004cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d10a      	bne.n	8004d08 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8004cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cf6:	f383 8811 	msr	BASEPRI, r3
 8004cfa:	f3bf 8f6f 	isb	sy
 8004cfe:	f3bf 8f4f 	dsb	sy
 8004d02:	623b      	str	r3, [r7, #32]
}
 8004d04:	bf00      	nop
 8004d06:	e7fe      	b.n	8004d06 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d00a      	beq.n	8004d26 <xQueueGiveFromISR+0x48>
	__asm volatile
 8004d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d14:	f383 8811 	msr	BASEPRI, r3
 8004d18:	f3bf 8f6f 	isb	sy
 8004d1c:	f3bf 8f4f 	dsb	sy
 8004d20:	61fb      	str	r3, [r7, #28]
}
 8004d22:	bf00      	nop
 8004d24:	e7fe      	b.n	8004d24 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8004d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d103      	bne.n	8004d36 <xQueueGiveFromISR+0x58>
 8004d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d101      	bne.n	8004d3a <xQueueGiveFromISR+0x5c>
 8004d36:	2301      	movs	r3, #1
 8004d38:	e000      	b.n	8004d3c <xQueueGiveFromISR+0x5e>
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d10a      	bne.n	8004d56 <xQueueGiveFromISR+0x78>
	__asm volatile
 8004d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d44:	f383 8811 	msr	BASEPRI, r3
 8004d48:	f3bf 8f6f 	isb	sy
 8004d4c:	f3bf 8f4f 	dsb	sy
 8004d50:	61bb      	str	r3, [r7, #24]
}
 8004d52:	bf00      	nop
 8004d54:	e7fe      	b.n	8004d54 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004d56:	f002 fa37 	bl	80071c8 <vPortValidateInterruptPriority>
	__asm volatile
 8004d5a:	f3ef 8211 	mrs	r2, BASEPRI
 8004d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d62:	f383 8811 	msr	BASEPRI, r3
 8004d66:	f3bf 8f6f 	isb	sy
 8004d6a:	f3bf 8f4f 	dsb	sy
 8004d6e:	617a      	str	r2, [r7, #20]
 8004d70:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8004d72:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004d74:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d7a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8004d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d82:	429a      	cmp	r2, r3
 8004d84:	d22b      	bcs.n	8004dde <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d88:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d92:	1c5a      	adds	r2, r3, #1
 8004d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d96:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004d98:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004d9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004da0:	d112      	bne.n	8004dc8 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d016      	beq.n	8004dd8 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dac:	3324      	adds	r3, #36	; 0x24
 8004dae:	4618      	mov	r0, r3
 8004db0:	f001 f8fa 	bl	8005fa8 <xTaskRemoveFromEventList>
 8004db4:	4603      	mov	r3, r0
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d00e      	beq.n	8004dd8 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d00b      	beq.n	8004dd8 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	601a      	str	r2, [r3, #0]
 8004dc6:	e007      	b.n	8004dd8 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004dc8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004dcc:	3301      	adds	r3, #1
 8004dce:	b2db      	uxtb	r3, r3
 8004dd0:	b25a      	sxtb	r2, r3
 8004dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004dd8:	2301      	movs	r3, #1
 8004dda:	637b      	str	r3, [r7, #52]	; 0x34
 8004ddc:	e001      	b.n	8004de2 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004dde:	2300      	movs	r3, #0
 8004de0:	637b      	str	r3, [r7, #52]	; 0x34
 8004de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004de4:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	f383 8811 	msr	BASEPRI, r3
}
 8004dec:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004dee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	3738      	adds	r7, #56	; 0x38
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}

08004df8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b08c      	sub	sp, #48	; 0x30
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	60f8      	str	r0, [r7, #12]
 8004e00:	60b9      	str	r1, [r7, #8]
 8004e02:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004e04:	2300      	movs	r3, #0
 8004e06:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d10a      	bne.n	8004e28 <xQueueReceive+0x30>
	__asm volatile
 8004e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e16:	f383 8811 	msr	BASEPRI, r3
 8004e1a:	f3bf 8f6f 	isb	sy
 8004e1e:	f3bf 8f4f 	dsb	sy
 8004e22:	623b      	str	r3, [r7, #32]
}
 8004e24:	bf00      	nop
 8004e26:	e7fe      	b.n	8004e26 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d103      	bne.n	8004e36 <xQueueReceive+0x3e>
 8004e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d101      	bne.n	8004e3a <xQueueReceive+0x42>
 8004e36:	2301      	movs	r3, #1
 8004e38:	e000      	b.n	8004e3c <xQueueReceive+0x44>
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d10a      	bne.n	8004e56 <xQueueReceive+0x5e>
	__asm volatile
 8004e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e44:	f383 8811 	msr	BASEPRI, r3
 8004e48:	f3bf 8f6f 	isb	sy
 8004e4c:	f3bf 8f4f 	dsb	sy
 8004e50:	61fb      	str	r3, [r7, #28]
}
 8004e52:	bf00      	nop
 8004e54:	e7fe      	b.n	8004e54 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004e56:	f001 fa79 	bl	800634c <xTaskGetSchedulerState>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d102      	bne.n	8004e66 <xQueueReceive+0x6e>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d101      	bne.n	8004e6a <xQueueReceive+0x72>
 8004e66:	2301      	movs	r3, #1
 8004e68:	e000      	b.n	8004e6c <xQueueReceive+0x74>
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d10a      	bne.n	8004e86 <xQueueReceive+0x8e>
	__asm volatile
 8004e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e74:	f383 8811 	msr	BASEPRI, r3
 8004e78:	f3bf 8f6f 	isb	sy
 8004e7c:	f3bf 8f4f 	dsb	sy
 8004e80:	61bb      	str	r3, [r7, #24]
}
 8004e82:	bf00      	nop
 8004e84:	e7fe      	b.n	8004e84 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004e86:	f002 f8bd 	bl	8007004 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e8e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d01f      	beq.n	8004ed6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004e96:	68b9      	ldr	r1, [r7, #8]
 8004e98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e9a:	f000 fabe 	bl	800541a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea0:	1e5a      	subs	r2, r3, #1
 8004ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ea4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ea8:	691b      	ldr	r3, [r3, #16]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d00f      	beq.n	8004ece <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eb0:	3310      	adds	r3, #16
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	f001 f878 	bl	8005fa8 <xTaskRemoveFromEventList>
 8004eb8:	4603      	mov	r3, r0
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d007      	beq.n	8004ece <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004ebe:	4b3d      	ldr	r3, [pc, #244]	; (8004fb4 <xQueueReceive+0x1bc>)
 8004ec0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ec4:	601a      	str	r2, [r3, #0]
 8004ec6:	f3bf 8f4f 	dsb	sy
 8004eca:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004ece:	f002 f8c9 	bl	8007064 <vPortExitCritical>
				return pdPASS;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	e069      	b.n	8004faa <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d103      	bne.n	8004ee4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004edc:	f002 f8c2 	bl	8007064 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	e062      	b.n	8004faa <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004ee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d106      	bne.n	8004ef8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004eea:	f107 0310 	add.w	r3, r7, #16
 8004eee:	4618      	mov	r0, r3
 8004ef0:	f001 f8be 	bl	8006070 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004ef8:	f002 f8b4 	bl	8007064 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004efc:	f000 fe18 	bl	8005b30 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004f00:	f002 f880 	bl	8007004 <vPortEnterCritical>
 8004f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f06:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004f0a:	b25b      	sxtb	r3, r3
 8004f0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f10:	d103      	bne.n	8004f1a <xQueueReceive+0x122>
 8004f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f14:	2200      	movs	r2, #0
 8004f16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f1c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004f20:	b25b      	sxtb	r3, r3
 8004f22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f26:	d103      	bne.n	8004f30 <xQueueReceive+0x138>
 8004f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f30:	f002 f898 	bl	8007064 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004f34:	1d3a      	adds	r2, r7, #4
 8004f36:	f107 0310 	add.w	r3, r7, #16
 8004f3a:	4611      	mov	r1, r2
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	f001 f8ad 	bl	800609c <xTaskCheckForTimeOut>
 8004f42:	4603      	mov	r3, r0
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d123      	bne.n	8004f90 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004f48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f4a:	f000 fade 	bl	800550a <prvIsQueueEmpty>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d017      	beq.n	8004f84 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f56:	3324      	adds	r3, #36	; 0x24
 8004f58:	687a      	ldr	r2, [r7, #4]
 8004f5a:	4611      	mov	r1, r2
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	f000 ffd3 	bl	8005f08 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004f62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f64:	f000 fa7f 	bl	8005466 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004f68:	f000 fdf0 	bl	8005b4c <xTaskResumeAll>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d189      	bne.n	8004e86 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004f72:	4b10      	ldr	r3, [pc, #64]	; (8004fb4 <xQueueReceive+0x1bc>)
 8004f74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f78:	601a      	str	r2, [r3, #0]
 8004f7a:	f3bf 8f4f 	dsb	sy
 8004f7e:	f3bf 8f6f 	isb	sy
 8004f82:	e780      	b.n	8004e86 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004f84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f86:	f000 fa6e 	bl	8005466 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004f8a:	f000 fddf 	bl	8005b4c <xTaskResumeAll>
 8004f8e:	e77a      	b.n	8004e86 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004f90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f92:	f000 fa68 	bl	8005466 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004f96:	f000 fdd9 	bl	8005b4c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004f9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f9c:	f000 fab5 	bl	800550a <prvIsQueueEmpty>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	f43f af6f 	beq.w	8004e86 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004fa8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	3730      	adds	r7, #48	; 0x30
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}
 8004fb2:	bf00      	nop
 8004fb4:	e000ed04 	.word	0xe000ed04

08004fb8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b08e      	sub	sp, #56	; 0x38
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
 8004fc0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d10a      	bne.n	8004fea <xQueueSemaphoreTake+0x32>
	__asm volatile
 8004fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fd8:	f383 8811 	msr	BASEPRI, r3
 8004fdc:	f3bf 8f6f 	isb	sy
 8004fe0:	f3bf 8f4f 	dsb	sy
 8004fe4:	623b      	str	r3, [r7, #32]
}
 8004fe6:	bf00      	nop
 8004fe8:	e7fe      	b.n	8004fe8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d00a      	beq.n	8005008 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8004ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ff6:	f383 8811 	msr	BASEPRI, r3
 8004ffa:	f3bf 8f6f 	isb	sy
 8004ffe:	f3bf 8f4f 	dsb	sy
 8005002:	61fb      	str	r3, [r7, #28]
}
 8005004:	bf00      	nop
 8005006:	e7fe      	b.n	8005006 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005008:	f001 f9a0 	bl	800634c <xTaskGetSchedulerState>
 800500c:	4603      	mov	r3, r0
 800500e:	2b00      	cmp	r3, #0
 8005010:	d102      	bne.n	8005018 <xQueueSemaphoreTake+0x60>
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d101      	bne.n	800501c <xQueueSemaphoreTake+0x64>
 8005018:	2301      	movs	r3, #1
 800501a:	e000      	b.n	800501e <xQueueSemaphoreTake+0x66>
 800501c:	2300      	movs	r3, #0
 800501e:	2b00      	cmp	r3, #0
 8005020:	d10a      	bne.n	8005038 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8005022:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005026:	f383 8811 	msr	BASEPRI, r3
 800502a:	f3bf 8f6f 	isb	sy
 800502e:	f3bf 8f4f 	dsb	sy
 8005032:	61bb      	str	r3, [r7, #24]
}
 8005034:	bf00      	nop
 8005036:	e7fe      	b.n	8005036 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005038:	f001 ffe4 	bl	8007004 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800503c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800503e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005040:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005044:	2b00      	cmp	r3, #0
 8005046:	d024      	beq.n	8005092 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800504a:	1e5a      	subs	r2, r3, #1
 800504c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800504e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d104      	bne.n	8005062 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005058:	f001 faee 	bl	8006638 <pvTaskIncrementMutexHeldCount>
 800505c:	4602      	mov	r2, r0
 800505e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005060:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005064:	691b      	ldr	r3, [r3, #16]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d00f      	beq.n	800508a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800506a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800506c:	3310      	adds	r3, #16
 800506e:	4618      	mov	r0, r3
 8005070:	f000 ff9a 	bl	8005fa8 <xTaskRemoveFromEventList>
 8005074:	4603      	mov	r3, r0
 8005076:	2b00      	cmp	r3, #0
 8005078:	d007      	beq.n	800508a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800507a:	4b54      	ldr	r3, [pc, #336]	; (80051cc <xQueueSemaphoreTake+0x214>)
 800507c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005080:	601a      	str	r2, [r3, #0]
 8005082:	f3bf 8f4f 	dsb	sy
 8005086:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800508a:	f001 ffeb 	bl	8007064 <vPortExitCritical>
				return pdPASS;
 800508e:	2301      	movs	r3, #1
 8005090:	e097      	b.n	80051c2 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d111      	bne.n	80050bc <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800509a:	2b00      	cmp	r3, #0
 800509c:	d00a      	beq.n	80050b4 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800509e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050a2:	f383 8811 	msr	BASEPRI, r3
 80050a6:	f3bf 8f6f 	isb	sy
 80050aa:	f3bf 8f4f 	dsb	sy
 80050ae:	617b      	str	r3, [r7, #20]
}
 80050b0:	bf00      	nop
 80050b2:	e7fe      	b.n	80050b2 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80050b4:	f001 ffd6 	bl	8007064 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80050b8:	2300      	movs	r3, #0
 80050ba:	e082      	b.n	80051c2 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80050bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d106      	bne.n	80050d0 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80050c2:	f107 030c 	add.w	r3, r7, #12
 80050c6:	4618      	mov	r0, r3
 80050c8:	f000 ffd2 	bl	8006070 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80050cc:	2301      	movs	r3, #1
 80050ce:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80050d0:	f001 ffc8 	bl	8007064 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80050d4:	f000 fd2c 	bl	8005b30 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80050d8:	f001 ff94 	bl	8007004 <vPortEnterCritical>
 80050dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80050e2:	b25b      	sxtb	r3, r3
 80050e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050e8:	d103      	bne.n	80050f2 <xQueueSemaphoreTake+0x13a>
 80050ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050ec:	2200      	movs	r2, #0
 80050ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80050f8:	b25b      	sxtb	r3, r3
 80050fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050fe:	d103      	bne.n	8005108 <xQueueSemaphoreTake+0x150>
 8005100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005102:	2200      	movs	r2, #0
 8005104:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005108:	f001 ffac 	bl	8007064 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800510c:	463a      	mov	r2, r7
 800510e:	f107 030c 	add.w	r3, r7, #12
 8005112:	4611      	mov	r1, r2
 8005114:	4618      	mov	r0, r3
 8005116:	f000 ffc1 	bl	800609c <xTaskCheckForTimeOut>
 800511a:	4603      	mov	r3, r0
 800511c:	2b00      	cmp	r3, #0
 800511e:	d132      	bne.n	8005186 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005120:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005122:	f000 f9f2 	bl	800550a <prvIsQueueEmpty>
 8005126:	4603      	mov	r3, r0
 8005128:	2b00      	cmp	r3, #0
 800512a:	d026      	beq.n	800517a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800512c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d109      	bne.n	8005148 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8005134:	f001 ff66 	bl	8007004 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800513a:	689b      	ldr	r3, [r3, #8]
 800513c:	4618      	mov	r0, r3
 800513e:	f001 f923 	bl	8006388 <xTaskPriorityInherit>
 8005142:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8005144:	f001 ff8e 	bl	8007064 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800514a:	3324      	adds	r3, #36	; 0x24
 800514c:	683a      	ldr	r2, [r7, #0]
 800514e:	4611      	mov	r1, r2
 8005150:	4618      	mov	r0, r3
 8005152:	f000 fed9 	bl	8005f08 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005156:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005158:	f000 f985 	bl	8005466 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800515c:	f000 fcf6 	bl	8005b4c <xTaskResumeAll>
 8005160:	4603      	mov	r3, r0
 8005162:	2b00      	cmp	r3, #0
 8005164:	f47f af68 	bne.w	8005038 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8005168:	4b18      	ldr	r3, [pc, #96]	; (80051cc <xQueueSemaphoreTake+0x214>)
 800516a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800516e:	601a      	str	r2, [r3, #0]
 8005170:	f3bf 8f4f 	dsb	sy
 8005174:	f3bf 8f6f 	isb	sy
 8005178:	e75e      	b.n	8005038 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800517a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800517c:	f000 f973 	bl	8005466 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005180:	f000 fce4 	bl	8005b4c <xTaskResumeAll>
 8005184:	e758      	b.n	8005038 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005186:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005188:	f000 f96d 	bl	8005466 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800518c:	f000 fcde 	bl	8005b4c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005190:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005192:	f000 f9ba 	bl	800550a <prvIsQueueEmpty>
 8005196:	4603      	mov	r3, r0
 8005198:	2b00      	cmp	r3, #0
 800519a:	f43f af4d 	beq.w	8005038 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800519e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d00d      	beq.n	80051c0 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80051a4:	f001 ff2e 	bl	8007004 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80051a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80051aa:	f000 f8b4 	bl	8005316 <prvGetDisinheritPriorityAfterTimeout>
 80051ae:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80051b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051b2:	689b      	ldr	r3, [r3, #8]
 80051b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80051b6:	4618      	mov	r0, r3
 80051b8:	f001 f9bc 	bl	8006534 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80051bc:	f001 ff52 	bl	8007064 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80051c0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	3738      	adds	r7, #56	; 0x38
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}
 80051ca:	bf00      	nop
 80051cc:	e000ed04 	.word	0xe000ed04

080051d0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b08e      	sub	sp, #56	; 0x38
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	60f8      	str	r0, [r7, #12]
 80051d8:	60b9      	str	r1, [r7, #8]
 80051da:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80051e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d10a      	bne.n	80051fc <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80051e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051ea:	f383 8811 	msr	BASEPRI, r3
 80051ee:	f3bf 8f6f 	isb	sy
 80051f2:	f3bf 8f4f 	dsb	sy
 80051f6:	623b      	str	r3, [r7, #32]
}
 80051f8:	bf00      	nop
 80051fa:	e7fe      	b.n	80051fa <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d103      	bne.n	800520a <xQueueReceiveFromISR+0x3a>
 8005202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005206:	2b00      	cmp	r3, #0
 8005208:	d101      	bne.n	800520e <xQueueReceiveFromISR+0x3e>
 800520a:	2301      	movs	r3, #1
 800520c:	e000      	b.n	8005210 <xQueueReceiveFromISR+0x40>
 800520e:	2300      	movs	r3, #0
 8005210:	2b00      	cmp	r3, #0
 8005212:	d10a      	bne.n	800522a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8005214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005218:	f383 8811 	msr	BASEPRI, r3
 800521c:	f3bf 8f6f 	isb	sy
 8005220:	f3bf 8f4f 	dsb	sy
 8005224:	61fb      	str	r3, [r7, #28]
}
 8005226:	bf00      	nop
 8005228:	e7fe      	b.n	8005228 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800522a:	f001 ffcd 	bl	80071c8 <vPortValidateInterruptPriority>
	__asm volatile
 800522e:	f3ef 8211 	mrs	r2, BASEPRI
 8005232:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005236:	f383 8811 	msr	BASEPRI, r3
 800523a:	f3bf 8f6f 	isb	sy
 800523e:	f3bf 8f4f 	dsb	sy
 8005242:	61ba      	str	r2, [r7, #24]
 8005244:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005246:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005248:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800524a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800524c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800524e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005252:	2b00      	cmp	r3, #0
 8005254:	d02f      	beq.n	80052b6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005258:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800525c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005260:	68b9      	ldr	r1, [r7, #8]
 8005262:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005264:	f000 f8d9 	bl	800541a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800526a:	1e5a      	subs	r2, r3, #1
 800526c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800526e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005270:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005274:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005278:	d112      	bne.n	80052a0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800527a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800527c:	691b      	ldr	r3, [r3, #16]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d016      	beq.n	80052b0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005284:	3310      	adds	r3, #16
 8005286:	4618      	mov	r0, r3
 8005288:	f000 fe8e 	bl	8005fa8 <xTaskRemoveFromEventList>
 800528c:	4603      	mov	r3, r0
 800528e:	2b00      	cmp	r3, #0
 8005290:	d00e      	beq.n	80052b0 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d00b      	beq.n	80052b0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2201      	movs	r2, #1
 800529c:	601a      	str	r2, [r3, #0]
 800529e:	e007      	b.n	80052b0 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80052a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80052a4:	3301      	adds	r3, #1
 80052a6:	b2db      	uxtb	r3, r3
 80052a8:	b25a      	sxtb	r2, r3
 80052aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80052b0:	2301      	movs	r3, #1
 80052b2:	637b      	str	r3, [r7, #52]	; 0x34
 80052b4:	e001      	b.n	80052ba <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80052b6:	2300      	movs	r3, #0
 80052b8:	637b      	str	r3, [r7, #52]	; 0x34
 80052ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052bc:	613b      	str	r3, [r7, #16]
	__asm volatile
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	f383 8811 	msr	BASEPRI, r3
}
 80052c4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80052c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	3738      	adds	r7, #56	; 0x38
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd80      	pop	{r7, pc}

080052d0 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b084      	sub	sp, #16
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d10a      	bne.n	80052f8 <vQueueDelete+0x28>
	__asm volatile
 80052e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052e6:	f383 8811 	msr	BASEPRI, r3
 80052ea:	f3bf 8f6f 	isb	sy
 80052ee:	f3bf 8f4f 	dsb	sy
 80052f2:	60bb      	str	r3, [r7, #8]
}
 80052f4:	bf00      	nop
 80052f6:	e7fe      	b.n	80052f6 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80052f8:	68f8      	ldr	r0, [r7, #12]
 80052fa:	f000 f95f 	bl	80055bc <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8005304:	2b00      	cmp	r3, #0
 8005306:	d102      	bne.n	800530e <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8005308:	68f8      	ldr	r0, [r7, #12]
 800530a:	f002 f869 	bl	80073e0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800530e:	bf00      	nop
 8005310:	3710      	adds	r7, #16
 8005312:	46bd      	mov	sp, r7
 8005314:	bd80      	pop	{r7, pc}

08005316 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005316:	b480      	push	{r7}
 8005318:	b085      	sub	sp, #20
 800531a:	af00      	add	r7, sp, #0
 800531c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005322:	2b00      	cmp	r3, #0
 8005324:	d006      	beq.n	8005334 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8005330:	60fb      	str	r3, [r7, #12]
 8005332:	e001      	b.n	8005338 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005334:	2300      	movs	r3, #0
 8005336:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005338:	68fb      	ldr	r3, [r7, #12]
	}
 800533a:	4618      	mov	r0, r3
 800533c:	3714      	adds	r7, #20
 800533e:	46bd      	mov	sp, r7
 8005340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005344:	4770      	bx	lr

08005346 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005346:	b580      	push	{r7, lr}
 8005348:	b086      	sub	sp, #24
 800534a:	af00      	add	r7, sp, #0
 800534c:	60f8      	str	r0, [r7, #12]
 800534e:	60b9      	str	r1, [r7, #8]
 8005350:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005352:	2300      	movs	r3, #0
 8005354:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800535a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005360:	2b00      	cmp	r3, #0
 8005362:	d10d      	bne.n	8005380 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d14d      	bne.n	8005408 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	689b      	ldr	r3, [r3, #8]
 8005370:	4618      	mov	r0, r3
 8005372:	f001 f871 	bl	8006458 <xTaskPriorityDisinherit>
 8005376:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	2200      	movs	r2, #0
 800537c:	609a      	str	r2, [r3, #8]
 800537e:	e043      	b.n	8005408 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d119      	bne.n	80053ba <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	6858      	ldr	r0, [r3, #4]
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800538e:	461a      	mov	r2, r3
 8005390:	68b9      	ldr	r1, [r7, #8]
 8005392:	f00e fcde 	bl	8013d52 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	685a      	ldr	r2, [r3, #4]
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800539e:	441a      	add	r2, r3
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	685a      	ldr	r2, [r3, #4]
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	689b      	ldr	r3, [r3, #8]
 80053ac:	429a      	cmp	r2, r3
 80053ae:	d32b      	bcc.n	8005408 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681a      	ldr	r2, [r3, #0]
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	605a      	str	r2, [r3, #4]
 80053b8:	e026      	b.n	8005408 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	68d8      	ldr	r0, [r3, #12]
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053c2:	461a      	mov	r2, r3
 80053c4:	68b9      	ldr	r1, [r7, #8]
 80053c6:	f00e fcc4 	bl	8013d52 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	68da      	ldr	r2, [r3, #12]
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053d2:	425b      	negs	r3, r3
 80053d4:	441a      	add	r2, r3
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	68da      	ldr	r2, [r3, #12]
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	429a      	cmp	r2, r3
 80053e4:	d207      	bcs.n	80053f6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	689a      	ldr	r2, [r3, #8]
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ee:	425b      	negs	r3, r3
 80053f0:	441a      	add	r2, r3
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2b02      	cmp	r3, #2
 80053fa:	d105      	bne.n	8005408 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d002      	beq.n	8005408 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	3b01      	subs	r3, #1
 8005406:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005408:	693b      	ldr	r3, [r7, #16]
 800540a:	1c5a      	adds	r2, r3, #1
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005410:	697b      	ldr	r3, [r7, #20]
}
 8005412:	4618      	mov	r0, r3
 8005414:	3718      	adds	r7, #24
 8005416:	46bd      	mov	sp, r7
 8005418:	bd80      	pop	{r7, pc}

0800541a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800541a:	b580      	push	{r7, lr}
 800541c:	b082      	sub	sp, #8
 800541e:	af00      	add	r7, sp, #0
 8005420:	6078      	str	r0, [r7, #4]
 8005422:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005428:	2b00      	cmp	r3, #0
 800542a:	d018      	beq.n	800545e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	68da      	ldr	r2, [r3, #12]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005434:	441a      	add	r2, r3
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	68da      	ldr	r2, [r3, #12]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	689b      	ldr	r3, [r3, #8]
 8005442:	429a      	cmp	r2, r3
 8005444:	d303      	bcc.n	800544e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681a      	ldr	r2, [r3, #0]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	68d9      	ldr	r1, [r3, #12]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005456:	461a      	mov	r2, r3
 8005458:	6838      	ldr	r0, [r7, #0]
 800545a:	f00e fc7a 	bl	8013d52 <memcpy>
	}
}
 800545e:	bf00      	nop
 8005460:	3708      	adds	r7, #8
 8005462:	46bd      	mov	sp, r7
 8005464:	bd80      	pop	{r7, pc}

08005466 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005466:	b580      	push	{r7, lr}
 8005468:	b084      	sub	sp, #16
 800546a:	af00      	add	r7, sp, #0
 800546c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800546e:	f001 fdc9 	bl	8007004 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005478:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800547a:	e011      	b.n	80054a0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005480:	2b00      	cmp	r3, #0
 8005482:	d012      	beq.n	80054aa <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	3324      	adds	r3, #36	; 0x24
 8005488:	4618      	mov	r0, r3
 800548a:	f000 fd8d 	bl	8005fa8 <xTaskRemoveFromEventList>
 800548e:	4603      	mov	r3, r0
 8005490:	2b00      	cmp	r3, #0
 8005492:	d001      	beq.n	8005498 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005494:	f000 fe64 	bl	8006160 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005498:	7bfb      	ldrb	r3, [r7, #15]
 800549a:	3b01      	subs	r3, #1
 800549c:	b2db      	uxtb	r3, r3
 800549e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80054a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	dce9      	bgt.n	800547c <prvUnlockQueue+0x16>
 80054a8:	e000      	b.n	80054ac <prvUnlockQueue+0x46>
					break;
 80054aa:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	22ff      	movs	r2, #255	; 0xff
 80054b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80054b4:	f001 fdd6 	bl	8007064 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80054b8:	f001 fda4 	bl	8007004 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80054c2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80054c4:	e011      	b.n	80054ea <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	691b      	ldr	r3, [r3, #16]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d012      	beq.n	80054f4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	3310      	adds	r3, #16
 80054d2:	4618      	mov	r0, r3
 80054d4:	f000 fd68 	bl	8005fa8 <xTaskRemoveFromEventList>
 80054d8:	4603      	mov	r3, r0
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d001      	beq.n	80054e2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80054de:	f000 fe3f 	bl	8006160 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80054e2:	7bbb      	ldrb	r3, [r7, #14]
 80054e4:	3b01      	subs	r3, #1
 80054e6:	b2db      	uxtb	r3, r3
 80054e8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80054ea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	dce9      	bgt.n	80054c6 <prvUnlockQueue+0x60>
 80054f2:	e000      	b.n	80054f6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80054f4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	22ff      	movs	r2, #255	; 0xff
 80054fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80054fe:	f001 fdb1 	bl	8007064 <vPortExitCritical>
}
 8005502:	bf00      	nop
 8005504:	3710      	adds	r7, #16
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}

0800550a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800550a:	b580      	push	{r7, lr}
 800550c:	b084      	sub	sp, #16
 800550e:	af00      	add	r7, sp, #0
 8005510:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005512:	f001 fd77 	bl	8007004 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800551a:	2b00      	cmp	r3, #0
 800551c:	d102      	bne.n	8005524 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800551e:	2301      	movs	r3, #1
 8005520:	60fb      	str	r3, [r7, #12]
 8005522:	e001      	b.n	8005528 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005524:	2300      	movs	r3, #0
 8005526:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005528:	f001 fd9c 	bl	8007064 <vPortExitCritical>

	return xReturn;
 800552c:	68fb      	ldr	r3, [r7, #12]
}
 800552e:	4618      	mov	r0, r3
 8005530:	3710      	adds	r7, #16
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}

08005536 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005536:	b580      	push	{r7, lr}
 8005538:	b084      	sub	sp, #16
 800553a:	af00      	add	r7, sp, #0
 800553c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800553e:	f001 fd61 	bl	8007004 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800554a:	429a      	cmp	r2, r3
 800554c:	d102      	bne.n	8005554 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800554e:	2301      	movs	r3, #1
 8005550:	60fb      	str	r3, [r7, #12]
 8005552:	e001      	b.n	8005558 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005554:	2300      	movs	r3, #0
 8005556:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005558:	f001 fd84 	bl	8007064 <vPortExitCritical>

	return xReturn;
 800555c:	68fb      	ldr	r3, [r7, #12]
}
 800555e:	4618      	mov	r0, r3
 8005560:	3710      	adds	r7, #16
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}
	...

08005568 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005568:	b480      	push	{r7}
 800556a:	b085      	sub	sp, #20
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
 8005570:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005572:	2300      	movs	r3, #0
 8005574:	60fb      	str	r3, [r7, #12]
 8005576:	e014      	b.n	80055a2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005578:	4a0f      	ldr	r2, [pc, #60]	; (80055b8 <vQueueAddToRegistry+0x50>)
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d10b      	bne.n	800559c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005584:	490c      	ldr	r1, [pc, #48]	; (80055b8 <vQueueAddToRegistry+0x50>)
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	683a      	ldr	r2, [r7, #0]
 800558a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800558e:	4a0a      	ldr	r2, [pc, #40]	; (80055b8 <vQueueAddToRegistry+0x50>)
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	00db      	lsls	r3, r3, #3
 8005594:	4413      	add	r3, r2
 8005596:	687a      	ldr	r2, [r7, #4]
 8005598:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800559a:	e006      	b.n	80055aa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	3301      	adds	r3, #1
 80055a0:	60fb      	str	r3, [r7, #12]
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	2b07      	cmp	r3, #7
 80055a6:	d9e7      	bls.n	8005578 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80055a8:	bf00      	nop
 80055aa:	bf00      	nop
 80055ac:	3714      	adds	r7, #20
 80055ae:	46bd      	mov	sp, r7
 80055b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b4:	4770      	bx	lr
 80055b6:	bf00      	nop
 80055b8:	2000081c 	.word	0x2000081c

080055bc <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80055bc:	b480      	push	{r7}
 80055be:	b085      	sub	sp, #20
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80055c4:	2300      	movs	r3, #0
 80055c6:	60fb      	str	r3, [r7, #12]
 80055c8:	e016      	b.n	80055f8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80055ca:	4a10      	ldr	r2, [pc, #64]	; (800560c <vQueueUnregisterQueue+0x50>)
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	00db      	lsls	r3, r3, #3
 80055d0:	4413      	add	r3, r2
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	687a      	ldr	r2, [r7, #4]
 80055d6:	429a      	cmp	r2, r3
 80055d8:	d10b      	bne.n	80055f2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80055da:	4a0c      	ldr	r2, [pc, #48]	; (800560c <vQueueUnregisterQueue+0x50>)
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	2100      	movs	r1, #0
 80055e0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80055e4:	4a09      	ldr	r2, [pc, #36]	; (800560c <vQueueUnregisterQueue+0x50>)
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	00db      	lsls	r3, r3, #3
 80055ea:	4413      	add	r3, r2
 80055ec:	2200      	movs	r2, #0
 80055ee:	605a      	str	r2, [r3, #4]
				break;
 80055f0:	e006      	b.n	8005600 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	3301      	adds	r3, #1
 80055f6:	60fb      	str	r3, [r7, #12]
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	2b07      	cmp	r3, #7
 80055fc:	d9e5      	bls.n	80055ca <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80055fe:	bf00      	nop
 8005600:	bf00      	nop
 8005602:	3714      	adds	r7, #20
 8005604:	46bd      	mov	sp, r7
 8005606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560a:	4770      	bx	lr
 800560c:	2000081c 	.word	0x2000081c

08005610 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005610:	b580      	push	{r7, lr}
 8005612:	b086      	sub	sp, #24
 8005614:	af00      	add	r7, sp, #0
 8005616:	60f8      	str	r0, [r7, #12]
 8005618:	60b9      	str	r1, [r7, #8]
 800561a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005620:	f001 fcf0 	bl	8007004 <vPortEnterCritical>
 8005624:	697b      	ldr	r3, [r7, #20]
 8005626:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800562a:	b25b      	sxtb	r3, r3
 800562c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005630:	d103      	bne.n	800563a <vQueueWaitForMessageRestricted+0x2a>
 8005632:	697b      	ldr	r3, [r7, #20]
 8005634:	2200      	movs	r2, #0
 8005636:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005640:	b25b      	sxtb	r3, r3
 8005642:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005646:	d103      	bne.n	8005650 <vQueueWaitForMessageRestricted+0x40>
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	2200      	movs	r2, #0
 800564c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005650:	f001 fd08 	bl	8007064 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005658:	2b00      	cmp	r3, #0
 800565a:	d106      	bne.n	800566a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	3324      	adds	r3, #36	; 0x24
 8005660:	687a      	ldr	r2, [r7, #4]
 8005662:	68b9      	ldr	r1, [r7, #8]
 8005664:	4618      	mov	r0, r3
 8005666:	f000 fc73 	bl	8005f50 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800566a:	6978      	ldr	r0, [r7, #20]
 800566c:	f7ff fefb 	bl	8005466 <prvUnlockQueue>
	}
 8005670:	bf00      	nop
 8005672:	3718      	adds	r7, #24
 8005674:	46bd      	mov	sp, r7
 8005676:	bd80      	pop	{r7, pc}

08005678 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005678:	b580      	push	{r7, lr}
 800567a:	b08e      	sub	sp, #56	; 0x38
 800567c:	af04      	add	r7, sp, #16
 800567e:	60f8      	str	r0, [r7, #12]
 8005680:	60b9      	str	r1, [r7, #8]
 8005682:	607a      	str	r2, [r7, #4]
 8005684:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005686:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005688:	2b00      	cmp	r3, #0
 800568a:	d10a      	bne.n	80056a2 <xTaskCreateStatic+0x2a>
	__asm volatile
 800568c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005690:	f383 8811 	msr	BASEPRI, r3
 8005694:	f3bf 8f6f 	isb	sy
 8005698:	f3bf 8f4f 	dsb	sy
 800569c:	623b      	str	r3, [r7, #32]
}
 800569e:	bf00      	nop
 80056a0:	e7fe      	b.n	80056a0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80056a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d10a      	bne.n	80056be <xTaskCreateStatic+0x46>
	__asm volatile
 80056a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ac:	f383 8811 	msr	BASEPRI, r3
 80056b0:	f3bf 8f6f 	isb	sy
 80056b4:	f3bf 8f4f 	dsb	sy
 80056b8:	61fb      	str	r3, [r7, #28]
}
 80056ba:	bf00      	nop
 80056bc:	e7fe      	b.n	80056bc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80056be:	23bc      	movs	r3, #188	; 0xbc
 80056c0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	2bbc      	cmp	r3, #188	; 0xbc
 80056c6:	d00a      	beq.n	80056de <xTaskCreateStatic+0x66>
	__asm volatile
 80056c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056cc:	f383 8811 	msr	BASEPRI, r3
 80056d0:	f3bf 8f6f 	isb	sy
 80056d4:	f3bf 8f4f 	dsb	sy
 80056d8:	61bb      	str	r3, [r7, #24]
}
 80056da:	bf00      	nop
 80056dc:	e7fe      	b.n	80056dc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80056de:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80056e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d01e      	beq.n	8005724 <xTaskCreateStatic+0xac>
 80056e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d01b      	beq.n	8005724 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80056ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056ee:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80056f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80056f4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80056f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f8:	2202      	movs	r2, #2
 80056fa:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80056fe:	2300      	movs	r3, #0
 8005700:	9303      	str	r3, [sp, #12]
 8005702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005704:	9302      	str	r3, [sp, #8]
 8005706:	f107 0314 	add.w	r3, r7, #20
 800570a:	9301      	str	r3, [sp, #4]
 800570c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800570e:	9300      	str	r3, [sp, #0]
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	687a      	ldr	r2, [r7, #4]
 8005714:	68b9      	ldr	r1, [r7, #8]
 8005716:	68f8      	ldr	r0, [r7, #12]
 8005718:	f000 f850 	bl	80057bc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800571c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800571e:	f000 f8f3 	bl	8005908 <prvAddNewTaskToReadyList>
 8005722:	e001      	b.n	8005728 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005724:	2300      	movs	r3, #0
 8005726:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005728:	697b      	ldr	r3, [r7, #20]
	}
 800572a:	4618      	mov	r0, r3
 800572c:	3728      	adds	r7, #40	; 0x28
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}

08005732 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005732:	b580      	push	{r7, lr}
 8005734:	b08c      	sub	sp, #48	; 0x30
 8005736:	af04      	add	r7, sp, #16
 8005738:	60f8      	str	r0, [r7, #12]
 800573a:	60b9      	str	r1, [r7, #8]
 800573c:	603b      	str	r3, [r7, #0]
 800573e:	4613      	mov	r3, r2
 8005740:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005742:	88fb      	ldrh	r3, [r7, #6]
 8005744:	009b      	lsls	r3, r3, #2
 8005746:	4618      	mov	r0, r3
 8005748:	f001 fd7e 	bl	8007248 <pvPortMalloc>
 800574c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800574e:	697b      	ldr	r3, [r7, #20]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d00e      	beq.n	8005772 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005754:	20bc      	movs	r0, #188	; 0xbc
 8005756:	f001 fd77 	bl	8007248 <pvPortMalloc>
 800575a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800575c:	69fb      	ldr	r3, [r7, #28]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d003      	beq.n	800576a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005762:	69fb      	ldr	r3, [r7, #28]
 8005764:	697a      	ldr	r2, [r7, #20]
 8005766:	631a      	str	r2, [r3, #48]	; 0x30
 8005768:	e005      	b.n	8005776 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800576a:	6978      	ldr	r0, [r7, #20]
 800576c:	f001 fe38 	bl	80073e0 <vPortFree>
 8005770:	e001      	b.n	8005776 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005772:	2300      	movs	r3, #0
 8005774:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005776:	69fb      	ldr	r3, [r7, #28]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d017      	beq.n	80057ac <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800577c:	69fb      	ldr	r3, [r7, #28]
 800577e:	2200      	movs	r2, #0
 8005780:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005784:	88fa      	ldrh	r2, [r7, #6]
 8005786:	2300      	movs	r3, #0
 8005788:	9303      	str	r3, [sp, #12]
 800578a:	69fb      	ldr	r3, [r7, #28]
 800578c:	9302      	str	r3, [sp, #8]
 800578e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005790:	9301      	str	r3, [sp, #4]
 8005792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005794:	9300      	str	r3, [sp, #0]
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	68b9      	ldr	r1, [r7, #8]
 800579a:	68f8      	ldr	r0, [r7, #12]
 800579c:	f000 f80e 	bl	80057bc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80057a0:	69f8      	ldr	r0, [r7, #28]
 80057a2:	f000 f8b1 	bl	8005908 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80057a6:	2301      	movs	r3, #1
 80057a8:	61bb      	str	r3, [r7, #24]
 80057aa:	e002      	b.n	80057b2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80057ac:	f04f 33ff 	mov.w	r3, #4294967295
 80057b0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80057b2:	69bb      	ldr	r3, [r7, #24]
	}
 80057b4:	4618      	mov	r0, r3
 80057b6:	3720      	adds	r7, #32
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}

080057bc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b088      	sub	sp, #32
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	60f8      	str	r0, [r7, #12]
 80057c4:	60b9      	str	r1, [r7, #8]
 80057c6:	607a      	str	r2, [r7, #4]
 80057c8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80057ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057cc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	009b      	lsls	r3, r3, #2
 80057d2:	461a      	mov	r2, r3
 80057d4:	21a5      	movs	r1, #165	; 0xa5
 80057d6:	f00e faca 	bl	8013d6e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80057da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80057e4:	3b01      	subs	r3, #1
 80057e6:	009b      	lsls	r3, r3, #2
 80057e8:	4413      	add	r3, r2
 80057ea:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80057ec:	69bb      	ldr	r3, [r7, #24]
 80057ee:	f023 0307 	bic.w	r3, r3, #7
 80057f2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80057f4:	69bb      	ldr	r3, [r7, #24]
 80057f6:	f003 0307 	and.w	r3, r3, #7
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d00a      	beq.n	8005814 <prvInitialiseNewTask+0x58>
	__asm volatile
 80057fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005802:	f383 8811 	msr	BASEPRI, r3
 8005806:	f3bf 8f6f 	isb	sy
 800580a:	f3bf 8f4f 	dsb	sy
 800580e:	617b      	str	r3, [r7, #20]
}
 8005810:	bf00      	nop
 8005812:	e7fe      	b.n	8005812 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d01f      	beq.n	800585a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800581a:	2300      	movs	r3, #0
 800581c:	61fb      	str	r3, [r7, #28]
 800581e:	e012      	b.n	8005846 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005820:	68ba      	ldr	r2, [r7, #8]
 8005822:	69fb      	ldr	r3, [r7, #28]
 8005824:	4413      	add	r3, r2
 8005826:	7819      	ldrb	r1, [r3, #0]
 8005828:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800582a:	69fb      	ldr	r3, [r7, #28]
 800582c:	4413      	add	r3, r2
 800582e:	3334      	adds	r3, #52	; 0x34
 8005830:	460a      	mov	r2, r1
 8005832:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005834:	68ba      	ldr	r2, [r7, #8]
 8005836:	69fb      	ldr	r3, [r7, #28]
 8005838:	4413      	add	r3, r2
 800583a:	781b      	ldrb	r3, [r3, #0]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d006      	beq.n	800584e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005840:	69fb      	ldr	r3, [r7, #28]
 8005842:	3301      	adds	r3, #1
 8005844:	61fb      	str	r3, [r7, #28]
 8005846:	69fb      	ldr	r3, [r7, #28]
 8005848:	2b0f      	cmp	r3, #15
 800584a:	d9e9      	bls.n	8005820 <prvInitialiseNewTask+0x64>
 800584c:	e000      	b.n	8005850 <prvInitialiseNewTask+0x94>
			{
				break;
 800584e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005852:	2200      	movs	r2, #0
 8005854:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005858:	e003      	b.n	8005862 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800585a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800585c:	2200      	movs	r2, #0
 800585e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005864:	2b37      	cmp	r3, #55	; 0x37
 8005866:	d901      	bls.n	800586c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005868:	2337      	movs	r3, #55	; 0x37
 800586a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800586c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800586e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005870:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005874:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005876:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800587a:	2200      	movs	r2, #0
 800587c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800587e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005880:	3304      	adds	r3, #4
 8005882:	4618      	mov	r0, r3
 8005884:	f7fe fda0 	bl	80043c8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800588a:	3318      	adds	r3, #24
 800588c:	4618      	mov	r0, r3
 800588e:	f7fe fd9b 	bl	80043c8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005894:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005896:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800589a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800589e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058a0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80058a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058a6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80058a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058aa:	2200      	movs	r2, #0
 80058ac:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80058b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058b2:	2200      	movs	r2, #0
 80058b4:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80058b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ba:	3354      	adds	r3, #84	; 0x54
 80058bc:	2260      	movs	r2, #96	; 0x60
 80058be:	2100      	movs	r1, #0
 80058c0:	4618      	mov	r0, r3
 80058c2:	f00e fa54 	bl	8013d6e <memset>
 80058c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058c8:	4a0c      	ldr	r2, [pc, #48]	; (80058fc <prvInitialiseNewTask+0x140>)
 80058ca:	659a      	str	r2, [r3, #88]	; 0x58
 80058cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ce:	4a0c      	ldr	r2, [pc, #48]	; (8005900 <prvInitialiseNewTask+0x144>)
 80058d0:	65da      	str	r2, [r3, #92]	; 0x5c
 80058d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058d4:	4a0b      	ldr	r2, [pc, #44]	; (8005904 <prvInitialiseNewTask+0x148>)
 80058d6:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80058d8:	683a      	ldr	r2, [r7, #0]
 80058da:	68f9      	ldr	r1, [r7, #12]
 80058dc:	69b8      	ldr	r0, [r7, #24]
 80058de:	f001 fa61 	bl	8006da4 <pxPortInitialiseStack>
 80058e2:	4602      	mov	r2, r0
 80058e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058e6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80058e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d002      	beq.n	80058f4 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80058ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058f2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80058f4:	bf00      	nop
 80058f6:	3720      	adds	r7, #32
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bd80      	pop	{r7, pc}
 80058fc:	08017b40 	.word	0x08017b40
 8005900:	08017b60 	.word	0x08017b60
 8005904:	08017b20 	.word	0x08017b20

08005908 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b082      	sub	sp, #8
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005910:	f001 fb78 	bl	8007004 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005914:	4b2d      	ldr	r3, [pc, #180]	; (80059cc <prvAddNewTaskToReadyList+0xc4>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	3301      	adds	r3, #1
 800591a:	4a2c      	ldr	r2, [pc, #176]	; (80059cc <prvAddNewTaskToReadyList+0xc4>)
 800591c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800591e:	4b2c      	ldr	r3, [pc, #176]	; (80059d0 <prvAddNewTaskToReadyList+0xc8>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d109      	bne.n	800593a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005926:	4a2a      	ldr	r2, [pc, #168]	; (80059d0 <prvAddNewTaskToReadyList+0xc8>)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800592c:	4b27      	ldr	r3, [pc, #156]	; (80059cc <prvAddNewTaskToReadyList+0xc4>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	2b01      	cmp	r3, #1
 8005932:	d110      	bne.n	8005956 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005934:	f000 fc38 	bl	80061a8 <prvInitialiseTaskLists>
 8005938:	e00d      	b.n	8005956 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800593a:	4b26      	ldr	r3, [pc, #152]	; (80059d4 <prvAddNewTaskToReadyList+0xcc>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d109      	bne.n	8005956 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005942:	4b23      	ldr	r3, [pc, #140]	; (80059d0 <prvAddNewTaskToReadyList+0xc8>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800594c:	429a      	cmp	r2, r3
 800594e:	d802      	bhi.n	8005956 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005950:	4a1f      	ldr	r2, [pc, #124]	; (80059d0 <prvAddNewTaskToReadyList+0xc8>)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005956:	4b20      	ldr	r3, [pc, #128]	; (80059d8 <prvAddNewTaskToReadyList+0xd0>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	3301      	adds	r3, #1
 800595c:	4a1e      	ldr	r2, [pc, #120]	; (80059d8 <prvAddNewTaskToReadyList+0xd0>)
 800595e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005960:	4b1d      	ldr	r3, [pc, #116]	; (80059d8 <prvAddNewTaskToReadyList+0xd0>)
 8005962:	681a      	ldr	r2, [r3, #0]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800596c:	4b1b      	ldr	r3, [pc, #108]	; (80059dc <prvAddNewTaskToReadyList+0xd4>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	429a      	cmp	r2, r3
 8005972:	d903      	bls.n	800597c <prvAddNewTaskToReadyList+0x74>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005978:	4a18      	ldr	r2, [pc, #96]	; (80059dc <prvAddNewTaskToReadyList+0xd4>)
 800597a:	6013      	str	r3, [r2, #0]
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005980:	4613      	mov	r3, r2
 8005982:	009b      	lsls	r3, r3, #2
 8005984:	4413      	add	r3, r2
 8005986:	009b      	lsls	r3, r3, #2
 8005988:	4a15      	ldr	r2, [pc, #84]	; (80059e0 <prvAddNewTaskToReadyList+0xd8>)
 800598a:	441a      	add	r2, r3
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	3304      	adds	r3, #4
 8005990:	4619      	mov	r1, r3
 8005992:	4610      	mov	r0, r2
 8005994:	f7fe fd25 	bl	80043e2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005998:	f001 fb64 	bl	8007064 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800599c:	4b0d      	ldr	r3, [pc, #52]	; (80059d4 <prvAddNewTaskToReadyList+0xcc>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d00e      	beq.n	80059c2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80059a4:	4b0a      	ldr	r3, [pc, #40]	; (80059d0 <prvAddNewTaskToReadyList+0xc8>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ae:	429a      	cmp	r2, r3
 80059b0:	d207      	bcs.n	80059c2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80059b2:	4b0c      	ldr	r3, [pc, #48]	; (80059e4 <prvAddNewTaskToReadyList+0xdc>)
 80059b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059b8:	601a      	str	r2, [r3, #0]
 80059ba:	f3bf 8f4f 	dsb	sy
 80059be:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80059c2:	bf00      	nop
 80059c4:	3708      	adds	r7, #8
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bd80      	pop	{r7, pc}
 80059ca:	bf00      	nop
 80059cc:	20000d30 	.word	0x20000d30
 80059d0:	2000085c 	.word	0x2000085c
 80059d4:	20000d3c 	.word	0x20000d3c
 80059d8:	20000d4c 	.word	0x20000d4c
 80059dc:	20000d38 	.word	0x20000d38
 80059e0:	20000860 	.word	0x20000860
 80059e4:	e000ed04 	.word	0xe000ed04

080059e8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b084      	sub	sp, #16
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80059f0:	2300      	movs	r3, #0
 80059f2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d017      	beq.n	8005a2a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80059fa:	4b13      	ldr	r3, [pc, #76]	; (8005a48 <vTaskDelay+0x60>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d00a      	beq.n	8005a18 <vTaskDelay+0x30>
	__asm volatile
 8005a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a06:	f383 8811 	msr	BASEPRI, r3
 8005a0a:	f3bf 8f6f 	isb	sy
 8005a0e:	f3bf 8f4f 	dsb	sy
 8005a12:	60bb      	str	r3, [r7, #8]
}
 8005a14:	bf00      	nop
 8005a16:	e7fe      	b.n	8005a16 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005a18:	f000 f88a 	bl	8005b30 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005a1c:	2100      	movs	r1, #0
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f000 fe1e 	bl	8006660 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005a24:	f000 f892 	bl	8005b4c <xTaskResumeAll>
 8005a28:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d107      	bne.n	8005a40 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005a30:	4b06      	ldr	r3, [pc, #24]	; (8005a4c <vTaskDelay+0x64>)
 8005a32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a36:	601a      	str	r2, [r3, #0]
 8005a38:	f3bf 8f4f 	dsb	sy
 8005a3c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005a40:	bf00      	nop
 8005a42:	3710      	adds	r7, #16
 8005a44:	46bd      	mov	sp, r7
 8005a46:	bd80      	pop	{r7, pc}
 8005a48:	20000d58 	.word	0x20000d58
 8005a4c:	e000ed04 	.word	0xe000ed04

08005a50 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b08a      	sub	sp, #40	; 0x28
 8005a54:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005a56:	2300      	movs	r3, #0
 8005a58:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005a5e:	463a      	mov	r2, r7
 8005a60:	1d39      	adds	r1, r7, #4
 8005a62:	f107 0308 	add.w	r3, r7, #8
 8005a66:	4618      	mov	r0, r3
 8005a68:	f7fe fc5a 	bl	8004320 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005a6c:	6839      	ldr	r1, [r7, #0]
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	68ba      	ldr	r2, [r7, #8]
 8005a72:	9202      	str	r2, [sp, #8]
 8005a74:	9301      	str	r3, [sp, #4]
 8005a76:	2300      	movs	r3, #0
 8005a78:	9300      	str	r3, [sp, #0]
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	460a      	mov	r2, r1
 8005a7e:	4924      	ldr	r1, [pc, #144]	; (8005b10 <vTaskStartScheduler+0xc0>)
 8005a80:	4824      	ldr	r0, [pc, #144]	; (8005b14 <vTaskStartScheduler+0xc4>)
 8005a82:	f7ff fdf9 	bl	8005678 <xTaskCreateStatic>
 8005a86:	4603      	mov	r3, r0
 8005a88:	4a23      	ldr	r2, [pc, #140]	; (8005b18 <vTaskStartScheduler+0xc8>)
 8005a8a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005a8c:	4b22      	ldr	r3, [pc, #136]	; (8005b18 <vTaskStartScheduler+0xc8>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d002      	beq.n	8005a9a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005a94:	2301      	movs	r3, #1
 8005a96:	617b      	str	r3, [r7, #20]
 8005a98:	e001      	b.n	8005a9e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	2b01      	cmp	r3, #1
 8005aa2:	d102      	bne.n	8005aaa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005aa4:	f000 fe30 	bl	8006708 <xTimerCreateTimerTask>
 8005aa8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	2b01      	cmp	r3, #1
 8005aae:	d11b      	bne.n	8005ae8 <vTaskStartScheduler+0x98>
	__asm volatile
 8005ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ab4:	f383 8811 	msr	BASEPRI, r3
 8005ab8:	f3bf 8f6f 	isb	sy
 8005abc:	f3bf 8f4f 	dsb	sy
 8005ac0:	613b      	str	r3, [r7, #16]
}
 8005ac2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005ac4:	4b15      	ldr	r3, [pc, #84]	; (8005b1c <vTaskStartScheduler+0xcc>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	3354      	adds	r3, #84	; 0x54
 8005aca:	4a15      	ldr	r2, [pc, #84]	; (8005b20 <vTaskStartScheduler+0xd0>)
 8005acc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005ace:	4b15      	ldr	r3, [pc, #84]	; (8005b24 <vTaskStartScheduler+0xd4>)
 8005ad0:	f04f 32ff 	mov.w	r2, #4294967295
 8005ad4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005ad6:	4b14      	ldr	r3, [pc, #80]	; (8005b28 <vTaskStartScheduler+0xd8>)
 8005ad8:	2201      	movs	r2, #1
 8005ada:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005adc:	4b13      	ldr	r3, [pc, #76]	; (8005b2c <vTaskStartScheduler+0xdc>)
 8005ade:	2200      	movs	r2, #0
 8005ae0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005ae2:	f001 f9ed 	bl	8006ec0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005ae6:	e00e      	b.n	8005b06 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aee:	d10a      	bne.n	8005b06 <vTaskStartScheduler+0xb6>
	__asm volatile
 8005af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005af4:	f383 8811 	msr	BASEPRI, r3
 8005af8:	f3bf 8f6f 	isb	sy
 8005afc:	f3bf 8f4f 	dsb	sy
 8005b00:	60fb      	str	r3, [r7, #12]
}
 8005b02:	bf00      	nop
 8005b04:	e7fe      	b.n	8005b04 <vTaskStartScheduler+0xb4>
}
 8005b06:	bf00      	nop
 8005b08:	3718      	adds	r7, #24
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bd80      	pop	{r7, pc}
 8005b0e:	bf00      	nop
 8005b10:	08014e70 	.word	0x08014e70
 8005b14:	08006179 	.word	0x08006179
 8005b18:	20000d54 	.word	0x20000d54
 8005b1c:	2000085c 	.word	0x2000085c
 8005b20:	2000001c 	.word	0x2000001c
 8005b24:	20000d50 	.word	0x20000d50
 8005b28:	20000d3c 	.word	0x20000d3c
 8005b2c:	20000d34 	.word	0x20000d34

08005b30 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005b30:	b480      	push	{r7}
 8005b32:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005b34:	4b04      	ldr	r3, [pc, #16]	; (8005b48 <vTaskSuspendAll+0x18>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	3301      	adds	r3, #1
 8005b3a:	4a03      	ldr	r2, [pc, #12]	; (8005b48 <vTaskSuspendAll+0x18>)
 8005b3c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005b3e:	bf00      	nop
 8005b40:	46bd      	mov	sp, r7
 8005b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b46:	4770      	bx	lr
 8005b48:	20000d58 	.word	0x20000d58

08005b4c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b084      	sub	sp, #16
 8005b50:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005b52:	2300      	movs	r3, #0
 8005b54:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005b56:	2300      	movs	r3, #0
 8005b58:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005b5a:	4b42      	ldr	r3, [pc, #264]	; (8005c64 <xTaskResumeAll+0x118>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d10a      	bne.n	8005b78 <xTaskResumeAll+0x2c>
	__asm volatile
 8005b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b66:	f383 8811 	msr	BASEPRI, r3
 8005b6a:	f3bf 8f6f 	isb	sy
 8005b6e:	f3bf 8f4f 	dsb	sy
 8005b72:	603b      	str	r3, [r7, #0]
}
 8005b74:	bf00      	nop
 8005b76:	e7fe      	b.n	8005b76 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005b78:	f001 fa44 	bl	8007004 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005b7c:	4b39      	ldr	r3, [pc, #228]	; (8005c64 <xTaskResumeAll+0x118>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	3b01      	subs	r3, #1
 8005b82:	4a38      	ldr	r2, [pc, #224]	; (8005c64 <xTaskResumeAll+0x118>)
 8005b84:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b86:	4b37      	ldr	r3, [pc, #220]	; (8005c64 <xTaskResumeAll+0x118>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d162      	bne.n	8005c54 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005b8e:	4b36      	ldr	r3, [pc, #216]	; (8005c68 <xTaskResumeAll+0x11c>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d05e      	beq.n	8005c54 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005b96:	e02f      	b.n	8005bf8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b98:	4b34      	ldr	r3, [pc, #208]	; (8005c6c <xTaskResumeAll+0x120>)
 8005b9a:	68db      	ldr	r3, [r3, #12]
 8005b9c:	68db      	ldr	r3, [r3, #12]
 8005b9e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	3318      	adds	r3, #24
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	f7fe fc79 	bl	800449c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	3304      	adds	r3, #4
 8005bae:	4618      	mov	r0, r3
 8005bb0:	f7fe fc74 	bl	800449c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bb8:	4b2d      	ldr	r3, [pc, #180]	; (8005c70 <xTaskResumeAll+0x124>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	429a      	cmp	r2, r3
 8005bbe:	d903      	bls.n	8005bc8 <xTaskResumeAll+0x7c>
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bc4:	4a2a      	ldr	r2, [pc, #168]	; (8005c70 <xTaskResumeAll+0x124>)
 8005bc6:	6013      	str	r3, [r2, #0]
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bcc:	4613      	mov	r3, r2
 8005bce:	009b      	lsls	r3, r3, #2
 8005bd0:	4413      	add	r3, r2
 8005bd2:	009b      	lsls	r3, r3, #2
 8005bd4:	4a27      	ldr	r2, [pc, #156]	; (8005c74 <xTaskResumeAll+0x128>)
 8005bd6:	441a      	add	r2, r3
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	3304      	adds	r3, #4
 8005bdc:	4619      	mov	r1, r3
 8005bde:	4610      	mov	r0, r2
 8005be0:	f7fe fbff 	bl	80043e2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005be8:	4b23      	ldr	r3, [pc, #140]	; (8005c78 <xTaskResumeAll+0x12c>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bee:	429a      	cmp	r2, r3
 8005bf0:	d302      	bcc.n	8005bf8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005bf2:	4b22      	ldr	r3, [pc, #136]	; (8005c7c <xTaskResumeAll+0x130>)
 8005bf4:	2201      	movs	r2, #1
 8005bf6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005bf8:	4b1c      	ldr	r3, [pc, #112]	; (8005c6c <xTaskResumeAll+0x120>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d1cb      	bne.n	8005b98 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d001      	beq.n	8005c0a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005c06:	f000 fb71 	bl	80062ec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005c0a:	4b1d      	ldr	r3, [pc, #116]	; (8005c80 <xTaskResumeAll+0x134>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d010      	beq.n	8005c38 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005c16:	f000 f859 	bl	8005ccc <xTaskIncrementTick>
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d002      	beq.n	8005c26 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005c20:	4b16      	ldr	r3, [pc, #88]	; (8005c7c <xTaskResumeAll+0x130>)
 8005c22:	2201      	movs	r2, #1
 8005c24:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	3b01      	subs	r3, #1
 8005c2a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d1f1      	bne.n	8005c16 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005c32:	4b13      	ldr	r3, [pc, #76]	; (8005c80 <xTaskResumeAll+0x134>)
 8005c34:	2200      	movs	r2, #0
 8005c36:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005c38:	4b10      	ldr	r3, [pc, #64]	; (8005c7c <xTaskResumeAll+0x130>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d009      	beq.n	8005c54 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005c40:	2301      	movs	r3, #1
 8005c42:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005c44:	4b0f      	ldr	r3, [pc, #60]	; (8005c84 <xTaskResumeAll+0x138>)
 8005c46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c4a:	601a      	str	r2, [r3, #0]
 8005c4c:	f3bf 8f4f 	dsb	sy
 8005c50:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005c54:	f001 fa06 	bl	8007064 <vPortExitCritical>

	return xAlreadyYielded;
 8005c58:	68bb      	ldr	r3, [r7, #8]
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	3710      	adds	r7, #16
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bd80      	pop	{r7, pc}
 8005c62:	bf00      	nop
 8005c64:	20000d58 	.word	0x20000d58
 8005c68:	20000d30 	.word	0x20000d30
 8005c6c:	20000cf0 	.word	0x20000cf0
 8005c70:	20000d38 	.word	0x20000d38
 8005c74:	20000860 	.word	0x20000860
 8005c78:	2000085c 	.word	0x2000085c
 8005c7c:	20000d44 	.word	0x20000d44
 8005c80:	20000d40 	.word	0x20000d40
 8005c84:	e000ed04 	.word	0xe000ed04

08005c88 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b083      	sub	sp, #12
 8005c8c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005c8e:	4b05      	ldr	r3, [pc, #20]	; (8005ca4 <xTaskGetTickCount+0x1c>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005c94:	687b      	ldr	r3, [r7, #4]
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	370c      	adds	r7, #12
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca0:	4770      	bx	lr
 8005ca2:	bf00      	nop
 8005ca4:	20000d34 	.word	0x20000d34

08005ca8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b082      	sub	sp, #8
 8005cac:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005cae:	f001 fa8b 	bl	80071c8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8005cb6:	4b04      	ldr	r3, [pc, #16]	; (8005cc8 <xTaskGetTickCountFromISR+0x20>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005cbc:	683b      	ldr	r3, [r7, #0]
}
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	3708      	adds	r7, #8
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bd80      	pop	{r7, pc}
 8005cc6:	bf00      	nop
 8005cc8:	20000d34 	.word	0x20000d34

08005ccc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b086      	sub	sp, #24
 8005cd0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005cd6:	4b4f      	ldr	r3, [pc, #316]	; (8005e14 <xTaskIncrementTick+0x148>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	f040 808f 	bne.w	8005dfe <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005ce0:	4b4d      	ldr	r3, [pc, #308]	; (8005e18 <xTaskIncrementTick+0x14c>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	3301      	adds	r3, #1
 8005ce6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005ce8:	4a4b      	ldr	r2, [pc, #300]	; (8005e18 <xTaskIncrementTick+0x14c>)
 8005cea:	693b      	ldr	r3, [r7, #16]
 8005cec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d120      	bne.n	8005d36 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005cf4:	4b49      	ldr	r3, [pc, #292]	; (8005e1c <xTaskIncrementTick+0x150>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d00a      	beq.n	8005d14 <xTaskIncrementTick+0x48>
	__asm volatile
 8005cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d02:	f383 8811 	msr	BASEPRI, r3
 8005d06:	f3bf 8f6f 	isb	sy
 8005d0a:	f3bf 8f4f 	dsb	sy
 8005d0e:	603b      	str	r3, [r7, #0]
}
 8005d10:	bf00      	nop
 8005d12:	e7fe      	b.n	8005d12 <xTaskIncrementTick+0x46>
 8005d14:	4b41      	ldr	r3, [pc, #260]	; (8005e1c <xTaskIncrementTick+0x150>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	60fb      	str	r3, [r7, #12]
 8005d1a:	4b41      	ldr	r3, [pc, #260]	; (8005e20 <xTaskIncrementTick+0x154>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4a3f      	ldr	r2, [pc, #252]	; (8005e1c <xTaskIncrementTick+0x150>)
 8005d20:	6013      	str	r3, [r2, #0]
 8005d22:	4a3f      	ldr	r2, [pc, #252]	; (8005e20 <xTaskIncrementTick+0x154>)
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	6013      	str	r3, [r2, #0]
 8005d28:	4b3e      	ldr	r3, [pc, #248]	; (8005e24 <xTaskIncrementTick+0x158>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	3301      	adds	r3, #1
 8005d2e:	4a3d      	ldr	r2, [pc, #244]	; (8005e24 <xTaskIncrementTick+0x158>)
 8005d30:	6013      	str	r3, [r2, #0]
 8005d32:	f000 fadb 	bl	80062ec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005d36:	4b3c      	ldr	r3, [pc, #240]	; (8005e28 <xTaskIncrementTick+0x15c>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	693a      	ldr	r2, [r7, #16]
 8005d3c:	429a      	cmp	r2, r3
 8005d3e:	d349      	bcc.n	8005dd4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d40:	4b36      	ldr	r3, [pc, #216]	; (8005e1c <xTaskIncrementTick+0x150>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d104      	bne.n	8005d54 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d4a:	4b37      	ldr	r3, [pc, #220]	; (8005e28 <xTaskIncrementTick+0x15c>)
 8005d4c:	f04f 32ff 	mov.w	r2, #4294967295
 8005d50:	601a      	str	r2, [r3, #0]
					break;
 8005d52:	e03f      	b.n	8005dd4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d54:	4b31      	ldr	r3, [pc, #196]	; (8005e1c <xTaskIncrementTick+0x150>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	68db      	ldr	r3, [r3, #12]
 8005d5a:	68db      	ldr	r3, [r3, #12]
 8005d5c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005d64:	693a      	ldr	r2, [r7, #16]
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	429a      	cmp	r2, r3
 8005d6a:	d203      	bcs.n	8005d74 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005d6c:	4a2e      	ldr	r2, [pc, #184]	; (8005e28 <xTaskIncrementTick+0x15c>)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005d72:	e02f      	b.n	8005dd4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	3304      	adds	r3, #4
 8005d78:	4618      	mov	r0, r3
 8005d7a:	f7fe fb8f 	bl	800449c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d004      	beq.n	8005d90 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	3318      	adds	r3, #24
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	f7fe fb86 	bl	800449c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d94:	4b25      	ldr	r3, [pc, #148]	; (8005e2c <xTaskIncrementTick+0x160>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	429a      	cmp	r2, r3
 8005d9a:	d903      	bls.n	8005da4 <xTaskIncrementTick+0xd8>
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005da0:	4a22      	ldr	r2, [pc, #136]	; (8005e2c <xTaskIncrementTick+0x160>)
 8005da2:	6013      	str	r3, [r2, #0]
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005da8:	4613      	mov	r3, r2
 8005daa:	009b      	lsls	r3, r3, #2
 8005dac:	4413      	add	r3, r2
 8005dae:	009b      	lsls	r3, r3, #2
 8005db0:	4a1f      	ldr	r2, [pc, #124]	; (8005e30 <xTaskIncrementTick+0x164>)
 8005db2:	441a      	add	r2, r3
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	3304      	adds	r3, #4
 8005db8:	4619      	mov	r1, r3
 8005dba:	4610      	mov	r0, r2
 8005dbc:	f7fe fb11 	bl	80043e2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dc4:	4b1b      	ldr	r3, [pc, #108]	; (8005e34 <xTaskIncrementTick+0x168>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dca:	429a      	cmp	r2, r3
 8005dcc:	d3b8      	bcc.n	8005d40 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005dce:	2301      	movs	r3, #1
 8005dd0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005dd2:	e7b5      	b.n	8005d40 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005dd4:	4b17      	ldr	r3, [pc, #92]	; (8005e34 <xTaskIncrementTick+0x168>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dda:	4915      	ldr	r1, [pc, #84]	; (8005e30 <xTaskIncrementTick+0x164>)
 8005ddc:	4613      	mov	r3, r2
 8005dde:	009b      	lsls	r3, r3, #2
 8005de0:	4413      	add	r3, r2
 8005de2:	009b      	lsls	r3, r3, #2
 8005de4:	440b      	add	r3, r1
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	2b01      	cmp	r3, #1
 8005dea:	d901      	bls.n	8005df0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005dec:	2301      	movs	r3, #1
 8005dee:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005df0:	4b11      	ldr	r3, [pc, #68]	; (8005e38 <xTaskIncrementTick+0x16c>)
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d007      	beq.n	8005e08 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005df8:	2301      	movs	r3, #1
 8005dfa:	617b      	str	r3, [r7, #20]
 8005dfc:	e004      	b.n	8005e08 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005dfe:	4b0f      	ldr	r3, [pc, #60]	; (8005e3c <xTaskIncrementTick+0x170>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	3301      	adds	r3, #1
 8005e04:	4a0d      	ldr	r2, [pc, #52]	; (8005e3c <xTaskIncrementTick+0x170>)
 8005e06:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005e08:	697b      	ldr	r3, [r7, #20]
}
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	3718      	adds	r7, #24
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bd80      	pop	{r7, pc}
 8005e12:	bf00      	nop
 8005e14:	20000d58 	.word	0x20000d58
 8005e18:	20000d34 	.word	0x20000d34
 8005e1c:	20000ce8 	.word	0x20000ce8
 8005e20:	20000cec 	.word	0x20000cec
 8005e24:	20000d48 	.word	0x20000d48
 8005e28:	20000d50 	.word	0x20000d50
 8005e2c:	20000d38 	.word	0x20000d38
 8005e30:	20000860 	.word	0x20000860
 8005e34:	2000085c 	.word	0x2000085c
 8005e38:	20000d44 	.word	0x20000d44
 8005e3c:	20000d40 	.word	0x20000d40

08005e40 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005e40:	b480      	push	{r7}
 8005e42:	b085      	sub	sp, #20
 8005e44:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005e46:	4b2a      	ldr	r3, [pc, #168]	; (8005ef0 <vTaskSwitchContext+0xb0>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d003      	beq.n	8005e56 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005e4e:	4b29      	ldr	r3, [pc, #164]	; (8005ef4 <vTaskSwitchContext+0xb4>)
 8005e50:	2201      	movs	r2, #1
 8005e52:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005e54:	e046      	b.n	8005ee4 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8005e56:	4b27      	ldr	r3, [pc, #156]	; (8005ef4 <vTaskSwitchContext+0xb4>)
 8005e58:	2200      	movs	r2, #0
 8005e5a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e5c:	4b26      	ldr	r3, [pc, #152]	; (8005ef8 <vTaskSwitchContext+0xb8>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	60fb      	str	r3, [r7, #12]
 8005e62:	e010      	b.n	8005e86 <vTaskSwitchContext+0x46>
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d10a      	bne.n	8005e80 <vTaskSwitchContext+0x40>
	__asm volatile
 8005e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e6e:	f383 8811 	msr	BASEPRI, r3
 8005e72:	f3bf 8f6f 	isb	sy
 8005e76:	f3bf 8f4f 	dsb	sy
 8005e7a:	607b      	str	r3, [r7, #4]
}
 8005e7c:	bf00      	nop
 8005e7e:	e7fe      	b.n	8005e7e <vTaskSwitchContext+0x3e>
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	3b01      	subs	r3, #1
 8005e84:	60fb      	str	r3, [r7, #12]
 8005e86:	491d      	ldr	r1, [pc, #116]	; (8005efc <vTaskSwitchContext+0xbc>)
 8005e88:	68fa      	ldr	r2, [r7, #12]
 8005e8a:	4613      	mov	r3, r2
 8005e8c:	009b      	lsls	r3, r3, #2
 8005e8e:	4413      	add	r3, r2
 8005e90:	009b      	lsls	r3, r3, #2
 8005e92:	440b      	add	r3, r1
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d0e4      	beq.n	8005e64 <vTaskSwitchContext+0x24>
 8005e9a:	68fa      	ldr	r2, [r7, #12]
 8005e9c:	4613      	mov	r3, r2
 8005e9e:	009b      	lsls	r3, r3, #2
 8005ea0:	4413      	add	r3, r2
 8005ea2:	009b      	lsls	r3, r3, #2
 8005ea4:	4a15      	ldr	r2, [pc, #84]	; (8005efc <vTaskSwitchContext+0xbc>)
 8005ea6:	4413      	add	r3, r2
 8005ea8:	60bb      	str	r3, [r7, #8]
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	685a      	ldr	r2, [r3, #4]
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	605a      	str	r2, [r3, #4]
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	685a      	ldr	r2, [r3, #4]
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	3308      	adds	r3, #8
 8005ebc:	429a      	cmp	r2, r3
 8005ebe:	d104      	bne.n	8005eca <vTaskSwitchContext+0x8a>
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	685b      	ldr	r3, [r3, #4]
 8005ec4:	685a      	ldr	r2, [r3, #4]
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	605a      	str	r2, [r3, #4]
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	68db      	ldr	r3, [r3, #12]
 8005ed0:	4a0b      	ldr	r2, [pc, #44]	; (8005f00 <vTaskSwitchContext+0xc0>)
 8005ed2:	6013      	str	r3, [r2, #0]
 8005ed4:	4a08      	ldr	r2, [pc, #32]	; (8005ef8 <vTaskSwitchContext+0xb8>)
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005eda:	4b09      	ldr	r3, [pc, #36]	; (8005f00 <vTaskSwitchContext+0xc0>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	3354      	adds	r3, #84	; 0x54
 8005ee0:	4a08      	ldr	r2, [pc, #32]	; (8005f04 <vTaskSwitchContext+0xc4>)
 8005ee2:	6013      	str	r3, [r2, #0]
}
 8005ee4:	bf00      	nop
 8005ee6:	3714      	adds	r7, #20
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eee:	4770      	bx	lr
 8005ef0:	20000d58 	.word	0x20000d58
 8005ef4:	20000d44 	.word	0x20000d44
 8005ef8:	20000d38 	.word	0x20000d38
 8005efc:	20000860 	.word	0x20000860
 8005f00:	2000085c 	.word	0x2000085c
 8005f04:	2000001c 	.word	0x2000001c

08005f08 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b084      	sub	sp, #16
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
 8005f10:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d10a      	bne.n	8005f2e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f1c:	f383 8811 	msr	BASEPRI, r3
 8005f20:	f3bf 8f6f 	isb	sy
 8005f24:	f3bf 8f4f 	dsb	sy
 8005f28:	60fb      	str	r3, [r7, #12]
}
 8005f2a:	bf00      	nop
 8005f2c:	e7fe      	b.n	8005f2c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005f2e:	4b07      	ldr	r3, [pc, #28]	; (8005f4c <vTaskPlaceOnEventList+0x44>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	3318      	adds	r3, #24
 8005f34:	4619      	mov	r1, r3
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f7fe fa77 	bl	800442a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005f3c:	2101      	movs	r1, #1
 8005f3e:	6838      	ldr	r0, [r7, #0]
 8005f40:	f000 fb8e 	bl	8006660 <prvAddCurrentTaskToDelayedList>
}
 8005f44:	bf00      	nop
 8005f46:	3710      	adds	r7, #16
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bd80      	pop	{r7, pc}
 8005f4c:	2000085c 	.word	0x2000085c

08005f50 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b086      	sub	sp, #24
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	60f8      	str	r0, [r7, #12]
 8005f58:	60b9      	str	r1, [r7, #8]
 8005f5a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d10a      	bne.n	8005f78 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005f62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f66:	f383 8811 	msr	BASEPRI, r3
 8005f6a:	f3bf 8f6f 	isb	sy
 8005f6e:	f3bf 8f4f 	dsb	sy
 8005f72:	617b      	str	r3, [r7, #20]
}
 8005f74:	bf00      	nop
 8005f76:	e7fe      	b.n	8005f76 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005f78:	4b0a      	ldr	r3, [pc, #40]	; (8005fa4 <vTaskPlaceOnEventListRestricted+0x54>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	3318      	adds	r3, #24
 8005f7e:	4619      	mov	r1, r3
 8005f80:	68f8      	ldr	r0, [r7, #12]
 8005f82:	f7fe fa2e 	bl	80043e2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d002      	beq.n	8005f92 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005f8c:	f04f 33ff 	mov.w	r3, #4294967295
 8005f90:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005f92:	6879      	ldr	r1, [r7, #4]
 8005f94:	68b8      	ldr	r0, [r7, #8]
 8005f96:	f000 fb63 	bl	8006660 <prvAddCurrentTaskToDelayedList>
	}
 8005f9a:	bf00      	nop
 8005f9c:	3718      	adds	r7, #24
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bd80      	pop	{r7, pc}
 8005fa2:	bf00      	nop
 8005fa4:	2000085c 	.word	0x2000085c

08005fa8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b086      	sub	sp, #24
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	68db      	ldr	r3, [r3, #12]
 8005fb4:	68db      	ldr	r3, [r3, #12]
 8005fb6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005fb8:	693b      	ldr	r3, [r7, #16]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d10a      	bne.n	8005fd4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fc2:	f383 8811 	msr	BASEPRI, r3
 8005fc6:	f3bf 8f6f 	isb	sy
 8005fca:	f3bf 8f4f 	dsb	sy
 8005fce:	60fb      	str	r3, [r7, #12]
}
 8005fd0:	bf00      	nop
 8005fd2:	e7fe      	b.n	8005fd2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005fd4:	693b      	ldr	r3, [r7, #16]
 8005fd6:	3318      	adds	r3, #24
 8005fd8:	4618      	mov	r0, r3
 8005fda:	f7fe fa5f 	bl	800449c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005fde:	4b1e      	ldr	r3, [pc, #120]	; (8006058 <xTaskRemoveFromEventList+0xb0>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d11d      	bne.n	8006022 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005fe6:	693b      	ldr	r3, [r7, #16]
 8005fe8:	3304      	adds	r3, #4
 8005fea:	4618      	mov	r0, r3
 8005fec:	f7fe fa56 	bl	800449c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005ff0:	693b      	ldr	r3, [r7, #16]
 8005ff2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ff4:	4b19      	ldr	r3, [pc, #100]	; (800605c <xTaskRemoveFromEventList+0xb4>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	429a      	cmp	r2, r3
 8005ffa:	d903      	bls.n	8006004 <xTaskRemoveFromEventList+0x5c>
 8005ffc:	693b      	ldr	r3, [r7, #16]
 8005ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006000:	4a16      	ldr	r2, [pc, #88]	; (800605c <xTaskRemoveFromEventList+0xb4>)
 8006002:	6013      	str	r3, [r2, #0]
 8006004:	693b      	ldr	r3, [r7, #16]
 8006006:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006008:	4613      	mov	r3, r2
 800600a:	009b      	lsls	r3, r3, #2
 800600c:	4413      	add	r3, r2
 800600e:	009b      	lsls	r3, r3, #2
 8006010:	4a13      	ldr	r2, [pc, #76]	; (8006060 <xTaskRemoveFromEventList+0xb8>)
 8006012:	441a      	add	r2, r3
 8006014:	693b      	ldr	r3, [r7, #16]
 8006016:	3304      	adds	r3, #4
 8006018:	4619      	mov	r1, r3
 800601a:	4610      	mov	r0, r2
 800601c:	f7fe f9e1 	bl	80043e2 <vListInsertEnd>
 8006020:	e005      	b.n	800602e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006022:	693b      	ldr	r3, [r7, #16]
 8006024:	3318      	adds	r3, #24
 8006026:	4619      	mov	r1, r3
 8006028:	480e      	ldr	r0, [pc, #56]	; (8006064 <xTaskRemoveFromEventList+0xbc>)
 800602a:	f7fe f9da 	bl	80043e2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800602e:	693b      	ldr	r3, [r7, #16]
 8006030:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006032:	4b0d      	ldr	r3, [pc, #52]	; (8006068 <xTaskRemoveFromEventList+0xc0>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006038:	429a      	cmp	r2, r3
 800603a:	d905      	bls.n	8006048 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800603c:	2301      	movs	r3, #1
 800603e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006040:	4b0a      	ldr	r3, [pc, #40]	; (800606c <xTaskRemoveFromEventList+0xc4>)
 8006042:	2201      	movs	r2, #1
 8006044:	601a      	str	r2, [r3, #0]
 8006046:	e001      	b.n	800604c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006048:	2300      	movs	r3, #0
 800604a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800604c:	697b      	ldr	r3, [r7, #20]
}
 800604e:	4618      	mov	r0, r3
 8006050:	3718      	adds	r7, #24
 8006052:	46bd      	mov	sp, r7
 8006054:	bd80      	pop	{r7, pc}
 8006056:	bf00      	nop
 8006058:	20000d58 	.word	0x20000d58
 800605c:	20000d38 	.word	0x20000d38
 8006060:	20000860 	.word	0x20000860
 8006064:	20000cf0 	.word	0x20000cf0
 8006068:	2000085c 	.word	0x2000085c
 800606c:	20000d44 	.word	0x20000d44

08006070 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006070:	b480      	push	{r7}
 8006072:	b083      	sub	sp, #12
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006078:	4b06      	ldr	r3, [pc, #24]	; (8006094 <vTaskInternalSetTimeOutState+0x24>)
 800607a:	681a      	ldr	r2, [r3, #0]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006080:	4b05      	ldr	r3, [pc, #20]	; (8006098 <vTaskInternalSetTimeOutState+0x28>)
 8006082:	681a      	ldr	r2, [r3, #0]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	605a      	str	r2, [r3, #4]
}
 8006088:	bf00      	nop
 800608a:	370c      	adds	r7, #12
 800608c:	46bd      	mov	sp, r7
 800608e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006092:	4770      	bx	lr
 8006094:	20000d48 	.word	0x20000d48
 8006098:	20000d34 	.word	0x20000d34

0800609c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b088      	sub	sp, #32
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
 80060a4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d10a      	bne.n	80060c2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80060ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060b0:	f383 8811 	msr	BASEPRI, r3
 80060b4:	f3bf 8f6f 	isb	sy
 80060b8:	f3bf 8f4f 	dsb	sy
 80060bc:	613b      	str	r3, [r7, #16]
}
 80060be:	bf00      	nop
 80060c0:	e7fe      	b.n	80060c0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d10a      	bne.n	80060de <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80060c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060cc:	f383 8811 	msr	BASEPRI, r3
 80060d0:	f3bf 8f6f 	isb	sy
 80060d4:	f3bf 8f4f 	dsb	sy
 80060d8:	60fb      	str	r3, [r7, #12]
}
 80060da:	bf00      	nop
 80060dc:	e7fe      	b.n	80060dc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80060de:	f000 ff91 	bl	8007004 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80060e2:	4b1d      	ldr	r3, [pc, #116]	; (8006158 <xTaskCheckForTimeOut+0xbc>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	685b      	ldr	r3, [r3, #4]
 80060ec:	69ba      	ldr	r2, [r7, #24]
 80060ee:	1ad3      	subs	r3, r2, r3
 80060f0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060fa:	d102      	bne.n	8006102 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80060fc:	2300      	movs	r3, #0
 80060fe:	61fb      	str	r3, [r7, #28]
 8006100:	e023      	b.n	800614a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681a      	ldr	r2, [r3, #0]
 8006106:	4b15      	ldr	r3, [pc, #84]	; (800615c <xTaskCheckForTimeOut+0xc0>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	429a      	cmp	r2, r3
 800610c:	d007      	beq.n	800611e <xTaskCheckForTimeOut+0x82>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	685b      	ldr	r3, [r3, #4]
 8006112:	69ba      	ldr	r2, [r7, #24]
 8006114:	429a      	cmp	r2, r3
 8006116:	d302      	bcc.n	800611e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006118:	2301      	movs	r3, #1
 800611a:	61fb      	str	r3, [r7, #28]
 800611c:	e015      	b.n	800614a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	697a      	ldr	r2, [r7, #20]
 8006124:	429a      	cmp	r2, r3
 8006126:	d20b      	bcs.n	8006140 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	681a      	ldr	r2, [r3, #0]
 800612c:	697b      	ldr	r3, [r7, #20]
 800612e:	1ad2      	subs	r2, r2, r3
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006134:	6878      	ldr	r0, [r7, #4]
 8006136:	f7ff ff9b 	bl	8006070 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800613a:	2300      	movs	r3, #0
 800613c:	61fb      	str	r3, [r7, #28]
 800613e:	e004      	b.n	800614a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	2200      	movs	r2, #0
 8006144:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006146:	2301      	movs	r3, #1
 8006148:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800614a:	f000 ff8b 	bl	8007064 <vPortExitCritical>

	return xReturn;
 800614e:	69fb      	ldr	r3, [r7, #28]
}
 8006150:	4618      	mov	r0, r3
 8006152:	3720      	adds	r7, #32
 8006154:	46bd      	mov	sp, r7
 8006156:	bd80      	pop	{r7, pc}
 8006158:	20000d34 	.word	0x20000d34
 800615c:	20000d48 	.word	0x20000d48

08006160 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006160:	b480      	push	{r7}
 8006162:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006164:	4b03      	ldr	r3, [pc, #12]	; (8006174 <vTaskMissedYield+0x14>)
 8006166:	2201      	movs	r2, #1
 8006168:	601a      	str	r2, [r3, #0]
}
 800616a:	bf00      	nop
 800616c:	46bd      	mov	sp, r7
 800616e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006172:	4770      	bx	lr
 8006174:	20000d44 	.word	0x20000d44

08006178 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b082      	sub	sp, #8
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006180:	f000 f852 	bl	8006228 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006184:	4b06      	ldr	r3, [pc, #24]	; (80061a0 <prvIdleTask+0x28>)
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	2b01      	cmp	r3, #1
 800618a:	d9f9      	bls.n	8006180 <prvIdleTask+0x8>
			{
				taskYIELD();
 800618c:	4b05      	ldr	r3, [pc, #20]	; (80061a4 <prvIdleTask+0x2c>)
 800618e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006192:	601a      	str	r2, [r3, #0]
 8006194:	f3bf 8f4f 	dsb	sy
 8006198:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800619c:	e7f0      	b.n	8006180 <prvIdleTask+0x8>
 800619e:	bf00      	nop
 80061a0:	20000860 	.word	0x20000860
 80061a4:	e000ed04 	.word	0xe000ed04

080061a8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b082      	sub	sp, #8
 80061ac:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80061ae:	2300      	movs	r3, #0
 80061b0:	607b      	str	r3, [r7, #4]
 80061b2:	e00c      	b.n	80061ce <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80061b4:	687a      	ldr	r2, [r7, #4]
 80061b6:	4613      	mov	r3, r2
 80061b8:	009b      	lsls	r3, r3, #2
 80061ba:	4413      	add	r3, r2
 80061bc:	009b      	lsls	r3, r3, #2
 80061be:	4a12      	ldr	r2, [pc, #72]	; (8006208 <prvInitialiseTaskLists+0x60>)
 80061c0:	4413      	add	r3, r2
 80061c2:	4618      	mov	r0, r3
 80061c4:	f7fe f8e0 	bl	8004388 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	3301      	adds	r3, #1
 80061cc:	607b      	str	r3, [r7, #4]
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2b37      	cmp	r3, #55	; 0x37
 80061d2:	d9ef      	bls.n	80061b4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80061d4:	480d      	ldr	r0, [pc, #52]	; (800620c <prvInitialiseTaskLists+0x64>)
 80061d6:	f7fe f8d7 	bl	8004388 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80061da:	480d      	ldr	r0, [pc, #52]	; (8006210 <prvInitialiseTaskLists+0x68>)
 80061dc:	f7fe f8d4 	bl	8004388 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80061e0:	480c      	ldr	r0, [pc, #48]	; (8006214 <prvInitialiseTaskLists+0x6c>)
 80061e2:	f7fe f8d1 	bl	8004388 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80061e6:	480c      	ldr	r0, [pc, #48]	; (8006218 <prvInitialiseTaskLists+0x70>)
 80061e8:	f7fe f8ce 	bl	8004388 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80061ec:	480b      	ldr	r0, [pc, #44]	; (800621c <prvInitialiseTaskLists+0x74>)
 80061ee:	f7fe f8cb 	bl	8004388 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80061f2:	4b0b      	ldr	r3, [pc, #44]	; (8006220 <prvInitialiseTaskLists+0x78>)
 80061f4:	4a05      	ldr	r2, [pc, #20]	; (800620c <prvInitialiseTaskLists+0x64>)
 80061f6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80061f8:	4b0a      	ldr	r3, [pc, #40]	; (8006224 <prvInitialiseTaskLists+0x7c>)
 80061fa:	4a05      	ldr	r2, [pc, #20]	; (8006210 <prvInitialiseTaskLists+0x68>)
 80061fc:	601a      	str	r2, [r3, #0]
}
 80061fe:	bf00      	nop
 8006200:	3708      	adds	r7, #8
 8006202:	46bd      	mov	sp, r7
 8006204:	bd80      	pop	{r7, pc}
 8006206:	bf00      	nop
 8006208:	20000860 	.word	0x20000860
 800620c:	20000cc0 	.word	0x20000cc0
 8006210:	20000cd4 	.word	0x20000cd4
 8006214:	20000cf0 	.word	0x20000cf0
 8006218:	20000d04 	.word	0x20000d04
 800621c:	20000d1c 	.word	0x20000d1c
 8006220:	20000ce8 	.word	0x20000ce8
 8006224:	20000cec 	.word	0x20000cec

08006228 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b082      	sub	sp, #8
 800622c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800622e:	e019      	b.n	8006264 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006230:	f000 fee8 	bl	8007004 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006234:	4b10      	ldr	r3, [pc, #64]	; (8006278 <prvCheckTasksWaitingTermination+0x50>)
 8006236:	68db      	ldr	r3, [r3, #12]
 8006238:	68db      	ldr	r3, [r3, #12]
 800623a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	3304      	adds	r3, #4
 8006240:	4618      	mov	r0, r3
 8006242:	f7fe f92b 	bl	800449c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006246:	4b0d      	ldr	r3, [pc, #52]	; (800627c <prvCheckTasksWaitingTermination+0x54>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	3b01      	subs	r3, #1
 800624c:	4a0b      	ldr	r2, [pc, #44]	; (800627c <prvCheckTasksWaitingTermination+0x54>)
 800624e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006250:	4b0b      	ldr	r3, [pc, #44]	; (8006280 <prvCheckTasksWaitingTermination+0x58>)
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	3b01      	subs	r3, #1
 8006256:	4a0a      	ldr	r2, [pc, #40]	; (8006280 <prvCheckTasksWaitingTermination+0x58>)
 8006258:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800625a:	f000 ff03 	bl	8007064 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f000 f810 	bl	8006284 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006264:	4b06      	ldr	r3, [pc, #24]	; (8006280 <prvCheckTasksWaitingTermination+0x58>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d1e1      	bne.n	8006230 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800626c:	bf00      	nop
 800626e:	bf00      	nop
 8006270:	3708      	adds	r7, #8
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}
 8006276:	bf00      	nop
 8006278:	20000d04 	.word	0x20000d04
 800627c:	20000d30 	.word	0x20000d30
 8006280:	20000d18 	.word	0x20000d18

08006284 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006284:	b580      	push	{r7, lr}
 8006286:	b084      	sub	sp, #16
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	3354      	adds	r3, #84	; 0x54
 8006290:	4618      	mov	r0, r3
 8006292:	f00d fe6d 	bl	8013f70 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800629c:	2b00      	cmp	r3, #0
 800629e:	d108      	bne.n	80062b2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062a4:	4618      	mov	r0, r3
 80062a6:	f001 f89b 	bl	80073e0 <vPortFree>
				vPortFree( pxTCB );
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f001 f898 	bl	80073e0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80062b0:	e018      	b.n	80062e4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80062b8:	2b01      	cmp	r3, #1
 80062ba:	d103      	bne.n	80062c4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80062bc:	6878      	ldr	r0, [r7, #4]
 80062be:	f001 f88f 	bl	80073e0 <vPortFree>
	}
 80062c2:	e00f      	b.n	80062e4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80062ca:	2b02      	cmp	r3, #2
 80062cc:	d00a      	beq.n	80062e4 <prvDeleteTCB+0x60>
	__asm volatile
 80062ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062d2:	f383 8811 	msr	BASEPRI, r3
 80062d6:	f3bf 8f6f 	isb	sy
 80062da:	f3bf 8f4f 	dsb	sy
 80062de:	60fb      	str	r3, [r7, #12]
}
 80062e0:	bf00      	nop
 80062e2:	e7fe      	b.n	80062e2 <prvDeleteTCB+0x5e>
	}
 80062e4:	bf00      	nop
 80062e6:	3710      	adds	r7, #16
 80062e8:	46bd      	mov	sp, r7
 80062ea:	bd80      	pop	{r7, pc}

080062ec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80062ec:	b480      	push	{r7}
 80062ee:	b083      	sub	sp, #12
 80062f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80062f2:	4b0c      	ldr	r3, [pc, #48]	; (8006324 <prvResetNextTaskUnblockTime+0x38>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d104      	bne.n	8006306 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80062fc:	4b0a      	ldr	r3, [pc, #40]	; (8006328 <prvResetNextTaskUnblockTime+0x3c>)
 80062fe:	f04f 32ff 	mov.w	r2, #4294967295
 8006302:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006304:	e008      	b.n	8006318 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006306:	4b07      	ldr	r3, [pc, #28]	; (8006324 <prvResetNextTaskUnblockTime+0x38>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	68db      	ldr	r3, [r3, #12]
 800630c:	68db      	ldr	r3, [r3, #12]
 800630e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	685b      	ldr	r3, [r3, #4]
 8006314:	4a04      	ldr	r2, [pc, #16]	; (8006328 <prvResetNextTaskUnblockTime+0x3c>)
 8006316:	6013      	str	r3, [r2, #0]
}
 8006318:	bf00      	nop
 800631a:	370c      	adds	r7, #12
 800631c:	46bd      	mov	sp, r7
 800631e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006322:	4770      	bx	lr
 8006324:	20000ce8 	.word	0x20000ce8
 8006328:	20000d50 	.word	0x20000d50

0800632c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800632c:	b480      	push	{r7}
 800632e:	b083      	sub	sp, #12
 8006330:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8006332:	4b05      	ldr	r3, [pc, #20]	; (8006348 <xTaskGetCurrentTaskHandle+0x1c>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	607b      	str	r3, [r7, #4]

		return xReturn;
 8006338:	687b      	ldr	r3, [r7, #4]
	}
 800633a:	4618      	mov	r0, r3
 800633c:	370c      	adds	r7, #12
 800633e:	46bd      	mov	sp, r7
 8006340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006344:	4770      	bx	lr
 8006346:	bf00      	nop
 8006348:	2000085c 	.word	0x2000085c

0800634c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800634c:	b480      	push	{r7}
 800634e:	b083      	sub	sp, #12
 8006350:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006352:	4b0b      	ldr	r3, [pc, #44]	; (8006380 <xTaskGetSchedulerState+0x34>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d102      	bne.n	8006360 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800635a:	2301      	movs	r3, #1
 800635c:	607b      	str	r3, [r7, #4]
 800635e:	e008      	b.n	8006372 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006360:	4b08      	ldr	r3, [pc, #32]	; (8006384 <xTaskGetSchedulerState+0x38>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d102      	bne.n	800636e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006368:	2302      	movs	r3, #2
 800636a:	607b      	str	r3, [r7, #4]
 800636c:	e001      	b.n	8006372 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800636e:	2300      	movs	r3, #0
 8006370:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006372:	687b      	ldr	r3, [r7, #4]
	}
 8006374:	4618      	mov	r0, r3
 8006376:	370c      	adds	r7, #12
 8006378:	46bd      	mov	sp, r7
 800637a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637e:	4770      	bx	lr
 8006380:	20000d3c 	.word	0x20000d3c
 8006384:	20000d58 	.word	0x20000d58

08006388 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006388:	b580      	push	{r7, lr}
 800638a:	b084      	sub	sp, #16
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006394:	2300      	movs	r3, #0
 8006396:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d051      	beq.n	8006442 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063a2:	4b2a      	ldr	r3, [pc, #168]	; (800644c <xTaskPriorityInherit+0xc4>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063a8:	429a      	cmp	r2, r3
 80063aa:	d241      	bcs.n	8006430 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	699b      	ldr	r3, [r3, #24]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	db06      	blt.n	80063c2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80063b4:	4b25      	ldr	r3, [pc, #148]	; (800644c <xTaskPriorityInherit+0xc4>)
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ba:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	6959      	ldr	r1, [r3, #20]
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063ca:	4613      	mov	r3, r2
 80063cc:	009b      	lsls	r3, r3, #2
 80063ce:	4413      	add	r3, r2
 80063d0:	009b      	lsls	r3, r3, #2
 80063d2:	4a1f      	ldr	r2, [pc, #124]	; (8006450 <xTaskPriorityInherit+0xc8>)
 80063d4:	4413      	add	r3, r2
 80063d6:	4299      	cmp	r1, r3
 80063d8:	d122      	bne.n	8006420 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	3304      	adds	r3, #4
 80063de:	4618      	mov	r0, r3
 80063e0:	f7fe f85c 	bl	800449c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80063e4:	4b19      	ldr	r3, [pc, #100]	; (800644c <xTaskPriorityInherit+0xc4>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063f2:	4b18      	ldr	r3, [pc, #96]	; (8006454 <xTaskPriorityInherit+0xcc>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	429a      	cmp	r2, r3
 80063f8:	d903      	bls.n	8006402 <xTaskPriorityInherit+0x7a>
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063fe:	4a15      	ldr	r2, [pc, #84]	; (8006454 <xTaskPriorityInherit+0xcc>)
 8006400:	6013      	str	r3, [r2, #0]
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006406:	4613      	mov	r3, r2
 8006408:	009b      	lsls	r3, r3, #2
 800640a:	4413      	add	r3, r2
 800640c:	009b      	lsls	r3, r3, #2
 800640e:	4a10      	ldr	r2, [pc, #64]	; (8006450 <xTaskPriorityInherit+0xc8>)
 8006410:	441a      	add	r2, r3
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	3304      	adds	r3, #4
 8006416:	4619      	mov	r1, r3
 8006418:	4610      	mov	r0, r2
 800641a:	f7fd ffe2 	bl	80043e2 <vListInsertEnd>
 800641e:	e004      	b.n	800642a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006420:	4b0a      	ldr	r3, [pc, #40]	; (800644c <xTaskPriorityInherit+0xc4>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800642a:	2301      	movs	r3, #1
 800642c:	60fb      	str	r3, [r7, #12]
 800642e:	e008      	b.n	8006442 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006430:	68bb      	ldr	r3, [r7, #8]
 8006432:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006434:	4b05      	ldr	r3, [pc, #20]	; (800644c <xTaskPriorityInherit+0xc4>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800643a:	429a      	cmp	r2, r3
 800643c:	d201      	bcs.n	8006442 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800643e:	2301      	movs	r3, #1
 8006440:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006442:	68fb      	ldr	r3, [r7, #12]
	}
 8006444:	4618      	mov	r0, r3
 8006446:	3710      	adds	r7, #16
 8006448:	46bd      	mov	sp, r7
 800644a:	bd80      	pop	{r7, pc}
 800644c:	2000085c 	.word	0x2000085c
 8006450:	20000860 	.word	0x20000860
 8006454:	20000d38 	.word	0x20000d38

08006458 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006458:	b580      	push	{r7, lr}
 800645a:	b086      	sub	sp, #24
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006464:	2300      	movs	r3, #0
 8006466:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d056      	beq.n	800651c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800646e:	4b2e      	ldr	r3, [pc, #184]	; (8006528 <xTaskPriorityDisinherit+0xd0>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	693a      	ldr	r2, [r7, #16]
 8006474:	429a      	cmp	r2, r3
 8006476:	d00a      	beq.n	800648e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800647c:	f383 8811 	msr	BASEPRI, r3
 8006480:	f3bf 8f6f 	isb	sy
 8006484:	f3bf 8f4f 	dsb	sy
 8006488:	60fb      	str	r3, [r7, #12]
}
 800648a:	bf00      	nop
 800648c:	e7fe      	b.n	800648c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800648e:	693b      	ldr	r3, [r7, #16]
 8006490:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006492:	2b00      	cmp	r3, #0
 8006494:	d10a      	bne.n	80064ac <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006496:	f04f 0350 	mov.w	r3, #80	; 0x50
 800649a:	f383 8811 	msr	BASEPRI, r3
 800649e:	f3bf 8f6f 	isb	sy
 80064a2:	f3bf 8f4f 	dsb	sy
 80064a6:	60bb      	str	r3, [r7, #8]
}
 80064a8:	bf00      	nop
 80064aa:	e7fe      	b.n	80064aa <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80064ac:	693b      	ldr	r3, [r7, #16]
 80064ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064b0:	1e5a      	subs	r2, r3, #1
 80064b2:	693b      	ldr	r3, [r7, #16]
 80064b4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80064b6:	693b      	ldr	r3, [r7, #16]
 80064b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064ba:	693b      	ldr	r3, [r7, #16]
 80064bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064be:	429a      	cmp	r2, r3
 80064c0:	d02c      	beq.n	800651c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80064c2:	693b      	ldr	r3, [r7, #16]
 80064c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d128      	bne.n	800651c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80064ca:	693b      	ldr	r3, [r7, #16]
 80064cc:	3304      	adds	r3, #4
 80064ce:	4618      	mov	r0, r3
 80064d0:	f7fd ffe4 	bl	800449c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80064d4:	693b      	ldr	r3, [r7, #16]
 80064d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80064d8:	693b      	ldr	r3, [r7, #16]
 80064da:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80064dc:	693b      	ldr	r3, [r7, #16]
 80064de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064e0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80064e4:	693b      	ldr	r3, [r7, #16]
 80064e6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80064e8:	693b      	ldr	r3, [r7, #16]
 80064ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064ec:	4b0f      	ldr	r3, [pc, #60]	; (800652c <xTaskPriorityDisinherit+0xd4>)
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	429a      	cmp	r2, r3
 80064f2:	d903      	bls.n	80064fc <xTaskPriorityDisinherit+0xa4>
 80064f4:	693b      	ldr	r3, [r7, #16]
 80064f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064f8:	4a0c      	ldr	r2, [pc, #48]	; (800652c <xTaskPriorityDisinherit+0xd4>)
 80064fa:	6013      	str	r3, [r2, #0]
 80064fc:	693b      	ldr	r3, [r7, #16]
 80064fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006500:	4613      	mov	r3, r2
 8006502:	009b      	lsls	r3, r3, #2
 8006504:	4413      	add	r3, r2
 8006506:	009b      	lsls	r3, r3, #2
 8006508:	4a09      	ldr	r2, [pc, #36]	; (8006530 <xTaskPriorityDisinherit+0xd8>)
 800650a:	441a      	add	r2, r3
 800650c:	693b      	ldr	r3, [r7, #16]
 800650e:	3304      	adds	r3, #4
 8006510:	4619      	mov	r1, r3
 8006512:	4610      	mov	r0, r2
 8006514:	f7fd ff65 	bl	80043e2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006518:	2301      	movs	r3, #1
 800651a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800651c:	697b      	ldr	r3, [r7, #20]
	}
 800651e:	4618      	mov	r0, r3
 8006520:	3718      	adds	r7, #24
 8006522:	46bd      	mov	sp, r7
 8006524:	bd80      	pop	{r7, pc}
 8006526:	bf00      	nop
 8006528:	2000085c 	.word	0x2000085c
 800652c:	20000d38 	.word	0x20000d38
 8006530:	20000860 	.word	0x20000860

08006534 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006534:	b580      	push	{r7, lr}
 8006536:	b088      	sub	sp, #32
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
 800653c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006542:	2301      	movs	r3, #1
 8006544:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d06a      	beq.n	8006622 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800654c:	69bb      	ldr	r3, [r7, #24]
 800654e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006550:	2b00      	cmp	r3, #0
 8006552:	d10a      	bne.n	800656a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8006554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006558:	f383 8811 	msr	BASEPRI, r3
 800655c:	f3bf 8f6f 	isb	sy
 8006560:	f3bf 8f4f 	dsb	sy
 8006564:	60fb      	str	r3, [r7, #12]
}
 8006566:	bf00      	nop
 8006568:	e7fe      	b.n	8006568 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800656a:	69bb      	ldr	r3, [r7, #24]
 800656c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800656e:	683a      	ldr	r2, [r7, #0]
 8006570:	429a      	cmp	r2, r3
 8006572:	d902      	bls.n	800657a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	61fb      	str	r3, [r7, #28]
 8006578:	e002      	b.n	8006580 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800657a:	69bb      	ldr	r3, [r7, #24]
 800657c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800657e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006580:	69bb      	ldr	r3, [r7, #24]
 8006582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006584:	69fa      	ldr	r2, [r7, #28]
 8006586:	429a      	cmp	r2, r3
 8006588:	d04b      	beq.n	8006622 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800658a:	69bb      	ldr	r3, [r7, #24]
 800658c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800658e:	697a      	ldr	r2, [r7, #20]
 8006590:	429a      	cmp	r2, r3
 8006592:	d146      	bne.n	8006622 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006594:	4b25      	ldr	r3, [pc, #148]	; (800662c <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	69ba      	ldr	r2, [r7, #24]
 800659a:	429a      	cmp	r2, r3
 800659c:	d10a      	bne.n	80065b4 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800659e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065a2:	f383 8811 	msr	BASEPRI, r3
 80065a6:	f3bf 8f6f 	isb	sy
 80065aa:	f3bf 8f4f 	dsb	sy
 80065ae:	60bb      	str	r3, [r7, #8]
}
 80065b0:	bf00      	nop
 80065b2:	e7fe      	b.n	80065b2 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80065b4:	69bb      	ldr	r3, [r7, #24]
 80065b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065b8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80065ba:	69bb      	ldr	r3, [r7, #24]
 80065bc:	69fa      	ldr	r2, [r7, #28]
 80065be:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80065c0:	69bb      	ldr	r3, [r7, #24]
 80065c2:	699b      	ldr	r3, [r3, #24]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	db04      	blt.n	80065d2 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80065c8:	69fb      	ldr	r3, [r7, #28]
 80065ca:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80065ce:	69bb      	ldr	r3, [r7, #24]
 80065d0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80065d2:	69bb      	ldr	r3, [r7, #24]
 80065d4:	6959      	ldr	r1, [r3, #20]
 80065d6:	693a      	ldr	r2, [r7, #16]
 80065d8:	4613      	mov	r3, r2
 80065da:	009b      	lsls	r3, r3, #2
 80065dc:	4413      	add	r3, r2
 80065de:	009b      	lsls	r3, r3, #2
 80065e0:	4a13      	ldr	r2, [pc, #76]	; (8006630 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80065e2:	4413      	add	r3, r2
 80065e4:	4299      	cmp	r1, r3
 80065e6:	d11c      	bne.n	8006622 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80065e8:	69bb      	ldr	r3, [r7, #24]
 80065ea:	3304      	adds	r3, #4
 80065ec:	4618      	mov	r0, r3
 80065ee:	f7fd ff55 	bl	800449c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80065f2:	69bb      	ldr	r3, [r7, #24]
 80065f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065f6:	4b0f      	ldr	r3, [pc, #60]	; (8006634 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	429a      	cmp	r2, r3
 80065fc:	d903      	bls.n	8006606 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 80065fe:	69bb      	ldr	r3, [r7, #24]
 8006600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006602:	4a0c      	ldr	r2, [pc, #48]	; (8006634 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8006604:	6013      	str	r3, [r2, #0]
 8006606:	69bb      	ldr	r3, [r7, #24]
 8006608:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800660a:	4613      	mov	r3, r2
 800660c:	009b      	lsls	r3, r3, #2
 800660e:	4413      	add	r3, r2
 8006610:	009b      	lsls	r3, r3, #2
 8006612:	4a07      	ldr	r2, [pc, #28]	; (8006630 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8006614:	441a      	add	r2, r3
 8006616:	69bb      	ldr	r3, [r7, #24]
 8006618:	3304      	adds	r3, #4
 800661a:	4619      	mov	r1, r3
 800661c:	4610      	mov	r0, r2
 800661e:	f7fd fee0 	bl	80043e2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006622:	bf00      	nop
 8006624:	3720      	adds	r7, #32
 8006626:	46bd      	mov	sp, r7
 8006628:	bd80      	pop	{r7, pc}
 800662a:	bf00      	nop
 800662c:	2000085c 	.word	0x2000085c
 8006630:	20000860 	.word	0x20000860
 8006634:	20000d38 	.word	0x20000d38

08006638 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8006638:	b480      	push	{r7}
 800663a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800663c:	4b07      	ldr	r3, [pc, #28]	; (800665c <pvTaskIncrementMutexHeldCount+0x24>)
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d004      	beq.n	800664e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006644:	4b05      	ldr	r3, [pc, #20]	; (800665c <pvTaskIncrementMutexHeldCount+0x24>)
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800664a:	3201      	adds	r2, #1
 800664c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800664e:	4b03      	ldr	r3, [pc, #12]	; (800665c <pvTaskIncrementMutexHeldCount+0x24>)
 8006650:	681b      	ldr	r3, [r3, #0]
	}
 8006652:	4618      	mov	r0, r3
 8006654:	46bd      	mov	sp, r7
 8006656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665a:	4770      	bx	lr
 800665c:	2000085c 	.word	0x2000085c

08006660 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b084      	sub	sp, #16
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
 8006668:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800666a:	4b21      	ldr	r3, [pc, #132]	; (80066f0 <prvAddCurrentTaskToDelayedList+0x90>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006670:	4b20      	ldr	r3, [pc, #128]	; (80066f4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	3304      	adds	r3, #4
 8006676:	4618      	mov	r0, r3
 8006678:	f7fd ff10 	bl	800449c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006682:	d10a      	bne.n	800669a <prvAddCurrentTaskToDelayedList+0x3a>
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d007      	beq.n	800669a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800668a:	4b1a      	ldr	r3, [pc, #104]	; (80066f4 <prvAddCurrentTaskToDelayedList+0x94>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	3304      	adds	r3, #4
 8006690:	4619      	mov	r1, r3
 8006692:	4819      	ldr	r0, [pc, #100]	; (80066f8 <prvAddCurrentTaskToDelayedList+0x98>)
 8006694:	f7fd fea5 	bl	80043e2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006698:	e026      	b.n	80066e8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800669a:	68fa      	ldr	r2, [r7, #12]
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	4413      	add	r3, r2
 80066a0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80066a2:	4b14      	ldr	r3, [pc, #80]	; (80066f4 <prvAddCurrentTaskToDelayedList+0x94>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	68ba      	ldr	r2, [r7, #8]
 80066a8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80066aa:	68ba      	ldr	r2, [r7, #8]
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	429a      	cmp	r2, r3
 80066b0:	d209      	bcs.n	80066c6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80066b2:	4b12      	ldr	r3, [pc, #72]	; (80066fc <prvAddCurrentTaskToDelayedList+0x9c>)
 80066b4:	681a      	ldr	r2, [r3, #0]
 80066b6:	4b0f      	ldr	r3, [pc, #60]	; (80066f4 <prvAddCurrentTaskToDelayedList+0x94>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	3304      	adds	r3, #4
 80066bc:	4619      	mov	r1, r3
 80066be:	4610      	mov	r0, r2
 80066c0:	f7fd feb3 	bl	800442a <vListInsert>
}
 80066c4:	e010      	b.n	80066e8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80066c6:	4b0e      	ldr	r3, [pc, #56]	; (8006700 <prvAddCurrentTaskToDelayedList+0xa0>)
 80066c8:	681a      	ldr	r2, [r3, #0]
 80066ca:	4b0a      	ldr	r3, [pc, #40]	; (80066f4 <prvAddCurrentTaskToDelayedList+0x94>)
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	3304      	adds	r3, #4
 80066d0:	4619      	mov	r1, r3
 80066d2:	4610      	mov	r0, r2
 80066d4:	f7fd fea9 	bl	800442a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80066d8:	4b0a      	ldr	r3, [pc, #40]	; (8006704 <prvAddCurrentTaskToDelayedList+0xa4>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	68ba      	ldr	r2, [r7, #8]
 80066de:	429a      	cmp	r2, r3
 80066e0:	d202      	bcs.n	80066e8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80066e2:	4a08      	ldr	r2, [pc, #32]	; (8006704 <prvAddCurrentTaskToDelayedList+0xa4>)
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	6013      	str	r3, [r2, #0]
}
 80066e8:	bf00      	nop
 80066ea:	3710      	adds	r7, #16
 80066ec:	46bd      	mov	sp, r7
 80066ee:	bd80      	pop	{r7, pc}
 80066f0:	20000d34 	.word	0x20000d34
 80066f4:	2000085c 	.word	0x2000085c
 80066f8:	20000d1c 	.word	0x20000d1c
 80066fc:	20000cec 	.word	0x20000cec
 8006700:	20000ce8 	.word	0x20000ce8
 8006704:	20000d50 	.word	0x20000d50

08006708 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b08a      	sub	sp, #40	; 0x28
 800670c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800670e:	2300      	movs	r3, #0
 8006710:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006712:	f000 fb07 	bl	8006d24 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006716:	4b1c      	ldr	r3, [pc, #112]	; (8006788 <xTimerCreateTimerTask+0x80>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d021      	beq.n	8006762 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800671e:	2300      	movs	r3, #0
 8006720:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006722:	2300      	movs	r3, #0
 8006724:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006726:	1d3a      	adds	r2, r7, #4
 8006728:	f107 0108 	add.w	r1, r7, #8
 800672c:	f107 030c 	add.w	r3, r7, #12
 8006730:	4618      	mov	r0, r3
 8006732:	f7fd fe0f 	bl	8004354 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006736:	6879      	ldr	r1, [r7, #4]
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	68fa      	ldr	r2, [r7, #12]
 800673c:	9202      	str	r2, [sp, #8]
 800673e:	9301      	str	r3, [sp, #4]
 8006740:	2302      	movs	r3, #2
 8006742:	9300      	str	r3, [sp, #0]
 8006744:	2300      	movs	r3, #0
 8006746:	460a      	mov	r2, r1
 8006748:	4910      	ldr	r1, [pc, #64]	; (800678c <xTimerCreateTimerTask+0x84>)
 800674a:	4811      	ldr	r0, [pc, #68]	; (8006790 <xTimerCreateTimerTask+0x88>)
 800674c:	f7fe ff94 	bl	8005678 <xTaskCreateStatic>
 8006750:	4603      	mov	r3, r0
 8006752:	4a10      	ldr	r2, [pc, #64]	; (8006794 <xTimerCreateTimerTask+0x8c>)
 8006754:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006756:	4b0f      	ldr	r3, [pc, #60]	; (8006794 <xTimerCreateTimerTask+0x8c>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d001      	beq.n	8006762 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800675e:	2301      	movs	r3, #1
 8006760:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006762:	697b      	ldr	r3, [r7, #20]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d10a      	bne.n	800677e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800676c:	f383 8811 	msr	BASEPRI, r3
 8006770:	f3bf 8f6f 	isb	sy
 8006774:	f3bf 8f4f 	dsb	sy
 8006778:	613b      	str	r3, [r7, #16]
}
 800677a:	bf00      	nop
 800677c:	e7fe      	b.n	800677c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800677e:	697b      	ldr	r3, [r7, #20]
}
 8006780:	4618      	mov	r0, r3
 8006782:	3718      	adds	r7, #24
 8006784:	46bd      	mov	sp, r7
 8006786:	bd80      	pop	{r7, pc}
 8006788:	20000d8c 	.word	0x20000d8c
 800678c:	08014e78 	.word	0x08014e78
 8006790:	080068cd 	.word	0x080068cd
 8006794:	20000d90 	.word	0x20000d90

08006798 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b08a      	sub	sp, #40	; 0x28
 800679c:	af00      	add	r7, sp, #0
 800679e:	60f8      	str	r0, [r7, #12]
 80067a0:	60b9      	str	r1, [r7, #8]
 80067a2:	607a      	str	r2, [r7, #4]
 80067a4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80067a6:	2300      	movs	r3, #0
 80067a8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d10a      	bne.n	80067c6 <xTimerGenericCommand+0x2e>
	__asm volatile
 80067b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067b4:	f383 8811 	msr	BASEPRI, r3
 80067b8:	f3bf 8f6f 	isb	sy
 80067bc:	f3bf 8f4f 	dsb	sy
 80067c0:	623b      	str	r3, [r7, #32]
}
 80067c2:	bf00      	nop
 80067c4:	e7fe      	b.n	80067c4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80067c6:	4b1a      	ldr	r3, [pc, #104]	; (8006830 <xTimerGenericCommand+0x98>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d02a      	beq.n	8006824 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	2b05      	cmp	r3, #5
 80067de:	dc18      	bgt.n	8006812 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80067e0:	f7ff fdb4 	bl	800634c <xTaskGetSchedulerState>
 80067e4:	4603      	mov	r3, r0
 80067e6:	2b02      	cmp	r3, #2
 80067e8:	d109      	bne.n	80067fe <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80067ea:	4b11      	ldr	r3, [pc, #68]	; (8006830 <xTimerGenericCommand+0x98>)
 80067ec:	6818      	ldr	r0, [r3, #0]
 80067ee:	f107 0110 	add.w	r1, r7, #16
 80067f2:	2300      	movs	r3, #0
 80067f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067f6:	f7fe f8d9 	bl	80049ac <xQueueGenericSend>
 80067fa:	6278      	str	r0, [r7, #36]	; 0x24
 80067fc:	e012      	b.n	8006824 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80067fe:	4b0c      	ldr	r3, [pc, #48]	; (8006830 <xTimerGenericCommand+0x98>)
 8006800:	6818      	ldr	r0, [r3, #0]
 8006802:	f107 0110 	add.w	r1, r7, #16
 8006806:	2300      	movs	r3, #0
 8006808:	2200      	movs	r2, #0
 800680a:	f7fe f8cf 	bl	80049ac <xQueueGenericSend>
 800680e:	6278      	str	r0, [r7, #36]	; 0x24
 8006810:	e008      	b.n	8006824 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006812:	4b07      	ldr	r3, [pc, #28]	; (8006830 <xTimerGenericCommand+0x98>)
 8006814:	6818      	ldr	r0, [r3, #0]
 8006816:	f107 0110 	add.w	r1, r7, #16
 800681a:	2300      	movs	r3, #0
 800681c:	683a      	ldr	r2, [r7, #0]
 800681e:	f7fe f9c3 	bl	8004ba8 <xQueueGenericSendFromISR>
 8006822:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006826:	4618      	mov	r0, r3
 8006828:	3728      	adds	r7, #40	; 0x28
 800682a:	46bd      	mov	sp, r7
 800682c:	bd80      	pop	{r7, pc}
 800682e:	bf00      	nop
 8006830:	20000d8c 	.word	0x20000d8c

08006834 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b088      	sub	sp, #32
 8006838:	af02      	add	r7, sp, #8
 800683a:	6078      	str	r0, [r7, #4]
 800683c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800683e:	4b22      	ldr	r3, [pc, #136]	; (80068c8 <prvProcessExpiredTimer+0x94>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	68db      	ldr	r3, [r3, #12]
 8006844:	68db      	ldr	r3, [r3, #12]
 8006846:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006848:	697b      	ldr	r3, [r7, #20]
 800684a:	3304      	adds	r3, #4
 800684c:	4618      	mov	r0, r3
 800684e:	f7fd fe25 	bl	800449c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006852:	697b      	ldr	r3, [r7, #20]
 8006854:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006858:	f003 0304 	and.w	r3, r3, #4
 800685c:	2b00      	cmp	r3, #0
 800685e:	d022      	beq.n	80068a6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006860:	697b      	ldr	r3, [r7, #20]
 8006862:	699a      	ldr	r2, [r3, #24]
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	18d1      	adds	r1, r2, r3
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	683a      	ldr	r2, [r7, #0]
 800686c:	6978      	ldr	r0, [r7, #20]
 800686e:	f000 f8d1 	bl	8006a14 <prvInsertTimerInActiveList>
 8006872:	4603      	mov	r3, r0
 8006874:	2b00      	cmp	r3, #0
 8006876:	d01f      	beq.n	80068b8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006878:	2300      	movs	r3, #0
 800687a:	9300      	str	r3, [sp, #0]
 800687c:	2300      	movs	r3, #0
 800687e:	687a      	ldr	r2, [r7, #4]
 8006880:	2100      	movs	r1, #0
 8006882:	6978      	ldr	r0, [r7, #20]
 8006884:	f7ff ff88 	bl	8006798 <xTimerGenericCommand>
 8006888:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800688a:	693b      	ldr	r3, [r7, #16]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d113      	bne.n	80068b8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006894:	f383 8811 	msr	BASEPRI, r3
 8006898:	f3bf 8f6f 	isb	sy
 800689c:	f3bf 8f4f 	dsb	sy
 80068a0:	60fb      	str	r3, [r7, #12]
}
 80068a2:	bf00      	nop
 80068a4:	e7fe      	b.n	80068a4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80068a6:	697b      	ldr	r3, [r7, #20]
 80068a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80068ac:	f023 0301 	bic.w	r3, r3, #1
 80068b0:	b2da      	uxtb	r2, r3
 80068b2:	697b      	ldr	r3, [r7, #20]
 80068b4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80068b8:	697b      	ldr	r3, [r7, #20]
 80068ba:	6a1b      	ldr	r3, [r3, #32]
 80068bc:	6978      	ldr	r0, [r7, #20]
 80068be:	4798      	blx	r3
}
 80068c0:	bf00      	nop
 80068c2:	3718      	adds	r7, #24
 80068c4:	46bd      	mov	sp, r7
 80068c6:	bd80      	pop	{r7, pc}
 80068c8:	20000d84 	.word	0x20000d84

080068cc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b084      	sub	sp, #16
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80068d4:	f107 0308 	add.w	r3, r7, #8
 80068d8:	4618      	mov	r0, r3
 80068da:	f000 f857 	bl	800698c <prvGetNextExpireTime>
 80068de:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	4619      	mov	r1, r3
 80068e4:	68f8      	ldr	r0, [r7, #12]
 80068e6:	f000 f803 	bl	80068f0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80068ea:	f000 f8d5 	bl	8006a98 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80068ee:	e7f1      	b.n	80068d4 <prvTimerTask+0x8>

080068f0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b084      	sub	sp, #16
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
 80068f8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80068fa:	f7ff f919 	bl	8005b30 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80068fe:	f107 0308 	add.w	r3, r7, #8
 8006902:	4618      	mov	r0, r3
 8006904:	f000 f866 	bl	80069d4 <prvSampleTimeNow>
 8006908:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d130      	bne.n	8006972 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d10a      	bne.n	800692c <prvProcessTimerOrBlockTask+0x3c>
 8006916:	687a      	ldr	r2, [r7, #4]
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	429a      	cmp	r2, r3
 800691c:	d806      	bhi.n	800692c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800691e:	f7ff f915 	bl	8005b4c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006922:	68f9      	ldr	r1, [r7, #12]
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	f7ff ff85 	bl	8006834 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800692a:	e024      	b.n	8006976 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d008      	beq.n	8006944 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006932:	4b13      	ldr	r3, [pc, #76]	; (8006980 <prvProcessTimerOrBlockTask+0x90>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d101      	bne.n	8006940 <prvProcessTimerOrBlockTask+0x50>
 800693c:	2301      	movs	r3, #1
 800693e:	e000      	b.n	8006942 <prvProcessTimerOrBlockTask+0x52>
 8006940:	2300      	movs	r3, #0
 8006942:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006944:	4b0f      	ldr	r3, [pc, #60]	; (8006984 <prvProcessTimerOrBlockTask+0x94>)
 8006946:	6818      	ldr	r0, [r3, #0]
 8006948:	687a      	ldr	r2, [r7, #4]
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	1ad3      	subs	r3, r2, r3
 800694e:	683a      	ldr	r2, [r7, #0]
 8006950:	4619      	mov	r1, r3
 8006952:	f7fe fe5d 	bl	8005610 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006956:	f7ff f8f9 	bl	8005b4c <xTaskResumeAll>
 800695a:	4603      	mov	r3, r0
 800695c:	2b00      	cmp	r3, #0
 800695e:	d10a      	bne.n	8006976 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006960:	4b09      	ldr	r3, [pc, #36]	; (8006988 <prvProcessTimerOrBlockTask+0x98>)
 8006962:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006966:	601a      	str	r2, [r3, #0]
 8006968:	f3bf 8f4f 	dsb	sy
 800696c:	f3bf 8f6f 	isb	sy
}
 8006970:	e001      	b.n	8006976 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006972:	f7ff f8eb 	bl	8005b4c <xTaskResumeAll>
}
 8006976:	bf00      	nop
 8006978:	3710      	adds	r7, #16
 800697a:	46bd      	mov	sp, r7
 800697c:	bd80      	pop	{r7, pc}
 800697e:	bf00      	nop
 8006980:	20000d88 	.word	0x20000d88
 8006984:	20000d8c 	.word	0x20000d8c
 8006988:	e000ed04 	.word	0xe000ed04

0800698c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800698c:	b480      	push	{r7}
 800698e:	b085      	sub	sp, #20
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006994:	4b0e      	ldr	r3, [pc, #56]	; (80069d0 <prvGetNextExpireTime+0x44>)
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d101      	bne.n	80069a2 <prvGetNextExpireTime+0x16>
 800699e:	2201      	movs	r2, #1
 80069a0:	e000      	b.n	80069a4 <prvGetNextExpireTime+0x18>
 80069a2:	2200      	movs	r2, #0
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d105      	bne.n	80069bc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80069b0:	4b07      	ldr	r3, [pc, #28]	; (80069d0 <prvGetNextExpireTime+0x44>)
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	68db      	ldr	r3, [r3, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	60fb      	str	r3, [r7, #12]
 80069ba:	e001      	b.n	80069c0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80069bc:	2300      	movs	r3, #0
 80069be:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80069c0:	68fb      	ldr	r3, [r7, #12]
}
 80069c2:	4618      	mov	r0, r3
 80069c4:	3714      	adds	r7, #20
 80069c6:	46bd      	mov	sp, r7
 80069c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069cc:	4770      	bx	lr
 80069ce:	bf00      	nop
 80069d0:	20000d84 	.word	0x20000d84

080069d4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b084      	sub	sp, #16
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80069dc:	f7ff f954 	bl	8005c88 <xTaskGetTickCount>
 80069e0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80069e2:	4b0b      	ldr	r3, [pc, #44]	; (8006a10 <prvSampleTimeNow+0x3c>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	68fa      	ldr	r2, [r7, #12]
 80069e8:	429a      	cmp	r2, r3
 80069ea:	d205      	bcs.n	80069f8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80069ec:	f000 f936 	bl	8006c5c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2201      	movs	r2, #1
 80069f4:	601a      	str	r2, [r3, #0]
 80069f6:	e002      	b.n	80069fe <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2200      	movs	r2, #0
 80069fc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80069fe:	4a04      	ldr	r2, [pc, #16]	; (8006a10 <prvSampleTimeNow+0x3c>)
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006a04:	68fb      	ldr	r3, [r7, #12]
}
 8006a06:	4618      	mov	r0, r3
 8006a08:	3710      	adds	r7, #16
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bd80      	pop	{r7, pc}
 8006a0e:	bf00      	nop
 8006a10:	20000d94 	.word	0x20000d94

08006a14 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b086      	sub	sp, #24
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	60f8      	str	r0, [r7, #12]
 8006a1c:	60b9      	str	r1, [r7, #8]
 8006a1e:	607a      	str	r2, [r7, #4]
 8006a20:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006a22:	2300      	movs	r3, #0
 8006a24:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	68ba      	ldr	r2, [r7, #8]
 8006a2a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	68fa      	ldr	r2, [r7, #12]
 8006a30:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006a32:	68ba      	ldr	r2, [r7, #8]
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	429a      	cmp	r2, r3
 8006a38:	d812      	bhi.n	8006a60 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a3a:	687a      	ldr	r2, [r7, #4]
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	1ad2      	subs	r2, r2, r3
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	699b      	ldr	r3, [r3, #24]
 8006a44:	429a      	cmp	r2, r3
 8006a46:	d302      	bcc.n	8006a4e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006a48:	2301      	movs	r3, #1
 8006a4a:	617b      	str	r3, [r7, #20]
 8006a4c:	e01b      	b.n	8006a86 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006a4e:	4b10      	ldr	r3, [pc, #64]	; (8006a90 <prvInsertTimerInActiveList+0x7c>)
 8006a50:	681a      	ldr	r2, [r3, #0]
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	3304      	adds	r3, #4
 8006a56:	4619      	mov	r1, r3
 8006a58:	4610      	mov	r0, r2
 8006a5a:	f7fd fce6 	bl	800442a <vListInsert>
 8006a5e:	e012      	b.n	8006a86 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006a60:	687a      	ldr	r2, [r7, #4]
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	429a      	cmp	r2, r3
 8006a66:	d206      	bcs.n	8006a76 <prvInsertTimerInActiveList+0x62>
 8006a68:	68ba      	ldr	r2, [r7, #8]
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	429a      	cmp	r2, r3
 8006a6e:	d302      	bcc.n	8006a76 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006a70:	2301      	movs	r3, #1
 8006a72:	617b      	str	r3, [r7, #20]
 8006a74:	e007      	b.n	8006a86 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006a76:	4b07      	ldr	r3, [pc, #28]	; (8006a94 <prvInsertTimerInActiveList+0x80>)
 8006a78:	681a      	ldr	r2, [r3, #0]
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	3304      	adds	r3, #4
 8006a7e:	4619      	mov	r1, r3
 8006a80:	4610      	mov	r0, r2
 8006a82:	f7fd fcd2 	bl	800442a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006a86:	697b      	ldr	r3, [r7, #20]
}
 8006a88:	4618      	mov	r0, r3
 8006a8a:	3718      	adds	r7, #24
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	bd80      	pop	{r7, pc}
 8006a90:	20000d88 	.word	0x20000d88
 8006a94:	20000d84 	.word	0x20000d84

08006a98 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b08e      	sub	sp, #56	; 0x38
 8006a9c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006a9e:	e0ca      	b.n	8006c36 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	da18      	bge.n	8006ad8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006aa6:	1d3b      	adds	r3, r7, #4
 8006aa8:	3304      	adds	r3, #4
 8006aaa:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006aac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d10a      	bne.n	8006ac8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ab6:	f383 8811 	msr	BASEPRI, r3
 8006aba:	f3bf 8f6f 	isb	sy
 8006abe:	f3bf 8f4f 	dsb	sy
 8006ac2:	61fb      	str	r3, [r7, #28]
}
 8006ac4:	bf00      	nop
 8006ac6:	e7fe      	b.n	8006ac6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ace:	6850      	ldr	r0, [r2, #4]
 8006ad0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ad2:	6892      	ldr	r2, [r2, #8]
 8006ad4:	4611      	mov	r1, r2
 8006ad6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	f2c0 80aa 	blt.w	8006c34 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ae6:	695b      	ldr	r3, [r3, #20]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d004      	beq.n	8006af6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aee:	3304      	adds	r3, #4
 8006af0:	4618      	mov	r0, r3
 8006af2:	f7fd fcd3 	bl	800449c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006af6:	463b      	mov	r3, r7
 8006af8:	4618      	mov	r0, r3
 8006afa:	f7ff ff6b 	bl	80069d4 <prvSampleTimeNow>
 8006afe:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2b09      	cmp	r3, #9
 8006b04:	f200 8097 	bhi.w	8006c36 <prvProcessReceivedCommands+0x19e>
 8006b08:	a201      	add	r2, pc, #4	; (adr r2, 8006b10 <prvProcessReceivedCommands+0x78>)
 8006b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b0e:	bf00      	nop
 8006b10:	08006b39 	.word	0x08006b39
 8006b14:	08006b39 	.word	0x08006b39
 8006b18:	08006b39 	.word	0x08006b39
 8006b1c:	08006bad 	.word	0x08006bad
 8006b20:	08006bc1 	.word	0x08006bc1
 8006b24:	08006c0b 	.word	0x08006c0b
 8006b28:	08006b39 	.word	0x08006b39
 8006b2c:	08006b39 	.word	0x08006b39
 8006b30:	08006bad 	.word	0x08006bad
 8006b34:	08006bc1 	.word	0x08006bc1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b3a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006b3e:	f043 0301 	orr.w	r3, r3, #1
 8006b42:	b2da      	uxtb	r2, r3
 8006b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b46:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006b4a:	68ba      	ldr	r2, [r7, #8]
 8006b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b4e:	699b      	ldr	r3, [r3, #24]
 8006b50:	18d1      	adds	r1, r2, r3
 8006b52:	68bb      	ldr	r3, [r7, #8]
 8006b54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b58:	f7ff ff5c 	bl	8006a14 <prvInsertTimerInActiveList>
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d069      	beq.n	8006c36 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b64:	6a1b      	ldr	r3, [r3, #32]
 8006b66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b68:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b6c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006b70:	f003 0304 	and.w	r3, r3, #4
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d05e      	beq.n	8006c36 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006b78:	68ba      	ldr	r2, [r7, #8]
 8006b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b7c:	699b      	ldr	r3, [r3, #24]
 8006b7e:	441a      	add	r2, r3
 8006b80:	2300      	movs	r3, #0
 8006b82:	9300      	str	r3, [sp, #0]
 8006b84:	2300      	movs	r3, #0
 8006b86:	2100      	movs	r1, #0
 8006b88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b8a:	f7ff fe05 	bl	8006798 <xTimerGenericCommand>
 8006b8e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006b90:	6a3b      	ldr	r3, [r7, #32]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d14f      	bne.n	8006c36 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8006b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b9a:	f383 8811 	msr	BASEPRI, r3
 8006b9e:	f3bf 8f6f 	isb	sy
 8006ba2:	f3bf 8f4f 	dsb	sy
 8006ba6:	61bb      	str	r3, [r7, #24]
}
 8006ba8:	bf00      	nop
 8006baa:	e7fe      	b.n	8006baa <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006bb2:	f023 0301 	bic.w	r3, r3, #1
 8006bb6:	b2da      	uxtb	r2, r3
 8006bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006bbe:	e03a      	b.n	8006c36 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bc2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006bc6:	f043 0301 	orr.w	r3, r3, #1
 8006bca:	b2da      	uxtb	r2, r3
 8006bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006bd2:	68ba      	ldr	r2, [r7, #8]
 8006bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bd6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bda:	699b      	ldr	r3, [r3, #24]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d10a      	bne.n	8006bf6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006be4:	f383 8811 	msr	BASEPRI, r3
 8006be8:	f3bf 8f6f 	isb	sy
 8006bec:	f3bf 8f4f 	dsb	sy
 8006bf0:	617b      	str	r3, [r7, #20]
}
 8006bf2:	bf00      	nop
 8006bf4:	e7fe      	b.n	8006bf4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bf8:	699a      	ldr	r2, [r3, #24]
 8006bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bfc:	18d1      	adds	r1, r2, r3
 8006bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c04:	f7ff ff06 	bl	8006a14 <prvInsertTimerInActiveList>
					break;
 8006c08:	e015      	b.n	8006c36 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c0c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006c10:	f003 0302 	and.w	r3, r3, #2
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d103      	bne.n	8006c20 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006c18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c1a:	f000 fbe1 	bl	80073e0 <vPortFree>
 8006c1e:	e00a      	b.n	8006c36 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c22:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006c26:	f023 0301 	bic.w	r3, r3, #1
 8006c2a:	b2da      	uxtb	r2, r3
 8006c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c2e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006c32:	e000      	b.n	8006c36 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006c34:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006c36:	4b08      	ldr	r3, [pc, #32]	; (8006c58 <prvProcessReceivedCommands+0x1c0>)
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	1d39      	adds	r1, r7, #4
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	4618      	mov	r0, r3
 8006c40:	f7fe f8da 	bl	8004df8 <xQueueReceive>
 8006c44:	4603      	mov	r3, r0
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	f47f af2a 	bne.w	8006aa0 <prvProcessReceivedCommands+0x8>
	}
}
 8006c4c:	bf00      	nop
 8006c4e:	bf00      	nop
 8006c50:	3730      	adds	r7, #48	; 0x30
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bd80      	pop	{r7, pc}
 8006c56:	bf00      	nop
 8006c58:	20000d8c 	.word	0x20000d8c

08006c5c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b088      	sub	sp, #32
 8006c60:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006c62:	e048      	b.n	8006cf6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006c64:	4b2d      	ldr	r3, [pc, #180]	; (8006d1c <prvSwitchTimerLists+0xc0>)
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	68db      	ldr	r3, [r3, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c6e:	4b2b      	ldr	r3, [pc, #172]	; (8006d1c <prvSwitchTimerLists+0xc0>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	68db      	ldr	r3, [r3, #12]
 8006c74:	68db      	ldr	r3, [r3, #12]
 8006c76:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	3304      	adds	r3, #4
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	f7fd fc0d 	bl	800449c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	6a1b      	ldr	r3, [r3, #32]
 8006c86:	68f8      	ldr	r0, [r7, #12]
 8006c88:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006c90:	f003 0304 	and.w	r3, r3, #4
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d02e      	beq.n	8006cf6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	699b      	ldr	r3, [r3, #24]
 8006c9c:	693a      	ldr	r2, [r7, #16]
 8006c9e:	4413      	add	r3, r2
 8006ca0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006ca2:	68ba      	ldr	r2, [r7, #8]
 8006ca4:	693b      	ldr	r3, [r7, #16]
 8006ca6:	429a      	cmp	r2, r3
 8006ca8:	d90e      	bls.n	8006cc8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	68ba      	ldr	r2, [r7, #8]
 8006cae:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	68fa      	ldr	r2, [r7, #12]
 8006cb4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006cb6:	4b19      	ldr	r3, [pc, #100]	; (8006d1c <prvSwitchTimerLists+0xc0>)
 8006cb8:	681a      	ldr	r2, [r3, #0]
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	3304      	adds	r3, #4
 8006cbe:	4619      	mov	r1, r3
 8006cc0:	4610      	mov	r0, r2
 8006cc2:	f7fd fbb2 	bl	800442a <vListInsert>
 8006cc6:	e016      	b.n	8006cf6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006cc8:	2300      	movs	r3, #0
 8006cca:	9300      	str	r3, [sp, #0]
 8006ccc:	2300      	movs	r3, #0
 8006cce:	693a      	ldr	r2, [r7, #16]
 8006cd0:	2100      	movs	r1, #0
 8006cd2:	68f8      	ldr	r0, [r7, #12]
 8006cd4:	f7ff fd60 	bl	8006798 <xTimerGenericCommand>
 8006cd8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d10a      	bne.n	8006cf6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ce4:	f383 8811 	msr	BASEPRI, r3
 8006ce8:	f3bf 8f6f 	isb	sy
 8006cec:	f3bf 8f4f 	dsb	sy
 8006cf0:	603b      	str	r3, [r7, #0]
}
 8006cf2:	bf00      	nop
 8006cf4:	e7fe      	b.n	8006cf4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006cf6:	4b09      	ldr	r3, [pc, #36]	; (8006d1c <prvSwitchTimerLists+0xc0>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d1b1      	bne.n	8006c64 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006d00:	4b06      	ldr	r3, [pc, #24]	; (8006d1c <prvSwitchTimerLists+0xc0>)
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006d06:	4b06      	ldr	r3, [pc, #24]	; (8006d20 <prvSwitchTimerLists+0xc4>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4a04      	ldr	r2, [pc, #16]	; (8006d1c <prvSwitchTimerLists+0xc0>)
 8006d0c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006d0e:	4a04      	ldr	r2, [pc, #16]	; (8006d20 <prvSwitchTimerLists+0xc4>)
 8006d10:	697b      	ldr	r3, [r7, #20]
 8006d12:	6013      	str	r3, [r2, #0]
}
 8006d14:	bf00      	nop
 8006d16:	3718      	adds	r7, #24
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	bd80      	pop	{r7, pc}
 8006d1c:	20000d84 	.word	0x20000d84
 8006d20:	20000d88 	.word	0x20000d88

08006d24 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b082      	sub	sp, #8
 8006d28:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006d2a:	f000 f96b 	bl	8007004 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006d2e:	4b15      	ldr	r3, [pc, #84]	; (8006d84 <prvCheckForValidListAndQueue+0x60>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d120      	bne.n	8006d78 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006d36:	4814      	ldr	r0, [pc, #80]	; (8006d88 <prvCheckForValidListAndQueue+0x64>)
 8006d38:	f7fd fb26 	bl	8004388 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006d3c:	4813      	ldr	r0, [pc, #76]	; (8006d8c <prvCheckForValidListAndQueue+0x68>)
 8006d3e:	f7fd fb23 	bl	8004388 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006d42:	4b13      	ldr	r3, [pc, #76]	; (8006d90 <prvCheckForValidListAndQueue+0x6c>)
 8006d44:	4a10      	ldr	r2, [pc, #64]	; (8006d88 <prvCheckForValidListAndQueue+0x64>)
 8006d46:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006d48:	4b12      	ldr	r3, [pc, #72]	; (8006d94 <prvCheckForValidListAndQueue+0x70>)
 8006d4a:	4a10      	ldr	r2, [pc, #64]	; (8006d8c <prvCheckForValidListAndQueue+0x68>)
 8006d4c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006d4e:	2300      	movs	r3, #0
 8006d50:	9300      	str	r3, [sp, #0]
 8006d52:	4b11      	ldr	r3, [pc, #68]	; (8006d98 <prvCheckForValidListAndQueue+0x74>)
 8006d54:	4a11      	ldr	r2, [pc, #68]	; (8006d9c <prvCheckForValidListAndQueue+0x78>)
 8006d56:	2110      	movs	r1, #16
 8006d58:	200a      	movs	r0, #10
 8006d5a:	f7fd fc31 	bl	80045c0 <xQueueGenericCreateStatic>
 8006d5e:	4603      	mov	r3, r0
 8006d60:	4a08      	ldr	r2, [pc, #32]	; (8006d84 <prvCheckForValidListAndQueue+0x60>)
 8006d62:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006d64:	4b07      	ldr	r3, [pc, #28]	; (8006d84 <prvCheckForValidListAndQueue+0x60>)
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d005      	beq.n	8006d78 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006d6c:	4b05      	ldr	r3, [pc, #20]	; (8006d84 <prvCheckForValidListAndQueue+0x60>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	490b      	ldr	r1, [pc, #44]	; (8006da0 <prvCheckForValidListAndQueue+0x7c>)
 8006d72:	4618      	mov	r0, r3
 8006d74:	f7fe fbf8 	bl	8005568 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006d78:	f000 f974 	bl	8007064 <vPortExitCritical>
}
 8006d7c:	bf00      	nop
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bd80      	pop	{r7, pc}
 8006d82:	bf00      	nop
 8006d84:	20000d8c 	.word	0x20000d8c
 8006d88:	20000d5c 	.word	0x20000d5c
 8006d8c:	20000d70 	.word	0x20000d70
 8006d90:	20000d84 	.word	0x20000d84
 8006d94:	20000d88 	.word	0x20000d88
 8006d98:	20000e38 	.word	0x20000e38
 8006d9c:	20000d98 	.word	0x20000d98
 8006da0:	08014e80 	.word	0x08014e80

08006da4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006da4:	b480      	push	{r7}
 8006da6:	b085      	sub	sp, #20
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	60f8      	str	r0, [r7, #12]
 8006dac:	60b9      	str	r1, [r7, #8]
 8006dae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	3b04      	subs	r3, #4
 8006db4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006dbc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	3b04      	subs	r3, #4
 8006dc2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006dc4:	68bb      	ldr	r3, [r7, #8]
 8006dc6:	f023 0201 	bic.w	r2, r3, #1
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	3b04      	subs	r3, #4
 8006dd2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006dd4:	4a0c      	ldr	r2, [pc, #48]	; (8006e08 <pxPortInitialiseStack+0x64>)
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	3b14      	subs	r3, #20
 8006dde:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006de0:	687a      	ldr	r2, [r7, #4]
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	3b04      	subs	r3, #4
 8006dea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	f06f 0202 	mvn.w	r2, #2
 8006df2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	3b20      	subs	r3, #32
 8006df8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
}
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	3714      	adds	r7, #20
 8006e00:	46bd      	mov	sp, r7
 8006e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e06:	4770      	bx	lr
 8006e08:	08006e0d 	.word	0x08006e0d

08006e0c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	b085      	sub	sp, #20
 8006e10:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006e12:	2300      	movs	r3, #0
 8006e14:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006e16:	4b12      	ldr	r3, [pc, #72]	; (8006e60 <prvTaskExitError+0x54>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e1e:	d00a      	beq.n	8006e36 <prvTaskExitError+0x2a>
	__asm volatile
 8006e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e24:	f383 8811 	msr	BASEPRI, r3
 8006e28:	f3bf 8f6f 	isb	sy
 8006e2c:	f3bf 8f4f 	dsb	sy
 8006e30:	60fb      	str	r3, [r7, #12]
}
 8006e32:	bf00      	nop
 8006e34:	e7fe      	b.n	8006e34 <prvTaskExitError+0x28>
	__asm volatile
 8006e36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e3a:	f383 8811 	msr	BASEPRI, r3
 8006e3e:	f3bf 8f6f 	isb	sy
 8006e42:	f3bf 8f4f 	dsb	sy
 8006e46:	60bb      	str	r3, [r7, #8]
}
 8006e48:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006e4a:	bf00      	nop
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d0fc      	beq.n	8006e4c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006e52:	bf00      	nop
 8006e54:	bf00      	nop
 8006e56:	3714      	adds	r7, #20
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5e:	4770      	bx	lr
 8006e60:	20000008 	.word	0x20000008
	...

08006e70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006e70:	4b07      	ldr	r3, [pc, #28]	; (8006e90 <pxCurrentTCBConst2>)
 8006e72:	6819      	ldr	r1, [r3, #0]
 8006e74:	6808      	ldr	r0, [r1, #0]
 8006e76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e7a:	f380 8809 	msr	PSP, r0
 8006e7e:	f3bf 8f6f 	isb	sy
 8006e82:	f04f 0000 	mov.w	r0, #0
 8006e86:	f380 8811 	msr	BASEPRI, r0
 8006e8a:	4770      	bx	lr
 8006e8c:	f3af 8000 	nop.w

08006e90 <pxCurrentTCBConst2>:
 8006e90:	2000085c 	.word	0x2000085c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006e94:	bf00      	nop
 8006e96:	bf00      	nop

08006e98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006e98:	4808      	ldr	r0, [pc, #32]	; (8006ebc <prvPortStartFirstTask+0x24>)
 8006e9a:	6800      	ldr	r0, [r0, #0]
 8006e9c:	6800      	ldr	r0, [r0, #0]
 8006e9e:	f380 8808 	msr	MSP, r0
 8006ea2:	f04f 0000 	mov.w	r0, #0
 8006ea6:	f380 8814 	msr	CONTROL, r0
 8006eaa:	b662      	cpsie	i
 8006eac:	b661      	cpsie	f
 8006eae:	f3bf 8f4f 	dsb	sy
 8006eb2:	f3bf 8f6f 	isb	sy
 8006eb6:	df00      	svc	0
 8006eb8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006eba:	bf00      	nop
 8006ebc:	e000ed08 	.word	0xe000ed08

08006ec0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b086      	sub	sp, #24
 8006ec4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006ec6:	4b46      	ldr	r3, [pc, #280]	; (8006fe0 <xPortStartScheduler+0x120>)
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	4a46      	ldr	r2, [pc, #280]	; (8006fe4 <xPortStartScheduler+0x124>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d10a      	bne.n	8006ee6 <xPortStartScheduler+0x26>
	__asm volatile
 8006ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ed4:	f383 8811 	msr	BASEPRI, r3
 8006ed8:	f3bf 8f6f 	isb	sy
 8006edc:	f3bf 8f4f 	dsb	sy
 8006ee0:	613b      	str	r3, [r7, #16]
}
 8006ee2:	bf00      	nop
 8006ee4:	e7fe      	b.n	8006ee4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006ee6:	4b3e      	ldr	r3, [pc, #248]	; (8006fe0 <xPortStartScheduler+0x120>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	4a3f      	ldr	r2, [pc, #252]	; (8006fe8 <xPortStartScheduler+0x128>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d10a      	bne.n	8006f06 <xPortStartScheduler+0x46>
	__asm volatile
 8006ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ef4:	f383 8811 	msr	BASEPRI, r3
 8006ef8:	f3bf 8f6f 	isb	sy
 8006efc:	f3bf 8f4f 	dsb	sy
 8006f00:	60fb      	str	r3, [r7, #12]
}
 8006f02:	bf00      	nop
 8006f04:	e7fe      	b.n	8006f04 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006f06:	4b39      	ldr	r3, [pc, #228]	; (8006fec <xPortStartScheduler+0x12c>)
 8006f08:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006f0a:	697b      	ldr	r3, [r7, #20]
 8006f0c:	781b      	ldrb	r3, [r3, #0]
 8006f0e:	b2db      	uxtb	r3, r3
 8006f10:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006f12:	697b      	ldr	r3, [r7, #20]
 8006f14:	22ff      	movs	r2, #255	; 0xff
 8006f16:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006f18:	697b      	ldr	r3, [r7, #20]
 8006f1a:	781b      	ldrb	r3, [r3, #0]
 8006f1c:	b2db      	uxtb	r3, r3
 8006f1e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006f20:	78fb      	ldrb	r3, [r7, #3]
 8006f22:	b2db      	uxtb	r3, r3
 8006f24:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006f28:	b2da      	uxtb	r2, r3
 8006f2a:	4b31      	ldr	r3, [pc, #196]	; (8006ff0 <xPortStartScheduler+0x130>)
 8006f2c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006f2e:	4b31      	ldr	r3, [pc, #196]	; (8006ff4 <xPortStartScheduler+0x134>)
 8006f30:	2207      	movs	r2, #7
 8006f32:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006f34:	e009      	b.n	8006f4a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006f36:	4b2f      	ldr	r3, [pc, #188]	; (8006ff4 <xPortStartScheduler+0x134>)
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	3b01      	subs	r3, #1
 8006f3c:	4a2d      	ldr	r2, [pc, #180]	; (8006ff4 <xPortStartScheduler+0x134>)
 8006f3e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006f40:	78fb      	ldrb	r3, [r7, #3]
 8006f42:	b2db      	uxtb	r3, r3
 8006f44:	005b      	lsls	r3, r3, #1
 8006f46:	b2db      	uxtb	r3, r3
 8006f48:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006f4a:	78fb      	ldrb	r3, [r7, #3]
 8006f4c:	b2db      	uxtb	r3, r3
 8006f4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f52:	2b80      	cmp	r3, #128	; 0x80
 8006f54:	d0ef      	beq.n	8006f36 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006f56:	4b27      	ldr	r3, [pc, #156]	; (8006ff4 <xPortStartScheduler+0x134>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f1c3 0307 	rsb	r3, r3, #7
 8006f5e:	2b04      	cmp	r3, #4
 8006f60:	d00a      	beq.n	8006f78 <xPortStartScheduler+0xb8>
	__asm volatile
 8006f62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f66:	f383 8811 	msr	BASEPRI, r3
 8006f6a:	f3bf 8f6f 	isb	sy
 8006f6e:	f3bf 8f4f 	dsb	sy
 8006f72:	60bb      	str	r3, [r7, #8]
}
 8006f74:	bf00      	nop
 8006f76:	e7fe      	b.n	8006f76 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006f78:	4b1e      	ldr	r3, [pc, #120]	; (8006ff4 <xPortStartScheduler+0x134>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	021b      	lsls	r3, r3, #8
 8006f7e:	4a1d      	ldr	r2, [pc, #116]	; (8006ff4 <xPortStartScheduler+0x134>)
 8006f80:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006f82:	4b1c      	ldr	r3, [pc, #112]	; (8006ff4 <xPortStartScheduler+0x134>)
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006f8a:	4a1a      	ldr	r2, [pc, #104]	; (8006ff4 <xPortStartScheduler+0x134>)
 8006f8c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	b2da      	uxtb	r2, r3
 8006f92:	697b      	ldr	r3, [r7, #20]
 8006f94:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006f96:	4b18      	ldr	r3, [pc, #96]	; (8006ff8 <xPortStartScheduler+0x138>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	4a17      	ldr	r2, [pc, #92]	; (8006ff8 <xPortStartScheduler+0x138>)
 8006f9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006fa0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006fa2:	4b15      	ldr	r3, [pc, #84]	; (8006ff8 <xPortStartScheduler+0x138>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	4a14      	ldr	r2, [pc, #80]	; (8006ff8 <xPortStartScheduler+0x138>)
 8006fa8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006fac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006fae:	f000 f8dd 	bl	800716c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006fb2:	4b12      	ldr	r3, [pc, #72]	; (8006ffc <xPortStartScheduler+0x13c>)
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006fb8:	f000 f8fc 	bl	80071b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006fbc:	4b10      	ldr	r3, [pc, #64]	; (8007000 <xPortStartScheduler+0x140>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4a0f      	ldr	r2, [pc, #60]	; (8007000 <xPortStartScheduler+0x140>)
 8006fc2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006fc6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006fc8:	f7ff ff66 	bl	8006e98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006fcc:	f7fe ff38 	bl	8005e40 <vTaskSwitchContext>
	prvTaskExitError();
 8006fd0:	f7ff ff1c 	bl	8006e0c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006fd4:	2300      	movs	r3, #0
}
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	3718      	adds	r7, #24
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	bd80      	pop	{r7, pc}
 8006fde:	bf00      	nop
 8006fe0:	e000ed00 	.word	0xe000ed00
 8006fe4:	410fc271 	.word	0x410fc271
 8006fe8:	410fc270 	.word	0x410fc270
 8006fec:	e000e400 	.word	0xe000e400
 8006ff0:	20000e88 	.word	0x20000e88
 8006ff4:	20000e8c 	.word	0x20000e8c
 8006ff8:	e000ed20 	.word	0xe000ed20
 8006ffc:	20000008 	.word	0x20000008
 8007000:	e000ef34 	.word	0xe000ef34

08007004 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007004:	b480      	push	{r7}
 8007006:	b083      	sub	sp, #12
 8007008:	af00      	add	r7, sp, #0
	__asm volatile
 800700a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800700e:	f383 8811 	msr	BASEPRI, r3
 8007012:	f3bf 8f6f 	isb	sy
 8007016:	f3bf 8f4f 	dsb	sy
 800701a:	607b      	str	r3, [r7, #4]
}
 800701c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800701e:	4b0f      	ldr	r3, [pc, #60]	; (800705c <vPortEnterCritical+0x58>)
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	3301      	adds	r3, #1
 8007024:	4a0d      	ldr	r2, [pc, #52]	; (800705c <vPortEnterCritical+0x58>)
 8007026:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007028:	4b0c      	ldr	r3, [pc, #48]	; (800705c <vPortEnterCritical+0x58>)
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	2b01      	cmp	r3, #1
 800702e:	d10f      	bne.n	8007050 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007030:	4b0b      	ldr	r3, [pc, #44]	; (8007060 <vPortEnterCritical+0x5c>)
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	b2db      	uxtb	r3, r3
 8007036:	2b00      	cmp	r3, #0
 8007038:	d00a      	beq.n	8007050 <vPortEnterCritical+0x4c>
	__asm volatile
 800703a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800703e:	f383 8811 	msr	BASEPRI, r3
 8007042:	f3bf 8f6f 	isb	sy
 8007046:	f3bf 8f4f 	dsb	sy
 800704a:	603b      	str	r3, [r7, #0]
}
 800704c:	bf00      	nop
 800704e:	e7fe      	b.n	800704e <vPortEnterCritical+0x4a>
	}
}
 8007050:	bf00      	nop
 8007052:	370c      	adds	r7, #12
 8007054:	46bd      	mov	sp, r7
 8007056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705a:	4770      	bx	lr
 800705c:	20000008 	.word	0x20000008
 8007060:	e000ed04 	.word	0xe000ed04

08007064 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007064:	b480      	push	{r7}
 8007066:	b083      	sub	sp, #12
 8007068:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800706a:	4b12      	ldr	r3, [pc, #72]	; (80070b4 <vPortExitCritical+0x50>)
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d10a      	bne.n	8007088 <vPortExitCritical+0x24>
	__asm volatile
 8007072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007076:	f383 8811 	msr	BASEPRI, r3
 800707a:	f3bf 8f6f 	isb	sy
 800707e:	f3bf 8f4f 	dsb	sy
 8007082:	607b      	str	r3, [r7, #4]
}
 8007084:	bf00      	nop
 8007086:	e7fe      	b.n	8007086 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007088:	4b0a      	ldr	r3, [pc, #40]	; (80070b4 <vPortExitCritical+0x50>)
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	3b01      	subs	r3, #1
 800708e:	4a09      	ldr	r2, [pc, #36]	; (80070b4 <vPortExitCritical+0x50>)
 8007090:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007092:	4b08      	ldr	r3, [pc, #32]	; (80070b4 <vPortExitCritical+0x50>)
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d105      	bne.n	80070a6 <vPortExitCritical+0x42>
 800709a:	2300      	movs	r3, #0
 800709c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	f383 8811 	msr	BASEPRI, r3
}
 80070a4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80070a6:	bf00      	nop
 80070a8:	370c      	adds	r7, #12
 80070aa:	46bd      	mov	sp, r7
 80070ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b0:	4770      	bx	lr
 80070b2:	bf00      	nop
 80070b4:	20000008 	.word	0x20000008
	...

080070c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80070c0:	f3ef 8009 	mrs	r0, PSP
 80070c4:	f3bf 8f6f 	isb	sy
 80070c8:	4b15      	ldr	r3, [pc, #84]	; (8007120 <pxCurrentTCBConst>)
 80070ca:	681a      	ldr	r2, [r3, #0]
 80070cc:	f01e 0f10 	tst.w	lr, #16
 80070d0:	bf08      	it	eq
 80070d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80070d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070da:	6010      	str	r0, [r2, #0]
 80070dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80070e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80070e4:	f380 8811 	msr	BASEPRI, r0
 80070e8:	f3bf 8f4f 	dsb	sy
 80070ec:	f3bf 8f6f 	isb	sy
 80070f0:	f7fe fea6 	bl	8005e40 <vTaskSwitchContext>
 80070f4:	f04f 0000 	mov.w	r0, #0
 80070f8:	f380 8811 	msr	BASEPRI, r0
 80070fc:	bc09      	pop	{r0, r3}
 80070fe:	6819      	ldr	r1, [r3, #0]
 8007100:	6808      	ldr	r0, [r1, #0]
 8007102:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007106:	f01e 0f10 	tst.w	lr, #16
 800710a:	bf08      	it	eq
 800710c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007110:	f380 8809 	msr	PSP, r0
 8007114:	f3bf 8f6f 	isb	sy
 8007118:	4770      	bx	lr
 800711a:	bf00      	nop
 800711c:	f3af 8000 	nop.w

08007120 <pxCurrentTCBConst>:
 8007120:	2000085c 	.word	0x2000085c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007124:	bf00      	nop
 8007126:	bf00      	nop

08007128 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b082      	sub	sp, #8
 800712c:	af00      	add	r7, sp, #0
	__asm volatile
 800712e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007132:	f383 8811 	msr	BASEPRI, r3
 8007136:	f3bf 8f6f 	isb	sy
 800713a:	f3bf 8f4f 	dsb	sy
 800713e:	607b      	str	r3, [r7, #4]
}
 8007140:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007142:	f7fe fdc3 	bl	8005ccc <xTaskIncrementTick>
 8007146:	4603      	mov	r3, r0
 8007148:	2b00      	cmp	r3, #0
 800714a:	d003      	beq.n	8007154 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800714c:	4b06      	ldr	r3, [pc, #24]	; (8007168 <xPortSysTickHandler+0x40>)
 800714e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007152:	601a      	str	r2, [r3, #0]
 8007154:	2300      	movs	r3, #0
 8007156:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	f383 8811 	msr	BASEPRI, r3
}
 800715e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007160:	bf00      	nop
 8007162:	3708      	adds	r7, #8
 8007164:	46bd      	mov	sp, r7
 8007166:	bd80      	pop	{r7, pc}
 8007168:	e000ed04 	.word	0xe000ed04

0800716c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800716c:	b480      	push	{r7}
 800716e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007170:	4b0b      	ldr	r3, [pc, #44]	; (80071a0 <vPortSetupTimerInterrupt+0x34>)
 8007172:	2200      	movs	r2, #0
 8007174:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007176:	4b0b      	ldr	r3, [pc, #44]	; (80071a4 <vPortSetupTimerInterrupt+0x38>)
 8007178:	2200      	movs	r2, #0
 800717a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800717c:	4b0a      	ldr	r3, [pc, #40]	; (80071a8 <vPortSetupTimerInterrupt+0x3c>)
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	4a0a      	ldr	r2, [pc, #40]	; (80071ac <vPortSetupTimerInterrupt+0x40>)
 8007182:	fba2 2303 	umull	r2, r3, r2, r3
 8007186:	099b      	lsrs	r3, r3, #6
 8007188:	4a09      	ldr	r2, [pc, #36]	; (80071b0 <vPortSetupTimerInterrupt+0x44>)
 800718a:	3b01      	subs	r3, #1
 800718c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800718e:	4b04      	ldr	r3, [pc, #16]	; (80071a0 <vPortSetupTimerInterrupt+0x34>)
 8007190:	2207      	movs	r2, #7
 8007192:	601a      	str	r2, [r3, #0]
}
 8007194:	bf00      	nop
 8007196:	46bd      	mov	sp, r7
 8007198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719c:	4770      	bx	lr
 800719e:	bf00      	nop
 80071a0:	e000e010 	.word	0xe000e010
 80071a4:	e000e018 	.word	0xe000e018
 80071a8:	20000018 	.word	0x20000018
 80071ac:	10624dd3 	.word	0x10624dd3
 80071b0:	e000e014 	.word	0xe000e014

080071b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80071b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80071c4 <vPortEnableVFP+0x10>
 80071b8:	6801      	ldr	r1, [r0, #0]
 80071ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80071be:	6001      	str	r1, [r0, #0]
 80071c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80071c2:	bf00      	nop
 80071c4:	e000ed88 	.word	0xe000ed88

080071c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80071c8:	b480      	push	{r7}
 80071ca:	b085      	sub	sp, #20
 80071cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80071ce:	f3ef 8305 	mrs	r3, IPSR
 80071d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	2b0f      	cmp	r3, #15
 80071d8:	d914      	bls.n	8007204 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80071da:	4a17      	ldr	r2, [pc, #92]	; (8007238 <vPortValidateInterruptPriority+0x70>)
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	4413      	add	r3, r2
 80071e0:	781b      	ldrb	r3, [r3, #0]
 80071e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80071e4:	4b15      	ldr	r3, [pc, #84]	; (800723c <vPortValidateInterruptPriority+0x74>)
 80071e6:	781b      	ldrb	r3, [r3, #0]
 80071e8:	7afa      	ldrb	r2, [r7, #11]
 80071ea:	429a      	cmp	r2, r3
 80071ec:	d20a      	bcs.n	8007204 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80071ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071f2:	f383 8811 	msr	BASEPRI, r3
 80071f6:	f3bf 8f6f 	isb	sy
 80071fa:	f3bf 8f4f 	dsb	sy
 80071fe:	607b      	str	r3, [r7, #4]
}
 8007200:	bf00      	nop
 8007202:	e7fe      	b.n	8007202 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007204:	4b0e      	ldr	r3, [pc, #56]	; (8007240 <vPortValidateInterruptPriority+0x78>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800720c:	4b0d      	ldr	r3, [pc, #52]	; (8007244 <vPortValidateInterruptPriority+0x7c>)
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	429a      	cmp	r2, r3
 8007212:	d90a      	bls.n	800722a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007218:	f383 8811 	msr	BASEPRI, r3
 800721c:	f3bf 8f6f 	isb	sy
 8007220:	f3bf 8f4f 	dsb	sy
 8007224:	603b      	str	r3, [r7, #0]
}
 8007226:	bf00      	nop
 8007228:	e7fe      	b.n	8007228 <vPortValidateInterruptPriority+0x60>
	}
 800722a:	bf00      	nop
 800722c:	3714      	adds	r7, #20
 800722e:	46bd      	mov	sp, r7
 8007230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007234:	4770      	bx	lr
 8007236:	bf00      	nop
 8007238:	e000e3f0 	.word	0xe000e3f0
 800723c:	20000e88 	.word	0x20000e88
 8007240:	e000ed0c 	.word	0xe000ed0c
 8007244:	20000e8c 	.word	0x20000e8c

08007248 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b08a      	sub	sp, #40	; 0x28
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007250:	2300      	movs	r3, #0
 8007252:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007254:	f7fe fc6c 	bl	8005b30 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007258:	4b5b      	ldr	r3, [pc, #364]	; (80073c8 <pvPortMalloc+0x180>)
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d101      	bne.n	8007264 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007260:	f000 f920 	bl	80074a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007264:	4b59      	ldr	r3, [pc, #356]	; (80073cc <pvPortMalloc+0x184>)
 8007266:	681a      	ldr	r2, [r3, #0]
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	4013      	ands	r3, r2
 800726c:	2b00      	cmp	r3, #0
 800726e:	f040 8093 	bne.w	8007398 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d01d      	beq.n	80072b4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007278:	2208      	movs	r2, #8
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	4413      	add	r3, r2
 800727e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	f003 0307 	and.w	r3, r3, #7
 8007286:	2b00      	cmp	r3, #0
 8007288:	d014      	beq.n	80072b4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	f023 0307 	bic.w	r3, r3, #7
 8007290:	3308      	adds	r3, #8
 8007292:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	f003 0307 	and.w	r3, r3, #7
 800729a:	2b00      	cmp	r3, #0
 800729c:	d00a      	beq.n	80072b4 <pvPortMalloc+0x6c>
	__asm volatile
 800729e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072a2:	f383 8811 	msr	BASEPRI, r3
 80072a6:	f3bf 8f6f 	isb	sy
 80072aa:	f3bf 8f4f 	dsb	sy
 80072ae:	617b      	str	r3, [r7, #20]
}
 80072b0:	bf00      	nop
 80072b2:	e7fe      	b.n	80072b2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d06e      	beq.n	8007398 <pvPortMalloc+0x150>
 80072ba:	4b45      	ldr	r3, [pc, #276]	; (80073d0 <pvPortMalloc+0x188>)
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	687a      	ldr	r2, [r7, #4]
 80072c0:	429a      	cmp	r2, r3
 80072c2:	d869      	bhi.n	8007398 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80072c4:	4b43      	ldr	r3, [pc, #268]	; (80073d4 <pvPortMalloc+0x18c>)
 80072c6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80072c8:	4b42      	ldr	r3, [pc, #264]	; (80073d4 <pvPortMalloc+0x18c>)
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80072ce:	e004      	b.n	80072da <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80072d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072d2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80072d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80072da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072dc:	685b      	ldr	r3, [r3, #4]
 80072de:	687a      	ldr	r2, [r7, #4]
 80072e0:	429a      	cmp	r2, r3
 80072e2:	d903      	bls.n	80072ec <pvPortMalloc+0xa4>
 80072e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d1f1      	bne.n	80072d0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80072ec:	4b36      	ldr	r3, [pc, #216]	; (80073c8 <pvPortMalloc+0x180>)
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072f2:	429a      	cmp	r2, r3
 80072f4:	d050      	beq.n	8007398 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80072f6:	6a3b      	ldr	r3, [r7, #32]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	2208      	movs	r2, #8
 80072fc:	4413      	add	r3, r2
 80072fe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007302:	681a      	ldr	r2, [r3, #0]
 8007304:	6a3b      	ldr	r3, [r7, #32]
 8007306:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800730a:	685a      	ldr	r2, [r3, #4]
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	1ad2      	subs	r2, r2, r3
 8007310:	2308      	movs	r3, #8
 8007312:	005b      	lsls	r3, r3, #1
 8007314:	429a      	cmp	r2, r3
 8007316:	d91f      	bls.n	8007358 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007318:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	4413      	add	r3, r2
 800731e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007320:	69bb      	ldr	r3, [r7, #24]
 8007322:	f003 0307 	and.w	r3, r3, #7
 8007326:	2b00      	cmp	r3, #0
 8007328:	d00a      	beq.n	8007340 <pvPortMalloc+0xf8>
	__asm volatile
 800732a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800732e:	f383 8811 	msr	BASEPRI, r3
 8007332:	f3bf 8f6f 	isb	sy
 8007336:	f3bf 8f4f 	dsb	sy
 800733a:	613b      	str	r3, [r7, #16]
}
 800733c:	bf00      	nop
 800733e:	e7fe      	b.n	800733e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007342:	685a      	ldr	r2, [r3, #4]
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	1ad2      	subs	r2, r2, r3
 8007348:	69bb      	ldr	r3, [r7, #24]
 800734a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800734c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800734e:	687a      	ldr	r2, [r7, #4]
 8007350:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007352:	69b8      	ldr	r0, [r7, #24]
 8007354:	f000 f908 	bl	8007568 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007358:	4b1d      	ldr	r3, [pc, #116]	; (80073d0 <pvPortMalloc+0x188>)
 800735a:	681a      	ldr	r2, [r3, #0]
 800735c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800735e:	685b      	ldr	r3, [r3, #4]
 8007360:	1ad3      	subs	r3, r2, r3
 8007362:	4a1b      	ldr	r2, [pc, #108]	; (80073d0 <pvPortMalloc+0x188>)
 8007364:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007366:	4b1a      	ldr	r3, [pc, #104]	; (80073d0 <pvPortMalloc+0x188>)
 8007368:	681a      	ldr	r2, [r3, #0]
 800736a:	4b1b      	ldr	r3, [pc, #108]	; (80073d8 <pvPortMalloc+0x190>)
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	429a      	cmp	r2, r3
 8007370:	d203      	bcs.n	800737a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007372:	4b17      	ldr	r3, [pc, #92]	; (80073d0 <pvPortMalloc+0x188>)
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	4a18      	ldr	r2, [pc, #96]	; (80073d8 <pvPortMalloc+0x190>)
 8007378:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800737a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800737c:	685a      	ldr	r2, [r3, #4]
 800737e:	4b13      	ldr	r3, [pc, #76]	; (80073cc <pvPortMalloc+0x184>)
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	431a      	orrs	r2, r3
 8007384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007386:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800738a:	2200      	movs	r2, #0
 800738c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800738e:	4b13      	ldr	r3, [pc, #76]	; (80073dc <pvPortMalloc+0x194>)
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	3301      	adds	r3, #1
 8007394:	4a11      	ldr	r2, [pc, #68]	; (80073dc <pvPortMalloc+0x194>)
 8007396:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007398:	f7fe fbd8 	bl	8005b4c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800739c:	69fb      	ldr	r3, [r7, #28]
 800739e:	f003 0307 	and.w	r3, r3, #7
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d00a      	beq.n	80073bc <pvPortMalloc+0x174>
	__asm volatile
 80073a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073aa:	f383 8811 	msr	BASEPRI, r3
 80073ae:	f3bf 8f6f 	isb	sy
 80073b2:	f3bf 8f4f 	dsb	sy
 80073b6:	60fb      	str	r3, [r7, #12]
}
 80073b8:	bf00      	nop
 80073ba:	e7fe      	b.n	80073ba <pvPortMalloc+0x172>
	return pvReturn;
 80073bc:	69fb      	ldr	r3, [r7, #28]
}
 80073be:	4618      	mov	r0, r3
 80073c0:	3728      	adds	r7, #40	; 0x28
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bd80      	pop	{r7, pc}
 80073c6:	bf00      	nop
 80073c8:	20004a98 	.word	0x20004a98
 80073cc:	20004aac 	.word	0x20004aac
 80073d0:	20004a9c 	.word	0x20004a9c
 80073d4:	20004a90 	.word	0x20004a90
 80073d8:	20004aa0 	.word	0x20004aa0
 80073dc:	20004aa4 	.word	0x20004aa4

080073e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b086      	sub	sp, #24
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d04d      	beq.n	800748e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80073f2:	2308      	movs	r3, #8
 80073f4:	425b      	negs	r3, r3
 80073f6:	697a      	ldr	r2, [r7, #20]
 80073f8:	4413      	add	r3, r2
 80073fa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80073fc:	697b      	ldr	r3, [r7, #20]
 80073fe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007400:	693b      	ldr	r3, [r7, #16]
 8007402:	685a      	ldr	r2, [r3, #4]
 8007404:	4b24      	ldr	r3, [pc, #144]	; (8007498 <vPortFree+0xb8>)
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	4013      	ands	r3, r2
 800740a:	2b00      	cmp	r3, #0
 800740c:	d10a      	bne.n	8007424 <vPortFree+0x44>
	__asm volatile
 800740e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007412:	f383 8811 	msr	BASEPRI, r3
 8007416:	f3bf 8f6f 	isb	sy
 800741a:	f3bf 8f4f 	dsb	sy
 800741e:	60fb      	str	r3, [r7, #12]
}
 8007420:	bf00      	nop
 8007422:	e7fe      	b.n	8007422 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007424:	693b      	ldr	r3, [r7, #16]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d00a      	beq.n	8007442 <vPortFree+0x62>
	__asm volatile
 800742c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007430:	f383 8811 	msr	BASEPRI, r3
 8007434:	f3bf 8f6f 	isb	sy
 8007438:	f3bf 8f4f 	dsb	sy
 800743c:	60bb      	str	r3, [r7, #8]
}
 800743e:	bf00      	nop
 8007440:	e7fe      	b.n	8007440 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007442:	693b      	ldr	r3, [r7, #16]
 8007444:	685a      	ldr	r2, [r3, #4]
 8007446:	4b14      	ldr	r3, [pc, #80]	; (8007498 <vPortFree+0xb8>)
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	4013      	ands	r3, r2
 800744c:	2b00      	cmp	r3, #0
 800744e:	d01e      	beq.n	800748e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007450:	693b      	ldr	r3, [r7, #16]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d11a      	bne.n	800748e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007458:	693b      	ldr	r3, [r7, #16]
 800745a:	685a      	ldr	r2, [r3, #4]
 800745c:	4b0e      	ldr	r3, [pc, #56]	; (8007498 <vPortFree+0xb8>)
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	43db      	mvns	r3, r3
 8007462:	401a      	ands	r2, r3
 8007464:	693b      	ldr	r3, [r7, #16]
 8007466:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007468:	f7fe fb62 	bl	8005b30 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800746c:	693b      	ldr	r3, [r7, #16]
 800746e:	685a      	ldr	r2, [r3, #4]
 8007470:	4b0a      	ldr	r3, [pc, #40]	; (800749c <vPortFree+0xbc>)
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	4413      	add	r3, r2
 8007476:	4a09      	ldr	r2, [pc, #36]	; (800749c <vPortFree+0xbc>)
 8007478:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800747a:	6938      	ldr	r0, [r7, #16]
 800747c:	f000 f874 	bl	8007568 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007480:	4b07      	ldr	r3, [pc, #28]	; (80074a0 <vPortFree+0xc0>)
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	3301      	adds	r3, #1
 8007486:	4a06      	ldr	r2, [pc, #24]	; (80074a0 <vPortFree+0xc0>)
 8007488:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800748a:	f7fe fb5f 	bl	8005b4c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800748e:	bf00      	nop
 8007490:	3718      	adds	r7, #24
 8007492:	46bd      	mov	sp, r7
 8007494:	bd80      	pop	{r7, pc}
 8007496:	bf00      	nop
 8007498:	20004aac 	.word	0x20004aac
 800749c:	20004a9c 	.word	0x20004a9c
 80074a0:	20004aa8 	.word	0x20004aa8

080074a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80074a4:	b480      	push	{r7}
 80074a6:	b085      	sub	sp, #20
 80074a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80074aa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80074ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80074b0:	4b27      	ldr	r3, [pc, #156]	; (8007550 <prvHeapInit+0xac>)
 80074b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	f003 0307 	and.w	r3, r3, #7
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d00c      	beq.n	80074d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	3307      	adds	r3, #7
 80074c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	f023 0307 	bic.w	r3, r3, #7
 80074ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80074cc:	68ba      	ldr	r2, [r7, #8]
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	1ad3      	subs	r3, r2, r3
 80074d2:	4a1f      	ldr	r2, [pc, #124]	; (8007550 <prvHeapInit+0xac>)
 80074d4:	4413      	add	r3, r2
 80074d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80074dc:	4a1d      	ldr	r2, [pc, #116]	; (8007554 <prvHeapInit+0xb0>)
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80074e2:	4b1c      	ldr	r3, [pc, #112]	; (8007554 <prvHeapInit+0xb0>)
 80074e4:	2200      	movs	r2, #0
 80074e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	68ba      	ldr	r2, [r7, #8]
 80074ec:	4413      	add	r3, r2
 80074ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80074f0:	2208      	movs	r2, #8
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	1a9b      	subs	r3, r3, r2
 80074f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	f023 0307 	bic.w	r3, r3, #7
 80074fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	4a15      	ldr	r2, [pc, #84]	; (8007558 <prvHeapInit+0xb4>)
 8007504:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007506:	4b14      	ldr	r3, [pc, #80]	; (8007558 <prvHeapInit+0xb4>)
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	2200      	movs	r2, #0
 800750c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800750e:	4b12      	ldr	r3, [pc, #72]	; (8007558 <prvHeapInit+0xb4>)
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	2200      	movs	r2, #0
 8007514:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	68fa      	ldr	r2, [r7, #12]
 800751e:	1ad2      	subs	r2, r2, r3
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007524:	4b0c      	ldr	r3, [pc, #48]	; (8007558 <prvHeapInit+0xb4>)
 8007526:	681a      	ldr	r2, [r3, #0]
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	685b      	ldr	r3, [r3, #4]
 8007530:	4a0a      	ldr	r2, [pc, #40]	; (800755c <prvHeapInit+0xb8>)
 8007532:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	685b      	ldr	r3, [r3, #4]
 8007538:	4a09      	ldr	r2, [pc, #36]	; (8007560 <prvHeapInit+0xbc>)
 800753a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800753c:	4b09      	ldr	r3, [pc, #36]	; (8007564 <prvHeapInit+0xc0>)
 800753e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007542:	601a      	str	r2, [r3, #0]
}
 8007544:	bf00      	nop
 8007546:	3714      	adds	r7, #20
 8007548:	46bd      	mov	sp, r7
 800754a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754e:	4770      	bx	lr
 8007550:	20000e90 	.word	0x20000e90
 8007554:	20004a90 	.word	0x20004a90
 8007558:	20004a98 	.word	0x20004a98
 800755c:	20004aa0 	.word	0x20004aa0
 8007560:	20004a9c 	.word	0x20004a9c
 8007564:	20004aac 	.word	0x20004aac

08007568 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007568:	b480      	push	{r7}
 800756a:	b085      	sub	sp, #20
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007570:	4b28      	ldr	r3, [pc, #160]	; (8007614 <prvInsertBlockIntoFreeList+0xac>)
 8007572:	60fb      	str	r3, [r7, #12]
 8007574:	e002      	b.n	800757c <prvInsertBlockIntoFreeList+0x14>
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	60fb      	str	r3, [r7, #12]
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	687a      	ldr	r2, [r7, #4]
 8007582:	429a      	cmp	r2, r3
 8007584:	d8f7      	bhi.n	8007576 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	685b      	ldr	r3, [r3, #4]
 800758e:	68ba      	ldr	r2, [r7, #8]
 8007590:	4413      	add	r3, r2
 8007592:	687a      	ldr	r2, [r7, #4]
 8007594:	429a      	cmp	r2, r3
 8007596:	d108      	bne.n	80075aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	685a      	ldr	r2, [r3, #4]
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	685b      	ldr	r3, [r3, #4]
 80075a0:	441a      	add	r2, r3
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	685b      	ldr	r3, [r3, #4]
 80075b2:	68ba      	ldr	r2, [r7, #8]
 80075b4:	441a      	add	r2, r3
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	429a      	cmp	r2, r3
 80075bc:	d118      	bne.n	80075f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	681a      	ldr	r2, [r3, #0]
 80075c2:	4b15      	ldr	r3, [pc, #84]	; (8007618 <prvInsertBlockIntoFreeList+0xb0>)
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	429a      	cmp	r2, r3
 80075c8:	d00d      	beq.n	80075e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	685a      	ldr	r2, [r3, #4]
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	685b      	ldr	r3, [r3, #4]
 80075d4:	441a      	add	r2, r3
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	681a      	ldr	r2, [r3, #0]
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	601a      	str	r2, [r3, #0]
 80075e4:	e008      	b.n	80075f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80075e6:	4b0c      	ldr	r3, [pc, #48]	; (8007618 <prvInsertBlockIntoFreeList+0xb0>)
 80075e8:	681a      	ldr	r2, [r3, #0]
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	601a      	str	r2, [r3, #0]
 80075ee:	e003      	b.n	80075f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	681a      	ldr	r2, [r3, #0]
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80075f8:	68fa      	ldr	r2, [r7, #12]
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	429a      	cmp	r2, r3
 80075fe:	d002      	beq.n	8007606 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	687a      	ldr	r2, [r7, #4]
 8007604:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007606:	bf00      	nop
 8007608:	3714      	adds	r7, #20
 800760a:	46bd      	mov	sp, r7
 800760c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007610:	4770      	bx	lr
 8007612:	bf00      	nop
 8007614:	20004a90 	.word	0x20004a90
 8007618:	20004a98 	.word	0x20004a98

0800761c <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b084      	sub	sp, #16
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
 8007624:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8007626:	f008 f987 	bl	800f938 <sys_timeouts_sleeptime>
 800762a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007632:	d10b      	bne.n	800764c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8007634:	4813      	ldr	r0, [pc, #76]	; (8007684 <tcpip_timeouts_mbox_fetch+0x68>)
 8007636:	f00a fede 	bl	80123f6 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800763a:	2200      	movs	r2, #0
 800763c:	6839      	ldr	r1, [r7, #0]
 800763e:	6878      	ldr	r0, [r7, #4]
 8007640:	f00a fe66 	bl	8012310 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8007644:	480f      	ldr	r0, [pc, #60]	; (8007684 <tcpip_timeouts_mbox_fetch+0x68>)
 8007646:	f00a fec7 	bl	80123d8 <sys_mutex_lock>
    return;
 800764a:	e018      	b.n	800767e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d102      	bne.n	8007658 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8007652:	f008 f937 	bl	800f8c4 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8007656:	e7e6      	b.n	8007626 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8007658:	480a      	ldr	r0, [pc, #40]	; (8007684 <tcpip_timeouts_mbox_fetch+0x68>)
 800765a:	f00a fecc 	bl	80123f6 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800765e:	68fa      	ldr	r2, [r7, #12]
 8007660:	6839      	ldr	r1, [r7, #0]
 8007662:	6878      	ldr	r0, [r7, #4]
 8007664:	f00a fe54 	bl	8012310 <sys_arch_mbox_fetch>
 8007668:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800766a:	4806      	ldr	r0, [pc, #24]	; (8007684 <tcpip_timeouts_mbox_fetch+0x68>)
 800766c:	f00a feb4 	bl	80123d8 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8007670:	68bb      	ldr	r3, [r7, #8]
 8007672:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007676:	d102      	bne.n	800767e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8007678:	f008 f924 	bl	800f8c4 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800767c:	e7d3      	b.n	8007626 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800767e:	3710      	adds	r7, #16
 8007680:	46bd      	mov	sp, r7
 8007682:	bd80      	pop	{r7, pc}
 8007684:	20004abc 	.word	0x20004abc

08007688 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b084      	sub	sp, #16
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8007690:	4810      	ldr	r0, [pc, #64]	; (80076d4 <tcpip_thread+0x4c>)
 8007692:	f00a fea1 	bl	80123d8 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8007696:	4b10      	ldr	r3, [pc, #64]	; (80076d8 <tcpip_thread+0x50>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d005      	beq.n	80076aa <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800769e:	4b0e      	ldr	r3, [pc, #56]	; (80076d8 <tcpip_thread+0x50>)
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	4a0e      	ldr	r2, [pc, #56]	; (80076dc <tcpip_thread+0x54>)
 80076a4:	6812      	ldr	r2, [r2, #0]
 80076a6:	4610      	mov	r0, r2
 80076a8:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 80076aa:	f107 030c 	add.w	r3, r7, #12
 80076ae:	4619      	mov	r1, r3
 80076b0:	480b      	ldr	r0, [pc, #44]	; (80076e0 <tcpip_thread+0x58>)
 80076b2:	f7ff ffb3 	bl	800761c <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d106      	bne.n	80076ca <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80076bc:	4b09      	ldr	r3, [pc, #36]	; (80076e4 <tcpip_thread+0x5c>)
 80076be:	2291      	movs	r2, #145	; 0x91
 80076c0:	4909      	ldr	r1, [pc, #36]	; (80076e8 <tcpip_thread+0x60>)
 80076c2:	480a      	ldr	r0, [pc, #40]	; (80076ec <tcpip_thread+0x64>)
 80076c4:	f00c fbf0 	bl	8013ea8 <iprintf>
      continue;
 80076c8:	e003      	b.n	80076d2 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	4618      	mov	r0, r3
 80076ce:	f000 f80f 	bl	80076f0 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 80076d2:	e7ea      	b.n	80076aa <tcpip_thread+0x22>
 80076d4:	20004abc 	.word	0x20004abc
 80076d8:	20004ab0 	.word	0x20004ab0
 80076dc:	20004ab4 	.word	0x20004ab4
 80076e0:	20004ab8 	.word	0x20004ab8
 80076e4:	08014e88 	.word	0x08014e88
 80076e8:	08014eb8 	.word	0x08014eb8
 80076ec:	08014ed8 	.word	0x08014ed8

080076f0 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b082      	sub	sp, #8
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	781b      	ldrb	r3, [r3, #0]
 80076fc:	2b02      	cmp	r3, #2
 80076fe:	d026      	beq.n	800774e <tcpip_thread_handle_msg+0x5e>
 8007700:	2b02      	cmp	r3, #2
 8007702:	dc2b      	bgt.n	800775c <tcpip_thread_handle_msg+0x6c>
 8007704:	2b00      	cmp	r3, #0
 8007706:	d002      	beq.n	800770e <tcpip_thread_handle_msg+0x1e>
 8007708:	2b01      	cmp	r3, #1
 800770a:	d015      	beq.n	8007738 <tcpip_thread_handle_msg+0x48>
 800770c:	e026      	b.n	800775c <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	68db      	ldr	r3, [r3, #12]
 8007712:	687a      	ldr	r2, [r7, #4]
 8007714:	6850      	ldr	r0, [r2, #4]
 8007716:	687a      	ldr	r2, [r7, #4]
 8007718:	6892      	ldr	r2, [r2, #8]
 800771a:	4611      	mov	r1, r2
 800771c:	4798      	blx	r3
 800771e:	4603      	mov	r3, r0
 8007720:	2b00      	cmp	r3, #0
 8007722:	d004      	beq.n	800772e <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	685b      	ldr	r3, [r3, #4]
 8007728:	4618      	mov	r0, r3
 800772a:	f001 fcc5 	bl	80090b8 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800772e:	6879      	ldr	r1, [r7, #4]
 8007730:	2009      	movs	r0, #9
 8007732:	f000 fe1d 	bl	8008370 <memp_free>
      break;
 8007736:	e018      	b.n	800776a <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	685b      	ldr	r3, [r3, #4]
 800773c:	687a      	ldr	r2, [r7, #4]
 800773e:	6892      	ldr	r2, [r2, #8]
 8007740:	4610      	mov	r0, r2
 8007742:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8007744:	6879      	ldr	r1, [r7, #4]
 8007746:	2008      	movs	r0, #8
 8007748:	f000 fe12 	bl	8008370 <memp_free>
      break;
 800774c:	e00d      	b.n	800776a <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	685b      	ldr	r3, [r3, #4]
 8007752:	687a      	ldr	r2, [r7, #4]
 8007754:	6892      	ldr	r2, [r2, #8]
 8007756:	4610      	mov	r0, r2
 8007758:	4798      	blx	r3
      break;
 800775a:	e006      	b.n	800776a <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800775c:	4b05      	ldr	r3, [pc, #20]	; (8007774 <tcpip_thread_handle_msg+0x84>)
 800775e:	22cf      	movs	r2, #207	; 0xcf
 8007760:	4905      	ldr	r1, [pc, #20]	; (8007778 <tcpip_thread_handle_msg+0x88>)
 8007762:	4806      	ldr	r0, [pc, #24]	; (800777c <tcpip_thread_handle_msg+0x8c>)
 8007764:	f00c fba0 	bl	8013ea8 <iprintf>
      break;
 8007768:	bf00      	nop
  }
}
 800776a:	bf00      	nop
 800776c:	3708      	adds	r7, #8
 800776e:	46bd      	mov	sp, r7
 8007770:	bd80      	pop	{r7, pc}
 8007772:	bf00      	nop
 8007774:	08014e88 	.word	0x08014e88
 8007778:	08014eb8 	.word	0x08014eb8
 800777c:	08014ed8 	.word	0x08014ed8

08007780 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b086      	sub	sp, #24
 8007784:	af00      	add	r7, sp, #0
 8007786:	60f8      	str	r0, [r7, #12]
 8007788:	60b9      	str	r1, [r7, #8]
 800778a:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800778c:	481a      	ldr	r0, [pc, #104]	; (80077f8 <tcpip_inpkt+0x78>)
 800778e:	f00a fdf0 	bl	8012372 <sys_mbox_valid>
 8007792:	4603      	mov	r3, r0
 8007794:	2b00      	cmp	r3, #0
 8007796:	d105      	bne.n	80077a4 <tcpip_inpkt+0x24>
 8007798:	4b18      	ldr	r3, [pc, #96]	; (80077fc <tcpip_inpkt+0x7c>)
 800779a:	22fc      	movs	r2, #252	; 0xfc
 800779c:	4918      	ldr	r1, [pc, #96]	; (8007800 <tcpip_inpkt+0x80>)
 800779e:	4819      	ldr	r0, [pc, #100]	; (8007804 <tcpip_inpkt+0x84>)
 80077a0:	f00c fb82 	bl	8013ea8 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 80077a4:	2009      	movs	r0, #9
 80077a6:	f000 fd91 	bl	80082cc <memp_malloc>
 80077aa:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 80077ac:	697b      	ldr	r3, [r7, #20]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d102      	bne.n	80077b8 <tcpip_inpkt+0x38>
    return ERR_MEM;
 80077b2:	f04f 33ff 	mov.w	r3, #4294967295
 80077b6:	e01a      	b.n	80077ee <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 80077b8:	697b      	ldr	r3, [r7, #20]
 80077ba:	2200      	movs	r2, #0
 80077bc:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 80077be:	697b      	ldr	r3, [r7, #20]
 80077c0:	68fa      	ldr	r2, [r7, #12]
 80077c2:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 80077c4:	697b      	ldr	r3, [r7, #20]
 80077c6:	68ba      	ldr	r2, [r7, #8]
 80077c8:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 80077ca:	697b      	ldr	r3, [r7, #20]
 80077cc:	687a      	ldr	r2, [r7, #4]
 80077ce:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80077d0:	6979      	ldr	r1, [r7, #20]
 80077d2:	4809      	ldr	r0, [pc, #36]	; (80077f8 <tcpip_inpkt+0x78>)
 80077d4:	f00a fd82 	bl	80122dc <sys_mbox_trypost>
 80077d8:	4603      	mov	r3, r0
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d006      	beq.n	80077ec <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80077de:	6979      	ldr	r1, [r7, #20]
 80077e0:	2009      	movs	r0, #9
 80077e2:	f000 fdc5 	bl	8008370 <memp_free>
    return ERR_MEM;
 80077e6:	f04f 33ff 	mov.w	r3, #4294967295
 80077ea:	e000      	b.n	80077ee <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 80077ec:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 80077ee:	4618      	mov	r0, r3
 80077f0:	3718      	adds	r7, #24
 80077f2:	46bd      	mov	sp, r7
 80077f4:	bd80      	pop	{r7, pc}
 80077f6:	bf00      	nop
 80077f8:	20004ab8 	.word	0x20004ab8
 80077fc:	08014e88 	.word	0x08014e88
 8007800:	08014f00 	.word	0x08014f00
 8007804:	08014ed8 	.word	0x08014ed8

08007808 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b082      	sub	sp, #8
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
 8007810:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007818:	f003 0318 	and.w	r3, r3, #24
 800781c:	2b00      	cmp	r3, #0
 800781e:	d006      	beq.n	800782e <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8007820:	4a08      	ldr	r2, [pc, #32]	; (8007844 <tcpip_input+0x3c>)
 8007822:	6839      	ldr	r1, [r7, #0]
 8007824:	6878      	ldr	r0, [r7, #4]
 8007826:	f7ff ffab 	bl	8007780 <tcpip_inpkt>
 800782a:	4603      	mov	r3, r0
 800782c:	e005      	b.n	800783a <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800782e:	4a06      	ldr	r2, [pc, #24]	; (8007848 <tcpip_input+0x40>)
 8007830:	6839      	ldr	r1, [r7, #0]
 8007832:	6878      	ldr	r0, [r7, #4]
 8007834:	f7ff ffa4 	bl	8007780 <tcpip_inpkt>
 8007838:	4603      	mov	r3, r0
}
 800783a:	4618      	mov	r0, r3
 800783c:	3708      	adds	r7, #8
 800783e:	46bd      	mov	sp, r7
 8007840:	bd80      	pop	{r7, pc}
 8007842:	bf00      	nop
 8007844:	080120fd 	.word	0x080120fd
 8007848:	08011005 	.word	0x08011005

0800784c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b084      	sub	sp, #16
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
 8007854:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8007856:	4819      	ldr	r0, [pc, #100]	; (80078bc <tcpip_try_callback+0x70>)
 8007858:	f00a fd8b 	bl	8012372 <sys_mbox_valid>
 800785c:	4603      	mov	r3, r0
 800785e:	2b00      	cmp	r3, #0
 8007860:	d106      	bne.n	8007870 <tcpip_try_callback+0x24>
 8007862:	4b17      	ldr	r3, [pc, #92]	; (80078c0 <tcpip_try_callback+0x74>)
 8007864:	f240 125d 	movw	r2, #349	; 0x15d
 8007868:	4916      	ldr	r1, [pc, #88]	; (80078c4 <tcpip_try_callback+0x78>)
 800786a:	4817      	ldr	r0, [pc, #92]	; (80078c8 <tcpip_try_callback+0x7c>)
 800786c:	f00c fb1c 	bl	8013ea8 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8007870:	2008      	movs	r0, #8
 8007872:	f000 fd2b 	bl	80082cc <memp_malloc>
 8007876:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d102      	bne.n	8007884 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800787e:	f04f 33ff 	mov.w	r3, #4294967295
 8007882:	e017      	b.n	80078b4 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	2201      	movs	r2, #1
 8007888:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	687a      	ldr	r2, [r7, #4]
 800788e:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	683a      	ldr	r2, [r7, #0]
 8007894:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8007896:	68f9      	ldr	r1, [r7, #12]
 8007898:	4808      	ldr	r0, [pc, #32]	; (80078bc <tcpip_try_callback+0x70>)
 800789a:	f00a fd1f 	bl	80122dc <sys_mbox_trypost>
 800789e:	4603      	mov	r3, r0
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d006      	beq.n	80078b2 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 80078a4:	68f9      	ldr	r1, [r7, #12]
 80078a6:	2008      	movs	r0, #8
 80078a8:	f000 fd62 	bl	8008370 <memp_free>
    return ERR_MEM;
 80078ac:	f04f 33ff 	mov.w	r3, #4294967295
 80078b0:	e000      	b.n	80078b4 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 80078b2:	2300      	movs	r3, #0
}
 80078b4:	4618      	mov	r0, r3
 80078b6:	3710      	adds	r7, #16
 80078b8:	46bd      	mov	sp, r7
 80078ba:	bd80      	pop	{r7, pc}
 80078bc:	20004ab8 	.word	0x20004ab8
 80078c0:	08014e88 	.word	0x08014e88
 80078c4:	08014f00 	.word	0x08014f00
 80078c8:	08014ed8 	.word	0x08014ed8

080078cc <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b084      	sub	sp, #16
 80078d0:	af02      	add	r7, sp, #8
 80078d2:	6078      	str	r0, [r7, #4]
 80078d4:	6039      	str	r1, [r7, #0]
  lwip_init();
 80078d6:	f000 f871 	bl	80079bc <lwip_init>

  tcpip_init_done = initfunc;
 80078da:	4a17      	ldr	r2, [pc, #92]	; (8007938 <tcpip_init+0x6c>)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 80078e0:	4a16      	ldr	r2, [pc, #88]	; (800793c <tcpip_init+0x70>)
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 80078e6:	2106      	movs	r1, #6
 80078e8:	4815      	ldr	r0, [pc, #84]	; (8007940 <tcpip_init+0x74>)
 80078ea:	f00a fcdd 	bl	80122a8 <sys_mbox_new>
 80078ee:	4603      	mov	r3, r0
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d006      	beq.n	8007902 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 80078f4:	4b13      	ldr	r3, [pc, #76]	; (8007944 <tcpip_init+0x78>)
 80078f6:	f240 2261 	movw	r2, #609	; 0x261
 80078fa:	4913      	ldr	r1, [pc, #76]	; (8007948 <tcpip_init+0x7c>)
 80078fc:	4813      	ldr	r0, [pc, #76]	; (800794c <tcpip_init+0x80>)
 80078fe:	f00c fad3 	bl	8013ea8 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8007902:	4813      	ldr	r0, [pc, #76]	; (8007950 <tcpip_init+0x84>)
 8007904:	f00a fd52 	bl	80123ac <sys_mutex_new>
 8007908:	4603      	mov	r3, r0
 800790a:	2b00      	cmp	r3, #0
 800790c:	d006      	beq.n	800791c <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800790e:	4b0d      	ldr	r3, [pc, #52]	; (8007944 <tcpip_init+0x78>)
 8007910:	f240 2265 	movw	r2, #613	; 0x265
 8007914:	490f      	ldr	r1, [pc, #60]	; (8007954 <tcpip_init+0x88>)
 8007916:	480d      	ldr	r0, [pc, #52]	; (800794c <tcpip_init+0x80>)
 8007918:	f00c fac6 	bl	8013ea8 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800791c:	2318      	movs	r3, #24
 800791e:	9300      	str	r3, [sp, #0]
 8007920:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007924:	2200      	movs	r2, #0
 8007926:	490c      	ldr	r1, [pc, #48]	; (8007958 <tcpip_init+0x8c>)
 8007928:	480c      	ldr	r0, [pc, #48]	; (800795c <tcpip_init+0x90>)
 800792a:	f00a fd71 	bl	8012410 <sys_thread_new>
}
 800792e:	bf00      	nop
 8007930:	3708      	adds	r7, #8
 8007932:	46bd      	mov	sp, r7
 8007934:	bd80      	pop	{r7, pc}
 8007936:	bf00      	nop
 8007938:	20004ab0 	.word	0x20004ab0
 800793c:	20004ab4 	.word	0x20004ab4
 8007940:	20004ab8 	.word	0x20004ab8
 8007944:	08014e88 	.word	0x08014e88
 8007948:	08014f10 	.word	0x08014f10
 800794c:	08014ed8 	.word	0x08014ed8
 8007950:	20004abc 	.word	0x20004abc
 8007954:	08014f34 	.word	0x08014f34
 8007958:	08007689 	.word	0x08007689
 800795c:	08014f58 	.word	0x08014f58

08007960 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8007960:	b480      	push	{r7}
 8007962:	b083      	sub	sp, #12
 8007964:	af00      	add	r7, sp, #0
 8007966:	4603      	mov	r3, r0
 8007968:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800796a:	88fb      	ldrh	r3, [r7, #6]
 800796c:	021b      	lsls	r3, r3, #8
 800796e:	b21a      	sxth	r2, r3
 8007970:	88fb      	ldrh	r3, [r7, #6]
 8007972:	0a1b      	lsrs	r3, r3, #8
 8007974:	b29b      	uxth	r3, r3
 8007976:	b21b      	sxth	r3, r3
 8007978:	4313      	orrs	r3, r2
 800797a:	b21b      	sxth	r3, r3
 800797c:	b29b      	uxth	r3, r3
}
 800797e:	4618      	mov	r0, r3
 8007980:	370c      	adds	r7, #12
 8007982:	46bd      	mov	sp, r7
 8007984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007988:	4770      	bx	lr

0800798a <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800798a:	b480      	push	{r7}
 800798c:	b083      	sub	sp, #12
 800798e:	af00      	add	r7, sp, #0
 8007990:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	061a      	lsls	r2, r3, #24
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	021b      	lsls	r3, r3, #8
 800799a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800799e:	431a      	orrs	r2, r3
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	0a1b      	lsrs	r3, r3, #8
 80079a4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80079a8:	431a      	orrs	r2, r3
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	0e1b      	lsrs	r3, r3, #24
 80079ae:	4313      	orrs	r3, r2
}
 80079b0:	4618      	mov	r0, r3
 80079b2:	370c      	adds	r7, #12
 80079b4:	46bd      	mov	sp, r7
 80079b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ba:	4770      	bx	lr

080079bc <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b082      	sub	sp, #8
 80079c0:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 80079c2:	2300      	movs	r3, #0
 80079c4:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 80079c6:	f00a fce5 	bl	8012394 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 80079ca:	f000 f8d5 	bl	8007b78 <mem_init>
  memp_init();
 80079ce:	f000 fc31 	bl	8008234 <memp_init>
  pbuf_init();
  netif_init();
 80079d2:	f000 fcf7 	bl	80083c4 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80079d6:	f007 ffe7 	bl	800f9a8 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80079da:	f001 fe17 	bl	800960c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 80079de:	f007 ff29 	bl	800f834 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 80079e2:	bf00      	nop
 80079e4:	3708      	adds	r7, #8
 80079e6:	46bd      	mov	sp, r7
 80079e8:	bd80      	pop	{r7, pc}
	...

080079ec <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 80079ec:	b480      	push	{r7}
 80079ee:	b083      	sub	sp, #12
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	4603      	mov	r3, r0
 80079f4:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 80079f6:	4b05      	ldr	r3, [pc, #20]	; (8007a0c <ptr_to_mem+0x20>)
 80079f8:	681a      	ldr	r2, [r3, #0]
 80079fa:	88fb      	ldrh	r3, [r7, #6]
 80079fc:	4413      	add	r3, r2
}
 80079fe:	4618      	mov	r0, r3
 8007a00:	370c      	adds	r7, #12
 8007a02:	46bd      	mov	sp, r7
 8007a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a08:	4770      	bx	lr
 8007a0a:	bf00      	nop
 8007a0c:	2000512c 	.word	0x2000512c

08007a10 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8007a10:	b480      	push	{r7}
 8007a12:	b083      	sub	sp, #12
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8007a18:	4b05      	ldr	r3, [pc, #20]	; (8007a30 <mem_to_ptr+0x20>)
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	687a      	ldr	r2, [r7, #4]
 8007a1e:	1ad3      	subs	r3, r2, r3
 8007a20:	b29b      	uxth	r3, r3
}
 8007a22:	4618      	mov	r0, r3
 8007a24:	370c      	adds	r7, #12
 8007a26:	46bd      	mov	sp, r7
 8007a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2c:	4770      	bx	lr
 8007a2e:	bf00      	nop
 8007a30:	2000512c 	.word	0x2000512c

08007a34 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8007a34:	b590      	push	{r4, r7, lr}
 8007a36:	b085      	sub	sp, #20
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8007a3c:	4b45      	ldr	r3, [pc, #276]	; (8007b54 <plug_holes+0x120>)
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	687a      	ldr	r2, [r7, #4]
 8007a42:	429a      	cmp	r2, r3
 8007a44:	d206      	bcs.n	8007a54 <plug_holes+0x20>
 8007a46:	4b44      	ldr	r3, [pc, #272]	; (8007b58 <plug_holes+0x124>)
 8007a48:	f240 12df 	movw	r2, #479	; 0x1df
 8007a4c:	4943      	ldr	r1, [pc, #268]	; (8007b5c <plug_holes+0x128>)
 8007a4e:	4844      	ldr	r0, [pc, #272]	; (8007b60 <plug_holes+0x12c>)
 8007a50:	f00c fa2a 	bl	8013ea8 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8007a54:	4b43      	ldr	r3, [pc, #268]	; (8007b64 <plug_holes+0x130>)
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	687a      	ldr	r2, [r7, #4]
 8007a5a:	429a      	cmp	r2, r3
 8007a5c:	d306      	bcc.n	8007a6c <plug_holes+0x38>
 8007a5e:	4b3e      	ldr	r3, [pc, #248]	; (8007b58 <plug_holes+0x124>)
 8007a60:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8007a64:	4940      	ldr	r1, [pc, #256]	; (8007b68 <plug_holes+0x134>)
 8007a66:	483e      	ldr	r0, [pc, #248]	; (8007b60 <plug_holes+0x12c>)
 8007a68:	f00c fa1e 	bl	8013ea8 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	791b      	ldrb	r3, [r3, #4]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d006      	beq.n	8007a82 <plug_holes+0x4e>
 8007a74:	4b38      	ldr	r3, [pc, #224]	; (8007b58 <plug_holes+0x124>)
 8007a76:	f240 12e1 	movw	r2, #481	; 0x1e1
 8007a7a:	493c      	ldr	r1, [pc, #240]	; (8007b6c <plug_holes+0x138>)
 8007a7c:	4838      	ldr	r0, [pc, #224]	; (8007b60 <plug_holes+0x12c>)
 8007a7e:	f00c fa13 	bl	8013ea8 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	881b      	ldrh	r3, [r3, #0]
 8007a86:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007a8a:	d906      	bls.n	8007a9a <plug_holes+0x66>
 8007a8c:	4b32      	ldr	r3, [pc, #200]	; (8007b58 <plug_holes+0x124>)
 8007a8e:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8007a92:	4937      	ldr	r1, [pc, #220]	; (8007b70 <plug_holes+0x13c>)
 8007a94:	4832      	ldr	r0, [pc, #200]	; (8007b60 <plug_holes+0x12c>)
 8007a96:	f00c fa07 	bl	8013ea8 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	881b      	ldrh	r3, [r3, #0]
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	f7ff ffa4 	bl	80079ec <ptr_to_mem>
 8007aa4:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8007aa6:	687a      	ldr	r2, [r7, #4]
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	429a      	cmp	r2, r3
 8007aac:	d024      	beq.n	8007af8 <plug_holes+0xc4>
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	791b      	ldrb	r3, [r3, #4]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d120      	bne.n	8007af8 <plug_holes+0xc4>
 8007ab6:	4b2b      	ldr	r3, [pc, #172]	; (8007b64 <plug_holes+0x130>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	68fa      	ldr	r2, [r7, #12]
 8007abc:	429a      	cmp	r2, r3
 8007abe:	d01b      	beq.n	8007af8 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8007ac0:	4b2c      	ldr	r3, [pc, #176]	; (8007b74 <plug_holes+0x140>)
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	68fa      	ldr	r2, [r7, #12]
 8007ac6:	429a      	cmp	r2, r3
 8007ac8:	d102      	bne.n	8007ad0 <plug_holes+0x9c>
      lfree = mem;
 8007aca:	4a2a      	ldr	r2, [pc, #168]	; (8007b74 <plug_holes+0x140>)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	881a      	ldrh	r2, [r3, #0]
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	881b      	ldrh	r3, [r3, #0]
 8007adc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007ae0:	d00a      	beq.n	8007af8 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	881b      	ldrh	r3, [r3, #0]
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	f7ff ff80 	bl	80079ec <ptr_to_mem>
 8007aec:	4604      	mov	r4, r0
 8007aee:	6878      	ldr	r0, [r7, #4]
 8007af0:	f7ff ff8e 	bl	8007a10 <mem_to_ptr>
 8007af4:	4603      	mov	r3, r0
 8007af6:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	885b      	ldrh	r3, [r3, #2]
 8007afc:	4618      	mov	r0, r3
 8007afe:	f7ff ff75 	bl	80079ec <ptr_to_mem>
 8007b02:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8007b04:	68ba      	ldr	r2, [r7, #8]
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	429a      	cmp	r2, r3
 8007b0a:	d01f      	beq.n	8007b4c <plug_holes+0x118>
 8007b0c:	68bb      	ldr	r3, [r7, #8]
 8007b0e:	791b      	ldrb	r3, [r3, #4]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d11b      	bne.n	8007b4c <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8007b14:	4b17      	ldr	r3, [pc, #92]	; (8007b74 <plug_holes+0x140>)
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	687a      	ldr	r2, [r7, #4]
 8007b1a:	429a      	cmp	r2, r3
 8007b1c:	d102      	bne.n	8007b24 <plug_holes+0xf0>
      lfree = pmem;
 8007b1e:	4a15      	ldr	r2, [pc, #84]	; (8007b74 <plug_holes+0x140>)
 8007b20:	68bb      	ldr	r3, [r7, #8]
 8007b22:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	881a      	ldrh	r2, [r3, #0]
 8007b28:	68bb      	ldr	r3, [r7, #8]
 8007b2a:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	881b      	ldrh	r3, [r3, #0]
 8007b30:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007b34:	d00a      	beq.n	8007b4c <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	881b      	ldrh	r3, [r3, #0]
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	f7ff ff56 	bl	80079ec <ptr_to_mem>
 8007b40:	4604      	mov	r4, r0
 8007b42:	68b8      	ldr	r0, [r7, #8]
 8007b44:	f7ff ff64 	bl	8007a10 <mem_to_ptr>
 8007b48:	4603      	mov	r3, r0
 8007b4a:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8007b4c:	bf00      	nop
 8007b4e:	3714      	adds	r7, #20
 8007b50:	46bd      	mov	sp, r7
 8007b52:	bd90      	pop	{r4, r7, pc}
 8007b54:	2000512c 	.word	0x2000512c
 8007b58:	08014f68 	.word	0x08014f68
 8007b5c:	08014f98 	.word	0x08014f98
 8007b60:	08014fb0 	.word	0x08014fb0
 8007b64:	20005130 	.word	0x20005130
 8007b68:	08014fd8 	.word	0x08014fd8
 8007b6c:	08014ff4 	.word	0x08014ff4
 8007b70:	08015010 	.word	0x08015010
 8007b74:	20005138 	.word	0x20005138

08007b78 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b082      	sub	sp, #8
 8007b7c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8007b7e:	4b1f      	ldr	r3, [pc, #124]	; (8007bfc <mem_init+0x84>)
 8007b80:	3303      	adds	r3, #3
 8007b82:	f023 0303 	bic.w	r3, r3, #3
 8007b86:	461a      	mov	r2, r3
 8007b88:	4b1d      	ldr	r3, [pc, #116]	; (8007c00 <mem_init+0x88>)
 8007b8a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8007b8c:	4b1c      	ldr	r3, [pc, #112]	; (8007c00 <mem_init+0x88>)
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8007b98:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8007ba6:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8007baa:	f7ff ff1f 	bl	80079ec <ptr_to_mem>
 8007bae:	4603      	mov	r3, r0
 8007bb0:	4a14      	ldr	r2, [pc, #80]	; (8007c04 <mem_init+0x8c>)
 8007bb2:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8007bb4:	4b13      	ldr	r3, [pc, #76]	; (8007c04 <mem_init+0x8c>)
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	2201      	movs	r2, #1
 8007bba:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8007bbc:	4b11      	ldr	r3, [pc, #68]	; (8007c04 <mem_init+0x8c>)
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8007bc4:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8007bc6:	4b0f      	ldr	r3, [pc, #60]	; (8007c04 <mem_init+0x8c>)
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8007bce:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8007bd0:	4b0b      	ldr	r3, [pc, #44]	; (8007c00 <mem_init+0x88>)
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	4a0c      	ldr	r2, [pc, #48]	; (8007c08 <mem_init+0x90>)
 8007bd6:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8007bd8:	480c      	ldr	r0, [pc, #48]	; (8007c0c <mem_init+0x94>)
 8007bda:	f00a fbe7 	bl	80123ac <sys_mutex_new>
 8007bde:	4603      	mov	r3, r0
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d006      	beq.n	8007bf2 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8007be4:	4b0a      	ldr	r3, [pc, #40]	; (8007c10 <mem_init+0x98>)
 8007be6:	f240 221f 	movw	r2, #543	; 0x21f
 8007bea:	490a      	ldr	r1, [pc, #40]	; (8007c14 <mem_init+0x9c>)
 8007bec:	480a      	ldr	r0, [pc, #40]	; (8007c18 <mem_init+0xa0>)
 8007bee:	f00c f95b 	bl	8013ea8 <iprintf>
  }
}
 8007bf2:	bf00      	nop
 8007bf4:	3708      	adds	r7, #8
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	bd80      	pop	{r7, pc}
 8007bfa:	bf00      	nop
 8007bfc:	20004ad8 	.word	0x20004ad8
 8007c00:	2000512c 	.word	0x2000512c
 8007c04:	20005130 	.word	0x20005130
 8007c08:	20005138 	.word	0x20005138
 8007c0c:	20005134 	.word	0x20005134
 8007c10:	08014f68 	.word	0x08014f68
 8007c14:	0801503c 	.word	0x0801503c
 8007c18:	08014fb0 	.word	0x08014fb0

08007c1c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b086      	sub	sp, #24
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8007c24:	6878      	ldr	r0, [r7, #4]
 8007c26:	f7ff fef3 	bl	8007a10 <mem_to_ptr>
 8007c2a:	4603      	mov	r3, r0
 8007c2c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	881b      	ldrh	r3, [r3, #0]
 8007c32:	4618      	mov	r0, r3
 8007c34:	f7ff feda 	bl	80079ec <ptr_to_mem>
 8007c38:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	885b      	ldrh	r3, [r3, #2]
 8007c3e:	4618      	mov	r0, r3
 8007c40:	f7ff fed4 	bl	80079ec <ptr_to_mem>
 8007c44:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	881b      	ldrh	r3, [r3, #0]
 8007c4a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007c4e:	d818      	bhi.n	8007c82 <mem_link_valid+0x66>
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	885b      	ldrh	r3, [r3, #2]
 8007c54:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007c58:	d813      	bhi.n	8007c82 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8007c5e:	8afa      	ldrh	r2, [r7, #22]
 8007c60:	429a      	cmp	r2, r3
 8007c62:	d004      	beq.n	8007c6e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	881b      	ldrh	r3, [r3, #0]
 8007c68:	8afa      	ldrh	r2, [r7, #22]
 8007c6a:	429a      	cmp	r2, r3
 8007c6c:	d109      	bne.n	8007c82 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8007c6e:	4b08      	ldr	r3, [pc, #32]	; (8007c90 <mem_link_valid+0x74>)
 8007c70:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8007c72:	693a      	ldr	r2, [r7, #16]
 8007c74:	429a      	cmp	r2, r3
 8007c76:	d006      	beq.n	8007c86 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8007c78:	693b      	ldr	r3, [r7, #16]
 8007c7a:	885b      	ldrh	r3, [r3, #2]
 8007c7c:	8afa      	ldrh	r2, [r7, #22]
 8007c7e:	429a      	cmp	r2, r3
 8007c80:	d001      	beq.n	8007c86 <mem_link_valid+0x6a>
    return 0;
 8007c82:	2300      	movs	r3, #0
 8007c84:	e000      	b.n	8007c88 <mem_link_valid+0x6c>
  }
  return 1;
 8007c86:	2301      	movs	r3, #1
}
 8007c88:	4618      	mov	r0, r3
 8007c8a:	3718      	adds	r7, #24
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bd80      	pop	{r7, pc}
 8007c90:	20005130 	.word	0x20005130

08007c94 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b088      	sub	sp, #32
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d070      	beq.n	8007d84 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	f003 0303 	and.w	r3, r3, #3
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d00d      	beq.n	8007cc8 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8007cac:	4b37      	ldr	r3, [pc, #220]	; (8007d8c <mem_free+0xf8>)
 8007cae:	f240 2273 	movw	r2, #627	; 0x273
 8007cb2:	4937      	ldr	r1, [pc, #220]	; (8007d90 <mem_free+0xfc>)
 8007cb4:	4837      	ldr	r0, [pc, #220]	; (8007d94 <mem_free+0x100>)
 8007cb6:	f00c f8f7 	bl	8013ea8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8007cba:	f00a fbc9 	bl	8012450 <sys_arch_protect>
 8007cbe:	60f8      	str	r0, [r7, #12]
 8007cc0:	68f8      	ldr	r0, [r7, #12]
 8007cc2:	f00a fbd3 	bl	801246c <sys_arch_unprotect>
    return;
 8007cc6:	e05e      	b.n	8007d86 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	3b08      	subs	r3, #8
 8007ccc:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8007cce:	4b32      	ldr	r3, [pc, #200]	; (8007d98 <mem_free+0x104>)
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	69fa      	ldr	r2, [r7, #28]
 8007cd4:	429a      	cmp	r2, r3
 8007cd6:	d306      	bcc.n	8007ce6 <mem_free+0x52>
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	f103 020c 	add.w	r2, r3, #12
 8007cde:	4b2f      	ldr	r3, [pc, #188]	; (8007d9c <mem_free+0x108>)
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	429a      	cmp	r2, r3
 8007ce4:	d90d      	bls.n	8007d02 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8007ce6:	4b29      	ldr	r3, [pc, #164]	; (8007d8c <mem_free+0xf8>)
 8007ce8:	f240 227f 	movw	r2, #639	; 0x27f
 8007cec:	492c      	ldr	r1, [pc, #176]	; (8007da0 <mem_free+0x10c>)
 8007cee:	4829      	ldr	r0, [pc, #164]	; (8007d94 <mem_free+0x100>)
 8007cf0:	f00c f8da 	bl	8013ea8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8007cf4:	f00a fbac 	bl	8012450 <sys_arch_protect>
 8007cf8:	6138      	str	r0, [r7, #16]
 8007cfa:	6938      	ldr	r0, [r7, #16]
 8007cfc:	f00a fbb6 	bl	801246c <sys_arch_unprotect>
    return;
 8007d00:	e041      	b.n	8007d86 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8007d02:	4828      	ldr	r0, [pc, #160]	; (8007da4 <mem_free+0x110>)
 8007d04:	f00a fb68 	bl	80123d8 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 8007d08:	69fb      	ldr	r3, [r7, #28]
 8007d0a:	791b      	ldrb	r3, [r3, #4]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d110      	bne.n	8007d32 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8007d10:	4b1e      	ldr	r3, [pc, #120]	; (8007d8c <mem_free+0xf8>)
 8007d12:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8007d16:	4924      	ldr	r1, [pc, #144]	; (8007da8 <mem_free+0x114>)
 8007d18:	481e      	ldr	r0, [pc, #120]	; (8007d94 <mem_free+0x100>)
 8007d1a:	f00c f8c5 	bl	8013ea8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8007d1e:	4821      	ldr	r0, [pc, #132]	; (8007da4 <mem_free+0x110>)
 8007d20:	f00a fb69 	bl	80123f6 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8007d24:	f00a fb94 	bl	8012450 <sys_arch_protect>
 8007d28:	6178      	str	r0, [r7, #20]
 8007d2a:	6978      	ldr	r0, [r7, #20]
 8007d2c:	f00a fb9e 	bl	801246c <sys_arch_unprotect>
    return;
 8007d30:	e029      	b.n	8007d86 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 8007d32:	69f8      	ldr	r0, [r7, #28]
 8007d34:	f7ff ff72 	bl	8007c1c <mem_link_valid>
 8007d38:	4603      	mov	r3, r0
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d110      	bne.n	8007d60 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8007d3e:	4b13      	ldr	r3, [pc, #76]	; (8007d8c <mem_free+0xf8>)
 8007d40:	f240 2295 	movw	r2, #661	; 0x295
 8007d44:	4919      	ldr	r1, [pc, #100]	; (8007dac <mem_free+0x118>)
 8007d46:	4813      	ldr	r0, [pc, #76]	; (8007d94 <mem_free+0x100>)
 8007d48:	f00c f8ae 	bl	8013ea8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8007d4c:	4815      	ldr	r0, [pc, #84]	; (8007da4 <mem_free+0x110>)
 8007d4e:	f00a fb52 	bl	80123f6 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8007d52:	f00a fb7d 	bl	8012450 <sys_arch_protect>
 8007d56:	61b8      	str	r0, [r7, #24]
 8007d58:	69b8      	ldr	r0, [r7, #24]
 8007d5a:	f00a fb87 	bl	801246c <sys_arch_unprotect>
    return;
 8007d5e:	e012      	b.n	8007d86 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 8007d60:	69fb      	ldr	r3, [r7, #28]
 8007d62:	2200      	movs	r2, #0
 8007d64:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8007d66:	4b12      	ldr	r3, [pc, #72]	; (8007db0 <mem_free+0x11c>)
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	69fa      	ldr	r2, [r7, #28]
 8007d6c:	429a      	cmp	r2, r3
 8007d6e:	d202      	bcs.n	8007d76 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8007d70:	4a0f      	ldr	r2, [pc, #60]	; (8007db0 <mem_free+0x11c>)
 8007d72:	69fb      	ldr	r3, [r7, #28]
 8007d74:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8007d76:	69f8      	ldr	r0, [r7, #28]
 8007d78:	f7ff fe5c 	bl	8007a34 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8007d7c:	4809      	ldr	r0, [pc, #36]	; (8007da4 <mem_free+0x110>)
 8007d7e:	f00a fb3a 	bl	80123f6 <sys_mutex_unlock>
 8007d82:	e000      	b.n	8007d86 <mem_free+0xf2>
    return;
 8007d84:	bf00      	nop
}
 8007d86:	3720      	adds	r7, #32
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	bd80      	pop	{r7, pc}
 8007d8c:	08014f68 	.word	0x08014f68
 8007d90:	08015058 	.word	0x08015058
 8007d94:	08014fb0 	.word	0x08014fb0
 8007d98:	2000512c 	.word	0x2000512c
 8007d9c:	20005130 	.word	0x20005130
 8007da0:	0801507c 	.word	0x0801507c
 8007da4:	20005134 	.word	0x20005134
 8007da8:	08015098 	.word	0x08015098
 8007dac:	080150c0 	.word	0x080150c0
 8007db0:	20005138 	.word	0x20005138

08007db4 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b088      	sub	sp, #32
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
 8007dbc:	460b      	mov	r3, r1
 8007dbe:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8007dc0:	887b      	ldrh	r3, [r7, #2]
 8007dc2:	3303      	adds	r3, #3
 8007dc4:	b29b      	uxth	r3, r3
 8007dc6:	f023 0303 	bic.w	r3, r3, #3
 8007dca:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8007dcc:	8bfb      	ldrh	r3, [r7, #30]
 8007dce:	2b0b      	cmp	r3, #11
 8007dd0:	d801      	bhi.n	8007dd6 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8007dd2:	230c      	movs	r3, #12
 8007dd4:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8007dd6:	8bfb      	ldrh	r3, [r7, #30]
 8007dd8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007ddc:	d803      	bhi.n	8007de6 <mem_trim+0x32>
 8007dde:	8bfa      	ldrh	r2, [r7, #30]
 8007de0:	887b      	ldrh	r3, [r7, #2]
 8007de2:	429a      	cmp	r2, r3
 8007de4:	d201      	bcs.n	8007dea <mem_trim+0x36>
    return NULL;
 8007de6:	2300      	movs	r3, #0
 8007de8:	e0d8      	b.n	8007f9c <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8007dea:	4b6e      	ldr	r3, [pc, #440]	; (8007fa4 <mem_trim+0x1f0>)
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	687a      	ldr	r2, [r7, #4]
 8007df0:	429a      	cmp	r2, r3
 8007df2:	d304      	bcc.n	8007dfe <mem_trim+0x4a>
 8007df4:	4b6c      	ldr	r3, [pc, #432]	; (8007fa8 <mem_trim+0x1f4>)
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	687a      	ldr	r2, [r7, #4]
 8007dfa:	429a      	cmp	r2, r3
 8007dfc:	d306      	bcc.n	8007e0c <mem_trim+0x58>
 8007dfe:	4b6b      	ldr	r3, [pc, #428]	; (8007fac <mem_trim+0x1f8>)
 8007e00:	f240 22d1 	movw	r2, #721	; 0x2d1
 8007e04:	496a      	ldr	r1, [pc, #424]	; (8007fb0 <mem_trim+0x1fc>)
 8007e06:	486b      	ldr	r0, [pc, #428]	; (8007fb4 <mem_trim+0x200>)
 8007e08:	f00c f84e 	bl	8013ea8 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8007e0c:	4b65      	ldr	r3, [pc, #404]	; (8007fa4 <mem_trim+0x1f0>)
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	687a      	ldr	r2, [r7, #4]
 8007e12:	429a      	cmp	r2, r3
 8007e14:	d304      	bcc.n	8007e20 <mem_trim+0x6c>
 8007e16:	4b64      	ldr	r3, [pc, #400]	; (8007fa8 <mem_trim+0x1f4>)
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	687a      	ldr	r2, [r7, #4]
 8007e1c:	429a      	cmp	r2, r3
 8007e1e:	d307      	bcc.n	8007e30 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8007e20:	f00a fb16 	bl	8012450 <sys_arch_protect>
 8007e24:	60b8      	str	r0, [r7, #8]
 8007e26:	68b8      	ldr	r0, [r7, #8]
 8007e28:	f00a fb20 	bl	801246c <sys_arch_unprotect>
    return rmem;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	e0b5      	b.n	8007f9c <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	3b08      	subs	r3, #8
 8007e34:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8007e36:	69b8      	ldr	r0, [r7, #24]
 8007e38:	f7ff fdea 	bl	8007a10 <mem_to_ptr>
 8007e3c:	4603      	mov	r3, r0
 8007e3e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8007e40:	69bb      	ldr	r3, [r7, #24]
 8007e42:	881a      	ldrh	r2, [r3, #0]
 8007e44:	8afb      	ldrh	r3, [r7, #22]
 8007e46:	1ad3      	subs	r3, r2, r3
 8007e48:	b29b      	uxth	r3, r3
 8007e4a:	3b08      	subs	r3, #8
 8007e4c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8007e4e:	8bfa      	ldrh	r2, [r7, #30]
 8007e50:	8abb      	ldrh	r3, [r7, #20]
 8007e52:	429a      	cmp	r2, r3
 8007e54:	d906      	bls.n	8007e64 <mem_trim+0xb0>
 8007e56:	4b55      	ldr	r3, [pc, #340]	; (8007fac <mem_trim+0x1f8>)
 8007e58:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8007e5c:	4956      	ldr	r1, [pc, #344]	; (8007fb8 <mem_trim+0x204>)
 8007e5e:	4855      	ldr	r0, [pc, #340]	; (8007fb4 <mem_trim+0x200>)
 8007e60:	f00c f822 	bl	8013ea8 <iprintf>
  if (newsize > size) {
 8007e64:	8bfa      	ldrh	r2, [r7, #30]
 8007e66:	8abb      	ldrh	r3, [r7, #20]
 8007e68:	429a      	cmp	r2, r3
 8007e6a:	d901      	bls.n	8007e70 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	e095      	b.n	8007f9c <mem_trim+0x1e8>
  }
  if (newsize == size) {
 8007e70:	8bfa      	ldrh	r2, [r7, #30]
 8007e72:	8abb      	ldrh	r3, [r7, #20]
 8007e74:	429a      	cmp	r2, r3
 8007e76:	d101      	bne.n	8007e7c <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	e08f      	b.n	8007f9c <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8007e7c:	484f      	ldr	r0, [pc, #316]	; (8007fbc <mem_trim+0x208>)
 8007e7e:	f00a faab 	bl	80123d8 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 8007e82:	69bb      	ldr	r3, [r7, #24]
 8007e84:	881b      	ldrh	r3, [r3, #0]
 8007e86:	4618      	mov	r0, r3
 8007e88:	f7ff fdb0 	bl	80079ec <ptr_to_mem>
 8007e8c:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8007e8e:	693b      	ldr	r3, [r7, #16]
 8007e90:	791b      	ldrb	r3, [r3, #4]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d13f      	bne.n	8007f16 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8007e96:	69bb      	ldr	r3, [r7, #24]
 8007e98:	881b      	ldrh	r3, [r3, #0]
 8007e9a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007e9e:	d106      	bne.n	8007eae <mem_trim+0xfa>
 8007ea0:	4b42      	ldr	r3, [pc, #264]	; (8007fac <mem_trim+0x1f8>)
 8007ea2:	f240 22f5 	movw	r2, #757	; 0x2f5
 8007ea6:	4946      	ldr	r1, [pc, #280]	; (8007fc0 <mem_trim+0x20c>)
 8007ea8:	4842      	ldr	r0, [pc, #264]	; (8007fb4 <mem_trim+0x200>)
 8007eaa:	f00b fffd 	bl	8013ea8 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8007eae:	693b      	ldr	r3, [r7, #16]
 8007eb0:	881b      	ldrh	r3, [r3, #0]
 8007eb2:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8007eb4:	8afa      	ldrh	r2, [r7, #22]
 8007eb6:	8bfb      	ldrh	r3, [r7, #30]
 8007eb8:	4413      	add	r3, r2
 8007eba:	b29b      	uxth	r3, r3
 8007ebc:	3308      	adds	r3, #8
 8007ebe:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8007ec0:	4b40      	ldr	r3, [pc, #256]	; (8007fc4 <mem_trim+0x210>)
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	693a      	ldr	r2, [r7, #16]
 8007ec6:	429a      	cmp	r2, r3
 8007ec8:	d106      	bne.n	8007ed8 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 8007eca:	89fb      	ldrh	r3, [r7, #14]
 8007ecc:	4618      	mov	r0, r3
 8007ece:	f7ff fd8d 	bl	80079ec <ptr_to_mem>
 8007ed2:	4603      	mov	r3, r0
 8007ed4:	4a3b      	ldr	r2, [pc, #236]	; (8007fc4 <mem_trim+0x210>)
 8007ed6:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8007ed8:	89fb      	ldrh	r3, [r7, #14]
 8007eda:	4618      	mov	r0, r3
 8007edc:	f7ff fd86 	bl	80079ec <ptr_to_mem>
 8007ee0:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8007ee2:	693b      	ldr	r3, [r7, #16]
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8007ee8:	693b      	ldr	r3, [r7, #16]
 8007eea:	89ba      	ldrh	r2, [r7, #12]
 8007eec:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8007eee:	693b      	ldr	r3, [r7, #16]
 8007ef0:	8afa      	ldrh	r2, [r7, #22]
 8007ef2:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8007ef4:	69bb      	ldr	r3, [r7, #24]
 8007ef6:	89fa      	ldrh	r2, [r7, #14]
 8007ef8:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8007efa:	693b      	ldr	r3, [r7, #16]
 8007efc:	881b      	ldrh	r3, [r3, #0]
 8007efe:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007f02:	d047      	beq.n	8007f94 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8007f04:	693b      	ldr	r3, [r7, #16]
 8007f06:	881b      	ldrh	r3, [r3, #0]
 8007f08:	4618      	mov	r0, r3
 8007f0a:	f7ff fd6f 	bl	80079ec <ptr_to_mem>
 8007f0e:	4602      	mov	r2, r0
 8007f10:	89fb      	ldrh	r3, [r7, #14]
 8007f12:	8053      	strh	r3, [r2, #2]
 8007f14:	e03e      	b.n	8007f94 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8007f16:	8bfb      	ldrh	r3, [r7, #30]
 8007f18:	f103 0214 	add.w	r2, r3, #20
 8007f1c:	8abb      	ldrh	r3, [r7, #20]
 8007f1e:	429a      	cmp	r2, r3
 8007f20:	d838      	bhi.n	8007f94 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8007f22:	8afa      	ldrh	r2, [r7, #22]
 8007f24:	8bfb      	ldrh	r3, [r7, #30]
 8007f26:	4413      	add	r3, r2
 8007f28:	b29b      	uxth	r3, r3
 8007f2a:	3308      	adds	r3, #8
 8007f2c:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8007f2e:	69bb      	ldr	r3, [r7, #24]
 8007f30:	881b      	ldrh	r3, [r3, #0]
 8007f32:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007f36:	d106      	bne.n	8007f46 <mem_trim+0x192>
 8007f38:	4b1c      	ldr	r3, [pc, #112]	; (8007fac <mem_trim+0x1f8>)
 8007f3a:	f240 3216 	movw	r2, #790	; 0x316
 8007f3e:	4920      	ldr	r1, [pc, #128]	; (8007fc0 <mem_trim+0x20c>)
 8007f40:	481c      	ldr	r0, [pc, #112]	; (8007fb4 <mem_trim+0x200>)
 8007f42:	f00b ffb1 	bl	8013ea8 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8007f46:	89fb      	ldrh	r3, [r7, #14]
 8007f48:	4618      	mov	r0, r3
 8007f4a:	f7ff fd4f 	bl	80079ec <ptr_to_mem>
 8007f4e:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8007f50:	4b1c      	ldr	r3, [pc, #112]	; (8007fc4 <mem_trim+0x210>)
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	693a      	ldr	r2, [r7, #16]
 8007f56:	429a      	cmp	r2, r3
 8007f58:	d202      	bcs.n	8007f60 <mem_trim+0x1ac>
      lfree = mem2;
 8007f5a:	4a1a      	ldr	r2, [pc, #104]	; (8007fc4 <mem_trim+0x210>)
 8007f5c:	693b      	ldr	r3, [r7, #16]
 8007f5e:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8007f60:	693b      	ldr	r3, [r7, #16]
 8007f62:	2200      	movs	r2, #0
 8007f64:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8007f66:	69bb      	ldr	r3, [r7, #24]
 8007f68:	881a      	ldrh	r2, [r3, #0]
 8007f6a:	693b      	ldr	r3, [r7, #16]
 8007f6c:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8007f6e:	693b      	ldr	r3, [r7, #16]
 8007f70:	8afa      	ldrh	r2, [r7, #22]
 8007f72:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8007f74:	69bb      	ldr	r3, [r7, #24]
 8007f76:	89fa      	ldrh	r2, [r7, #14]
 8007f78:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8007f7a:	693b      	ldr	r3, [r7, #16]
 8007f7c:	881b      	ldrh	r3, [r3, #0]
 8007f7e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007f82:	d007      	beq.n	8007f94 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8007f84:	693b      	ldr	r3, [r7, #16]
 8007f86:	881b      	ldrh	r3, [r3, #0]
 8007f88:	4618      	mov	r0, r3
 8007f8a:	f7ff fd2f 	bl	80079ec <ptr_to_mem>
 8007f8e:	4602      	mov	r2, r0
 8007f90:	89fb      	ldrh	r3, [r7, #14]
 8007f92:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8007f94:	4809      	ldr	r0, [pc, #36]	; (8007fbc <mem_trim+0x208>)
 8007f96:	f00a fa2e 	bl	80123f6 <sys_mutex_unlock>
  return rmem;
 8007f9a:	687b      	ldr	r3, [r7, #4]
}
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	3720      	adds	r7, #32
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	bd80      	pop	{r7, pc}
 8007fa4:	2000512c 	.word	0x2000512c
 8007fa8:	20005130 	.word	0x20005130
 8007fac:	08014f68 	.word	0x08014f68
 8007fb0:	080150f4 	.word	0x080150f4
 8007fb4:	08014fb0 	.word	0x08014fb0
 8007fb8:	0801510c 	.word	0x0801510c
 8007fbc:	20005134 	.word	0x20005134
 8007fc0:	0801512c 	.word	0x0801512c
 8007fc4:	20005138 	.word	0x20005138

08007fc8 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b088      	sub	sp, #32
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	4603      	mov	r3, r0
 8007fd0:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8007fd2:	88fb      	ldrh	r3, [r7, #6]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d101      	bne.n	8007fdc <mem_malloc+0x14>
    return NULL;
 8007fd8:	2300      	movs	r3, #0
 8007fda:	e0e2      	b.n	80081a2 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8007fdc:	88fb      	ldrh	r3, [r7, #6]
 8007fde:	3303      	adds	r3, #3
 8007fe0:	b29b      	uxth	r3, r3
 8007fe2:	f023 0303 	bic.w	r3, r3, #3
 8007fe6:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8007fe8:	8bbb      	ldrh	r3, [r7, #28]
 8007fea:	2b0b      	cmp	r3, #11
 8007fec:	d801      	bhi.n	8007ff2 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8007fee:	230c      	movs	r3, #12
 8007ff0:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8007ff2:	8bbb      	ldrh	r3, [r7, #28]
 8007ff4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007ff8:	d803      	bhi.n	8008002 <mem_malloc+0x3a>
 8007ffa:	8bba      	ldrh	r2, [r7, #28]
 8007ffc:	88fb      	ldrh	r3, [r7, #6]
 8007ffe:	429a      	cmp	r2, r3
 8008000:	d201      	bcs.n	8008006 <mem_malloc+0x3e>
    return NULL;
 8008002:	2300      	movs	r3, #0
 8008004:	e0cd      	b.n	80081a2 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8008006:	4869      	ldr	r0, [pc, #420]	; (80081ac <mem_malloc+0x1e4>)
 8008008:	f00a f9e6 	bl	80123d8 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800800c:	4b68      	ldr	r3, [pc, #416]	; (80081b0 <mem_malloc+0x1e8>)
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	4618      	mov	r0, r3
 8008012:	f7ff fcfd 	bl	8007a10 <mem_to_ptr>
 8008016:	4603      	mov	r3, r0
 8008018:	83fb      	strh	r3, [r7, #30]
 800801a:	e0b7      	b.n	800818c <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800801c:	8bfb      	ldrh	r3, [r7, #30]
 800801e:	4618      	mov	r0, r3
 8008020:	f7ff fce4 	bl	80079ec <ptr_to_mem>
 8008024:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8008026:	697b      	ldr	r3, [r7, #20]
 8008028:	791b      	ldrb	r3, [r3, #4]
 800802a:	2b00      	cmp	r3, #0
 800802c:	f040 80a7 	bne.w	800817e <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8008030:	697b      	ldr	r3, [r7, #20]
 8008032:	881b      	ldrh	r3, [r3, #0]
 8008034:	461a      	mov	r2, r3
 8008036:	8bfb      	ldrh	r3, [r7, #30]
 8008038:	1ad3      	subs	r3, r2, r3
 800803a:	f1a3 0208 	sub.w	r2, r3, #8
 800803e:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8008040:	429a      	cmp	r2, r3
 8008042:	f0c0 809c 	bcc.w	800817e <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8008046:	697b      	ldr	r3, [r7, #20]
 8008048:	881b      	ldrh	r3, [r3, #0]
 800804a:	461a      	mov	r2, r3
 800804c:	8bfb      	ldrh	r3, [r7, #30]
 800804e:	1ad3      	subs	r3, r2, r3
 8008050:	f1a3 0208 	sub.w	r2, r3, #8
 8008054:	8bbb      	ldrh	r3, [r7, #28]
 8008056:	3314      	adds	r3, #20
 8008058:	429a      	cmp	r2, r3
 800805a:	d333      	bcc.n	80080c4 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800805c:	8bfa      	ldrh	r2, [r7, #30]
 800805e:	8bbb      	ldrh	r3, [r7, #28]
 8008060:	4413      	add	r3, r2
 8008062:	b29b      	uxth	r3, r3
 8008064:	3308      	adds	r3, #8
 8008066:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8008068:	8a7b      	ldrh	r3, [r7, #18]
 800806a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800806e:	d106      	bne.n	800807e <mem_malloc+0xb6>
 8008070:	4b50      	ldr	r3, [pc, #320]	; (80081b4 <mem_malloc+0x1ec>)
 8008072:	f240 3287 	movw	r2, #903	; 0x387
 8008076:	4950      	ldr	r1, [pc, #320]	; (80081b8 <mem_malloc+0x1f0>)
 8008078:	4850      	ldr	r0, [pc, #320]	; (80081bc <mem_malloc+0x1f4>)
 800807a:	f00b ff15 	bl	8013ea8 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800807e:	8a7b      	ldrh	r3, [r7, #18]
 8008080:	4618      	mov	r0, r3
 8008082:	f7ff fcb3 	bl	80079ec <ptr_to_mem>
 8008086:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	2200      	movs	r2, #0
 800808c:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800808e:	697b      	ldr	r3, [r7, #20]
 8008090:	881a      	ldrh	r2, [r3, #0]
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	8bfa      	ldrh	r2, [r7, #30]
 800809a:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800809c:	697b      	ldr	r3, [r7, #20]
 800809e:	8a7a      	ldrh	r2, [r7, #18]
 80080a0:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 80080a2:	697b      	ldr	r3, [r7, #20]
 80080a4:	2201      	movs	r2, #1
 80080a6:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	881b      	ldrh	r3, [r3, #0]
 80080ac:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80080b0:	d00b      	beq.n	80080ca <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	881b      	ldrh	r3, [r3, #0]
 80080b6:	4618      	mov	r0, r3
 80080b8:	f7ff fc98 	bl	80079ec <ptr_to_mem>
 80080bc:	4602      	mov	r2, r0
 80080be:	8a7b      	ldrh	r3, [r7, #18]
 80080c0:	8053      	strh	r3, [r2, #2]
 80080c2:	e002      	b.n	80080ca <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 80080c4:	697b      	ldr	r3, [r7, #20]
 80080c6:	2201      	movs	r2, #1
 80080c8:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 80080ca:	4b39      	ldr	r3, [pc, #228]	; (80081b0 <mem_malloc+0x1e8>)
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	697a      	ldr	r2, [r7, #20]
 80080d0:	429a      	cmp	r2, r3
 80080d2:	d127      	bne.n	8008124 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 80080d4:	4b36      	ldr	r3, [pc, #216]	; (80081b0 <mem_malloc+0x1e8>)
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 80080da:	e005      	b.n	80080e8 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 80080dc:	69bb      	ldr	r3, [r7, #24]
 80080de:	881b      	ldrh	r3, [r3, #0]
 80080e0:	4618      	mov	r0, r3
 80080e2:	f7ff fc83 	bl	80079ec <ptr_to_mem>
 80080e6:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 80080e8:	69bb      	ldr	r3, [r7, #24]
 80080ea:	791b      	ldrb	r3, [r3, #4]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d004      	beq.n	80080fa <mem_malloc+0x132>
 80080f0:	4b33      	ldr	r3, [pc, #204]	; (80081c0 <mem_malloc+0x1f8>)
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	69ba      	ldr	r2, [r7, #24]
 80080f6:	429a      	cmp	r2, r3
 80080f8:	d1f0      	bne.n	80080dc <mem_malloc+0x114>
          }
          lfree = cur;
 80080fa:	4a2d      	ldr	r2, [pc, #180]	; (80081b0 <mem_malloc+0x1e8>)
 80080fc:	69bb      	ldr	r3, [r7, #24]
 80080fe:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8008100:	4b2b      	ldr	r3, [pc, #172]	; (80081b0 <mem_malloc+0x1e8>)
 8008102:	681a      	ldr	r2, [r3, #0]
 8008104:	4b2e      	ldr	r3, [pc, #184]	; (80081c0 <mem_malloc+0x1f8>)
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	429a      	cmp	r2, r3
 800810a:	d00b      	beq.n	8008124 <mem_malloc+0x15c>
 800810c:	4b28      	ldr	r3, [pc, #160]	; (80081b0 <mem_malloc+0x1e8>)
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	791b      	ldrb	r3, [r3, #4]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d006      	beq.n	8008124 <mem_malloc+0x15c>
 8008116:	4b27      	ldr	r3, [pc, #156]	; (80081b4 <mem_malloc+0x1ec>)
 8008118:	f240 32b5 	movw	r2, #949	; 0x3b5
 800811c:	4929      	ldr	r1, [pc, #164]	; (80081c4 <mem_malloc+0x1fc>)
 800811e:	4827      	ldr	r0, [pc, #156]	; (80081bc <mem_malloc+0x1f4>)
 8008120:	f00b fec2 	bl	8013ea8 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8008124:	4821      	ldr	r0, [pc, #132]	; (80081ac <mem_malloc+0x1e4>)
 8008126:	f00a f966 	bl	80123f6 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800812a:	8bba      	ldrh	r2, [r7, #28]
 800812c:	697b      	ldr	r3, [r7, #20]
 800812e:	4413      	add	r3, r2
 8008130:	3308      	adds	r3, #8
 8008132:	4a23      	ldr	r2, [pc, #140]	; (80081c0 <mem_malloc+0x1f8>)
 8008134:	6812      	ldr	r2, [r2, #0]
 8008136:	4293      	cmp	r3, r2
 8008138:	d906      	bls.n	8008148 <mem_malloc+0x180>
 800813a:	4b1e      	ldr	r3, [pc, #120]	; (80081b4 <mem_malloc+0x1ec>)
 800813c:	f240 32b9 	movw	r2, #953	; 0x3b9
 8008140:	4921      	ldr	r1, [pc, #132]	; (80081c8 <mem_malloc+0x200>)
 8008142:	481e      	ldr	r0, [pc, #120]	; (80081bc <mem_malloc+0x1f4>)
 8008144:	f00b feb0 	bl	8013ea8 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8008148:	697b      	ldr	r3, [r7, #20]
 800814a:	f003 0303 	and.w	r3, r3, #3
 800814e:	2b00      	cmp	r3, #0
 8008150:	d006      	beq.n	8008160 <mem_malloc+0x198>
 8008152:	4b18      	ldr	r3, [pc, #96]	; (80081b4 <mem_malloc+0x1ec>)
 8008154:	f240 32bb 	movw	r2, #955	; 0x3bb
 8008158:	491c      	ldr	r1, [pc, #112]	; (80081cc <mem_malloc+0x204>)
 800815a:	4818      	ldr	r0, [pc, #96]	; (80081bc <mem_malloc+0x1f4>)
 800815c:	f00b fea4 	bl	8013ea8 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8008160:	697b      	ldr	r3, [r7, #20]
 8008162:	f003 0303 	and.w	r3, r3, #3
 8008166:	2b00      	cmp	r3, #0
 8008168:	d006      	beq.n	8008178 <mem_malloc+0x1b0>
 800816a:	4b12      	ldr	r3, [pc, #72]	; (80081b4 <mem_malloc+0x1ec>)
 800816c:	f240 32bd 	movw	r2, #957	; 0x3bd
 8008170:	4917      	ldr	r1, [pc, #92]	; (80081d0 <mem_malloc+0x208>)
 8008172:	4812      	ldr	r0, [pc, #72]	; (80081bc <mem_malloc+0x1f4>)
 8008174:	f00b fe98 	bl	8013ea8 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8008178:	697b      	ldr	r3, [r7, #20]
 800817a:	3308      	adds	r3, #8
 800817c:	e011      	b.n	80081a2 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800817e:	8bfb      	ldrh	r3, [r7, #30]
 8008180:	4618      	mov	r0, r3
 8008182:	f7ff fc33 	bl	80079ec <ptr_to_mem>
 8008186:	4603      	mov	r3, r0
 8008188:	881b      	ldrh	r3, [r3, #0]
 800818a:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800818c:	8bfa      	ldrh	r2, [r7, #30]
 800818e:	8bbb      	ldrh	r3, [r7, #28]
 8008190:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8008194:	429a      	cmp	r2, r3
 8008196:	f4ff af41 	bcc.w	800801c <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800819a:	4804      	ldr	r0, [pc, #16]	; (80081ac <mem_malloc+0x1e4>)
 800819c:	f00a f92b 	bl	80123f6 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 80081a0:	2300      	movs	r3, #0
}
 80081a2:	4618      	mov	r0, r3
 80081a4:	3720      	adds	r7, #32
 80081a6:	46bd      	mov	sp, r7
 80081a8:	bd80      	pop	{r7, pc}
 80081aa:	bf00      	nop
 80081ac:	20005134 	.word	0x20005134
 80081b0:	20005138 	.word	0x20005138
 80081b4:	08014f68 	.word	0x08014f68
 80081b8:	0801512c 	.word	0x0801512c
 80081bc:	08014fb0 	.word	0x08014fb0
 80081c0:	20005130 	.word	0x20005130
 80081c4:	08015140 	.word	0x08015140
 80081c8:	0801515c 	.word	0x0801515c
 80081cc:	0801518c 	.word	0x0801518c
 80081d0:	080151bc 	.word	0x080151bc

080081d4 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 80081d4:	b480      	push	{r7}
 80081d6:	b085      	sub	sp, #20
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	689b      	ldr	r3, [r3, #8]
 80081e0:	2200      	movs	r2, #0
 80081e2:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	685b      	ldr	r3, [r3, #4]
 80081e8:	3303      	adds	r3, #3
 80081ea:	f023 0303 	bic.w	r3, r3, #3
 80081ee:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 80081f0:	2300      	movs	r3, #0
 80081f2:	60fb      	str	r3, [r7, #12]
 80081f4:	e011      	b.n	800821a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	689b      	ldr	r3, [r3, #8]
 80081fa:	681a      	ldr	r2, [r3, #0]
 80081fc:	68bb      	ldr	r3, [r7, #8]
 80081fe:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	689b      	ldr	r3, [r3, #8]
 8008204:	68ba      	ldr	r2, [r7, #8]
 8008206:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	881b      	ldrh	r3, [r3, #0]
 800820c:	461a      	mov	r2, r3
 800820e:	68bb      	ldr	r3, [r7, #8]
 8008210:	4413      	add	r3, r2
 8008212:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	3301      	adds	r3, #1
 8008218:	60fb      	str	r3, [r7, #12]
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	885b      	ldrh	r3, [r3, #2]
 800821e:	461a      	mov	r2, r3
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	4293      	cmp	r3, r2
 8008224:	dbe7      	blt.n	80081f6 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8008226:	bf00      	nop
 8008228:	bf00      	nop
 800822a:	3714      	adds	r7, #20
 800822c:	46bd      	mov	sp, r7
 800822e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008232:	4770      	bx	lr

08008234 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8008234:	b580      	push	{r7, lr}
 8008236:	b082      	sub	sp, #8
 8008238:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800823a:	2300      	movs	r3, #0
 800823c:	80fb      	strh	r3, [r7, #6]
 800823e:	e009      	b.n	8008254 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8008240:	88fb      	ldrh	r3, [r7, #6]
 8008242:	4a08      	ldr	r2, [pc, #32]	; (8008264 <memp_init+0x30>)
 8008244:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008248:	4618      	mov	r0, r3
 800824a:	f7ff ffc3 	bl	80081d4 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800824e:	88fb      	ldrh	r3, [r7, #6]
 8008250:	3301      	adds	r3, #1
 8008252:	80fb      	strh	r3, [r7, #6]
 8008254:	88fb      	ldrh	r3, [r7, #6]
 8008256:	2b0c      	cmp	r3, #12
 8008258:	d9f2      	bls.n	8008240 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800825a:	bf00      	nop
 800825c:	bf00      	nop
 800825e:	3708      	adds	r7, #8
 8008260:	46bd      	mov	sp, r7
 8008262:	bd80      	pop	{r7, pc}
 8008264:	08017a5c 	.word	0x08017a5c

08008268 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8008268:	b580      	push	{r7, lr}
 800826a:	b084      	sub	sp, #16
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8008270:	f00a f8ee 	bl	8012450 <sys_arch_protect>
 8008274:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	689b      	ldr	r3, [r3, #8]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800827e:	68bb      	ldr	r3, [r7, #8]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d015      	beq.n	80082b0 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	689b      	ldr	r3, [r3, #8]
 8008288:	68ba      	ldr	r2, [r7, #8]
 800828a:	6812      	ldr	r2, [r2, #0]
 800828c:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800828e:	68bb      	ldr	r3, [r7, #8]
 8008290:	f003 0303 	and.w	r3, r3, #3
 8008294:	2b00      	cmp	r3, #0
 8008296:	d006      	beq.n	80082a6 <do_memp_malloc_pool+0x3e>
 8008298:	4b09      	ldr	r3, [pc, #36]	; (80082c0 <do_memp_malloc_pool+0x58>)
 800829a:	f44f 728c 	mov.w	r2, #280	; 0x118
 800829e:	4909      	ldr	r1, [pc, #36]	; (80082c4 <do_memp_malloc_pool+0x5c>)
 80082a0:	4809      	ldr	r0, [pc, #36]	; (80082c8 <do_memp_malloc_pool+0x60>)
 80082a2:	f00b fe01 	bl	8013ea8 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 80082a6:	68f8      	ldr	r0, [r7, #12]
 80082a8:	f00a f8e0 	bl	801246c <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 80082ac:	68bb      	ldr	r3, [r7, #8]
 80082ae:	e003      	b.n	80082b8 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 80082b0:	68f8      	ldr	r0, [r7, #12]
 80082b2:	f00a f8db 	bl	801246c <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 80082b6:	2300      	movs	r3, #0
}
 80082b8:	4618      	mov	r0, r3
 80082ba:	3710      	adds	r7, #16
 80082bc:	46bd      	mov	sp, r7
 80082be:	bd80      	pop	{r7, pc}
 80082c0:	080151e0 	.word	0x080151e0
 80082c4:	08015210 	.word	0x08015210
 80082c8:	08015234 	.word	0x08015234

080082cc <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b084      	sub	sp, #16
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	4603      	mov	r3, r0
 80082d4:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80082d6:	79fb      	ldrb	r3, [r7, #7]
 80082d8:	2b0c      	cmp	r3, #12
 80082da:	d908      	bls.n	80082ee <memp_malloc+0x22>
 80082dc:	4b0a      	ldr	r3, [pc, #40]	; (8008308 <memp_malloc+0x3c>)
 80082de:	f240 1257 	movw	r2, #343	; 0x157
 80082e2:	490a      	ldr	r1, [pc, #40]	; (800830c <memp_malloc+0x40>)
 80082e4:	480a      	ldr	r0, [pc, #40]	; (8008310 <memp_malloc+0x44>)
 80082e6:	f00b fddf 	bl	8013ea8 <iprintf>
 80082ea:	2300      	movs	r3, #0
 80082ec:	e008      	b.n	8008300 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 80082ee:	79fb      	ldrb	r3, [r7, #7]
 80082f0:	4a08      	ldr	r2, [pc, #32]	; (8008314 <memp_malloc+0x48>)
 80082f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80082f6:	4618      	mov	r0, r3
 80082f8:	f7ff ffb6 	bl	8008268 <do_memp_malloc_pool>
 80082fc:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 80082fe:	68fb      	ldr	r3, [r7, #12]
}
 8008300:	4618      	mov	r0, r3
 8008302:	3710      	adds	r7, #16
 8008304:	46bd      	mov	sp, r7
 8008306:	bd80      	pop	{r7, pc}
 8008308:	080151e0 	.word	0x080151e0
 800830c:	08015270 	.word	0x08015270
 8008310:	08015234 	.word	0x08015234
 8008314:	08017a5c 	.word	0x08017a5c

08008318 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b084      	sub	sp, #16
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
 8008320:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8008322:	683b      	ldr	r3, [r7, #0]
 8008324:	f003 0303 	and.w	r3, r3, #3
 8008328:	2b00      	cmp	r3, #0
 800832a:	d006      	beq.n	800833a <do_memp_free_pool+0x22>
 800832c:	4b0d      	ldr	r3, [pc, #52]	; (8008364 <do_memp_free_pool+0x4c>)
 800832e:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8008332:	490d      	ldr	r1, [pc, #52]	; (8008368 <do_memp_free_pool+0x50>)
 8008334:	480d      	ldr	r0, [pc, #52]	; (800836c <do_memp_free_pool+0x54>)
 8008336:	f00b fdb7 	bl	8013ea8 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800833e:	f00a f887 	bl	8012450 <sys_arch_protect>
 8008342:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	689b      	ldr	r3, [r3, #8]
 8008348:	681a      	ldr	r2, [r3, #0]
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	689b      	ldr	r3, [r3, #8]
 8008352:	68fa      	ldr	r2, [r7, #12]
 8008354:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 8008356:	68b8      	ldr	r0, [r7, #8]
 8008358:	f00a f888 	bl	801246c <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800835c:	bf00      	nop
 800835e:	3710      	adds	r7, #16
 8008360:	46bd      	mov	sp, r7
 8008362:	bd80      	pop	{r7, pc}
 8008364:	080151e0 	.word	0x080151e0
 8008368:	08015290 	.word	0x08015290
 800836c:	08015234 	.word	0x08015234

08008370 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b082      	sub	sp, #8
 8008374:	af00      	add	r7, sp, #0
 8008376:	4603      	mov	r3, r0
 8008378:	6039      	str	r1, [r7, #0]
 800837a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800837c:	79fb      	ldrb	r3, [r7, #7]
 800837e:	2b0c      	cmp	r3, #12
 8008380:	d907      	bls.n	8008392 <memp_free+0x22>
 8008382:	4b0c      	ldr	r3, [pc, #48]	; (80083b4 <memp_free+0x44>)
 8008384:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8008388:	490b      	ldr	r1, [pc, #44]	; (80083b8 <memp_free+0x48>)
 800838a:	480c      	ldr	r0, [pc, #48]	; (80083bc <memp_free+0x4c>)
 800838c:	f00b fd8c 	bl	8013ea8 <iprintf>
 8008390:	e00c      	b.n	80083ac <memp_free+0x3c>

  if (mem == NULL) {
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d008      	beq.n	80083aa <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8008398:	79fb      	ldrb	r3, [r7, #7]
 800839a:	4a09      	ldr	r2, [pc, #36]	; (80083c0 <memp_free+0x50>)
 800839c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80083a0:	6839      	ldr	r1, [r7, #0]
 80083a2:	4618      	mov	r0, r3
 80083a4:	f7ff ffb8 	bl	8008318 <do_memp_free_pool>
 80083a8:	e000      	b.n	80083ac <memp_free+0x3c>
    return;
 80083aa:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 80083ac:	3708      	adds	r7, #8
 80083ae:	46bd      	mov	sp, r7
 80083b0:	bd80      	pop	{r7, pc}
 80083b2:	bf00      	nop
 80083b4:	080151e0 	.word	0x080151e0
 80083b8:	080152b0 	.word	0x080152b0
 80083bc:	08015234 	.word	0x08015234
 80083c0:	08017a5c 	.word	0x08017a5c

080083c4 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 80083c4:	b480      	push	{r7}
 80083c6:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 80083c8:	bf00      	nop
 80083ca:	46bd      	mov	sp, r7
 80083cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d0:	4770      	bx	lr
	...

080083d4 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b086      	sub	sp, #24
 80083d8:	af00      	add	r7, sp, #0
 80083da:	60f8      	str	r0, [r7, #12]
 80083dc:	60b9      	str	r1, [r7, #8]
 80083de:	607a      	str	r2, [r7, #4]
 80083e0:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d108      	bne.n	80083fa <netif_add+0x26>
 80083e8:	4b57      	ldr	r3, [pc, #348]	; (8008548 <netif_add+0x174>)
 80083ea:	f240 1227 	movw	r2, #295	; 0x127
 80083ee:	4957      	ldr	r1, [pc, #348]	; (800854c <netif_add+0x178>)
 80083f0:	4857      	ldr	r0, [pc, #348]	; (8008550 <netif_add+0x17c>)
 80083f2:	f00b fd59 	bl	8013ea8 <iprintf>
 80083f6:	2300      	movs	r3, #0
 80083f8:	e0a2      	b.n	8008540 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80083fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d108      	bne.n	8008412 <netif_add+0x3e>
 8008400:	4b51      	ldr	r3, [pc, #324]	; (8008548 <netif_add+0x174>)
 8008402:	f44f 7294 	mov.w	r2, #296	; 0x128
 8008406:	4953      	ldr	r1, [pc, #332]	; (8008554 <netif_add+0x180>)
 8008408:	4851      	ldr	r0, [pc, #324]	; (8008550 <netif_add+0x17c>)
 800840a:	f00b fd4d 	bl	8013ea8 <iprintf>
 800840e:	2300      	movs	r3, #0
 8008410:	e096      	b.n	8008540 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8008412:	68bb      	ldr	r3, [r7, #8]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d101      	bne.n	800841c <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8008418:	4b4f      	ldr	r3, [pc, #316]	; (8008558 <netif_add+0x184>)
 800841a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d101      	bne.n	8008426 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8008422:	4b4d      	ldr	r3, [pc, #308]	; (8008558 <netif_add+0x184>)
 8008424:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8008426:	683b      	ldr	r3, [r7, #0]
 8008428:	2b00      	cmp	r3, #0
 800842a:	d101      	bne.n	8008430 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800842c:	4b4a      	ldr	r3, [pc, #296]	; (8008558 <netif_add+0x184>)
 800842e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	2200      	movs	r2, #0
 8008434:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	2200      	movs	r2, #0
 800843a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	2200      	movs	r2, #0
 8008440:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	4a45      	ldr	r2, [pc, #276]	; (800855c <netif_add+0x188>)
 8008446:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	2200      	movs	r2, #0
 800844c:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	2200      	movs	r2, #0
 8008452:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	2200      	movs	r2, #0
 800845a:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	6a3a      	ldr	r2, [r7, #32]
 8008460:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8008462:	4b3f      	ldr	r3, [pc, #252]	; (8008560 <netif_add+0x18c>)
 8008464:	781a      	ldrb	r2, [r3, #0]
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008470:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	687a      	ldr	r2, [r7, #4]
 8008476:	68b9      	ldr	r1, [r7, #8]
 8008478:	68f8      	ldr	r0, [r7, #12]
 800847a:	f000 f913 	bl	80086a4 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800847e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008480:	68f8      	ldr	r0, [r7, #12]
 8008482:	4798      	blx	r3
 8008484:	4603      	mov	r3, r0
 8008486:	2b00      	cmp	r3, #0
 8008488:	d001      	beq.n	800848e <netif_add+0xba>
    return NULL;
 800848a:	2300      	movs	r3, #0
 800848c:	e058      	b.n	8008540 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008494:	2bff      	cmp	r3, #255	; 0xff
 8008496:	d103      	bne.n	80084a0 <netif_add+0xcc>
        netif->num = 0;
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	2200      	movs	r2, #0
 800849c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 80084a0:	2300      	movs	r3, #0
 80084a2:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80084a4:	4b2f      	ldr	r3, [pc, #188]	; (8008564 <netif_add+0x190>)
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	617b      	str	r3, [r7, #20]
 80084aa:	e02b      	b.n	8008504 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80084ac:	697a      	ldr	r2, [r7, #20]
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	429a      	cmp	r2, r3
 80084b2:	d106      	bne.n	80084c2 <netif_add+0xee>
 80084b4:	4b24      	ldr	r3, [pc, #144]	; (8008548 <netif_add+0x174>)
 80084b6:	f240 128b 	movw	r2, #395	; 0x18b
 80084ba:	492b      	ldr	r1, [pc, #172]	; (8008568 <netif_add+0x194>)
 80084bc:	4824      	ldr	r0, [pc, #144]	; (8008550 <netif_add+0x17c>)
 80084be:	f00b fcf3 	bl	8013ea8 <iprintf>
        num_netifs++;
 80084c2:	693b      	ldr	r3, [r7, #16]
 80084c4:	3301      	adds	r3, #1
 80084c6:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 80084c8:	693b      	ldr	r3, [r7, #16]
 80084ca:	2bff      	cmp	r3, #255	; 0xff
 80084cc:	dd06      	ble.n	80084dc <netif_add+0x108>
 80084ce:	4b1e      	ldr	r3, [pc, #120]	; (8008548 <netif_add+0x174>)
 80084d0:	f240 128d 	movw	r2, #397	; 0x18d
 80084d4:	4925      	ldr	r1, [pc, #148]	; (800856c <netif_add+0x198>)
 80084d6:	481e      	ldr	r0, [pc, #120]	; (8008550 <netif_add+0x17c>)
 80084d8:	f00b fce6 	bl	8013ea8 <iprintf>
        if (netif2->num == netif->num) {
 80084dc:	697b      	ldr	r3, [r7, #20]
 80084de:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80084e8:	429a      	cmp	r2, r3
 80084ea:	d108      	bne.n	80084fe <netif_add+0x12a>
          netif->num++;
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80084f2:	3301      	adds	r3, #1
 80084f4:	b2da      	uxtb	r2, r3
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 80084fc:	e005      	b.n	800850a <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80084fe:	697b      	ldr	r3, [r7, #20]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	617b      	str	r3, [r7, #20]
 8008504:	697b      	ldr	r3, [r7, #20]
 8008506:	2b00      	cmp	r3, #0
 8008508:	d1d0      	bne.n	80084ac <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800850a:	697b      	ldr	r3, [r7, #20]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d1be      	bne.n	800848e <netif_add+0xba>
  }
  if (netif->num == 254) {
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008516:	2bfe      	cmp	r3, #254	; 0xfe
 8008518:	d103      	bne.n	8008522 <netif_add+0x14e>
    netif_num = 0;
 800851a:	4b11      	ldr	r3, [pc, #68]	; (8008560 <netif_add+0x18c>)
 800851c:	2200      	movs	r2, #0
 800851e:	701a      	strb	r2, [r3, #0]
 8008520:	e006      	b.n	8008530 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008528:	3301      	adds	r3, #1
 800852a:	b2da      	uxtb	r2, r3
 800852c:	4b0c      	ldr	r3, [pc, #48]	; (8008560 <netif_add+0x18c>)
 800852e:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8008530:	4b0c      	ldr	r3, [pc, #48]	; (8008564 <netif_add+0x190>)
 8008532:	681a      	ldr	r2, [r3, #0]
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8008538:	4a0a      	ldr	r2, [pc, #40]	; (8008564 <netif_add+0x190>)
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800853e:	68fb      	ldr	r3, [r7, #12]
}
 8008540:	4618      	mov	r0, r3
 8008542:	3718      	adds	r7, #24
 8008544:	46bd      	mov	sp, r7
 8008546:	bd80      	pop	{r7, pc}
 8008548:	080152cc 	.word	0x080152cc
 800854c:	08015360 	.word	0x08015360
 8008550:	0801531c 	.word	0x0801531c
 8008554:	0801537c 	.word	0x0801537c
 8008558:	08017ad0 	.word	0x08017ad0
 800855c:	0800897f 	.word	0x0800897f
 8008560:	20008210 	.word	0x20008210
 8008564:	20008208 	.word	0x20008208
 8008568:	080153a0 	.word	0x080153a0
 800856c:	080153b4 	.word	0x080153b4

08008570 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8008570:	b580      	push	{r7, lr}
 8008572:	b082      	sub	sp, #8
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
 8008578:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800857a:	6839      	ldr	r1, [r7, #0]
 800857c:	6878      	ldr	r0, [r7, #4]
 800857e:	f002 fe2d 	bl	800b1dc <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8008582:	6839      	ldr	r1, [r7, #0]
 8008584:	6878      	ldr	r0, [r7, #4]
 8008586:	f007 fb99 	bl	800fcbc <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800858a:	bf00      	nop
 800858c:	3708      	adds	r7, #8
 800858e:	46bd      	mov	sp, r7
 8008590:	bd80      	pop	{r7, pc}
	...

08008594 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b086      	sub	sp, #24
 8008598:	af00      	add	r7, sp, #0
 800859a:	60f8      	str	r0, [r7, #12]
 800859c:	60b9      	str	r1, [r7, #8]
 800859e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 80085a0:	68bb      	ldr	r3, [r7, #8]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d106      	bne.n	80085b4 <netif_do_set_ipaddr+0x20>
 80085a6:	4b1d      	ldr	r3, [pc, #116]	; (800861c <netif_do_set_ipaddr+0x88>)
 80085a8:	f240 12cb 	movw	r2, #459	; 0x1cb
 80085ac:	491c      	ldr	r1, [pc, #112]	; (8008620 <netif_do_set_ipaddr+0x8c>)
 80085ae:	481d      	ldr	r0, [pc, #116]	; (8008624 <netif_do_set_ipaddr+0x90>)
 80085b0:	f00b fc7a 	bl	8013ea8 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d106      	bne.n	80085c8 <netif_do_set_ipaddr+0x34>
 80085ba:	4b18      	ldr	r3, [pc, #96]	; (800861c <netif_do_set_ipaddr+0x88>)
 80085bc:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 80085c0:	4917      	ldr	r1, [pc, #92]	; (8008620 <netif_do_set_ipaddr+0x8c>)
 80085c2:	4818      	ldr	r0, [pc, #96]	; (8008624 <netif_do_set_ipaddr+0x90>)
 80085c4:	f00b fc70 	bl	8013ea8 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 80085c8:	68bb      	ldr	r3, [r7, #8]
 80085ca:	681a      	ldr	r2, [r3, #0]
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	3304      	adds	r3, #4
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	429a      	cmp	r2, r3
 80085d4:	d01c      	beq.n	8008610 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 80085d6:	68bb      	ldr	r3, [r7, #8]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	3304      	adds	r3, #4
 80085e0:	681a      	ldr	r2, [r3, #0]
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 80085e6:	f107 0314 	add.w	r3, r7, #20
 80085ea:	4619      	mov	r1, r3
 80085ec:	6878      	ldr	r0, [r7, #4]
 80085ee:	f7ff ffbf 	bl	8008570 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80085f2:	68bb      	ldr	r3, [r7, #8]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d002      	beq.n	80085fe <netif_do_set_ipaddr+0x6a>
 80085f8:	68bb      	ldr	r3, [r7, #8]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	e000      	b.n	8008600 <netif_do_set_ipaddr+0x6c>
 80085fe:	2300      	movs	r3, #0
 8008600:	68fa      	ldr	r2, [r7, #12]
 8008602:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8008604:	2101      	movs	r1, #1
 8008606:	68f8      	ldr	r0, [r7, #12]
 8008608:	f000 f8d2 	bl	80087b0 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800860c:	2301      	movs	r3, #1
 800860e:	e000      	b.n	8008612 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8008610:	2300      	movs	r3, #0
}
 8008612:	4618      	mov	r0, r3
 8008614:	3718      	adds	r7, #24
 8008616:	46bd      	mov	sp, r7
 8008618:	bd80      	pop	{r7, pc}
 800861a:	bf00      	nop
 800861c:	080152cc 	.word	0x080152cc
 8008620:	080153e4 	.word	0x080153e4
 8008624:	0801531c 	.word	0x0801531c

08008628 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8008628:	b480      	push	{r7}
 800862a:	b085      	sub	sp, #20
 800862c:	af00      	add	r7, sp, #0
 800862e:	60f8      	str	r0, [r7, #12]
 8008630:	60b9      	str	r1, [r7, #8]
 8008632:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8008634:	68bb      	ldr	r3, [r7, #8]
 8008636:	681a      	ldr	r2, [r3, #0]
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	3308      	adds	r3, #8
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	429a      	cmp	r2, r3
 8008640:	d00a      	beq.n	8008658 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8008642:	68bb      	ldr	r3, [r7, #8]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d002      	beq.n	800864e <netif_do_set_netmask+0x26>
 8008648:	68bb      	ldr	r3, [r7, #8]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	e000      	b.n	8008650 <netif_do_set_netmask+0x28>
 800864e:	2300      	movs	r3, #0
 8008650:	68fa      	ldr	r2, [r7, #12]
 8008652:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8008654:	2301      	movs	r3, #1
 8008656:	e000      	b.n	800865a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8008658:	2300      	movs	r3, #0
}
 800865a:	4618      	mov	r0, r3
 800865c:	3714      	adds	r7, #20
 800865e:	46bd      	mov	sp, r7
 8008660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008664:	4770      	bx	lr

08008666 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8008666:	b480      	push	{r7}
 8008668:	b085      	sub	sp, #20
 800866a:	af00      	add	r7, sp, #0
 800866c:	60f8      	str	r0, [r7, #12]
 800866e:	60b9      	str	r1, [r7, #8]
 8008670:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8008672:	68bb      	ldr	r3, [r7, #8]
 8008674:	681a      	ldr	r2, [r3, #0]
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	330c      	adds	r3, #12
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	429a      	cmp	r2, r3
 800867e:	d00a      	beq.n	8008696 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8008680:	68bb      	ldr	r3, [r7, #8]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d002      	beq.n	800868c <netif_do_set_gw+0x26>
 8008686:	68bb      	ldr	r3, [r7, #8]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	e000      	b.n	800868e <netif_do_set_gw+0x28>
 800868c:	2300      	movs	r3, #0
 800868e:	68fa      	ldr	r2, [r7, #12]
 8008690:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8008692:	2301      	movs	r3, #1
 8008694:	e000      	b.n	8008698 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8008696:	2300      	movs	r3, #0
}
 8008698:	4618      	mov	r0, r3
 800869a:	3714      	adds	r7, #20
 800869c:	46bd      	mov	sp, r7
 800869e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a2:	4770      	bx	lr

080086a4 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b088      	sub	sp, #32
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	60f8      	str	r0, [r7, #12]
 80086ac:	60b9      	str	r1, [r7, #8]
 80086ae:	607a      	str	r2, [r7, #4]
 80086b0:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 80086b2:	2300      	movs	r3, #0
 80086b4:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 80086b6:	2300      	movs	r3, #0
 80086b8:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80086ba:	68bb      	ldr	r3, [r7, #8]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d101      	bne.n	80086c4 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 80086c0:	4b1c      	ldr	r3, [pc, #112]	; (8008734 <netif_set_addr+0x90>)
 80086c2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d101      	bne.n	80086ce <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 80086ca:	4b1a      	ldr	r3, [pc, #104]	; (8008734 <netif_set_addr+0x90>)
 80086cc:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80086ce:	683b      	ldr	r3, [r7, #0]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d101      	bne.n	80086d8 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 80086d4:	4b17      	ldr	r3, [pc, #92]	; (8008734 <netif_set_addr+0x90>)
 80086d6:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 80086d8:	68bb      	ldr	r3, [r7, #8]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d003      	beq.n	80086e6 <netif_set_addr+0x42>
 80086de:	68bb      	ldr	r3, [r7, #8]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d101      	bne.n	80086ea <netif_set_addr+0x46>
 80086e6:	2301      	movs	r3, #1
 80086e8:	e000      	b.n	80086ec <netif_set_addr+0x48>
 80086ea:	2300      	movs	r3, #0
 80086ec:	617b      	str	r3, [r7, #20]
  if (remove) {
 80086ee:	697b      	ldr	r3, [r7, #20]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d006      	beq.n	8008702 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80086f4:	f107 0310 	add.w	r3, r7, #16
 80086f8:	461a      	mov	r2, r3
 80086fa:	68b9      	ldr	r1, [r7, #8]
 80086fc:	68f8      	ldr	r0, [r7, #12]
 80086fe:	f7ff ff49 	bl	8008594 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8008702:	69fa      	ldr	r2, [r7, #28]
 8008704:	6879      	ldr	r1, [r7, #4]
 8008706:	68f8      	ldr	r0, [r7, #12]
 8008708:	f7ff ff8e 	bl	8008628 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800870c:	69ba      	ldr	r2, [r7, #24]
 800870e:	6839      	ldr	r1, [r7, #0]
 8008710:	68f8      	ldr	r0, [r7, #12]
 8008712:	f7ff ffa8 	bl	8008666 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8008716:	697b      	ldr	r3, [r7, #20]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d106      	bne.n	800872a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800871c:	f107 0310 	add.w	r3, r7, #16
 8008720:	461a      	mov	r2, r3
 8008722:	68b9      	ldr	r1, [r7, #8]
 8008724:	68f8      	ldr	r0, [r7, #12]
 8008726:	f7ff ff35 	bl	8008594 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800872a:	bf00      	nop
 800872c:	3720      	adds	r7, #32
 800872e:	46bd      	mov	sp, r7
 8008730:	bd80      	pop	{r7, pc}
 8008732:	bf00      	nop
 8008734:	08017ad0 	.word	0x08017ad0

08008738 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8008738:	b480      	push	{r7}
 800873a:	b083      	sub	sp, #12
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8008740:	4a04      	ldr	r2, [pc, #16]	; (8008754 <netif_set_default+0x1c>)
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8008746:	bf00      	nop
 8008748:	370c      	adds	r7, #12
 800874a:	46bd      	mov	sp, r7
 800874c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008750:	4770      	bx	lr
 8008752:	bf00      	nop
 8008754:	2000820c 	.word	0x2000820c

08008758 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8008758:	b580      	push	{r7, lr}
 800875a:	b082      	sub	sp, #8
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	2b00      	cmp	r3, #0
 8008764:	d107      	bne.n	8008776 <netif_set_up+0x1e>
 8008766:	4b0f      	ldr	r3, [pc, #60]	; (80087a4 <netif_set_up+0x4c>)
 8008768:	f44f 7254 	mov.w	r2, #848	; 0x350
 800876c:	490e      	ldr	r1, [pc, #56]	; (80087a8 <netif_set_up+0x50>)
 800876e:	480f      	ldr	r0, [pc, #60]	; (80087ac <netif_set_up+0x54>)
 8008770:	f00b fb9a 	bl	8013ea8 <iprintf>
 8008774:	e013      	b.n	800879e <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800877c:	f003 0301 	and.w	r3, r3, #1
 8008780:	2b00      	cmp	r3, #0
 8008782:	d10c      	bne.n	800879e <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800878a:	f043 0301 	orr.w	r3, r3, #1
 800878e:	b2da      	uxtb	r2, r3
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8008796:	2103      	movs	r1, #3
 8008798:	6878      	ldr	r0, [r7, #4]
 800879a:	f000 f809 	bl	80087b0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800879e:	3708      	adds	r7, #8
 80087a0:	46bd      	mov	sp, r7
 80087a2:	bd80      	pop	{r7, pc}
 80087a4:	080152cc 	.word	0x080152cc
 80087a8:	08015454 	.word	0x08015454
 80087ac:	0801531c 	.word	0x0801531c

080087b0 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b082      	sub	sp, #8
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
 80087b8:	460b      	mov	r3, r1
 80087ba:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d106      	bne.n	80087d0 <netif_issue_reports+0x20>
 80087c2:	4b18      	ldr	r3, [pc, #96]	; (8008824 <netif_issue_reports+0x74>)
 80087c4:	f240 326d 	movw	r2, #877	; 0x36d
 80087c8:	4917      	ldr	r1, [pc, #92]	; (8008828 <netif_issue_reports+0x78>)
 80087ca:	4818      	ldr	r0, [pc, #96]	; (800882c <netif_issue_reports+0x7c>)
 80087cc:	f00b fb6c 	bl	8013ea8 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80087d6:	f003 0304 	and.w	r3, r3, #4
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d01e      	beq.n	800881c <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80087e4:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d017      	beq.n	800881c <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80087ec:	78fb      	ldrb	r3, [r7, #3]
 80087ee:	f003 0301 	and.w	r3, r3, #1
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d013      	beq.n	800881e <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	3304      	adds	r3, #4
 80087fa:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d00e      	beq.n	800881e <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008806:	f003 0308 	and.w	r3, r3, #8
 800880a:	2b00      	cmp	r3, #0
 800880c:	d007      	beq.n	800881e <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	3304      	adds	r3, #4
 8008812:	4619      	mov	r1, r3
 8008814:	6878      	ldr	r0, [r7, #4]
 8008816:	f008 f9bb 	bl	8010b90 <etharp_request>
 800881a:	e000      	b.n	800881e <netif_issue_reports+0x6e>
    return;
 800881c:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800881e:	3708      	adds	r7, #8
 8008820:	46bd      	mov	sp, r7
 8008822:	bd80      	pop	{r7, pc}
 8008824:	080152cc 	.word	0x080152cc
 8008828:	08015470 	.word	0x08015470
 800882c:	0801531c 	.word	0x0801531c

08008830 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8008830:	b580      	push	{r7, lr}
 8008832:	b082      	sub	sp, #8
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d107      	bne.n	800884e <netif_set_down+0x1e>
 800883e:	4b12      	ldr	r3, [pc, #72]	; (8008888 <netif_set_down+0x58>)
 8008840:	f240 329b 	movw	r2, #923	; 0x39b
 8008844:	4911      	ldr	r1, [pc, #68]	; (800888c <netif_set_down+0x5c>)
 8008846:	4812      	ldr	r0, [pc, #72]	; (8008890 <netif_set_down+0x60>)
 8008848:	f00b fb2e 	bl	8013ea8 <iprintf>
 800884c:	e019      	b.n	8008882 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008854:	f003 0301 	and.w	r3, r3, #1
 8008858:	2b00      	cmp	r3, #0
 800885a:	d012      	beq.n	8008882 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008862:	f023 0301 	bic.w	r3, r3, #1
 8008866:	b2da      	uxtb	r2, r3
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008874:	f003 0308 	and.w	r3, r3, #8
 8008878:	2b00      	cmp	r3, #0
 800887a:	d002      	beq.n	8008882 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800887c:	6878      	ldr	r0, [r7, #4]
 800887e:	f007 fd45 	bl	801030c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8008882:	3708      	adds	r7, #8
 8008884:	46bd      	mov	sp, r7
 8008886:	bd80      	pop	{r7, pc}
 8008888:	080152cc 	.word	0x080152cc
 800888c:	08015494 	.word	0x08015494
 8008890:	0801531c 	.word	0x0801531c

08008894 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8008894:	b580      	push	{r7, lr}
 8008896:	b082      	sub	sp, #8
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d107      	bne.n	80088b2 <netif_set_link_up+0x1e>
 80088a2:	4b13      	ldr	r3, [pc, #76]	; (80088f0 <netif_set_link_up+0x5c>)
 80088a4:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 80088a8:	4912      	ldr	r1, [pc, #72]	; (80088f4 <netif_set_link_up+0x60>)
 80088aa:	4813      	ldr	r0, [pc, #76]	; (80088f8 <netif_set_link_up+0x64>)
 80088ac:	f00b fafc 	bl	8013ea8 <iprintf>
 80088b0:	e01b      	b.n	80088ea <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80088b8:	f003 0304 	and.w	r3, r3, #4
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d114      	bne.n	80088ea <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80088c6:	f043 0304 	orr.w	r3, r3, #4
 80088ca:	b2da      	uxtb	r2, r3
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80088d2:	2103      	movs	r1, #3
 80088d4:	6878      	ldr	r0, [r7, #4]
 80088d6:	f7ff ff6b 	bl	80087b0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	69db      	ldr	r3, [r3, #28]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d003      	beq.n	80088ea <netif_set_link_up+0x56>
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	69db      	ldr	r3, [r3, #28]
 80088e6:	6878      	ldr	r0, [r7, #4]
 80088e8:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80088ea:	3708      	adds	r7, #8
 80088ec:	46bd      	mov	sp, r7
 80088ee:	bd80      	pop	{r7, pc}
 80088f0:	080152cc 	.word	0x080152cc
 80088f4:	080154b4 	.word	0x080154b4
 80088f8:	0801531c 	.word	0x0801531c

080088fc <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b082      	sub	sp, #8
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d107      	bne.n	800891a <netif_set_link_down+0x1e>
 800890a:	4b11      	ldr	r3, [pc, #68]	; (8008950 <netif_set_link_down+0x54>)
 800890c:	f240 4206 	movw	r2, #1030	; 0x406
 8008910:	4910      	ldr	r1, [pc, #64]	; (8008954 <netif_set_link_down+0x58>)
 8008912:	4811      	ldr	r0, [pc, #68]	; (8008958 <netif_set_link_down+0x5c>)
 8008914:	f00b fac8 	bl	8013ea8 <iprintf>
 8008918:	e017      	b.n	800894a <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008920:	f003 0304 	and.w	r3, r3, #4
 8008924:	2b00      	cmp	r3, #0
 8008926:	d010      	beq.n	800894a <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800892e:	f023 0304 	bic.w	r3, r3, #4
 8008932:	b2da      	uxtb	r2, r3
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	69db      	ldr	r3, [r3, #28]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d003      	beq.n	800894a <netif_set_link_down+0x4e>
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	69db      	ldr	r3, [r3, #28]
 8008946:	6878      	ldr	r0, [r7, #4]
 8008948:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800894a:	3708      	adds	r7, #8
 800894c:	46bd      	mov	sp, r7
 800894e:	bd80      	pop	{r7, pc}
 8008950:	080152cc 	.word	0x080152cc
 8008954:	080154d8 	.word	0x080154d8
 8008958:	0801531c 	.word	0x0801531c

0800895c <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800895c:	b480      	push	{r7}
 800895e:	b083      	sub	sp, #12
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
 8008964:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d002      	beq.n	8008972 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	683a      	ldr	r2, [r7, #0]
 8008970:	61da      	str	r2, [r3, #28]
  }
}
 8008972:	bf00      	nop
 8008974:	370c      	adds	r7, #12
 8008976:	46bd      	mov	sp, r7
 8008978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897c:	4770      	bx	lr

0800897e <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800897e:	b480      	push	{r7}
 8008980:	b085      	sub	sp, #20
 8008982:	af00      	add	r7, sp, #0
 8008984:	60f8      	str	r0, [r7, #12]
 8008986:	60b9      	str	r1, [r7, #8]
 8008988:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800898a:	f06f 030b 	mvn.w	r3, #11
}
 800898e:	4618      	mov	r0, r3
 8008990:	3714      	adds	r7, #20
 8008992:	46bd      	mov	sp, r7
 8008994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008998:	4770      	bx	lr
	...

0800899c <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800899c:	b480      	push	{r7}
 800899e:	b085      	sub	sp, #20
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	4603      	mov	r3, r0
 80089a4:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 80089a6:	79fb      	ldrb	r3, [r7, #7]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d013      	beq.n	80089d4 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 80089ac:	4b0d      	ldr	r3, [pc, #52]	; (80089e4 <netif_get_by_index+0x48>)
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	60fb      	str	r3, [r7, #12]
 80089b2:	e00c      	b.n	80089ce <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80089ba:	3301      	adds	r3, #1
 80089bc:	b2db      	uxtb	r3, r3
 80089be:	79fa      	ldrb	r2, [r7, #7]
 80089c0:	429a      	cmp	r2, r3
 80089c2:	d101      	bne.n	80089c8 <netif_get_by_index+0x2c>
        return netif; /* found! */
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	e006      	b.n	80089d6 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	60fb      	str	r3, [r7, #12]
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d1ef      	bne.n	80089b4 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 80089d4:	2300      	movs	r3, #0
}
 80089d6:	4618      	mov	r0, r3
 80089d8:	3714      	adds	r7, #20
 80089da:	46bd      	mov	sp, r7
 80089dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e0:	4770      	bx	lr
 80089e2:	bf00      	nop
 80089e4:	20008208 	.word	0x20008208

080089e8 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b082      	sub	sp, #8
 80089ec:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80089ee:	f009 fd2f 	bl	8012450 <sys_arch_protect>
 80089f2:	6038      	str	r0, [r7, #0]
 80089f4:	4b0d      	ldr	r3, [pc, #52]	; (8008a2c <pbuf_free_ooseq+0x44>)
 80089f6:	2200      	movs	r2, #0
 80089f8:	701a      	strb	r2, [r3, #0]
 80089fa:	6838      	ldr	r0, [r7, #0]
 80089fc:	f009 fd36 	bl	801246c <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8008a00:	4b0b      	ldr	r3, [pc, #44]	; (8008a30 <pbuf_free_ooseq+0x48>)
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	607b      	str	r3, [r7, #4]
 8008a06:	e00a      	b.n	8008a1e <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d003      	beq.n	8008a18 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8008a10:	6878      	ldr	r0, [r7, #4]
 8008a12:	f002 fc21 	bl	800b258 <tcp_free_ooseq>
      return;
 8008a16:	e005      	b.n	8008a24 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	68db      	ldr	r3, [r3, #12]
 8008a1c:	607b      	str	r3, [r7, #4]
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d1f1      	bne.n	8008a08 <pbuf_free_ooseq+0x20>
    }
  }
}
 8008a24:	3708      	adds	r7, #8
 8008a26:	46bd      	mov	sp, r7
 8008a28:	bd80      	pop	{r7, pc}
 8008a2a:	bf00      	nop
 8008a2c:	20008211 	.word	0x20008211
 8008a30:	20008220 	.word	0x20008220

08008a34 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b082      	sub	sp, #8
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8008a3c:	f7ff ffd4 	bl	80089e8 <pbuf_free_ooseq>
}
 8008a40:	bf00      	nop
 8008a42:	3708      	adds	r7, #8
 8008a44:	46bd      	mov	sp, r7
 8008a46:	bd80      	pop	{r7, pc}

08008a48 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b082      	sub	sp, #8
 8008a4c:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 8008a4e:	f009 fcff 	bl	8012450 <sys_arch_protect>
 8008a52:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8008a54:	4b0f      	ldr	r3, [pc, #60]	; (8008a94 <pbuf_pool_is_empty+0x4c>)
 8008a56:	781b      	ldrb	r3, [r3, #0]
 8008a58:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 8008a5a:	4b0e      	ldr	r3, [pc, #56]	; (8008a94 <pbuf_pool_is_empty+0x4c>)
 8008a5c:	2201      	movs	r2, #1
 8008a5e:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8008a60:	6878      	ldr	r0, [r7, #4]
 8008a62:	f009 fd03 	bl	801246c <sys_arch_unprotect>

  if (!queued) {
 8008a66:	78fb      	ldrb	r3, [r7, #3]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d10f      	bne.n	8008a8c <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8008a6c:	2100      	movs	r1, #0
 8008a6e:	480a      	ldr	r0, [pc, #40]	; (8008a98 <pbuf_pool_is_empty+0x50>)
 8008a70:	f7fe feec 	bl	800784c <tcpip_try_callback>
 8008a74:	4603      	mov	r3, r0
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d008      	beq.n	8008a8c <pbuf_pool_is_empty+0x44>
 8008a7a:	f009 fce9 	bl	8012450 <sys_arch_protect>
 8008a7e:	6078      	str	r0, [r7, #4]
 8008a80:	4b04      	ldr	r3, [pc, #16]	; (8008a94 <pbuf_pool_is_empty+0x4c>)
 8008a82:	2200      	movs	r2, #0
 8008a84:	701a      	strb	r2, [r3, #0]
 8008a86:	6878      	ldr	r0, [r7, #4]
 8008a88:	f009 fcf0 	bl	801246c <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8008a8c:	bf00      	nop
 8008a8e:	3708      	adds	r7, #8
 8008a90:	46bd      	mov	sp, r7
 8008a92:	bd80      	pop	{r7, pc}
 8008a94:	20008211 	.word	0x20008211
 8008a98:	08008a35 	.word	0x08008a35

08008a9c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8008a9c:	b480      	push	{r7}
 8008a9e:	b085      	sub	sp, #20
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	60f8      	str	r0, [r7, #12]
 8008aa4:	60b9      	str	r1, [r7, #8]
 8008aa6:	4611      	mov	r1, r2
 8008aa8:	461a      	mov	r2, r3
 8008aaa:	460b      	mov	r3, r1
 8008aac:	80fb      	strh	r3, [r7, #6]
 8008aae:	4613      	mov	r3, r2
 8008ab0:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	68ba      	ldr	r2, [r7, #8]
 8008abc:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	88fa      	ldrh	r2, [r7, #6]
 8008ac2:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	88ba      	ldrh	r2, [r7, #4]
 8008ac8:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8008aca:	8b3b      	ldrh	r3, [r7, #24]
 8008acc:	b2da      	uxtb	r2, r3
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	7f3a      	ldrb	r2, [r7, #28]
 8008ad6:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	2201      	movs	r2, #1
 8008adc:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	73da      	strb	r2, [r3, #15]
}
 8008ae4:	bf00      	nop
 8008ae6:	3714      	adds	r7, #20
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aee:	4770      	bx	lr

08008af0 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8008af0:	b580      	push	{r7, lr}
 8008af2:	b08c      	sub	sp, #48	; 0x30
 8008af4:	af02      	add	r7, sp, #8
 8008af6:	4603      	mov	r3, r0
 8008af8:	71fb      	strb	r3, [r7, #7]
 8008afa:	460b      	mov	r3, r1
 8008afc:	80bb      	strh	r3, [r7, #4]
 8008afe:	4613      	mov	r3, r2
 8008b00:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8008b02:	79fb      	ldrb	r3, [r7, #7]
 8008b04:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8008b06:	887b      	ldrh	r3, [r7, #2]
 8008b08:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8008b0c:	d07f      	beq.n	8008c0e <pbuf_alloc+0x11e>
 8008b0e:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8008b12:	f300 80c8 	bgt.w	8008ca6 <pbuf_alloc+0x1b6>
 8008b16:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8008b1a:	d010      	beq.n	8008b3e <pbuf_alloc+0x4e>
 8008b1c:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8008b20:	f300 80c1 	bgt.w	8008ca6 <pbuf_alloc+0x1b6>
 8008b24:	2b01      	cmp	r3, #1
 8008b26:	d002      	beq.n	8008b2e <pbuf_alloc+0x3e>
 8008b28:	2b41      	cmp	r3, #65	; 0x41
 8008b2a:	f040 80bc 	bne.w	8008ca6 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8008b2e:	887a      	ldrh	r2, [r7, #2]
 8008b30:	88bb      	ldrh	r3, [r7, #4]
 8008b32:	4619      	mov	r1, r3
 8008b34:	2000      	movs	r0, #0
 8008b36:	f000 f8d1 	bl	8008cdc <pbuf_alloc_reference>
 8008b3a:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8008b3c:	e0bd      	b.n	8008cba <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8008b3e:	2300      	movs	r3, #0
 8008b40:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8008b42:	2300      	movs	r3, #0
 8008b44:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8008b46:	88bb      	ldrh	r3, [r7, #4]
 8008b48:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8008b4a:	200c      	movs	r0, #12
 8008b4c:	f7ff fbbe 	bl	80082cc <memp_malloc>
 8008b50:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8008b52:	693b      	ldr	r3, [r7, #16]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d109      	bne.n	8008b6c <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8008b58:	f7ff ff76 	bl	8008a48 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8008b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d002      	beq.n	8008b68 <pbuf_alloc+0x78>
            pbuf_free(p);
 8008b62:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008b64:	f000 faa8 	bl	80090b8 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8008b68:	2300      	movs	r3, #0
 8008b6a:	e0a7      	b.n	8008cbc <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8008b6c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008b6e:	3303      	adds	r3, #3
 8008b70:	b29b      	uxth	r3, r3
 8008b72:	f023 0303 	bic.w	r3, r3, #3
 8008b76:	b29b      	uxth	r3, r3
 8008b78:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8008b7c:	b29b      	uxth	r3, r3
 8008b7e:	8b7a      	ldrh	r2, [r7, #26]
 8008b80:	4293      	cmp	r3, r2
 8008b82:	bf28      	it	cs
 8008b84:	4613      	movcs	r3, r2
 8008b86:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8008b88:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008b8a:	3310      	adds	r3, #16
 8008b8c:	693a      	ldr	r2, [r7, #16]
 8008b8e:	4413      	add	r3, r2
 8008b90:	3303      	adds	r3, #3
 8008b92:	f023 0303 	bic.w	r3, r3, #3
 8008b96:	4618      	mov	r0, r3
 8008b98:	89f9      	ldrh	r1, [r7, #14]
 8008b9a:	8b7a      	ldrh	r2, [r7, #26]
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	9301      	str	r3, [sp, #4]
 8008ba0:	887b      	ldrh	r3, [r7, #2]
 8008ba2:	9300      	str	r3, [sp, #0]
 8008ba4:	460b      	mov	r3, r1
 8008ba6:	4601      	mov	r1, r0
 8008ba8:	6938      	ldr	r0, [r7, #16]
 8008baa:	f7ff ff77 	bl	8008a9c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8008bae:	693b      	ldr	r3, [r7, #16]
 8008bb0:	685b      	ldr	r3, [r3, #4]
 8008bb2:	f003 0303 	and.w	r3, r3, #3
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d006      	beq.n	8008bc8 <pbuf_alloc+0xd8>
 8008bba:	4b42      	ldr	r3, [pc, #264]	; (8008cc4 <pbuf_alloc+0x1d4>)
 8008bbc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008bc0:	4941      	ldr	r1, [pc, #260]	; (8008cc8 <pbuf_alloc+0x1d8>)
 8008bc2:	4842      	ldr	r0, [pc, #264]	; (8008ccc <pbuf_alloc+0x1dc>)
 8008bc4:	f00b f970 	bl	8013ea8 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8008bc8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008bca:	3303      	adds	r3, #3
 8008bcc:	f023 0303 	bic.w	r3, r3, #3
 8008bd0:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8008bd4:	d106      	bne.n	8008be4 <pbuf_alloc+0xf4>
 8008bd6:	4b3b      	ldr	r3, [pc, #236]	; (8008cc4 <pbuf_alloc+0x1d4>)
 8008bd8:	f44f 7281 	mov.w	r2, #258	; 0x102
 8008bdc:	493c      	ldr	r1, [pc, #240]	; (8008cd0 <pbuf_alloc+0x1e0>)
 8008bde:	483b      	ldr	r0, [pc, #236]	; (8008ccc <pbuf_alloc+0x1dc>)
 8008be0:	f00b f962 	bl	8013ea8 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8008be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d102      	bne.n	8008bf0 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8008bea:	693b      	ldr	r3, [r7, #16]
 8008bec:	627b      	str	r3, [r7, #36]	; 0x24
 8008bee:	e002      	b.n	8008bf6 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8008bf0:	69fb      	ldr	r3, [r7, #28]
 8008bf2:	693a      	ldr	r2, [r7, #16]
 8008bf4:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8008bf6:	693b      	ldr	r3, [r7, #16]
 8008bf8:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8008bfa:	8b7a      	ldrh	r2, [r7, #26]
 8008bfc:	89fb      	ldrh	r3, [r7, #14]
 8008bfe:	1ad3      	subs	r3, r2, r3
 8008c00:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8008c02:	2300      	movs	r3, #0
 8008c04:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8008c06:	8b7b      	ldrh	r3, [r7, #26]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d19e      	bne.n	8008b4a <pbuf_alloc+0x5a>
      break;
 8008c0c:	e055      	b.n	8008cba <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8008c0e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008c10:	3303      	adds	r3, #3
 8008c12:	b29b      	uxth	r3, r3
 8008c14:	f023 0303 	bic.w	r3, r3, #3
 8008c18:	b29a      	uxth	r2, r3
 8008c1a:	88bb      	ldrh	r3, [r7, #4]
 8008c1c:	3303      	adds	r3, #3
 8008c1e:	b29b      	uxth	r3, r3
 8008c20:	f023 0303 	bic.w	r3, r3, #3
 8008c24:	b29b      	uxth	r3, r3
 8008c26:	4413      	add	r3, r2
 8008c28:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8008c2a:	8b3b      	ldrh	r3, [r7, #24]
 8008c2c:	3310      	adds	r3, #16
 8008c2e:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8008c30:	8b3a      	ldrh	r2, [r7, #24]
 8008c32:	88bb      	ldrh	r3, [r7, #4]
 8008c34:	3303      	adds	r3, #3
 8008c36:	f023 0303 	bic.w	r3, r3, #3
 8008c3a:	429a      	cmp	r2, r3
 8008c3c:	d306      	bcc.n	8008c4c <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8008c3e:	8afa      	ldrh	r2, [r7, #22]
 8008c40:	88bb      	ldrh	r3, [r7, #4]
 8008c42:	3303      	adds	r3, #3
 8008c44:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8008c48:	429a      	cmp	r2, r3
 8008c4a:	d201      	bcs.n	8008c50 <pbuf_alloc+0x160>
        return NULL;
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	e035      	b.n	8008cbc <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8008c50:	8afb      	ldrh	r3, [r7, #22]
 8008c52:	4618      	mov	r0, r3
 8008c54:	f7ff f9b8 	bl	8007fc8 <mem_malloc>
 8008c58:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8008c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d101      	bne.n	8008c64 <pbuf_alloc+0x174>
        return NULL;
 8008c60:	2300      	movs	r3, #0
 8008c62:	e02b      	b.n	8008cbc <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8008c64:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008c66:	3310      	adds	r3, #16
 8008c68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c6a:	4413      	add	r3, r2
 8008c6c:	3303      	adds	r3, #3
 8008c6e:	f023 0303 	bic.w	r3, r3, #3
 8008c72:	4618      	mov	r0, r3
 8008c74:	88b9      	ldrh	r1, [r7, #4]
 8008c76:	88ba      	ldrh	r2, [r7, #4]
 8008c78:	2300      	movs	r3, #0
 8008c7a:	9301      	str	r3, [sp, #4]
 8008c7c:	887b      	ldrh	r3, [r7, #2]
 8008c7e:	9300      	str	r3, [sp, #0]
 8008c80:	460b      	mov	r3, r1
 8008c82:	4601      	mov	r1, r0
 8008c84:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008c86:	f7ff ff09 	bl	8008a9c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8008c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c8c:	685b      	ldr	r3, [r3, #4]
 8008c8e:	f003 0303 	and.w	r3, r3, #3
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d010      	beq.n	8008cb8 <pbuf_alloc+0x1c8>
 8008c96:	4b0b      	ldr	r3, [pc, #44]	; (8008cc4 <pbuf_alloc+0x1d4>)
 8008c98:	f44f 7291 	mov.w	r2, #290	; 0x122
 8008c9c:	490d      	ldr	r1, [pc, #52]	; (8008cd4 <pbuf_alloc+0x1e4>)
 8008c9e:	480b      	ldr	r0, [pc, #44]	; (8008ccc <pbuf_alloc+0x1dc>)
 8008ca0:	f00b f902 	bl	8013ea8 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8008ca4:	e008      	b.n	8008cb8 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8008ca6:	4b07      	ldr	r3, [pc, #28]	; (8008cc4 <pbuf_alloc+0x1d4>)
 8008ca8:	f240 1227 	movw	r2, #295	; 0x127
 8008cac:	490a      	ldr	r1, [pc, #40]	; (8008cd8 <pbuf_alloc+0x1e8>)
 8008cae:	4807      	ldr	r0, [pc, #28]	; (8008ccc <pbuf_alloc+0x1dc>)
 8008cb0:	f00b f8fa 	bl	8013ea8 <iprintf>
      return NULL;
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	e001      	b.n	8008cbc <pbuf_alloc+0x1cc>
      break;
 8008cb8:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8008cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	3728      	adds	r7, #40	; 0x28
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	bd80      	pop	{r7, pc}
 8008cc4:	080154fc 	.word	0x080154fc
 8008cc8:	0801552c 	.word	0x0801552c
 8008ccc:	0801555c 	.word	0x0801555c
 8008cd0:	08015584 	.word	0x08015584
 8008cd4:	080155b8 	.word	0x080155b8
 8008cd8:	080155e4 	.word	0x080155e4

08008cdc <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	b086      	sub	sp, #24
 8008ce0:	af02      	add	r7, sp, #8
 8008ce2:	6078      	str	r0, [r7, #4]
 8008ce4:	460b      	mov	r3, r1
 8008ce6:	807b      	strh	r3, [r7, #2]
 8008ce8:	4613      	mov	r3, r2
 8008cea:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8008cec:	883b      	ldrh	r3, [r7, #0]
 8008cee:	2b41      	cmp	r3, #65	; 0x41
 8008cf0:	d009      	beq.n	8008d06 <pbuf_alloc_reference+0x2a>
 8008cf2:	883b      	ldrh	r3, [r7, #0]
 8008cf4:	2b01      	cmp	r3, #1
 8008cf6:	d006      	beq.n	8008d06 <pbuf_alloc_reference+0x2a>
 8008cf8:	4b0f      	ldr	r3, [pc, #60]	; (8008d38 <pbuf_alloc_reference+0x5c>)
 8008cfa:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8008cfe:	490f      	ldr	r1, [pc, #60]	; (8008d3c <pbuf_alloc_reference+0x60>)
 8008d00:	480f      	ldr	r0, [pc, #60]	; (8008d40 <pbuf_alloc_reference+0x64>)
 8008d02:	f00b f8d1 	bl	8013ea8 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8008d06:	200b      	movs	r0, #11
 8008d08:	f7ff fae0 	bl	80082cc <memp_malloc>
 8008d0c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d101      	bne.n	8008d18 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8008d14:	2300      	movs	r3, #0
 8008d16:	e00b      	b.n	8008d30 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8008d18:	8879      	ldrh	r1, [r7, #2]
 8008d1a:	887a      	ldrh	r2, [r7, #2]
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	9301      	str	r3, [sp, #4]
 8008d20:	883b      	ldrh	r3, [r7, #0]
 8008d22:	9300      	str	r3, [sp, #0]
 8008d24:	460b      	mov	r3, r1
 8008d26:	6879      	ldr	r1, [r7, #4]
 8008d28:	68f8      	ldr	r0, [r7, #12]
 8008d2a:	f7ff feb7 	bl	8008a9c <pbuf_init_alloced_pbuf>
  return p;
 8008d2e:	68fb      	ldr	r3, [r7, #12]
}
 8008d30:	4618      	mov	r0, r3
 8008d32:	3710      	adds	r7, #16
 8008d34:	46bd      	mov	sp, r7
 8008d36:	bd80      	pop	{r7, pc}
 8008d38:	080154fc 	.word	0x080154fc
 8008d3c:	08015600 	.word	0x08015600
 8008d40:	0801555c 	.word	0x0801555c

08008d44 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8008d44:	b580      	push	{r7, lr}
 8008d46:	b088      	sub	sp, #32
 8008d48:	af02      	add	r7, sp, #8
 8008d4a:	607b      	str	r3, [r7, #4]
 8008d4c:	4603      	mov	r3, r0
 8008d4e:	73fb      	strb	r3, [r7, #15]
 8008d50:	460b      	mov	r3, r1
 8008d52:	81bb      	strh	r3, [r7, #12]
 8008d54:	4613      	mov	r3, r2
 8008d56:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8008d58:	7bfb      	ldrb	r3, [r7, #15]
 8008d5a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8008d5c:	8a7b      	ldrh	r3, [r7, #18]
 8008d5e:	3303      	adds	r3, #3
 8008d60:	f023 0203 	bic.w	r2, r3, #3
 8008d64:	89bb      	ldrh	r3, [r7, #12]
 8008d66:	441a      	add	r2, r3
 8008d68:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008d6a:	429a      	cmp	r2, r3
 8008d6c:	d901      	bls.n	8008d72 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8008d6e:	2300      	movs	r3, #0
 8008d70:	e018      	b.n	8008da4 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8008d72:	6a3b      	ldr	r3, [r7, #32]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d007      	beq.n	8008d88 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8008d78:	8a7b      	ldrh	r3, [r7, #18]
 8008d7a:	3303      	adds	r3, #3
 8008d7c:	f023 0303 	bic.w	r3, r3, #3
 8008d80:	6a3a      	ldr	r2, [r7, #32]
 8008d82:	4413      	add	r3, r2
 8008d84:	617b      	str	r3, [r7, #20]
 8008d86:	e001      	b.n	8008d8c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8008d88:	2300      	movs	r3, #0
 8008d8a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8008d8c:	6878      	ldr	r0, [r7, #4]
 8008d8e:	89b9      	ldrh	r1, [r7, #12]
 8008d90:	89ba      	ldrh	r2, [r7, #12]
 8008d92:	2302      	movs	r3, #2
 8008d94:	9301      	str	r3, [sp, #4]
 8008d96:	897b      	ldrh	r3, [r7, #10]
 8008d98:	9300      	str	r3, [sp, #0]
 8008d9a:	460b      	mov	r3, r1
 8008d9c:	6979      	ldr	r1, [r7, #20]
 8008d9e:	f7ff fe7d 	bl	8008a9c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8008da2:	687b      	ldr	r3, [r7, #4]
}
 8008da4:	4618      	mov	r0, r3
 8008da6:	3718      	adds	r7, #24
 8008da8:	46bd      	mov	sp, r7
 8008daa:	bd80      	pop	{r7, pc}

08008dac <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b084      	sub	sp, #16
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
 8008db4:	460b      	mov	r3, r1
 8008db6:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d106      	bne.n	8008dcc <pbuf_realloc+0x20>
 8008dbe:	4b3a      	ldr	r3, [pc, #232]	; (8008ea8 <pbuf_realloc+0xfc>)
 8008dc0:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8008dc4:	4939      	ldr	r1, [pc, #228]	; (8008eac <pbuf_realloc+0x100>)
 8008dc6:	483a      	ldr	r0, [pc, #232]	; (8008eb0 <pbuf_realloc+0x104>)
 8008dc8:	f00b f86e 	bl	8013ea8 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	891b      	ldrh	r3, [r3, #8]
 8008dd0:	887a      	ldrh	r2, [r7, #2]
 8008dd2:	429a      	cmp	r2, r3
 8008dd4:	d263      	bcs.n	8008e9e <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	891a      	ldrh	r2, [r3, #8]
 8008dda:	887b      	ldrh	r3, [r7, #2]
 8008ddc:	1ad3      	subs	r3, r2, r3
 8008dde:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8008de0:	887b      	ldrh	r3, [r7, #2]
 8008de2:	817b      	strh	r3, [r7, #10]
  q = p;
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8008de8:	e018      	b.n	8008e1c <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	895b      	ldrh	r3, [r3, #10]
 8008dee:	897a      	ldrh	r2, [r7, #10]
 8008df0:	1ad3      	subs	r3, r2, r3
 8008df2:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	891a      	ldrh	r2, [r3, #8]
 8008df8:	893b      	ldrh	r3, [r7, #8]
 8008dfa:	1ad3      	subs	r3, r2, r3
 8008dfc:	b29a      	uxth	r2, r3
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d106      	bne.n	8008e1c <pbuf_realloc+0x70>
 8008e0e:	4b26      	ldr	r3, [pc, #152]	; (8008ea8 <pbuf_realloc+0xfc>)
 8008e10:	f240 12af 	movw	r2, #431	; 0x1af
 8008e14:	4927      	ldr	r1, [pc, #156]	; (8008eb4 <pbuf_realloc+0x108>)
 8008e16:	4826      	ldr	r0, [pc, #152]	; (8008eb0 <pbuf_realloc+0x104>)
 8008e18:	f00b f846 	bl	8013ea8 <iprintf>
  while (rem_len > q->len) {
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	895b      	ldrh	r3, [r3, #10]
 8008e20:	897a      	ldrh	r2, [r7, #10]
 8008e22:	429a      	cmp	r2, r3
 8008e24:	d8e1      	bhi.n	8008dea <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	7b1b      	ldrb	r3, [r3, #12]
 8008e2a:	f003 030f 	and.w	r3, r3, #15
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d121      	bne.n	8008e76 <pbuf_realloc+0xca>
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	895b      	ldrh	r3, [r3, #10]
 8008e36:	897a      	ldrh	r2, [r7, #10]
 8008e38:	429a      	cmp	r2, r3
 8008e3a:	d01c      	beq.n	8008e76 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	7b5b      	ldrb	r3, [r3, #13]
 8008e40:	f003 0302 	and.w	r3, r3, #2
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d116      	bne.n	8008e76 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	685a      	ldr	r2, [r3, #4]
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	1ad3      	subs	r3, r2, r3
 8008e50:	b29a      	uxth	r2, r3
 8008e52:	897b      	ldrh	r3, [r7, #10]
 8008e54:	4413      	add	r3, r2
 8008e56:	b29b      	uxth	r3, r3
 8008e58:	4619      	mov	r1, r3
 8008e5a:	68f8      	ldr	r0, [r7, #12]
 8008e5c:	f7fe ffaa 	bl	8007db4 <mem_trim>
 8008e60:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d106      	bne.n	8008e76 <pbuf_realloc+0xca>
 8008e68:	4b0f      	ldr	r3, [pc, #60]	; (8008ea8 <pbuf_realloc+0xfc>)
 8008e6a:	f240 12bd 	movw	r2, #445	; 0x1bd
 8008e6e:	4912      	ldr	r1, [pc, #72]	; (8008eb8 <pbuf_realloc+0x10c>)
 8008e70:	480f      	ldr	r0, [pc, #60]	; (8008eb0 <pbuf_realloc+0x104>)
 8008e72:	f00b f819 	bl	8013ea8 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	897a      	ldrh	r2, [r7, #10]
 8008e7a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	895a      	ldrh	r2, [r3, #10]
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d004      	beq.n	8008e96 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	4618      	mov	r0, r3
 8008e92:	f000 f911 	bl	80090b8 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	2200      	movs	r2, #0
 8008e9a:	601a      	str	r2, [r3, #0]
 8008e9c:	e000      	b.n	8008ea0 <pbuf_realloc+0xf4>
    return;
 8008e9e:	bf00      	nop

}
 8008ea0:	3710      	adds	r7, #16
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	bd80      	pop	{r7, pc}
 8008ea6:	bf00      	nop
 8008ea8:	080154fc 	.word	0x080154fc
 8008eac:	08015614 	.word	0x08015614
 8008eb0:	0801555c 	.word	0x0801555c
 8008eb4:	0801562c 	.word	0x0801562c
 8008eb8:	08015644 	.word	0x08015644

08008ebc <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b086      	sub	sp, #24
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	60f8      	str	r0, [r7, #12]
 8008ec4:	60b9      	str	r1, [r7, #8]
 8008ec6:	4613      	mov	r3, r2
 8008ec8:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d106      	bne.n	8008ede <pbuf_add_header_impl+0x22>
 8008ed0:	4b2b      	ldr	r3, [pc, #172]	; (8008f80 <pbuf_add_header_impl+0xc4>)
 8008ed2:	f240 12df 	movw	r2, #479	; 0x1df
 8008ed6:	492b      	ldr	r1, [pc, #172]	; (8008f84 <pbuf_add_header_impl+0xc8>)
 8008ed8:	482b      	ldr	r0, [pc, #172]	; (8008f88 <pbuf_add_header_impl+0xcc>)
 8008eda:	f00a ffe5 	bl	8013ea8 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d003      	beq.n	8008eec <pbuf_add_header_impl+0x30>
 8008ee4:	68bb      	ldr	r3, [r7, #8]
 8008ee6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008eea:	d301      	bcc.n	8008ef0 <pbuf_add_header_impl+0x34>
    return 1;
 8008eec:	2301      	movs	r3, #1
 8008eee:	e043      	b.n	8008f78 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8008ef0:	68bb      	ldr	r3, [r7, #8]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d101      	bne.n	8008efa <pbuf_add_header_impl+0x3e>
    return 0;
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	e03e      	b.n	8008f78 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8008efa:	68bb      	ldr	r3, [r7, #8]
 8008efc:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	891a      	ldrh	r2, [r3, #8]
 8008f02:	8a7b      	ldrh	r3, [r7, #18]
 8008f04:	4413      	add	r3, r2
 8008f06:	b29b      	uxth	r3, r3
 8008f08:	8a7a      	ldrh	r2, [r7, #18]
 8008f0a:	429a      	cmp	r2, r3
 8008f0c:	d901      	bls.n	8008f12 <pbuf_add_header_impl+0x56>
    return 1;
 8008f0e:	2301      	movs	r3, #1
 8008f10:	e032      	b.n	8008f78 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	7b1b      	ldrb	r3, [r3, #12]
 8008f16:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8008f18:	8a3b      	ldrh	r3, [r7, #16]
 8008f1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d00c      	beq.n	8008f3c <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	685a      	ldr	r2, [r3, #4]
 8008f26:	68bb      	ldr	r3, [r7, #8]
 8008f28:	425b      	negs	r3, r3
 8008f2a:	4413      	add	r3, r2
 8008f2c:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	3310      	adds	r3, #16
 8008f32:	697a      	ldr	r2, [r7, #20]
 8008f34:	429a      	cmp	r2, r3
 8008f36:	d20d      	bcs.n	8008f54 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8008f38:	2301      	movs	r3, #1
 8008f3a:	e01d      	b.n	8008f78 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8008f3c:	79fb      	ldrb	r3, [r7, #7]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d006      	beq.n	8008f50 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	685a      	ldr	r2, [r3, #4]
 8008f46:	68bb      	ldr	r3, [r7, #8]
 8008f48:	425b      	negs	r3, r3
 8008f4a:	4413      	add	r3, r2
 8008f4c:	617b      	str	r3, [r7, #20]
 8008f4e:	e001      	b.n	8008f54 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8008f50:	2301      	movs	r3, #1
 8008f52:	e011      	b.n	8008f78 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	697a      	ldr	r2, [r7, #20]
 8008f58:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	895a      	ldrh	r2, [r3, #10]
 8008f5e:	8a7b      	ldrh	r3, [r7, #18]
 8008f60:	4413      	add	r3, r2
 8008f62:	b29a      	uxth	r2, r3
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	891a      	ldrh	r2, [r3, #8]
 8008f6c:	8a7b      	ldrh	r3, [r7, #18]
 8008f6e:	4413      	add	r3, r2
 8008f70:	b29a      	uxth	r2, r3
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	811a      	strh	r2, [r3, #8]


  return 0;
 8008f76:	2300      	movs	r3, #0
}
 8008f78:	4618      	mov	r0, r3
 8008f7a:	3718      	adds	r7, #24
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	bd80      	pop	{r7, pc}
 8008f80:	080154fc 	.word	0x080154fc
 8008f84:	08015660 	.word	0x08015660
 8008f88:	0801555c 	.word	0x0801555c

08008f8c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	b082      	sub	sp, #8
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
 8008f94:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8008f96:	2200      	movs	r2, #0
 8008f98:	6839      	ldr	r1, [r7, #0]
 8008f9a:	6878      	ldr	r0, [r7, #4]
 8008f9c:	f7ff ff8e 	bl	8008ebc <pbuf_add_header_impl>
 8008fa0:	4603      	mov	r3, r0
}
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	3708      	adds	r7, #8
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	bd80      	pop	{r7, pc}
	...

08008fac <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b084      	sub	sp, #16
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
 8008fb4:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d106      	bne.n	8008fca <pbuf_remove_header+0x1e>
 8008fbc:	4b20      	ldr	r3, [pc, #128]	; (8009040 <pbuf_remove_header+0x94>)
 8008fbe:	f240 224b 	movw	r2, #587	; 0x24b
 8008fc2:	4920      	ldr	r1, [pc, #128]	; (8009044 <pbuf_remove_header+0x98>)
 8008fc4:	4820      	ldr	r0, [pc, #128]	; (8009048 <pbuf_remove_header+0x9c>)
 8008fc6:	f00a ff6f 	bl	8013ea8 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d003      	beq.n	8008fd8 <pbuf_remove_header+0x2c>
 8008fd0:	683b      	ldr	r3, [r7, #0]
 8008fd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008fd6:	d301      	bcc.n	8008fdc <pbuf_remove_header+0x30>
    return 1;
 8008fd8:	2301      	movs	r3, #1
 8008fda:	e02c      	b.n	8009036 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8008fdc:	683b      	ldr	r3, [r7, #0]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d101      	bne.n	8008fe6 <pbuf_remove_header+0x3a>
    return 0;
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	e027      	b.n	8009036 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8008fe6:	683b      	ldr	r3, [r7, #0]
 8008fe8:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	895b      	ldrh	r3, [r3, #10]
 8008fee:	89fa      	ldrh	r2, [r7, #14]
 8008ff0:	429a      	cmp	r2, r3
 8008ff2:	d908      	bls.n	8009006 <pbuf_remove_header+0x5a>
 8008ff4:	4b12      	ldr	r3, [pc, #72]	; (8009040 <pbuf_remove_header+0x94>)
 8008ff6:	f240 2255 	movw	r2, #597	; 0x255
 8008ffa:	4914      	ldr	r1, [pc, #80]	; (800904c <pbuf_remove_header+0xa0>)
 8008ffc:	4812      	ldr	r0, [pc, #72]	; (8009048 <pbuf_remove_header+0x9c>)
 8008ffe:	f00a ff53 	bl	8013ea8 <iprintf>
 8009002:	2301      	movs	r3, #1
 8009004:	e017      	b.n	8009036 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	685b      	ldr	r3, [r3, #4]
 800900a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	685a      	ldr	r2, [r3, #4]
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	441a      	add	r2, r3
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	895a      	ldrh	r2, [r3, #10]
 800901c:	89fb      	ldrh	r3, [r7, #14]
 800901e:	1ad3      	subs	r3, r2, r3
 8009020:	b29a      	uxth	r2, r3
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	891a      	ldrh	r2, [r3, #8]
 800902a:	89fb      	ldrh	r3, [r7, #14]
 800902c:	1ad3      	subs	r3, r2, r3
 800902e:	b29a      	uxth	r2, r3
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8009034:	2300      	movs	r3, #0
}
 8009036:	4618      	mov	r0, r3
 8009038:	3710      	adds	r7, #16
 800903a:	46bd      	mov	sp, r7
 800903c:	bd80      	pop	{r7, pc}
 800903e:	bf00      	nop
 8009040:	080154fc 	.word	0x080154fc
 8009044:	08015660 	.word	0x08015660
 8009048:	0801555c 	.word	0x0801555c
 800904c:	0801566c 	.word	0x0801566c

08009050 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b082      	sub	sp, #8
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
 8009058:	460b      	mov	r3, r1
 800905a:	807b      	strh	r3, [r7, #2]
 800905c:	4613      	mov	r3, r2
 800905e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8009060:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009064:	2b00      	cmp	r3, #0
 8009066:	da08      	bge.n	800907a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8009068:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800906c:	425b      	negs	r3, r3
 800906e:	4619      	mov	r1, r3
 8009070:	6878      	ldr	r0, [r7, #4]
 8009072:	f7ff ff9b 	bl	8008fac <pbuf_remove_header>
 8009076:	4603      	mov	r3, r0
 8009078:	e007      	b.n	800908a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800907a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800907e:	787a      	ldrb	r2, [r7, #1]
 8009080:	4619      	mov	r1, r3
 8009082:	6878      	ldr	r0, [r7, #4]
 8009084:	f7ff ff1a 	bl	8008ebc <pbuf_add_header_impl>
 8009088:	4603      	mov	r3, r0
  }
}
 800908a:	4618      	mov	r0, r3
 800908c:	3708      	adds	r7, #8
 800908e:	46bd      	mov	sp, r7
 8009090:	bd80      	pop	{r7, pc}

08009092 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8009092:	b580      	push	{r7, lr}
 8009094:	b082      	sub	sp, #8
 8009096:	af00      	add	r7, sp, #0
 8009098:	6078      	str	r0, [r7, #4]
 800909a:	460b      	mov	r3, r1
 800909c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800909e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80090a2:	2201      	movs	r2, #1
 80090a4:	4619      	mov	r1, r3
 80090a6:	6878      	ldr	r0, [r7, #4]
 80090a8:	f7ff ffd2 	bl	8009050 <pbuf_header_impl>
 80090ac:	4603      	mov	r3, r0
}
 80090ae:	4618      	mov	r0, r3
 80090b0:	3708      	adds	r7, #8
 80090b2:	46bd      	mov	sp, r7
 80090b4:	bd80      	pop	{r7, pc}
	...

080090b8 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80090b8:	b580      	push	{r7, lr}
 80090ba:	b088      	sub	sp, #32
 80090bc:	af00      	add	r7, sp, #0
 80090be:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d10b      	bne.n	80090de <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d106      	bne.n	80090da <pbuf_free+0x22>
 80090cc:	4b3b      	ldr	r3, [pc, #236]	; (80091bc <pbuf_free+0x104>)
 80090ce:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 80090d2:	493b      	ldr	r1, [pc, #236]	; (80091c0 <pbuf_free+0x108>)
 80090d4:	483b      	ldr	r0, [pc, #236]	; (80091c4 <pbuf_free+0x10c>)
 80090d6:	f00a fee7 	bl	8013ea8 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80090da:	2300      	movs	r3, #0
 80090dc:	e069      	b.n	80091b2 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 80090de:	2300      	movs	r3, #0
 80090e0:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 80090e2:	e062      	b.n	80091aa <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 80090e4:	f009 f9b4 	bl	8012450 <sys_arch_protect>
 80090e8:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	7b9b      	ldrb	r3, [r3, #14]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d106      	bne.n	8009100 <pbuf_free+0x48>
 80090f2:	4b32      	ldr	r3, [pc, #200]	; (80091bc <pbuf_free+0x104>)
 80090f4:	f240 22f1 	movw	r2, #753	; 0x2f1
 80090f8:	4933      	ldr	r1, [pc, #204]	; (80091c8 <pbuf_free+0x110>)
 80090fa:	4832      	ldr	r0, [pc, #200]	; (80091c4 <pbuf_free+0x10c>)
 80090fc:	f00a fed4 	bl	8013ea8 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	7b9b      	ldrb	r3, [r3, #14]
 8009104:	3b01      	subs	r3, #1
 8009106:	b2da      	uxtb	r2, r3
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	739a      	strb	r2, [r3, #14]
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	7b9b      	ldrb	r3, [r3, #14]
 8009110:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 8009112:	69b8      	ldr	r0, [r7, #24]
 8009114:	f009 f9aa 	bl	801246c <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8009118:	7dfb      	ldrb	r3, [r7, #23]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d143      	bne.n	80091a6 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	7b1b      	ldrb	r3, [r3, #12]
 8009128:	f003 030f 	and.w	r3, r3, #15
 800912c:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	7b5b      	ldrb	r3, [r3, #13]
 8009132:	f003 0302 	and.w	r3, r3, #2
 8009136:	2b00      	cmp	r3, #0
 8009138:	d011      	beq.n	800915e <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800913e:	68bb      	ldr	r3, [r7, #8]
 8009140:	691b      	ldr	r3, [r3, #16]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d106      	bne.n	8009154 <pbuf_free+0x9c>
 8009146:	4b1d      	ldr	r3, [pc, #116]	; (80091bc <pbuf_free+0x104>)
 8009148:	f240 22ff 	movw	r2, #767	; 0x2ff
 800914c:	491f      	ldr	r1, [pc, #124]	; (80091cc <pbuf_free+0x114>)
 800914e:	481d      	ldr	r0, [pc, #116]	; (80091c4 <pbuf_free+0x10c>)
 8009150:	f00a feaa 	bl	8013ea8 <iprintf>
        pc->custom_free_function(p);
 8009154:	68bb      	ldr	r3, [r7, #8]
 8009156:	691b      	ldr	r3, [r3, #16]
 8009158:	6878      	ldr	r0, [r7, #4]
 800915a:	4798      	blx	r3
 800915c:	e01d      	b.n	800919a <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800915e:	7bfb      	ldrb	r3, [r7, #15]
 8009160:	2b02      	cmp	r3, #2
 8009162:	d104      	bne.n	800916e <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 8009164:	6879      	ldr	r1, [r7, #4]
 8009166:	200c      	movs	r0, #12
 8009168:	f7ff f902 	bl	8008370 <memp_free>
 800916c:	e015      	b.n	800919a <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800916e:	7bfb      	ldrb	r3, [r7, #15]
 8009170:	2b01      	cmp	r3, #1
 8009172:	d104      	bne.n	800917e <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 8009174:	6879      	ldr	r1, [r7, #4]
 8009176:	200b      	movs	r0, #11
 8009178:	f7ff f8fa 	bl	8008370 <memp_free>
 800917c:	e00d      	b.n	800919a <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800917e:	7bfb      	ldrb	r3, [r7, #15]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d103      	bne.n	800918c <pbuf_free+0xd4>
          mem_free(p);
 8009184:	6878      	ldr	r0, [r7, #4]
 8009186:	f7fe fd85 	bl	8007c94 <mem_free>
 800918a:	e006      	b.n	800919a <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800918c:	4b0b      	ldr	r3, [pc, #44]	; (80091bc <pbuf_free+0x104>)
 800918e:	f240 320f 	movw	r2, #783	; 0x30f
 8009192:	490f      	ldr	r1, [pc, #60]	; (80091d0 <pbuf_free+0x118>)
 8009194:	480b      	ldr	r0, [pc, #44]	; (80091c4 <pbuf_free+0x10c>)
 8009196:	f00a fe87 	bl	8013ea8 <iprintf>
        }
      }
      count++;
 800919a:	7ffb      	ldrb	r3, [r7, #31]
 800919c:	3301      	adds	r3, #1
 800919e:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 80091a0:	693b      	ldr	r3, [r7, #16]
 80091a2:	607b      	str	r3, [r7, #4]
 80091a4:	e001      	b.n	80091aa <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 80091a6:	2300      	movs	r3, #0
 80091a8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d199      	bne.n	80090e4 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 80091b0:	7ffb      	ldrb	r3, [r7, #31]
}
 80091b2:	4618      	mov	r0, r3
 80091b4:	3720      	adds	r7, #32
 80091b6:	46bd      	mov	sp, r7
 80091b8:	bd80      	pop	{r7, pc}
 80091ba:	bf00      	nop
 80091bc:	080154fc 	.word	0x080154fc
 80091c0:	08015660 	.word	0x08015660
 80091c4:	0801555c 	.word	0x0801555c
 80091c8:	0801568c 	.word	0x0801568c
 80091cc:	080156a4 	.word	0x080156a4
 80091d0:	080156c8 	.word	0x080156c8

080091d4 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 80091d4:	b480      	push	{r7}
 80091d6:	b085      	sub	sp, #20
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 80091dc:	2300      	movs	r3, #0
 80091de:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 80091e0:	e005      	b.n	80091ee <pbuf_clen+0x1a>
    ++len;
 80091e2:	89fb      	ldrh	r3, [r7, #14]
 80091e4:	3301      	adds	r3, #1
 80091e6:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d1f6      	bne.n	80091e2 <pbuf_clen+0xe>
  }
  return len;
 80091f4:	89fb      	ldrh	r3, [r7, #14]
}
 80091f6:	4618      	mov	r0, r3
 80091f8:	3714      	adds	r7, #20
 80091fa:	46bd      	mov	sp, r7
 80091fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009200:	4770      	bx	lr
	...

08009204 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8009204:	b580      	push	{r7, lr}
 8009206:	b084      	sub	sp, #16
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	2b00      	cmp	r3, #0
 8009210:	d016      	beq.n	8009240 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8009212:	f009 f91d 	bl	8012450 <sys_arch_protect>
 8009216:	60f8      	str	r0, [r7, #12]
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	7b9b      	ldrb	r3, [r3, #14]
 800921c:	3301      	adds	r3, #1
 800921e:	b2da      	uxtb	r2, r3
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	739a      	strb	r2, [r3, #14]
 8009224:	68f8      	ldr	r0, [r7, #12]
 8009226:	f009 f921 	bl	801246c <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	7b9b      	ldrb	r3, [r3, #14]
 800922e:	2b00      	cmp	r3, #0
 8009230:	d106      	bne.n	8009240 <pbuf_ref+0x3c>
 8009232:	4b05      	ldr	r3, [pc, #20]	; (8009248 <pbuf_ref+0x44>)
 8009234:	f240 3242 	movw	r2, #834	; 0x342
 8009238:	4904      	ldr	r1, [pc, #16]	; (800924c <pbuf_ref+0x48>)
 800923a:	4805      	ldr	r0, [pc, #20]	; (8009250 <pbuf_ref+0x4c>)
 800923c:	f00a fe34 	bl	8013ea8 <iprintf>
  }
}
 8009240:	bf00      	nop
 8009242:	3710      	adds	r7, #16
 8009244:	46bd      	mov	sp, r7
 8009246:	bd80      	pop	{r7, pc}
 8009248:	080154fc 	.word	0x080154fc
 800924c:	080156dc 	.word	0x080156dc
 8009250:	0801555c 	.word	0x0801555c

08009254 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8009254:	b580      	push	{r7, lr}
 8009256:	b084      	sub	sp, #16
 8009258:	af00      	add	r7, sp, #0
 800925a:	6078      	str	r0, [r7, #4]
 800925c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d002      	beq.n	800926a <pbuf_cat+0x16>
 8009264:	683b      	ldr	r3, [r7, #0]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d107      	bne.n	800927a <pbuf_cat+0x26>
 800926a:	4b20      	ldr	r3, [pc, #128]	; (80092ec <pbuf_cat+0x98>)
 800926c:	f240 3259 	movw	r2, #857	; 0x359
 8009270:	491f      	ldr	r1, [pc, #124]	; (80092f0 <pbuf_cat+0x9c>)
 8009272:	4820      	ldr	r0, [pc, #128]	; (80092f4 <pbuf_cat+0xa0>)
 8009274:	f00a fe18 	bl	8013ea8 <iprintf>
 8009278:	e034      	b.n	80092e4 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	60fb      	str	r3, [r7, #12]
 800927e:	e00a      	b.n	8009296 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	891a      	ldrh	r2, [r3, #8]
 8009284:	683b      	ldr	r3, [r7, #0]
 8009286:	891b      	ldrh	r3, [r3, #8]
 8009288:	4413      	add	r3, r2
 800928a:	b29a      	uxth	r2, r3
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	60fb      	str	r3, [r7, #12]
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	2b00      	cmp	r3, #0
 800929c:	d1f0      	bne.n	8009280 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	891a      	ldrh	r2, [r3, #8]
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	895b      	ldrh	r3, [r3, #10]
 80092a6:	429a      	cmp	r2, r3
 80092a8:	d006      	beq.n	80092b8 <pbuf_cat+0x64>
 80092aa:	4b10      	ldr	r3, [pc, #64]	; (80092ec <pbuf_cat+0x98>)
 80092ac:	f240 3262 	movw	r2, #866	; 0x362
 80092b0:	4911      	ldr	r1, [pc, #68]	; (80092f8 <pbuf_cat+0xa4>)
 80092b2:	4810      	ldr	r0, [pc, #64]	; (80092f4 <pbuf_cat+0xa0>)
 80092b4:	f00a fdf8 	bl	8013ea8 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d006      	beq.n	80092ce <pbuf_cat+0x7a>
 80092c0:	4b0a      	ldr	r3, [pc, #40]	; (80092ec <pbuf_cat+0x98>)
 80092c2:	f240 3263 	movw	r2, #867	; 0x363
 80092c6:	490d      	ldr	r1, [pc, #52]	; (80092fc <pbuf_cat+0xa8>)
 80092c8:	480a      	ldr	r0, [pc, #40]	; (80092f4 <pbuf_cat+0xa0>)
 80092ca:	f00a fded 	bl	8013ea8 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	891a      	ldrh	r2, [r3, #8]
 80092d2:	683b      	ldr	r3, [r7, #0]
 80092d4:	891b      	ldrh	r3, [r3, #8]
 80092d6:	4413      	add	r3, r2
 80092d8:	b29a      	uxth	r2, r3
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	683a      	ldr	r2, [r7, #0]
 80092e2:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80092e4:	3710      	adds	r7, #16
 80092e6:	46bd      	mov	sp, r7
 80092e8:	bd80      	pop	{r7, pc}
 80092ea:	bf00      	nop
 80092ec:	080154fc 	.word	0x080154fc
 80092f0:	080156f0 	.word	0x080156f0
 80092f4:	0801555c 	.word	0x0801555c
 80092f8:	08015728 	.word	0x08015728
 80092fc:	08015758 	.word	0x08015758

08009300 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8009300:	b580      	push	{r7, lr}
 8009302:	b082      	sub	sp, #8
 8009304:	af00      	add	r7, sp, #0
 8009306:	6078      	str	r0, [r7, #4]
 8009308:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800930a:	6839      	ldr	r1, [r7, #0]
 800930c:	6878      	ldr	r0, [r7, #4]
 800930e:	f7ff ffa1 	bl	8009254 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8009312:	6838      	ldr	r0, [r7, #0]
 8009314:	f7ff ff76 	bl	8009204 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8009318:	bf00      	nop
 800931a:	3708      	adds	r7, #8
 800931c:	46bd      	mov	sp, r7
 800931e:	bd80      	pop	{r7, pc}

08009320 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8009320:	b580      	push	{r7, lr}
 8009322:	b086      	sub	sp, #24
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]
 8009328:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800932a:	2300      	movs	r3, #0
 800932c:	617b      	str	r3, [r7, #20]
 800932e:	2300      	movs	r3, #0
 8009330:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	2b00      	cmp	r3, #0
 8009336:	d008      	beq.n	800934a <pbuf_copy+0x2a>
 8009338:	683b      	ldr	r3, [r7, #0]
 800933a:	2b00      	cmp	r3, #0
 800933c:	d005      	beq.n	800934a <pbuf_copy+0x2a>
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	891a      	ldrh	r2, [r3, #8]
 8009342:	683b      	ldr	r3, [r7, #0]
 8009344:	891b      	ldrh	r3, [r3, #8]
 8009346:	429a      	cmp	r2, r3
 8009348:	d209      	bcs.n	800935e <pbuf_copy+0x3e>
 800934a:	4b57      	ldr	r3, [pc, #348]	; (80094a8 <pbuf_copy+0x188>)
 800934c:	f240 32c9 	movw	r2, #969	; 0x3c9
 8009350:	4956      	ldr	r1, [pc, #344]	; (80094ac <pbuf_copy+0x18c>)
 8009352:	4857      	ldr	r0, [pc, #348]	; (80094b0 <pbuf_copy+0x190>)
 8009354:	f00a fda8 	bl	8013ea8 <iprintf>
 8009358:	f06f 030f 	mvn.w	r3, #15
 800935c:	e09f      	b.n	800949e <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	895b      	ldrh	r3, [r3, #10]
 8009362:	461a      	mov	r2, r3
 8009364:	697b      	ldr	r3, [r7, #20]
 8009366:	1ad2      	subs	r2, r2, r3
 8009368:	683b      	ldr	r3, [r7, #0]
 800936a:	895b      	ldrh	r3, [r3, #10]
 800936c:	4619      	mov	r1, r3
 800936e:	693b      	ldr	r3, [r7, #16]
 8009370:	1acb      	subs	r3, r1, r3
 8009372:	429a      	cmp	r2, r3
 8009374:	d306      	bcc.n	8009384 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8009376:	683b      	ldr	r3, [r7, #0]
 8009378:	895b      	ldrh	r3, [r3, #10]
 800937a:	461a      	mov	r2, r3
 800937c:	693b      	ldr	r3, [r7, #16]
 800937e:	1ad3      	subs	r3, r2, r3
 8009380:	60fb      	str	r3, [r7, #12]
 8009382:	e005      	b.n	8009390 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	895b      	ldrh	r3, [r3, #10]
 8009388:	461a      	mov	r2, r3
 800938a:	697b      	ldr	r3, [r7, #20]
 800938c:	1ad3      	subs	r3, r2, r3
 800938e:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	685a      	ldr	r2, [r3, #4]
 8009394:	697b      	ldr	r3, [r7, #20]
 8009396:	18d0      	adds	r0, r2, r3
 8009398:	683b      	ldr	r3, [r7, #0]
 800939a:	685a      	ldr	r2, [r3, #4]
 800939c:	693b      	ldr	r3, [r7, #16]
 800939e:	4413      	add	r3, r2
 80093a0:	68fa      	ldr	r2, [r7, #12]
 80093a2:	4619      	mov	r1, r3
 80093a4:	f00a fcd5 	bl	8013d52 <memcpy>
    offset_to += len;
 80093a8:	697a      	ldr	r2, [r7, #20]
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	4413      	add	r3, r2
 80093ae:	617b      	str	r3, [r7, #20]
    offset_from += len;
 80093b0:	693a      	ldr	r2, [r7, #16]
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	4413      	add	r3, r2
 80093b6:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	895b      	ldrh	r3, [r3, #10]
 80093bc:	461a      	mov	r2, r3
 80093be:	697b      	ldr	r3, [r7, #20]
 80093c0:	4293      	cmp	r3, r2
 80093c2:	d906      	bls.n	80093d2 <pbuf_copy+0xb2>
 80093c4:	4b38      	ldr	r3, [pc, #224]	; (80094a8 <pbuf_copy+0x188>)
 80093c6:	f240 32d9 	movw	r2, #985	; 0x3d9
 80093ca:	493a      	ldr	r1, [pc, #232]	; (80094b4 <pbuf_copy+0x194>)
 80093cc:	4838      	ldr	r0, [pc, #224]	; (80094b0 <pbuf_copy+0x190>)
 80093ce:	f00a fd6b 	bl	8013ea8 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80093d2:	683b      	ldr	r3, [r7, #0]
 80093d4:	895b      	ldrh	r3, [r3, #10]
 80093d6:	461a      	mov	r2, r3
 80093d8:	693b      	ldr	r3, [r7, #16]
 80093da:	4293      	cmp	r3, r2
 80093dc:	d906      	bls.n	80093ec <pbuf_copy+0xcc>
 80093de:	4b32      	ldr	r3, [pc, #200]	; (80094a8 <pbuf_copy+0x188>)
 80093e0:	f240 32da 	movw	r2, #986	; 0x3da
 80093e4:	4934      	ldr	r1, [pc, #208]	; (80094b8 <pbuf_copy+0x198>)
 80093e6:	4832      	ldr	r0, [pc, #200]	; (80094b0 <pbuf_copy+0x190>)
 80093e8:	f00a fd5e 	bl	8013ea8 <iprintf>
    if (offset_from >= p_from->len) {
 80093ec:	683b      	ldr	r3, [r7, #0]
 80093ee:	895b      	ldrh	r3, [r3, #10]
 80093f0:	461a      	mov	r2, r3
 80093f2:	693b      	ldr	r3, [r7, #16]
 80093f4:	4293      	cmp	r3, r2
 80093f6:	d304      	bcc.n	8009402 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 80093f8:	2300      	movs	r3, #0
 80093fa:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 80093fc:	683b      	ldr	r3, [r7, #0]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	895b      	ldrh	r3, [r3, #10]
 8009406:	461a      	mov	r2, r3
 8009408:	697b      	ldr	r3, [r7, #20]
 800940a:	4293      	cmp	r3, r2
 800940c:	d114      	bne.n	8009438 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800940e:	2300      	movs	r3, #0
 8009410:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d10c      	bne.n	8009438 <pbuf_copy+0x118>
 800941e:	683b      	ldr	r3, [r7, #0]
 8009420:	2b00      	cmp	r3, #0
 8009422:	d009      	beq.n	8009438 <pbuf_copy+0x118>
 8009424:	4b20      	ldr	r3, [pc, #128]	; (80094a8 <pbuf_copy+0x188>)
 8009426:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800942a:	4924      	ldr	r1, [pc, #144]	; (80094bc <pbuf_copy+0x19c>)
 800942c:	4820      	ldr	r0, [pc, #128]	; (80094b0 <pbuf_copy+0x190>)
 800942e:	f00a fd3b 	bl	8013ea8 <iprintf>
 8009432:	f06f 030f 	mvn.w	r3, #15
 8009436:	e032      	b.n	800949e <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8009438:	683b      	ldr	r3, [r7, #0]
 800943a:	2b00      	cmp	r3, #0
 800943c:	d013      	beq.n	8009466 <pbuf_copy+0x146>
 800943e:	683b      	ldr	r3, [r7, #0]
 8009440:	895a      	ldrh	r2, [r3, #10]
 8009442:	683b      	ldr	r3, [r7, #0]
 8009444:	891b      	ldrh	r3, [r3, #8]
 8009446:	429a      	cmp	r2, r3
 8009448:	d10d      	bne.n	8009466 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800944a:	683b      	ldr	r3, [r7, #0]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	2b00      	cmp	r3, #0
 8009450:	d009      	beq.n	8009466 <pbuf_copy+0x146>
 8009452:	4b15      	ldr	r3, [pc, #84]	; (80094a8 <pbuf_copy+0x188>)
 8009454:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8009458:	4919      	ldr	r1, [pc, #100]	; (80094c0 <pbuf_copy+0x1a0>)
 800945a:	4815      	ldr	r0, [pc, #84]	; (80094b0 <pbuf_copy+0x190>)
 800945c:	f00a fd24 	bl	8013ea8 <iprintf>
 8009460:	f06f 0305 	mvn.w	r3, #5
 8009464:	e01b      	b.n	800949e <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	2b00      	cmp	r3, #0
 800946a:	d013      	beq.n	8009494 <pbuf_copy+0x174>
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	895a      	ldrh	r2, [r3, #10]
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	891b      	ldrh	r3, [r3, #8]
 8009474:	429a      	cmp	r2, r3
 8009476:	d10d      	bne.n	8009494 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d009      	beq.n	8009494 <pbuf_copy+0x174>
 8009480:	4b09      	ldr	r3, [pc, #36]	; (80094a8 <pbuf_copy+0x188>)
 8009482:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8009486:	490e      	ldr	r1, [pc, #56]	; (80094c0 <pbuf_copy+0x1a0>)
 8009488:	4809      	ldr	r0, [pc, #36]	; (80094b0 <pbuf_copy+0x190>)
 800948a:	f00a fd0d 	bl	8013ea8 <iprintf>
 800948e:	f06f 0305 	mvn.w	r3, #5
 8009492:	e004      	b.n	800949e <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8009494:	683b      	ldr	r3, [r7, #0]
 8009496:	2b00      	cmp	r3, #0
 8009498:	f47f af61 	bne.w	800935e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800949c:	2300      	movs	r3, #0
}
 800949e:	4618      	mov	r0, r3
 80094a0:	3718      	adds	r7, #24
 80094a2:	46bd      	mov	sp, r7
 80094a4:	bd80      	pop	{r7, pc}
 80094a6:	bf00      	nop
 80094a8:	080154fc 	.word	0x080154fc
 80094ac:	080157a4 	.word	0x080157a4
 80094b0:	0801555c 	.word	0x0801555c
 80094b4:	080157d4 	.word	0x080157d4
 80094b8:	080157ec 	.word	0x080157ec
 80094bc:	08015808 	.word	0x08015808
 80094c0:	08015818 	.word	0x08015818

080094c4 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 80094c4:	b580      	push	{r7, lr}
 80094c6:	b088      	sub	sp, #32
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	60f8      	str	r0, [r7, #12]
 80094cc:	60b9      	str	r1, [r7, #8]
 80094ce:	4611      	mov	r1, r2
 80094d0:	461a      	mov	r2, r3
 80094d2:	460b      	mov	r3, r1
 80094d4:	80fb      	strh	r3, [r7, #6]
 80094d6:	4613      	mov	r3, r2
 80094d8:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 80094da:	2300      	movs	r3, #0
 80094dc:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 80094de:	2300      	movs	r3, #0
 80094e0:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d108      	bne.n	80094fa <pbuf_copy_partial+0x36>
 80094e8:	4b2b      	ldr	r3, [pc, #172]	; (8009598 <pbuf_copy_partial+0xd4>)
 80094ea:	f240 420a 	movw	r2, #1034	; 0x40a
 80094ee:	492b      	ldr	r1, [pc, #172]	; (800959c <pbuf_copy_partial+0xd8>)
 80094f0:	482b      	ldr	r0, [pc, #172]	; (80095a0 <pbuf_copy_partial+0xdc>)
 80094f2:	f00a fcd9 	bl	8013ea8 <iprintf>
 80094f6:	2300      	movs	r3, #0
 80094f8:	e04a      	b.n	8009590 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80094fa:	68bb      	ldr	r3, [r7, #8]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d108      	bne.n	8009512 <pbuf_copy_partial+0x4e>
 8009500:	4b25      	ldr	r3, [pc, #148]	; (8009598 <pbuf_copy_partial+0xd4>)
 8009502:	f240 420b 	movw	r2, #1035	; 0x40b
 8009506:	4927      	ldr	r1, [pc, #156]	; (80095a4 <pbuf_copy_partial+0xe0>)
 8009508:	4825      	ldr	r0, [pc, #148]	; (80095a0 <pbuf_copy_partial+0xdc>)
 800950a:	f00a fccd 	bl	8013ea8 <iprintf>
 800950e:	2300      	movs	r3, #0
 8009510:	e03e      	b.n	8009590 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	61fb      	str	r3, [r7, #28]
 8009516:	e034      	b.n	8009582 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8009518:	88bb      	ldrh	r3, [r7, #4]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d00a      	beq.n	8009534 <pbuf_copy_partial+0x70>
 800951e:	69fb      	ldr	r3, [r7, #28]
 8009520:	895b      	ldrh	r3, [r3, #10]
 8009522:	88ba      	ldrh	r2, [r7, #4]
 8009524:	429a      	cmp	r2, r3
 8009526:	d305      	bcc.n	8009534 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8009528:	69fb      	ldr	r3, [r7, #28]
 800952a:	895b      	ldrh	r3, [r3, #10]
 800952c:	88ba      	ldrh	r2, [r7, #4]
 800952e:	1ad3      	subs	r3, r2, r3
 8009530:	80bb      	strh	r3, [r7, #4]
 8009532:	e023      	b.n	800957c <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8009534:	69fb      	ldr	r3, [r7, #28]
 8009536:	895a      	ldrh	r2, [r3, #10]
 8009538:	88bb      	ldrh	r3, [r7, #4]
 800953a:	1ad3      	subs	r3, r2, r3
 800953c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800953e:	8b3a      	ldrh	r2, [r7, #24]
 8009540:	88fb      	ldrh	r3, [r7, #6]
 8009542:	429a      	cmp	r2, r3
 8009544:	d901      	bls.n	800954a <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8009546:	88fb      	ldrh	r3, [r7, #6]
 8009548:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800954a:	8b7b      	ldrh	r3, [r7, #26]
 800954c:	68ba      	ldr	r2, [r7, #8]
 800954e:	18d0      	adds	r0, r2, r3
 8009550:	69fb      	ldr	r3, [r7, #28]
 8009552:	685a      	ldr	r2, [r3, #4]
 8009554:	88bb      	ldrh	r3, [r7, #4]
 8009556:	4413      	add	r3, r2
 8009558:	8b3a      	ldrh	r2, [r7, #24]
 800955a:	4619      	mov	r1, r3
 800955c:	f00a fbf9 	bl	8013d52 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8009560:	8afa      	ldrh	r2, [r7, #22]
 8009562:	8b3b      	ldrh	r3, [r7, #24]
 8009564:	4413      	add	r3, r2
 8009566:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8009568:	8b7a      	ldrh	r2, [r7, #26]
 800956a:	8b3b      	ldrh	r3, [r7, #24]
 800956c:	4413      	add	r3, r2
 800956e:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8009570:	88fa      	ldrh	r2, [r7, #6]
 8009572:	8b3b      	ldrh	r3, [r7, #24]
 8009574:	1ad3      	subs	r3, r2, r3
 8009576:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8009578:	2300      	movs	r3, #0
 800957a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800957c:	69fb      	ldr	r3, [r7, #28]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	61fb      	str	r3, [r7, #28]
 8009582:	88fb      	ldrh	r3, [r7, #6]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d002      	beq.n	800958e <pbuf_copy_partial+0xca>
 8009588:	69fb      	ldr	r3, [r7, #28]
 800958a:	2b00      	cmp	r3, #0
 800958c:	d1c4      	bne.n	8009518 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800958e:	8afb      	ldrh	r3, [r7, #22]
}
 8009590:	4618      	mov	r0, r3
 8009592:	3720      	adds	r7, #32
 8009594:	46bd      	mov	sp, r7
 8009596:	bd80      	pop	{r7, pc}
 8009598:	080154fc 	.word	0x080154fc
 800959c:	08015844 	.word	0x08015844
 80095a0:	0801555c 	.word	0x0801555c
 80095a4:	08015864 	.word	0x08015864

080095a8 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 80095a8:	b580      	push	{r7, lr}
 80095aa:	b084      	sub	sp, #16
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	4603      	mov	r3, r0
 80095b0:	603a      	str	r2, [r7, #0]
 80095b2:	71fb      	strb	r3, [r7, #7]
 80095b4:	460b      	mov	r3, r1
 80095b6:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 80095b8:	683b      	ldr	r3, [r7, #0]
 80095ba:	8919      	ldrh	r1, [r3, #8]
 80095bc:	88ba      	ldrh	r2, [r7, #4]
 80095be:	79fb      	ldrb	r3, [r7, #7]
 80095c0:	4618      	mov	r0, r3
 80095c2:	f7ff fa95 	bl	8008af0 <pbuf_alloc>
 80095c6:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d101      	bne.n	80095d2 <pbuf_clone+0x2a>
    return NULL;
 80095ce:	2300      	movs	r3, #0
 80095d0:	e011      	b.n	80095f6 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 80095d2:	6839      	ldr	r1, [r7, #0]
 80095d4:	68f8      	ldr	r0, [r7, #12]
 80095d6:	f7ff fea3 	bl	8009320 <pbuf_copy>
 80095da:	4603      	mov	r3, r0
 80095dc:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 80095de:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d006      	beq.n	80095f4 <pbuf_clone+0x4c>
 80095e6:	4b06      	ldr	r3, [pc, #24]	; (8009600 <pbuf_clone+0x58>)
 80095e8:	f240 5224 	movw	r2, #1316	; 0x524
 80095ec:	4905      	ldr	r1, [pc, #20]	; (8009604 <pbuf_clone+0x5c>)
 80095ee:	4806      	ldr	r0, [pc, #24]	; (8009608 <pbuf_clone+0x60>)
 80095f0:	f00a fc5a 	bl	8013ea8 <iprintf>
  return q;
 80095f4:	68fb      	ldr	r3, [r7, #12]
}
 80095f6:	4618      	mov	r0, r3
 80095f8:	3710      	adds	r7, #16
 80095fa:	46bd      	mov	sp, r7
 80095fc:	bd80      	pop	{r7, pc}
 80095fe:	bf00      	nop
 8009600:	080154fc 	.word	0x080154fc
 8009604:	08015970 	.word	0x08015970
 8009608:	0801555c 	.word	0x0801555c

0800960c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800960c:	b580      	push	{r7, lr}
 800960e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8009610:	f00a fc62 	bl	8013ed8 <rand>
 8009614:	4603      	mov	r3, r0
 8009616:	b29b      	uxth	r3, r3
 8009618:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800961c:	b29b      	uxth	r3, r3
 800961e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8009622:	b29a      	uxth	r2, r3
 8009624:	4b01      	ldr	r3, [pc, #4]	; (800962c <tcp_init+0x20>)
 8009626:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8009628:	bf00      	nop
 800962a:	bd80      	pop	{r7, pc}
 800962c:	2000000c 	.word	0x2000000c

08009630 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8009630:	b580      	push	{r7, lr}
 8009632:	b082      	sub	sp, #8
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	7d1b      	ldrb	r3, [r3, #20]
 800963c:	2b01      	cmp	r3, #1
 800963e:	d105      	bne.n	800964c <tcp_free+0x1c>
 8009640:	4b06      	ldr	r3, [pc, #24]	; (800965c <tcp_free+0x2c>)
 8009642:	22d4      	movs	r2, #212	; 0xd4
 8009644:	4906      	ldr	r1, [pc, #24]	; (8009660 <tcp_free+0x30>)
 8009646:	4807      	ldr	r0, [pc, #28]	; (8009664 <tcp_free+0x34>)
 8009648:	f00a fc2e 	bl	8013ea8 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800964c:	6879      	ldr	r1, [r7, #4]
 800964e:	2001      	movs	r0, #1
 8009650:	f7fe fe8e 	bl	8008370 <memp_free>
}
 8009654:	bf00      	nop
 8009656:	3708      	adds	r7, #8
 8009658:	46bd      	mov	sp, r7
 800965a:	bd80      	pop	{r7, pc}
 800965c:	080159fc 	.word	0x080159fc
 8009660:	08015a2c 	.word	0x08015a2c
 8009664:	08015a40 	.word	0x08015a40

08009668 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8009668:	b580      	push	{r7, lr}
 800966a:	b082      	sub	sp, #8
 800966c:	af00      	add	r7, sp, #0
 800966e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	7d1b      	ldrb	r3, [r3, #20]
 8009674:	2b01      	cmp	r3, #1
 8009676:	d105      	bne.n	8009684 <tcp_free_listen+0x1c>
 8009678:	4b06      	ldr	r3, [pc, #24]	; (8009694 <tcp_free_listen+0x2c>)
 800967a:	22df      	movs	r2, #223	; 0xdf
 800967c:	4906      	ldr	r1, [pc, #24]	; (8009698 <tcp_free_listen+0x30>)
 800967e:	4807      	ldr	r0, [pc, #28]	; (800969c <tcp_free_listen+0x34>)
 8009680:	f00a fc12 	bl	8013ea8 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8009684:	6879      	ldr	r1, [r7, #4]
 8009686:	2002      	movs	r0, #2
 8009688:	f7fe fe72 	bl	8008370 <memp_free>
}
 800968c:	bf00      	nop
 800968e:	3708      	adds	r7, #8
 8009690:	46bd      	mov	sp, r7
 8009692:	bd80      	pop	{r7, pc}
 8009694:	080159fc 	.word	0x080159fc
 8009698:	08015a68 	.word	0x08015a68
 800969c:	08015a40 	.word	0x08015a40

080096a0 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 80096a4:	f001 f85c 	bl	800a760 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 80096a8:	4b07      	ldr	r3, [pc, #28]	; (80096c8 <tcp_tmr+0x28>)
 80096aa:	781b      	ldrb	r3, [r3, #0]
 80096ac:	3301      	adds	r3, #1
 80096ae:	b2da      	uxtb	r2, r3
 80096b0:	4b05      	ldr	r3, [pc, #20]	; (80096c8 <tcp_tmr+0x28>)
 80096b2:	701a      	strb	r2, [r3, #0]
 80096b4:	4b04      	ldr	r3, [pc, #16]	; (80096c8 <tcp_tmr+0x28>)
 80096b6:	781b      	ldrb	r3, [r3, #0]
 80096b8:	f003 0301 	and.w	r3, r3, #1
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d001      	beq.n	80096c4 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 80096c0:	f000 fd0e 	bl	800a0e0 <tcp_slowtmr>
  }
}
 80096c4:	bf00      	nop
 80096c6:	bd80      	pop	{r7, pc}
 80096c8:	20008229 	.word	0x20008229

080096cc <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 80096cc:	b580      	push	{r7, lr}
 80096ce:	b084      	sub	sp, #16
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
 80096d4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 80096d6:	683b      	ldr	r3, [r7, #0]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d105      	bne.n	80096e8 <tcp_remove_listener+0x1c>
 80096dc:	4b0d      	ldr	r3, [pc, #52]	; (8009714 <tcp_remove_listener+0x48>)
 80096de:	22ff      	movs	r2, #255	; 0xff
 80096e0:	490d      	ldr	r1, [pc, #52]	; (8009718 <tcp_remove_listener+0x4c>)
 80096e2:	480e      	ldr	r0, [pc, #56]	; (800971c <tcp_remove_listener+0x50>)
 80096e4:	f00a fbe0 	bl	8013ea8 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	60fb      	str	r3, [r7, #12]
 80096ec:	e00a      	b.n	8009704 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80096f2:	683a      	ldr	r2, [r7, #0]
 80096f4:	429a      	cmp	r2, r3
 80096f6:	d102      	bne.n	80096fe <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	2200      	movs	r2, #0
 80096fc:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	68db      	ldr	r3, [r3, #12]
 8009702:	60fb      	str	r3, [r7, #12]
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	2b00      	cmp	r3, #0
 8009708:	d1f1      	bne.n	80096ee <tcp_remove_listener+0x22>
    }
  }
}
 800970a:	bf00      	nop
 800970c:	bf00      	nop
 800970e:	3710      	adds	r7, #16
 8009710:	46bd      	mov	sp, r7
 8009712:	bd80      	pop	{r7, pc}
 8009714:	080159fc 	.word	0x080159fc
 8009718:	08015a84 	.word	0x08015a84
 800971c:	08015a40 	.word	0x08015a40

08009720 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8009720:	b580      	push	{r7, lr}
 8009722:	b084      	sub	sp, #16
 8009724:	af00      	add	r7, sp, #0
 8009726:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	2b00      	cmp	r3, #0
 800972c:	d106      	bne.n	800973c <tcp_listen_closed+0x1c>
 800972e:	4b14      	ldr	r3, [pc, #80]	; (8009780 <tcp_listen_closed+0x60>)
 8009730:	f240 1211 	movw	r2, #273	; 0x111
 8009734:	4913      	ldr	r1, [pc, #76]	; (8009784 <tcp_listen_closed+0x64>)
 8009736:	4814      	ldr	r0, [pc, #80]	; (8009788 <tcp_listen_closed+0x68>)
 8009738:	f00a fbb6 	bl	8013ea8 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	7d1b      	ldrb	r3, [r3, #20]
 8009740:	2b01      	cmp	r3, #1
 8009742:	d006      	beq.n	8009752 <tcp_listen_closed+0x32>
 8009744:	4b0e      	ldr	r3, [pc, #56]	; (8009780 <tcp_listen_closed+0x60>)
 8009746:	f44f 7289 	mov.w	r2, #274	; 0x112
 800974a:	4910      	ldr	r1, [pc, #64]	; (800978c <tcp_listen_closed+0x6c>)
 800974c:	480e      	ldr	r0, [pc, #56]	; (8009788 <tcp_listen_closed+0x68>)
 800974e:	f00a fbab 	bl	8013ea8 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8009752:	2301      	movs	r3, #1
 8009754:	60fb      	str	r3, [r7, #12]
 8009756:	e00b      	b.n	8009770 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8009758:	4a0d      	ldr	r2, [pc, #52]	; (8009790 <tcp_listen_closed+0x70>)
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	6879      	ldr	r1, [r7, #4]
 8009764:	4618      	mov	r0, r3
 8009766:	f7ff ffb1 	bl	80096cc <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	3301      	adds	r3, #1
 800976e:	60fb      	str	r3, [r7, #12]
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	2b03      	cmp	r3, #3
 8009774:	d9f0      	bls.n	8009758 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8009776:	bf00      	nop
 8009778:	bf00      	nop
 800977a:	3710      	adds	r7, #16
 800977c:	46bd      	mov	sp, r7
 800977e:	bd80      	pop	{r7, pc}
 8009780:	080159fc 	.word	0x080159fc
 8009784:	08015aac 	.word	0x08015aac
 8009788:	08015a40 	.word	0x08015a40
 800978c:	08015ab8 	.word	0x08015ab8
 8009790:	08017aa8 	.word	0x08017aa8

08009794 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8009794:	b5b0      	push	{r4, r5, r7, lr}
 8009796:	b088      	sub	sp, #32
 8009798:	af04      	add	r7, sp, #16
 800979a:	6078      	str	r0, [r7, #4]
 800979c:	460b      	mov	r3, r1
 800979e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d106      	bne.n	80097b4 <tcp_close_shutdown+0x20>
 80097a6:	4b63      	ldr	r3, [pc, #396]	; (8009934 <tcp_close_shutdown+0x1a0>)
 80097a8:	f44f 72af 	mov.w	r2, #350	; 0x15e
 80097ac:	4962      	ldr	r1, [pc, #392]	; (8009938 <tcp_close_shutdown+0x1a4>)
 80097ae:	4863      	ldr	r0, [pc, #396]	; (800993c <tcp_close_shutdown+0x1a8>)
 80097b0:	f00a fb7a 	bl	8013ea8 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 80097b4:	78fb      	ldrb	r3, [r7, #3]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d066      	beq.n	8009888 <tcp_close_shutdown+0xf4>
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	7d1b      	ldrb	r3, [r3, #20]
 80097be:	2b04      	cmp	r3, #4
 80097c0:	d003      	beq.n	80097ca <tcp_close_shutdown+0x36>
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	7d1b      	ldrb	r3, [r3, #20]
 80097c6:	2b07      	cmp	r3, #7
 80097c8:	d15e      	bne.n	8009888 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d104      	bne.n	80097dc <tcp_close_shutdown+0x48>
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80097d6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80097da:	d055      	beq.n	8009888 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	8b5b      	ldrh	r3, [r3, #26]
 80097e0:	f003 0310 	and.w	r3, r3, #16
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d106      	bne.n	80097f6 <tcp_close_shutdown+0x62>
 80097e8:	4b52      	ldr	r3, [pc, #328]	; (8009934 <tcp_close_shutdown+0x1a0>)
 80097ea:	f44f 72b2 	mov.w	r2, #356	; 0x164
 80097ee:	4954      	ldr	r1, [pc, #336]	; (8009940 <tcp_close_shutdown+0x1ac>)
 80097f0:	4852      	ldr	r0, [pc, #328]	; (800993c <tcp_close_shutdown+0x1a8>)
 80097f2:	f00a fb59 	bl	8013ea8 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80097fe:	687d      	ldr	r5, [r7, #4]
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	3304      	adds	r3, #4
 8009804:	687a      	ldr	r2, [r7, #4]
 8009806:	8ad2      	ldrh	r2, [r2, #22]
 8009808:	6879      	ldr	r1, [r7, #4]
 800980a:	8b09      	ldrh	r1, [r1, #24]
 800980c:	9102      	str	r1, [sp, #8]
 800980e:	9201      	str	r2, [sp, #4]
 8009810:	9300      	str	r3, [sp, #0]
 8009812:	462b      	mov	r3, r5
 8009814:	4622      	mov	r2, r4
 8009816:	4601      	mov	r1, r0
 8009818:	6878      	ldr	r0, [r7, #4]
 800981a:	f005 fd89 	bl	800f330 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800981e:	6878      	ldr	r0, [r7, #4]
 8009820:	f001 fb66 	bl	800aef0 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8009824:	4b47      	ldr	r3, [pc, #284]	; (8009944 <tcp_close_shutdown+0x1b0>)
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	687a      	ldr	r2, [r7, #4]
 800982a:	429a      	cmp	r2, r3
 800982c:	d105      	bne.n	800983a <tcp_close_shutdown+0xa6>
 800982e:	4b45      	ldr	r3, [pc, #276]	; (8009944 <tcp_close_shutdown+0x1b0>)
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	68db      	ldr	r3, [r3, #12]
 8009834:	4a43      	ldr	r2, [pc, #268]	; (8009944 <tcp_close_shutdown+0x1b0>)
 8009836:	6013      	str	r3, [r2, #0]
 8009838:	e013      	b.n	8009862 <tcp_close_shutdown+0xce>
 800983a:	4b42      	ldr	r3, [pc, #264]	; (8009944 <tcp_close_shutdown+0x1b0>)
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	60fb      	str	r3, [r7, #12]
 8009840:	e00c      	b.n	800985c <tcp_close_shutdown+0xc8>
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	68db      	ldr	r3, [r3, #12]
 8009846:	687a      	ldr	r2, [r7, #4]
 8009848:	429a      	cmp	r2, r3
 800984a:	d104      	bne.n	8009856 <tcp_close_shutdown+0xc2>
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	68da      	ldr	r2, [r3, #12]
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	60da      	str	r2, [r3, #12]
 8009854:	e005      	b.n	8009862 <tcp_close_shutdown+0xce>
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	68db      	ldr	r3, [r3, #12]
 800985a:	60fb      	str	r3, [r7, #12]
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	2b00      	cmp	r3, #0
 8009860:	d1ef      	bne.n	8009842 <tcp_close_shutdown+0xae>
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	2200      	movs	r2, #0
 8009866:	60da      	str	r2, [r3, #12]
 8009868:	4b37      	ldr	r3, [pc, #220]	; (8009948 <tcp_close_shutdown+0x1b4>)
 800986a:	2201      	movs	r2, #1
 800986c:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800986e:	4b37      	ldr	r3, [pc, #220]	; (800994c <tcp_close_shutdown+0x1b8>)
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	687a      	ldr	r2, [r7, #4]
 8009874:	429a      	cmp	r2, r3
 8009876:	d102      	bne.n	800987e <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8009878:	f003 fffe 	bl	800d878 <tcp_trigger_input_pcb_close>
 800987c:	e002      	b.n	8009884 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800987e:	6878      	ldr	r0, [r7, #4]
 8009880:	f7ff fed6 	bl	8009630 <tcp_free>
      }
      return ERR_OK;
 8009884:	2300      	movs	r3, #0
 8009886:	e050      	b.n	800992a <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	7d1b      	ldrb	r3, [r3, #20]
 800988c:	2b02      	cmp	r3, #2
 800988e:	d03b      	beq.n	8009908 <tcp_close_shutdown+0x174>
 8009890:	2b02      	cmp	r3, #2
 8009892:	dc44      	bgt.n	800991e <tcp_close_shutdown+0x18a>
 8009894:	2b00      	cmp	r3, #0
 8009896:	d002      	beq.n	800989e <tcp_close_shutdown+0x10a>
 8009898:	2b01      	cmp	r3, #1
 800989a:	d02a      	beq.n	80098f2 <tcp_close_shutdown+0x15e>
 800989c:	e03f      	b.n	800991e <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	8adb      	ldrh	r3, [r3, #22]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d021      	beq.n	80098ea <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80098a6:	4b2a      	ldr	r3, [pc, #168]	; (8009950 <tcp_close_shutdown+0x1bc>)
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	687a      	ldr	r2, [r7, #4]
 80098ac:	429a      	cmp	r2, r3
 80098ae:	d105      	bne.n	80098bc <tcp_close_shutdown+0x128>
 80098b0:	4b27      	ldr	r3, [pc, #156]	; (8009950 <tcp_close_shutdown+0x1bc>)
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	68db      	ldr	r3, [r3, #12]
 80098b6:	4a26      	ldr	r2, [pc, #152]	; (8009950 <tcp_close_shutdown+0x1bc>)
 80098b8:	6013      	str	r3, [r2, #0]
 80098ba:	e013      	b.n	80098e4 <tcp_close_shutdown+0x150>
 80098bc:	4b24      	ldr	r3, [pc, #144]	; (8009950 <tcp_close_shutdown+0x1bc>)
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	60bb      	str	r3, [r7, #8]
 80098c2:	e00c      	b.n	80098de <tcp_close_shutdown+0x14a>
 80098c4:	68bb      	ldr	r3, [r7, #8]
 80098c6:	68db      	ldr	r3, [r3, #12]
 80098c8:	687a      	ldr	r2, [r7, #4]
 80098ca:	429a      	cmp	r2, r3
 80098cc:	d104      	bne.n	80098d8 <tcp_close_shutdown+0x144>
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	68da      	ldr	r2, [r3, #12]
 80098d2:	68bb      	ldr	r3, [r7, #8]
 80098d4:	60da      	str	r2, [r3, #12]
 80098d6:	e005      	b.n	80098e4 <tcp_close_shutdown+0x150>
 80098d8:	68bb      	ldr	r3, [r7, #8]
 80098da:	68db      	ldr	r3, [r3, #12]
 80098dc:	60bb      	str	r3, [r7, #8]
 80098de:	68bb      	ldr	r3, [r7, #8]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d1ef      	bne.n	80098c4 <tcp_close_shutdown+0x130>
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	2200      	movs	r2, #0
 80098e8:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 80098ea:	6878      	ldr	r0, [r7, #4]
 80098ec:	f7ff fea0 	bl	8009630 <tcp_free>
      break;
 80098f0:	e01a      	b.n	8009928 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 80098f2:	6878      	ldr	r0, [r7, #4]
 80098f4:	f7ff ff14 	bl	8009720 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 80098f8:	6879      	ldr	r1, [r7, #4]
 80098fa:	4816      	ldr	r0, [pc, #88]	; (8009954 <tcp_close_shutdown+0x1c0>)
 80098fc:	f001 fb48 	bl	800af90 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8009900:	6878      	ldr	r0, [r7, #4]
 8009902:	f7ff feb1 	bl	8009668 <tcp_free_listen>
      break;
 8009906:	e00f      	b.n	8009928 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8009908:	6879      	ldr	r1, [r7, #4]
 800990a:	480e      	ldr	r0, [pc, #56]	; (8009944 <tcp_close_shutdown+0x1b0>)
 800990c:	f001 fb40 	bl	800af90 <tcp_pcb_remove>
 8009910:	4b0d      	ldr	r3, [pc, #52]	; (8009948 <tcp_close_shutdown+0x1b4>)
 8009912:	2201      	movs	r2, #1
 8009914:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8009916:	6878      	ldr	r0, [r7, #4]
 8009918:	f7ff fe8a 	bl	8009630 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800991c:	e004      	b.n	8009928 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800991e:	6878      	ldr	r0, [r7, #4]
 8009920:	f000 f81a 	bl	8009958 <tcp_close_shutdown_fin>
 8009924:	4603      	mov	r3, r0
 8009926:	e000      	b.n	800992a <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8009928:	2300      	movs	r3, #0
}
 800992a:	4618      	mov	r0, r3
 800992c:	3710      	adds	r7, #16
 800992e:	46bd      	mov	sp, r7
 8009930:	bdb0      	pop	{r4, r5, r7, pc}
 8009932:	bf00      	nop
 8009934:	080159fc 	.word	0x080159fc
 8009938:	08015ad0 	.word	0x08015ad0
 800993c:	08015a40 	.word	0x08015a40
 8009940:	08015af0 	.word	0x08015af0
 8009944:	20008220 	.word	0x20008220
 8009948:	20008228 	.word	0x20008228
 800994c:	20008260 	.word	0x20008260
 8009950:	20008218 	.word	0x20008218
 8009954:	2000821c 	.word	0x2000821c

08009958 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8009958:	b580      	push	{r7, lr}
 800995a:	b084      	sub	sp, #16
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	2b00      	cmp	r3, #0
 8009964:	d106      	bne.n	8009974 <tcp_close_shutdown_fin+0x1c>
 8009966:	4b2e      	ldr	r3, [pc, #184]	; (8009a20 <tcp_close_shutdown_fin+0xc8>)
 8009968:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800996c:	492d      	ldr	r1, [pc, #180]	; (8009a24 <tcp_close_shutdown_fin+0xcc>)
 800996e:	482e      	ldr	r0, [pc, #184]	; (8009a28 <tcp_close_shutdown_fin+0xd0>)
 8009970:	f00a fa9a 	bl	8013ea8 <iprintf>

  switch (pcb->state) {
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	7d1b      	ldrb	r3, [r3, #20]
 8009978:	2b07      	cmp	r3, #7
 800997a:	d020      	beq.n	80099be <tcp_close_shutdown_fin+0x66>
 800997c:	2b07      	cmp	r3, #7
 800997e:	dc2b      	bgt.n	80099d8 <tcp_close_shutdown_fin+0x80>
 8009980:	2b03      	cmp	r3, #3
 8009982:	d002      	beq.n	800998a <tcp_close_shutdown_fin+0x32>
 8009984:	2b04      	cmp	r3, #4
 8009986:	d00d      	beq.n	80099a4 <tcp_close_shutdown_fin+0x4c>
 8009988:	e026      	b.n	80099d8 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800998a:	6878      	ldr	r0, [r7, #4]
 800998c:	f004 fdde 	bl	800e54c <tcp_send_fin>
 8009990:	4603      	mov	r3, r0
 8009992:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8009994:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009998:	2b00      	cmp	r3, #0
 800999a:	d11f      	bne.n	80099dc <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	2205      	movs	r2, #5
 80099a0:	751a      	strb	r2, [r3, #20]
      }
      break;
 80099a2:	e01b      	b.n	80099dc <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 80099a4:	6878      	ldr	r0, [r7, #4]
 80099a6:	f004 fdd1 	bl	800e54c <tcp_send_fin>
 80099aa:	4603      	mov	r3, r0
 80099ac:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80099ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d114      	bne.n	80099e0 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	2205      	movs	r2, #5
 80099ba:	751a      	strb	r2, [r3, #20]
      }
      break;
 80099bc:	e010      	b.n	80099e0 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 80099be:	6878      	ldr	r0, [r7, #4]
 80099c0:	f004 fdc4 	bl	800e54c <tcp_send_fin>
 80099c4:	4603      	mov	r3, r0
 80099c6:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80099c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d109      	bne.n	80099e4 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	2209      	movs	r2, #9
 80099d4:	751a      	strb	r2, [r3, #20]
      }
      break;
 80099d6:	e005      	b.n	80099e4 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 80099d8:	2300      	movs	r3, #0
 80099da:	e01c      	b.n	8009a16 <tcp_close_shutdown_fin+0xbe>
      break;
 80099dc:	bf00      	nop
 80099de:	e002      	b.n	80099e6 <tcp_close_shutdown_fin+0x8e>
      break;
 80099e0:	bf00      	nop
 80099e2:	e000      	b.n	80099e6 <tcp_close_shutdown_fin+0x8e>
      break;
 80099e4:	bf00      	nop
  }

  if (err == ERR_OK) {
 80099e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d103      	bne.n	80099f6 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 80099ee:	6878      	ldr	r0, [r7, #4]
 80099f0:	f004 feea 	bl	800e7c8 <tcp_output>
 80099f4:	e00d      	b.n	8009a12 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 80099f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80099fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099fe:	d108      	bne.n	8009a12 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	8b5b      	ldrh	r3, [r3, #26]
 8009a04:	f043 0308 	orr.w	r3, r3, #8
 8009a08:	b29a      	uxth	r2, r3
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8009a0e:	2300      	movs	r3, #0
 8009a10:	e001      	b.n	8009a16 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8009a12:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009a16:	4618      	mov	r0, r3
 8009a18:	3710      	adds	r7, #16
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	bd80      	pop	{r7, pc}
 8009a1e:	bf00      	nop
 8009a20:	080159fc 	.word	0x080159fc
 8009a24:	08015aac 	.word	0x08015aac
 8009a28:	08015a40 	.word	0x08015a40

08009a2c <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	b082      	sub	sp, #8
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d109      	bne.n	8009a4e <tcp_close+0x22>
 8009a3a:	4b0f      	ldr	r3, [pc, #60]	; (8009a78 <tcp_close+0x4c>)
 8009a3c:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8009a40:	490e      	ldr	r1, [pc, #56]	; (8009a7c <tcp_close+0x50>)
 8009a42:	480f      	ldr	r0, [pc, #60]	; (8009a80 <tcp_close+0x54>)
 8009a44:	f00a fa30 	bl	8013ea8 <iprintf>
 8009a48:	f06f 030f 	mvn.w	r3, #15
 8009a4c:	e00f      	b.n	8009a6e <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	7d1b      	ldrb	r3, [r3, #20]
 8009a52:	2b01      	cmp	r3, #1
 8009a54:	d006      	beq.n	8009a64 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	8b5b      	ldrh	r3, [r3, #26]
 8009a5a:	f043 0310 	orr.w	r3, r3, #16
 8009a5e:	b29a      	uxth	r2, r3
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8009a64:	2101      	movs	r1, #1
 8009a66:	6878      	ldr	r0, [r7, #4]
 8009a68:	f7ff fe94 	bl	8009794 <tcp_close_shutdown>
 8009a6c:	4603      	mov	r3, r0
}
 8009a6e:	4618      	mov	r0, r3
 8009a70:	3708      	adds	r7, #8
 8009a72:	46bd      	mov	sp, r7
 8009a74:	bd80      	pop	{r7, pc}
 8009a76:	bf00      	nop
 8009a78:	080159fc 	.word	0x080159fc
 8009a7c:	08015b0c 	.word	0x08015b0c
 8009a80:	08015a40 	.word	0x08015a40

08009a84 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8009a84:	b580      	push	{r7, lr}
 8009a86:	b08e      	sub	sp, #56	; 0x38
 8009a88:	af04      	add	r7, sp, #16
 8009a8a:	6078      	str	r0, [r7, #4]
 8009a8c:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d107      	bne.n	8009aa4 <tcp_abandon+0x20>
 8009a94:	4b52      	ldr	r3, [pc, #328]	; (8009be0 <tcp_abandon+0x15c>)
 8009a96:	f240 223d 	movw	r2, #573	; 0x23d
 8009a9a:	4952      	ldr	r1, [pc, #328]	; (8009be4 <tcp_abandon+0x160>)
 8009a9c:	4852      	ldr	r0, [pc, #328]	; (8009be8 <tcp_abandon+0x164>)
 8009a9e:	f00a fa03 	bl	8013ea8 <iprintf>
 8009aa2:	e099      	b.n	8009bd8 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	7d1b      	ldrb	r3, [r3, #20]
 8009aa8:	2b01      	cmp	r3, #1
 8009aaa:	d106      	bne.n	8009aba <tcp_abandon+0x36>
 8009aac:	4b4c      	ldr	r3, [pc, #304]	; (8009be0 <tcp_abandon+0x15c>)
 8009aae:	f44f 7210 	mov.w	r2, #576	; 0x240
 8009ab2:	494e      	ldr	r1, [pc, #312]	; (8009bec <tcp_abandon+0x168>)
 8009ab4:	484c      	ldr	r0, [pc, #304]	; (8009be8 <tcp_abandon+0x164>)
 8009ab6:	f00a f9f7 	bl	8013ea8 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	7d1b      	ldrb	r3, [r3, #20]
 8009abe:	2b0a      	cmp	r3, #10
 8009ac0:	d107      	bne.n	8009ad2 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8009ac2:	6879      	ldr	r1, [r7, #4]
 8009ac4:	484a      	ldr	r0, [pc, #296]	; (8009bf0 <tcp_abandon+0x16c>)
 8009ac6:	f001 fa63 	bl	800af90 <tcp_pcb_remove>
    tcp_free(pcb);
 8009aca:	6878      	ldr	r0, [r7, #4]
 8009acc:	f7ff fdb0 	bl	8009630 <tcp_free>
 8009ad0:	e082      	b.n	8009bd8 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8009ad2:	2300      	movs	r3, #0
 8009ad4:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ade:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ae4:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009aec:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	691b      	ldr	r3, [r3, #16]
 8009af2:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	7d1b      	ldrb	r3, [r3, #20]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d126      	bne.n	8009b4a <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	8adb      	ldrh	r3, [r3, #22]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d02e      	beq.n	8009b62 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8009b04:	4b3b      	ldr	r3, [pc, #236]	; (8009bf4 <tcp_abandon+0x170>)
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	687a      	ldr	r2, [r7, #4]
 8009b0a:	429a      	cmp	r2, r3
 8009b0c:	d105      	bne.n	8009b1a <tcp_abandon+0x96>
 8009b0e:	4b39      	ldr	r3, [pc, #228]	; (8009bf4 <tcp_abandon+0x170>)
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	68db      	ldr	r3, [r3, #12]
 8009b14:	4a37      	ldr	r2, [pc, #220]	; (8009bf4 <tcp_abandon+0x170>)
 8009b16:	6013      	str	r3, [r2, #0]
 8009b18:	e013      	b.n	8009b42 <tcp_abandon+0xbe>
 8009b1a:	4b36      	ldr	r3, [pc, #216]	; (8009bf4 <tcp_abandon+0x170>)
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	61fb      	str	r3, [r7, #28]
 8009b20:	e00c      	b.n	8009b3c <tcp_abandon+0xb8>
 8009b22:	69fb      	ldr	r3, [r7, #28]
 8009b24:	68db      	ldr	r3, [r3, #12]
 8009b26:	687a      	ldr	r2, [r7, #4]
 8009b28:	429a      	cmp	r2, r3
 8009b2a:	d104      	bne.n	8009b36 <tcp_abandon+0xb2>
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	68da      	ldr	r2, [r3, #12]
 8009b30:	69fb      	ldr	r3, [r7, #28]
 8009b32:	60da      	str	r2, [r3, #12]
 8009b34:	e005      	b.n	8009b42 <tcp_abandon+0xbe>
 8009b36:	69fb      	ldr	r3, [r7, #28]
 8009b38:	68db      	ldr	r3, [r3, #12]
 8009b3a:	61fb      	str	r3, [r7, #28]
 8009b3c:	69fb      	ldr	r3, [r7, #28]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d1ef      	bne.n	8009b22 <tcp_abandon+0x9e>
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	2200      	movs	r2, #0
 8009b46:	60da      	str	r2, [r3, #12]
 8009b48:	e00b      	b.n	8009b62 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8009b4a:	683b      	ldr	r3, [r7, #0]
 8009b4c:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	8adb      	ldrh	r3, [r3, #22]
 8009b52:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8009b54:	6879      	ldr	r1, [r7, #4]
 8009b56:	4828      	ldr	r0, [pc, #160]	; (8009bf8 <tcp_abandon+0x174>)
 8009b58:	f001 fa1a 	bl	800af90 <tcp_pcb_remove>
 8009b5c:	4b27      	ldr	r3, [pc, #156]	; (8009bfc <tcp_abandon+0x178>)
 8009b5e:	2201      	movs	r2, #1
 8009b60:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d004      	beq.n	8009b74 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b6e:	4618      	mov	r0, r3
 8009b70:	f000 fed6 	bl	800a920 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d004      	beq.n	8009b86 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009b80:	4618      	mov	r0, r3
 8009b82:	f000 fecd 	bl	800a920 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d004      	beq.n	8009b98 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b92:	4618      	mov	r0, r3
 8009b94:	f000 fec4 	bl	800a920 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8009b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d00e      	beq.n	8009bbc <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8009b9e:	6879      	ldr	r1, [r7, #4]
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	3304      	adds	r3, #4
 8009ba4:	687a      	ldr	r2, [r7, #4]
 8009ba6:	8b12      	ldrh	r2, [r2, #24]
 8009ba8:	9202      	str	r2, [sp, #8]
 8009baa:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8009bac:	9201      	str	r2, [sp, #4]
 8009bae:	9300      	str	r3, [sp, #0]
 8009bb0:	460b      	mov	r3, r1
 8009bb2:	697a      	ldr	r2, [r7, #20]
 8009bb4:	69b9      	ldr	r1, [r7, #24]
 8009bb6:	6878      	ldr	r0, [r7, #4]
 8009bb8:	f005 fbba 	bl	800f330 <tcp_rst>
    }
    last_state = pcb->state;
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	7d1b      	ldrb	r3, [r3, #20]
 8009bc0:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8009bc2:	6878      	ldr	r0, [r7, #4]
 8009bc4:	f7ff fd34 	bl	8009630 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8009bc8:	693b      	ldr	r3, [r7, #16]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d004      	beq.n	8009bd8 <tcp_abandon+0x154>
 8009bce:	693b      	ldr	r3, [r7, #16]
 8009bd0:	f06f 010c 	mvn.w	r1, #12
 8009bd4:	68f8      	ldr	r0, [r7, #12]
 8009bd6:	4798      	blx	r3
  }
}
 8009bd8:	3728      	adds	r7, #40	; 0x28
 8009bda:	46bd      	mov	sp, r7
 8009bdc:	bd80      	pop	{r7, pc}
 8009bde:	bf00      	nop
 8009be0:	080159fc 	.word	0x080159fc
 8009be4:	08015b40 	.word	0x08015b40
 8009be8:	08015a40 	.word	0x08015a40
 8009bec:	08015b5c 	.word	0x08015b5c
 8009bf0:	20008224 	.word	0x20008224
 8009bf4:	20008218 	.word	0x20008218
 8009bf8:	20008220 	.word	0x20008220
 8009bfc:	20008228 	.word	0x20008228

08009c00 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8009c00:	b580      	push	{r7, lr}
 8009c02:	b082      	sub	sp, #8
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8009c08:	2101      	movs	r1, #1
 8009c0a:	6878      	ldr	r0, [r7, #4]
 8009c0c:	f7ff ff3a 	bl	8009a84 <tcp_abandon>
}
 8009c10:	bf00      	nop
 8009c12:	3708      	adds	r7, #8
 8009c14:	46bd      	mov	sp, r7
 8009c16:	bd80      	pop	{r7, pc}

08009c18 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8009c18:	b580      	push	{r7, lr}
 8009c1a:	b088      	sub	sp, #32
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	60f8      	str	r0, [r7, #12]
 8009c20:	60b9      	str	r1, [r7, #8]
 8009c22:	4613      	mov	r3, r2
 8009c24:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8009c26:	2304      	movs	r3, #4
 8009c28:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8009c2a:	68bb      	ldr	r3, [r7, #8]
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d101      	bne.n	8009c34 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8009c30:	4b3e      	ldr	r3, [pc, #248]	; (8009d2c <tcp_bind+0x114>)
 8009c32:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d109      	bne.n	8009c4e <tcp_bind+0x36>
 8009c3a:	4b3d      	ldr	r3, [pc, #244]	; (8009d30 <tcp_bind+0x118>)
 8009c3c:	f240 22a9 	movw	r2, #681	; 0x2a9
 8009c40:	493c      	ldr	r1, [pc, #240]	; (8009d34 <tcp_bind+0x11c>)
 8009c42:	483d      	ldr	r0, [pc, #244]	; (8009d38 <tcp_bind+0x120>)
 8009c44:	f00a f930 	bl	8013ea8 <iprintf>
 8009c48:	f06f 030f 	mvn.w	r3, #15
 8009c4c:	e06a      	b.n	8009d24 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	7d1b      	ldrb	r3, [r3, #20]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d009      	beq.n	8009c6a <tcp_bind+0x52>
 8009c56:	4b36      	ldr	r3, [pc, #216]	; (8009d30 <tcp_bind+0x118>)
 8009c58:	f240 22ab 	movw	r2, #683	; 0x2ab
 8009c5c:	4937      	ldr	r1, [pc, #220]	; (8009d3c <tcp_bind+0x124>)
 8009c5e:	4836      	ldr	r0, [pc, #216]	; (8009d38 <tcp_bind+0x120>)
 8009c60:	f00a f922 	bl	8013ea8 <iprintf>
 8009c64:	f06f 0305 	mvn.w	r3, #5
 8009c68:	e05c      	b.n	8009d24 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 8009c6a:	88fb      	ldrh	r3, [r7, #6]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d109      	bne.n	8009c84 <tcp_bind+0x6c>
    port = tcp_new_port();
 8009c70:	f000 f9f0 	bl	800a054 <tcp_new_port>
 8009c74:	4603      	mov	r3, r0
 8009c76:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8009c78:	88fb      	ldrh	r3, [r7, #6]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d135      	bne.n	8009cea <tcp_bind+0xd2>
      return ERR_BUF;
 8009c7e:	f06f 0301 	mvn.w	r3, #1
 8009c82:	e04f      	b.n	8009d24 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8009c84:	2300      	movs	r3, #0
 8009c86:	61fb      	str	r3, [r7, #28]
 8009c88:	e02b      	b.n	8009ce2 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8009c8a:	4a2d      	ldr	r2, [pc, #180]	; (8009d40 <tcp_bind+0x128>)
 8009c8c:	69fb      	ldr	r3, [r7, #28]
 8009c8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	61bb      	str	r3, [r7, #24]
 8009c96:	e01e      	b.n	8009cd6 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 8009c98:	69bb      	ldr	r3, [r7, #24]
 8009c9a:	8adb      	ldrh	r3, [r3, #22]
 8009c9c:	88fa      	ldrh	r2, [r7, #6]
 8009c9e:	429a      	cmp	r2, r3
 8009ca0:	d116      	bne.n	8009cd0 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 8009ca2:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d010      	beq.n	8009cca <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 8009ca8:	69bb      	ldr	r3, [r7, #24]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d00c      	beq.n	8009cca <tcp_bind+0xb2>
 8009cb0:	68bb      	ldr	r3, [r7, #8]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d009      	beq.n	8009cca <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 8009cb6:	68bb      	ldr	r3, [r7, #8]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d005      	beq.n	8009cca <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 8009cbe:	69bb      	ldr	r3, [r7, #24]
 8009cc0:	681a      	ldr	r2, [r3, #0]
 8009cc2:	68bb      	ldr	r3, [r7, #8]
 8009cc4:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8009cc6:	429a      	cmp	r2, r3
 8009cc8:	d102      	bne.n	8009cd0 <tcp_bind+0xb8>
              return ERR_USE;
 8009cca:	f06f 0307 	mvn.w	r3, #7
 8009cce:	e029      	b.n	8009d24 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8009cd0:	69bb      	ldr	r3, [r7, #24]
 8009cd2:	68db      	ldr	r3, [r3, #12]
 8009cd4:	61bb      	str	r3, [r7, #24]
 8009cd6:	69bb      	ldr	r3, [r7, #24]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d1dd      	bne.n	8009c98 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 8009cdc:	69fb      	ldr	r3, [r7, #28]
 8009cde:	3301      	adds	r3, #1
 8009ce0:	61fb      	str	r3, [r7, #28]
 8009ce2:	69fa      	ldr	r2, [r7, #28]
 8009ce4:	697b      	ldr	r3, [r7, #20]
 8009ce6:	429a      	cmp	r2, r3
 8009ce8:	dbcf      	blt.n	8009c8a <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 8009cea:	68bb      	ldr	r3, [r7, #8]
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d00c      	beq.n	8009d0a <tcp_bind+0xf2>
 8009cf0:	68bb      	ldr	r3, [r7, #8]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d008      	beq.n	8009d0a <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8009cf8:	68bb      	ldr	r3, [r7, #8]
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d002      	beq.n	8009d04 <tcp_bind+0xec>
 8009cfe:	68bb      	ldr	r3, [r7, #8]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	e000      	b.n	8009d06 <tcp_bind+0xee>
 8009d04:	2300      	movs	r3, #0
 8009d06:	68fa      	ldr	r2, [r7, #12]
 8009d08:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	88fa      	ldrh	r2, [r7, #6]
 8009d0e:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8009d10:	4b0c      	ldr	r3, [pc, #48]	; (8009d44 <tcp_bind+0x12c>)
 8009d12:	681a      	ldr	r2, [r3, #0]
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	60da      	str	r2, [r3, #12]
 8009d18:	4a0a      	ldr	r2, [pc, #40]	; (8009d44 <tcp_bind+0x12c>)
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	6013      	str	r3, [r2, #0]
 8009d1e:	f005 fcc9 	bl	800f6b4 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8009d22:	2300      	movs	r3, #0
}
 8009d24:	4618      	mov	r0, r3
 8009d26:	3720      	adds	r7, #32
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	bd80      	pop	{r7, pc}
 8009d2c:	08017ad0 	.word	0x08017ad0
 8009d30:	080159fc 	.word	0x080159fc
 8009d34:	08015b90 	.word	0x08015b90
 8009d38:	08015a40 	.word	0x08015a40
 8009d3c:	08015ba8 	.word	0x08015ba8
 8009d40:	08017aa8 	.word	0x08017aa8
 8009d44:	20008218 	.word	0x20008218

08009d48 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8009d48:	b580      	push	{r7, lr}
 8009d4a:	b084      	sub	sp, #16
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	60f8      	str	r0, [r7, #12]
 8009d50:	60b9      	str	r1, [r7, #8]
 8009d52:	4613      	mov	r3, r2
 8009d54:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 8009d56:	68bb      	ldr	r3, [r7, #8]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d106      	bne.n	8009d6a <tcp_accept_null+0x22>
 8009d5c:	4b07      	ldr	r3, [pc, #28]	; (8009d7c <tcp_accept_null+0x34>)
 8009d5e:	f240 320f 	movw	r2, #783	; 0x30f
 8009d62:	4907      	ldr	r1, [pc, #28]	; (8009d80 <tcp_accept_null+0x38>)
 8009d64:	4807      	ldr	r0, [pc, #28]	; (8009d84 <tcp_accept_null+0x3c>)
 8009d66:	f00a f89f 	bl	8013ea8 <iprintf>

  tcp_abort(pcb);
 8009d6a:	68b8      	ldr	r0, [r7, #8]
 8009d6c:	f7ff ff48 	bl	8009c00 <tcp_abort>

  return ERR_ABRT;
 8009d70:	f06f 030c 	mvn.w	r3, #12
}
 8009d74:	4618      	mov	r0, r3
 8009d76:	3710      	adds	r7, #16
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	bd80      	pop	{r7, pc}
 8009d7c:	080159fc 	.word	0x080159fc
 8009d80:	08015bd0 	.word	0x08015bd0
 8009d84:	08015a40 	.word	0x08015a40

08009d88 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b082      	sub	sp, #8
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
 8009d90:	460b      	mov	r3, r1
 8009d92:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 8009d94:	78fb      	ldrb	r3, [r7, #3]
 8009d96:	2200      	movs	r2, #0
 8009d98:	4619      	mov	r1, r3
 8009d9a:	6878      	ldr	r0, [r7, #4]
 8009d9c:	f000 f806 	bl	8009dac <tcp_listen_with_backlog_and_err>
 8009da0:	4603      	mov	r3, r0
}
 8009da2:	4618      	mov	r0, r3
 8009da4:	3708      	adds	r7, #8
 8009da6:	46bd      	mov	sp, r7
 8009da8:	bd80      	pop	{r7, pc}
	...

08009dac <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 8009dac:	b580      	push	{r7, lr}
 8009dae:	b088      	sub	sp, #32
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	60f8      	str	r0, [r7, #12]
 8009db4:	460b      	mov	r3, r1
 8009db6:	607a      	str	r2, [r7, #4]
 8009db8:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 8009dba:	2300      	movs	r3, #0
 8009dbc:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d109      	bne.n	8009dd8 <tcp_listen_with_backlog_and_err+0x2c>
 8009dc4:	4b47      	ldr	r3, [pc, #284]	; (8009ee4 <tcp_listen_with_backlog_and_err+0x138>)
 8009dc6:	f240 3259 	movw	r2, #857	; 0x359
 8009dca:	4947      	ldr	r1, [pc, #284]	; (8009ee8 <tcp_listen_with_backlog_and_err+0x13c>)
 8009dcc:	4847      	ldr	r0, [pc, #284]	; (8009eec <tcp_listen_with_backlog_and_err+0x140>)
 8009dce:	f00a f86b 	bl	8013ea8 <iprintf>
 8009dd2:	23f0      	movs	r3, #240	; 0xf0
 8009dd4:	76fb      	strb	r3, [r7, #27]
 8009dd6:	e079      	b.n	8009ecc <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	7d1b      	ldrb	r3, [r3, #20]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d009      	beq.n	8009df4 <tcp_listen_with_backlog_and_err+0x48>
 8009de0:	4b40      	ldr	r3, [pc, #256]	; (8009ee4 <tcp_listen_with_backlog_and_err+0x138>)
 8009de2:	f240 325a 	movw	r2, #858	; 0x35a
 8009de6:	4942      	ldr	r1, [pc, #264]	; (8009ef0 <tcp_listen_with_backlog_and_err+0x144>)
 8009de8:	4840      	ldr	r0, [pc, #256]	; (8009eec <tcp_listen_with_backlog_and_err+0x140>)
 8009dea:	f00a f85d 	bl	8013ea8 <iprintf>
 8009dee:	23f1      	movs	r3, #241	; 0xf1
 8009df0:	76fb      	strb	r3, [r7, #27]
 8009df2:	e06b      	b.n	8009ecc <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	7d1b      	ldrb	r3, [r3, #20]
 8009df8:	2b01      	cmp	r3, #1
 8009dfa:	d104      	bne.n	8009e06 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 8009e00:	23f7      	movs	r3, #247	; 0xf7
 8009e02:	76fb      	strb	r3, [r7, #27]
    goto done;
 8009e04:	e062      	b.n	8009ecc <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8009e06:	2002      	movs	r0, #2
 8009e08:	f7fe fa60 	bl	80082cc <memp_malloc>
 8009e0c:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 8009e0e:	69fb      	ldr	r3, [r7, #28]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d102      	bne.n	8009e1a <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 8009e14:	23ff      	movs	r3, #255	; 0xff
 8009e16:	76fb      	strb	r3, [r7, #27]
    goto done;
 8009e18:	e058      	b.n	8009ecc <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	691a      	ldr	r2, [r3, #16]
 8009e1e:	69fb      	ldr	r3, [r7, #28]
 8009e20:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	8ada      	ldrh	r2, [r3, #22]
 8009e26:	69fb      	ldr	r3, [r7, #28]
 8009e28:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 8009e2a:	69fb      	ldr	r3, [r7, #28]
 8009e2c:	2201      	movs	r2, #1
 8009e2e:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	7d5a      	ldrb	r2, [r3, #21]
 8009e34:	69fb      	ldr	r3, [r7, #28]
 8009e36:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	7a5a      	ldrb	r2, [r3, #9]
 8009e3c:	69fb      	ldr	r3, [r7, #28]
 8009e3e:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 8009e40:	69fb      	ldr	r3, [r7, #28]
 8009e42:	2200      	movs	r2, #0
 8009e44:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	7ada      	ldrb	r2, [r3, #11]
 8009e4a:	69fb      	ldr	r3, [r7, #28]
 8009e4c:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	7a9a      	ldrb	r2, [r3, #10]
 8009e52:	69fb      	ldr	r3, [r7, #28]
 8009e54:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	681a      	ldr	r2, [r3, #0]
 8009e5a:	69fb      	ldr	r3, [r7, #28]
 8009e5c:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	8adb      	ldrh	r3, [r3, #22]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d021      	beq.n	8009eaa <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8009e66:	4b23      	ldr	r3, [pc, #140]	; (8009ef4 <tcp_listen_with_backlog_and_err+0x148>)
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	68fa      	ldr	r2, [r7, #12]
 8009e6c:	429a      	cmp	r2, r3
 8009e6e:	d105      	bne.n	8009e7c <tcp_listen_with_backlog_and_err+0xd0>
 8009e70:	4b20      	ldr	r3, [pc, #128]	; (8009ef4 <tcp_listen_with_backlog_and_err+0x148>)
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	68db      	ldr	r3, [r3, #12]
 8009e76:	4a1f      	ldr	r2, [pc, #124]	; (8009ef4 <tcp_listen_with_backlog_and_err+0x148>)
 8009e78:	6013      	str	r3, [r2, #0]
 8009e7a:	e013      	b.n	8009ea4 <tcp_listen_with_backlog_and_err+0xf8>
 8009e7c:	4b1d      	ldr	r3, [pc, #116]	; (8009ef4 <tcp_listen_with_backlog_and_err+0x148>)
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	617b      	str	r3, [r7, #20]
 8009e82:	e00c      	b.n	8009e9e <tcp_listen_with_backlog_and_err+0xf2>
 8009e84:	697b      	ldr	r3, [r7, #20]
 8009e86:	68db      	ldr	r3, [r3, #12]
 8009e88:	68fa      	ldr	r2, [r7, #12]
 8009e8a:	429a      	cmp	r2, r3
 8009e8c:	d104      	bne.n	8009e98 <tcp_listen_with_backlog_and_err+0xec>
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	68da      	ldr	r2, [r3, #12]
 8009e92:	697b      	ldr	r3, [r7, #20]
 8009e94:	60da      	str	r2, [r3, #12]
 8009e96:	e005      	b.n	8009ea4 <tcp_listen_with_backlog_and_err+0xf8>
 8009e98:	697b      	ldr	r3, [r7, #20]
 8009e9a:	68db      	ldr	r3, [r3, #12]
 8009e9c:	617b      	str	r3, [r7, #20]
 8009e9e:	697b      	ldr	r3, [r7, #20]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d1ef      	bne.n	8009e84 <tcp_listen_with_backlog_and_err+0xd8>
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 8009eaa:	68f8      	ldr	r0, [r7, #12]
 8009eac:	f7ff fbc0 	bl	8009630 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 8009eb0:	69fb      	ldr	r3, [r7, #28]
 8009eb2:	4a11      	ldr	r2, [pc, #68]	; (8009ef8 <tcp_listen_with_backlog_and_err+0x14c>)
 8009eb4:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8009eb6:	4b11      	ldr	r3, [pc, #68]	; (8009efc <tcp_listen_with_backlog_and_err+0x150>)
 8009eb8:	681a      	ldr	r2, [r3, #0]
 8009eba:	69fb      	ldr	r3, [r7, #28]
 8009ebc:	60da      	str	r2, [r3, #12]
 8009ebe:	4a0f      	ldr	r2, [pc, #60]	; (8009efc <tcp_listen_with_backlog_and_err+0x150>)
 8009ec0:	69fb      	ldr	r3, [r7, #28]
 8009ec2:	6013      	str	r3, [r2, #0]
 8009ec4:	f005 fbf6 	bl	800f6b4 <tcp_timer_needed>
  res = ERR_OK;
 8009ec8:	2300      	movs	r3, #0
 8009eca:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d002      	beq.n	8009ed8 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	7efa      	ldrb	r2, [r7, #27]
 8009ed6:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 8009ed8:	69fb      	ldr	r3, [r7, #28]
}
 8009eda:	4618      	mov	r0, r3
 8009edc:	3720      	adds	r7, #32
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	bd80      	pop	{r7, pc}
 8009ee2:	bf00      	nop
 8009ee4:	080159fc 	.word	0x080159fc
 8009ee8:	08015bf0 	.word	0x08015bf0
 8009eec:	08015a40 	.word	0x08015a40
 8009ef0:	08015c20 	.word	0x08015c20
 8009ef4:	20008218 	.word	0x20008218
 8009ef8:	08009d49 	.word	0x08009d49
 8009efc:	2000821c 	.word	0x2000821c

08009f00 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8009f00:	b580      	push	{r7, lr}
 8009f02:	b084      	sub	sp, #16
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d106      	bne.n	8009f1c <tcp_update_rcv_ann_wnd+0x1c>
 8009f0e:	4b25      	ldr	r3, [pc, #148]	; (8009fa4 <tcp_update_rcv_ann_wnd+0xa4>)
 8009f10:	f240 32a6 	movw	r2, #934	; 0x3a6
 8009f14:	4924      	ldr	r1, [pc, #144]	; (8009fa8 <tcp_update_rcv_ann_wnd+0xa8>)
 8009f16:	4825      	ldr	r0, [pc, #148]	; (8009fac <tcp_update_rcv_ann_wnd+0xac>)
 8009f18:	f009 ffc6 	bl	8013ea8 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f20:	687a      	ldr	r2, [r7, #4]
 8009f22:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8009f24:	4413      	add	r3, r2
 8009f26:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f2c:	687a      	ldr	r2, [r7, #4]
 8009f2e:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8009f30:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8009f34:	bf28      	it	cs
 8009f36:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8009f3a:	b292      	uxth	r2, r2
 8009f3c:	4413      	add	r3, r2
 8009f3e:	68fa      	ldr	r2, [r7, #12]
 8009f40:	1ad3      	subs	r3, r2, r3
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	db08      	blt.n	8009f58 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f52:	68fa      	ldr	r2, [r7, #12]
 8009f54:	1ad3      	subs	r3, r2, r3
 8009f56:	e020      	b.n	8009f9a <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f60:	1ad3      	subs	r3, r2, r3
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	dd03      	ble.n	8009f6e <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	2200      	movs	r2, #0
 8009f6a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009f6c:	e014      	b.n	8009f98 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f76:	1ad3      	subs	r3, r2, r3
 8009f78:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8009f7a:	68bb      	ldr	r3, [r7, #8]
 8009f7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f80:	d306      	bcc.n	8009f90 <tcp_update_rcv_ann_wnd+0x90>
 8009f82:	4b08      	ldr	r3, [pc, #32]	; (8009fa4 <tcp_update_rcv_ann_wnd+0xa4>)
 8009f84:	f240 32b6 	movw	r2, #950	; 0x3b6
 8009f88:	4909      	ldr	r1, [pc, #36]	; (8009fb0 <tcp_update_rcv_ann_wnd+0xb0>)
 8009f8a:	4808      	ldr	r0, [pc, #32]	; (8009fac <tcp_update_rcv_ann_wnd+0xac>)
 8009f8c:	f009 ff8c 	bl	8013ea8 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8009f90:	68bb      	ldr	r3, [r7, #8]
 8009f92:	b29a      	uxth	r2, r3
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8009f98:	2300      	movs	r3, #0
  }
}
 8009f9a:	4618      	mov	r0, r3
 8009f9c:	3710      	adds	r7, #16
 8009f9e:	46bd      	mov	sp, r7
 8009fa0:	bd80      	pop	{r7, pc}
 8009fa2:	bf00      	nop
 8009fa4:	080159fc 	.word	0x080159fc
 8009fa8:	08015c58 	.word	0x08015c58
 8009fac:	08015a40 	.word	0x08015a40
 8009fb0:	08015c7c 	.word	0x08015c7c

08009fb4 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8009fb4:	b580      	push	{r7, lr}
 8009fb6:	b084      	sub	sp, #16
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	6078      	str	r0, [r7, #4]
 8009fbc:	460b      	mov	r3, r1
 8009fbe:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d107      	bne.n	8009fd6 <tcp_recved+0x22>
 8009fc6:	4b1f      	ldr	r3, [pc, #124]	; (800a044 <tcp_recved+0x90>)
 8009fc8:	f240 32cf 	movw	r2, #975	; 0x3cf
 8009fcc:	491e      	ldr	r1, [pc, #120]	; (800a048 <tcp_recved+0x94>)
 8009fce:	481f      	ldr	r0, [pc, #124]	; (800a04c <tcp_recved+0x98>)
 8009fd0:	f009 ff6a 	bl	8013ea8 <iprintf>
 8009fd4:	e032      	b.n	800a03c <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	7d1b      	ldrb	r3, [r3, #20]
 8009fda:	2b01      	cmp	r3, #1
 8009fdc:	d106      	bne.n	8009fec <tcp_recved+0x38>
 8009fde:	4b19      	ldr	r3, [pc, #100]	; (800a044 <tcp_recved+0x90>)
 8009fe0:	f240 32d2 	movw	r2, #978	; 0x3d2
 8009fe4:	491a      	ldr	r1, [pc, #104]	; (800a050 <tcp_recved+0x9c>)
 8009fe6:	4819      	ldr	r0, [pc, #100]	; (800a04c <tcp_recved+0x98>)
 8009fe8:	f009 ff5e 	bl	8013ea8 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009ff0:	887b      	ldrh	r3, [r7, #2]
 8009ff2:	4413      	add	r3, r2
 8009ff4:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8009ff6:	89fb      	ldrh	r3, [r7, #14]
 8009ff8:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8009ffc:	d804      	bhi.n	800a008 <tcp_recved+0x54>
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a002:	89fa      	ldrh	r2, [r7, #14]
 800a004:	429a      	cmp	r2, r3
 800a006:	d204      	bcs.n	800a012 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800a00e:	851a      	strh	r2, [r3, #40]	; 0x28
 800a010:	e002      	b.n	800a018 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	89fa      	ldrh	r2, [r7, #14]
 800a016:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800a018:	6878      	ldr	r0, [r7, #4]
 800a01a:	f7ff ff71 	bl	8009f00 <tcp_update_rcv_ann_wnd>
 800a01e:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800a020:	68bb      	ldr	r3, [r7, #8]
 800a022:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800a026:	d309      	bcc.n	800a03c <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	8b5b      	ldrh	r3, [r3, #26]
 800a02c:	f043 0302 	orr.w	r3, r3, #2
 800a030:	b29a      	uxth	r2, r3
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800a036:	6878      	ldr	r0, [r7, #4]
 800a038:	f004 fbc6 	bl	800e7c8 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800a03c:	3710      	adds	r7, #16
 800a03e:	46bd      	mov	sp, r7
 800a040:	bd80      	pop	{r7, pc}
 800a042:	bf00      	nop
 800a044:	080159fc 	.word	0x080159fc
 800a048:	08015c98 	.word	0x08015c98
 800a04c:	08015a40 	.word	0x08015a40
 800a050:	08015cb0 	.word	0x08015cb0

0800a054 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800a054:	b480      	push	{r7}
 800a056:	b083      	sub	sp, #12
 800a058:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800a05a:	2300      	movs	r3, #0
 800a05c:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800a05e:	4b1e      	ldr	r3, [pc, #120]	; (800a0d8 <tcp_new_port+0x84>)
 800a060:	881b      	ldrh	r3, [r3, #0]
 800a062:	3301      	adds	r3, #1
 800a064:	b29a      	uxth	r2, r3
 800a066:	4b1c      	ldr	r3, [pc, #112]	; (800a0d8 <tcp_new_port+0x84>)
 800a068:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800a06a:	4b1b      	ldr	r3, [pc, #108]	; (800a0d8 <tcp_new_port+0x84>)
 800a06c:	881b      	ldrh	r3, [r3, #0]
 800a06e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a072:	4293      	cmp	r3, r2
 800a074:	d103      	bne.n	800a07e <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800a076:	4b18      	ldr	r3, [pc, #96]	; (800a0d8 <tcp_new_port+0x84>)
 800a078:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800a07c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800a07e:	2300      	movs	r3, #0
 800a080:	71fb      	strb	r3, [r7, #7]
 800a082:	e01e      	b.n	800a0c2 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800a084:	79fb      	ldrb	r3, [r7, #7]
 800a086:	4a15      	ldr	r2, [pc, #84]	; (800a0dc <tcp_new_port+0x88>)
 800a088:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	603b      	str	r3, [r7, #0]
 800a090:	e011      	b.n	800a0b6 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800a092:	683b      	ldr	r3, [r7, #0]
 800a094:	8ada      	ldrh	r2, [r3, #22]
 800a096:	4b10      	ldr	r3, [pc, #64]	; (800a0d8 <tcp_new_port+0x84>)
 800a098:	881b      	ldrh	r3, [r3, #0]
 800a09a:	429a      	cmp	r2, r3
 800a09c:	d108      	bne.n	800a0b0 <tcp_new_port+0x5c>
        n++;
 800a09e:	88bb      	ldrh	r3, [r7, #4]
 800a0a0:	3301      	adds	r3, #1
 800a0a2:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800a0a4:	88bb      	ldrh	r3, [r7, #4]
 800a0a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a0aa:	d3d8      	bcc.n	800a05e <tcp_new_port+0xa>
          return 0;
 800a0ac:	2300      	movs	r3, #0
 800a0ae:	e00d      	b.n	800a0cc <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800a0b0:	683b      	ldr	r3, [r7, #0]
 800a0b2:	68db      	ldr	r3, [r3, #12]
 800a0b4:	603b      	str	r3, [r7, #0]
 800a0b6:	683b      	ldr	r3, [r7, #0]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d1ea      	bne.n	800a092 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800a0bc:	79fb      	ldrb	r3, [r7, #7]
 800a0be:	3301      	adds	r3, #1
 800a0c0:	71fb      	strb	r3, [r7, #7]
 800a0c2:	79fb      	ldrb	r3, [r7, #7]
 800a0c4:	2b03      	cmp	r3, #3
 800a0c6:	d9dd      	bls.n	800a084 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800a0c8:	4b03      	ldr	r3, [pc, #12]	; (800a0d8 <tcp_new_port+0x84>)
 800a0ca:	881b      	ldrh	r3, [r3, #0]
}
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	370c      	adds	r7, #12
 800a0d0:	46bd      	mov	sp, r7
 800a0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d6:	4770      	bx	lr
 800a0d8:	2000000c 	.word	0x2000000c
 800a0dc:	08017aa8 	.word	0x08017aa8

0800a0e0 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800a0e0:	b5b0      	push	{r4, r5, r7, lr}
 800a0e2:	b090      	sub	sp, #64	; 0x40
 800a0e4:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800a0e6:	2300      	movs	r3, #0
 800a0e8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800a0ec:	4b94      	ldr	r3, [pc, #592]	; (800a340 <tcp_slowtmr+0x260>)
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	3301      	adds	r3, #1
 800a0f2:	4a93      	ldr	r2, [pc, #588]	; (800a340 <tcp_slowtmr+0x260>)
 800a0f4:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800a0f6:	4b93      	ldr	r3, [pc, #588]	; (800a344 <tcp_slowtmr+0x264>)
 800a0f8:	781b      	ldrb	r3, [r3, #0]
 800a0fa:	3301      	adds	r3, #1
 800a0fc:	b2da      	uxtb	r2, r3
 800a0fe:	4b91      	ldr	r3, [pc, #580]	; (800a344 <tcp_slowtmr+0x264>)
 800a100:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800a102:	2300      	movs	r3, #0
 800a104:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800a106:	4b90      	ldr	r3, [pc, #576]	; (800a348 <tcp_slowtmr+0x268>)
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800a10c:	e29f      	b.n	800a64e <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800a10e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a110:	7d1b      	ldrb	r3, [r3, #20]
 800a112:	2b00      	cmp	r3, #0
 800a114:	d106      	bne.n	800a124 <tcp_slowtmr+0x44>
 800a116:	4b8d      	ldr	r3, [pc, #564]	; (800a34c <tcp_slowtmr+0x26c>)
 800a118:	f240 42be 	movw	r2, #1214	; 0x4be
 800a11c:	498c      	ldr	r1, [pc, #560]	; (800a350 <tcp_slowtmr+0x270>)
 800a11e:	488d      	ldr	r0, [pc, #564]	; (800a354 <tcp_slowtmr+0x274>)
 800a120:	f009 fec2 	bl	8013ea8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800a124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a126:	7d1b      	ldrb	r3, [r3, #20]
 800a128:	2b01      	cmp	r3, #1
 800a12a:	d106      	bne.n	800a13a <tcp_slowtmr+0x5a>
 800a12c:	4b87      	ldr	r3, [pc, #540]	; (800a34c <tcp_slowtmr+0x26c>)
 800a12e:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800a132:	4989      	ldr	r1, [pc, #548]	; (800a358 <tcp_slowtmr+0x278>)
 800a134:	4887      	ldr	r0, [pc, #540]	; (800a354 <tcp_slowtmr+0x274>)
 800a136:	f009 feb7 	bl	8013ea8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800a13a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a13c:	7d1b      	ldrb	r3, [r3, #20]
 800a13e:	2b0a      	cmp	r3, #10
 800a140:	d106      	bne.n	800a150 <tcp_slowtmr+0x70>
 800a142:	4b82      	ldr	r3, [pc, #520]	; (800a34c <tcp_slowtmr+0x26c>)
 800a144:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800a148:	4984      	ldr	r1, [pc, #528]	; (800a35c <tcp_slowtmr+0x27c>)
 800a14a:	4882      	ldr	r0, [pc, #520]	; (800a354 <tcp_slowtmr+0x274>)
 800a14c:	f009 feac 	bl	8013ea8 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800a150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a152:	7f9a      	ldrb	r2, [r3, #30]
 800a154:	4b7b      	ldr	r3, [pc, #492]	; (800a344 <tcp_slowtmr+0x264>)
 800a156:	781b      	ldrb	r3, [r3, #0]
 800a158:	429a      	cmp	r2, r3
 800a15a:	d105      	bne.n	800a168 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800a15c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a15e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800a160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a162:	68db      	ldr	r3, [r3, #12]
 800a164:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800a166:	e272      	b.n	800a64e <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 800a168:	4b76      	ldr	r3, [pc, #472]	; (800a344 <tcp_slowtmr+0x264>)
 800a16a:	781a      	ldrb	r2, [r3, #0]
 800a16c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a16e:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800a170:	2300      	movs	r3, #0
 800a172:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800a176:	2300      	movs	r3, #0
 800a178:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800a17c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a17e:	7d1b      	ldrb	r3, [r3, #20]
 800a180:	2b02      	cmp	r3, #2
 800a182:	d10a      	bne.n	800a19a <tcp_slowtmr+0xba>
 800a184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a186:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a18a:	2b05      	cmp	r3, #5
 800a18c:	d905      	bls.n	800a19a <tcp_slowtmr+0xba>
      ++pcb_remove;
 800a18e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a192:	3301      	adds	r3, #1
 800a194:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a198:	e11e      	b.n	800a3d8 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800a19a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a19c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a1a0:	2b0b      	cmp	r3, #11
 800a1a2:	d905      	bls.n	800a1b0 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800a1a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a1a8:	3301      	adds	r3, #1
 800a1aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a1ae:	e113      	b.n	800a3d8 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800a1b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1b2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d075      	beq.n	800a2a6 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800a1ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d006      	beq.n	800a1d0 <tcp_slowtmr+0xf0>
 800a1c2:	4b62      	ldr	r3, [pc, #392]	; (800a34c <tcp_slowtmr+0x26c>)
 800a1c4:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800a1c8:	4965      	ldr	r1, [pc, #404]	; (800a360 <tcp_slowtmr+0x280>)
 800a1ca:	4862      	ldr	r0, [pc, #392]	; (800a354 <tcp_slowtmr+0x274>)
 800a1cc:	f009 fe6c 	bl	8013ea8 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800a1d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d106      	bne.n	800a1e6 <tcp_slowtmr+0x106>
 800a1d8:	4b5c      	ldr	r3, [pc, #368]	; (800a34c <tcp_slowtmr+0x26c>)
 800a1da:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800a1de:	4961      	ldr	r1, [pc, #388]	; (800a364 <tcp_slowtmr+0x284>)
 800a1e0:	485c      	ldr	r0, [pc, #368]	; (800a354 <tcp_slowtmr+0x274>)
 800a1e2:	f009 fe61 	bl	8013ea8 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800a1e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1e8:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800a1ec:	2b0b      	cmp	r3, #11
 800a1ee:	d905      	bls.n	800a1fc <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800a1f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a1f4:	3301      	adds	r3, #1
 800a1f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a1fa:	e0ed      	b.n	800a3d8 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800a1fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1fe:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800a202:	3b01      	subs	r3, #1
 800a204:	4a58      	ldr	r2, [pc, #352]	; (800a368 <tcp_slowtmr+0x288>)
 800a206:	5cd3      	ldrb	r3, [r2, r3]
 800a208:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800a20a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a20c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800a210:	7c7a      	ldrb	r2, [r7, #17]
 800a212:	429a      	cmp	r2, r3
 800a214:	d907      	bls.n	800a226 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800a216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a218:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800a21c:	3301      	adds	r3, #1
 800a21e:	b2da      	uxtb	r2, r3
 800a220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a222:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800a226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a228:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800a22c:	7c7a      	ldrb	r2, [r7, #17]
 800a22e:	429a      	cmp	r2, r3
 800a230:	f200 80d2 	bhi.w	800a3d8 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800a234:	2301      	movs	r3, #1
 800a236:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800a238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a23a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d108      	bne.n	800a254 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800a242:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a244:	f005 f968 	bl	800f518 <tcp_zero_window_probe>
 800a248:	4603      	mov	r3, r0
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d014      	beq.n	800a278 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800a24e:	2300      	movs	r3, #0
 800a250:	623b      	str	r3, [r7, #32]
 800a252:	e011      	b.n	800a278 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800a254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a256:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a25a:	4619      	mov	r1, r3
 800a25c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a25e:	f004 f82d 	bl	800e2bc <tcp_split_unsent_seg>
 800a262:	4603      	mov	r3, r0
 800a264:	2b00      	cmp	r3, #0
 800a266:	d107      	bne.n	800a278 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800a268:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a26a:	f004 faad 	bl	800e7c8 <tcp_output>
 800a26e:	4603      	mov	r3, r0
 800a270:	2b00      	cmp	r3, #0
 800a272:	d101      	bne.n	800a278 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800a274:	2300      	movs	r3, #0
 800a276:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800a278:	6a3b      	ldr	r3, [r7, #32]
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	f000 80ac 	beq.w	800a3d8 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800a280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a282:	2200      	movs	r2, #0
 800a284:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800a288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a28a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800a28e:	2b06      	cmp	r3, #6
 800a290:	f200 80a2 	bhi.w	800a3d8 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800a294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a296:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800a29a:	3301      	adds	r3, #1
 800a29c:	b2da      	uxtb	r2, r3
 800a29e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2a0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800a2a4:	e098      	b.n	800a3d8 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800a2a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2a8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	db0f      	blt.n	800a2d0 <tcp_slowtmr+0x1f0>
 800a2b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2b2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800a2b6:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800a2ba:	4293      	cmp	r3, r2
 800a2bc:	d008      	beq.n	800a2d0 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800a2be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2c0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800a2c4:	b29b      	uxth	r3, r3
 800a2c6:	3301      	adds	r3, #1
 800a2c8:	b29b      	uxth	r3, r3
 800a2ca:	b21a      	sxth	r2, r3
 800a2cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2ce:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800a2d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2d2:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800a2d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2d8:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800a2dc:	429a      	cmp	r2, r3
 800a2de:	db7b      	blt.n	800a3d8 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800a2e0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a2e2:	f004 fd63 	bl	800edac <tcp_rexmit_rto_prepare>
 800a2e6:	4603      	mov	r3, r0
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d007      	beq.n	800a2fc <tcp_slowtmr+0x21c>
 800a2ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d171      	bne.n	800a3d8 <tcp_slowtmr+0x2f8>
 800a2f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d06d      	beq.n	800a3d8 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800a2fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2fe:	7d1b      	ldrb	r3, [r3, #20]
 800a300:	2b02      	cmp	r3, #2
 800a302:	d03a      	beq.n	800a37a <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800a304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a306:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a30a:	2b0c      	cmp	r3, #12
 800a30c:	bf28      	it	cs
 800a30e:	230c      	movcs	r3, #12
 800a310:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800a312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a314:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a318:	10db      	asrs	r3, r3, #3
 800a31a:	b21b      	sxth	r3, r3
 800a31c:	461a      	mov	r2, r3
 800a31e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a320:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a324:	4413      	add	r3, r2
 800a326:	7efa      	ldrb	r2, [r7, #27]
 800a328:	4910      	ldr	r1, [pc, #64]	; (800a36c <tcp_slowtmr+0x28c>)
 800a32a:	5c8a      	ldrb	r2, [r1, r2]
 800a32c:	4093      	lsls	r3, r2
 800a32e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800a330:	697b      	ldr	r3, [r7, #20]
 800a332:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800a336:	4293      	cmp	r3, r2
 800a338:	dc1a      	bgt.n	800a370 <tcp_slowtmr+0x290>
 800a33a:	697b      	ldr	r3, [r7, #20]
 800a33c:	b21a      	sxth	r2, r3
 800a33e:	e019      	b.n	800a374 <tcp_slowtmr+0x294>
 800a340:	20008214 	.word	0x20008214
 800a344:	2000822a 	.word	0x2000822a
 800a348:	20008220 	.word	0x20008220
 800a34c:	080159fc 	.word	0x080159fc
 800a350:	08015d40 	.word	0x08015d40
 800a354:	08015a40 	.word	0x08015a40
 800a358:	08015d6c 	.word	0x08015d6c
 800a35c:	08015d98 	.word	0x08015d98
 800a360:	08015dc8 	.word	0x08015dc8
 800a364:	08015dfc 	.word	0x08015dfc
 800a368:	08017aa0 	.word	0x08017aa0
 800a36c:	08017a90 	.word	0x08017a90
 800a370:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800a374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a376:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800a37a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a37c:	2200      	movs	r2, #0
 800a37e:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800a380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a382:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800a386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a388:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a38c:	4293      	cmp	r3, r2
 800a38e:	bf28      	it	cs
 800a390:	4613      	movcs	r3, r2
 800a392:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800a394:	8a7b      	ldrh	r3, [r7, #18]
 800a396:	085b      	lsrs	r3, r3, #1
 800a398:	b29a      	uxth	r2, r3
 800a39a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a39c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800a3a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3a2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800a3a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3a8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a3aa:	005b      	lsls	r3, r3, #1
 800a3ac:	b29b      	uxth	r3, r3
 800a3ae:	429a      	cmp	r2, r3
 800a3b0:	d206      	bcs.n	800a3c0 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800a3b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a3b6:	005b      	lsls	r3, r3, #1
 800a3b8:	b29a      	uxth	r2, r3
 800a3ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3bc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800a3c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3c2:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800a3c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3c6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800a3ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3cc:	2200      	movs	r2, #0
 800a3ce:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800a3d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a3d4:	f004 fd5a 	bl	800ee8c <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800a3d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3da:	7d1b      	ldrb	r3, [r3, #20]
 800a3dc:	2b06      	cmp	r3, #6
 800a3de:	d111      	bne.n	800a404 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800a3e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3e2:	8b5b      	ldrh	r3, [r3, #26]
 800a3e4:	f003 0310 	and.w	r3, r3, #16
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d00b      	beq.n	800a404 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a3ec:	4b9d      	ldr	r3, [pc, #628]	; (800a664 <tcp_slowtmr+0x584>)
 800a3ee:	681a      	ldr	r2, [r3, #0]
 800a3f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3f2:	6a1b      	ldr	r3, [r3, #32]
 800a3f4:	1ad3      	subs	r3, r2, r3
 800a3f6:	2b28      	cmp	r3, #40	; 0x28
 800a3f8:	d904      	bls.n	800a404 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800a3fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a3fe:	3301      	adds	r3, #1
 800a400:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800a404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a406:	7a5b      	ldrb	r3, [r3, #9]
 800a408:	f003 0308 	and.w	r3, r3, #8
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d04c      	beq.n	800a4aa <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800a410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a412:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800a414:	2b04      	cmp	r3, #4
 800a416:	d003      	beq.n	800a420 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800a418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a41a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800a41c:	2b07      	cmp	r3, #7
 800a41e:	d144      	bne.n	800a4aa <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a420:	4b90      	ldr	r3, [pc, #576]	; (800a664 <tcp_slowtmr+0x584>)
 800a422:	681a      	ldr	r2, [r3, #0]
 800a424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a426:	6a1b      	ldr	r3, [r3, #32]
 800a428:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800a42a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a42c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a430:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800a434:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800a438:	498b      	ldr	r1, [pc, #556]	; (800a668 <tcp_slowtmr+0x588>)
 800a43a:	fba1 1303 	umull	r1, r3, r1, r3
 800a43e:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a440:	429a      	cmp	r2, r3
 800a442:	d90a      	bls.n	800a45a <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800a444:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a448:	3301      	adds	r3, #1
 800a44a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800a44e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a452:	3301      	adds	r3, #1
 800a454:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a458:	e027      	b.n	800a4aa <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a45a:	4b82      	ldr	r3, [pc, #520]	; (800a664 <tcp_slowtmr+0x584>)
 800a45c:	681a      	ldr	r2, [r3, #0]
 800a45e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a460:	6a1b      	ldr	r3, [r3, #32]
 800a462:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800a464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a466:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800a46a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a46c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800a470:	4618      	mov	r0, r3
 800a472:	4b7e      	ldr	r3, [pc, #504]	; (800a66c <tcp_slowtmr+0x58c>)
 800a474:	fb00 f303 	mul.w	r3, r0, r3
 800a478:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800a47a:	497b      	ldr	r1, [pc, #492]	; (800a668 <tcp_slowtmr+0x588>)
 800a47c:	fba1 1303 	umull	r1, r3, r1, r3
 800a480:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a482:	429a      	cmp	r2, r3
 800a484:	d911      	bls.n	800a4aa <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800a486:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a488:	f005 f806 	bl	800f498 <tcp_keepalive>
 800a48c:	4603      	mov	r3, r0
 800a48e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800a492:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800a496:	2b00      	cmp	r3, #0
 800a498:	d107      	bne.n	800a4aa <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800a49a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a49c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800a4a0:	3301      	adds	r3, #1
 800a4a2:	b2da      	uxtb	r2, r3
 800a4a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4a6:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800a4aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d011      	beq.n	800a4d6 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800a4b2:	4b6c      	ldr	r3, [pc, #432]	; (800a664 <tcp_slowtmr+0x584>)
 800a4b4:	681a      	ldr	r2, [r3, #0]
 800a4b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4b8:	6a1b      	ldr	r3, [r3, #32]
 800a4ba:	1ad2      	subs	r2, r2, r3
 800a4bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4be:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800a4c2:	4619      	mov	r1, r3
 800a4c4:	460b      	mov	r3, r1
 800a4c6:	005b      	lsls	r3, r3, #1
 800a4c8:	440b      	add	r3, r1
 800a4ca:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800a4cc:	429a      	cmp	r2, r3
 800a4ce:	d302      	bcc.n	800a4d6 <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800a4d0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a4d2:	f000 fec1 	bl	800b258 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800a4d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4d8:	7d1b      	ldrb	r3, [r3, #20]
 800a4da:	2b03      	cmp	r3, #3
 800a4dc:	d10b      	bne.n	800a4f6 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a4de:	4b61      	ldr	r3, [pc, #388]	; (800a664 <tcp_slowtmr+0x584>)
 800a4e0:	681a      	ldr	r2, [r3, #0]
 800a4e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4e4:	6a1b      	ldr	r3, [r3, #32]
 800a4e6:	1ad3      	subs	r3, r2, r3
 800a4e8:	2b28      	cmp	r3, #40	; 0x28
 800a4ea:	d904      	bls.n	800a4f6 <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800a4ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a4f0:	3301      	adds	r3, #1
 800a4f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800a4f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4f8:	7d1b      	ldrb	r3, [r3, #20]
 800a4fa:	2b09      	cmp	r3, #9
 800a4fc:	d10b      	bne.n	800a516 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800a4fe:	4b59      	ldr	r3, [pc, #356]	; (800a664 <tcp_slowtmr+0x584>)
 800a500:	681a      	ldr	r2, [r3, #0]
 800a502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a504:	6a1b      	ldr	r3, [r3, #32]
 800a506:	1ad3      	subs	r3, r2, r3
 800a508:	2bf0      	cmp	r3, #240	; 0xf0
 800a50a:	d904      	bls.n	800a516 <tcp_slowtmr+0x436>
        ++pcb_remove;
 800a50c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a510:	3301      	adds	r3, #1
 800a512:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800a516:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d060      	beq.n	800a5e0 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800a51e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a520:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a524:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800a526:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a528:	f000 fce2 	bl	800aef0 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800a52c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d010      	beq.n	800a554 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800a532:	4b4f      	ldr	r3, [pc, #316]	; (800a670 <tcp_slowtmr+0x590>)
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a538:	429a      	cmp	r2, r3
 800a53a:	d106      	bne.n	800a54a <tcp_slowtmr+0x46a>
 800a53c:	4b4d      	ldr	r3, [pc, #308]	; (800a674 <tcp_slowtmr+0x594>)
 800a53e:	f240 526d 	movw	r2, #1389	; 0x56d
 800a542:	494d      	ldr	r1, [pc, #308]	; (800a678 <tcp_slowtmr+0x598>)
 800a544:	484d      	ldr	r0, [pc, #308]	; (800a67c <tcp_slowtmr+0x59c>)
 800a546:	f009 fcaf 	bl	8013ea8 <iprintf>
        prev->next = pcb->next;
 800a54a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a54c:	68da      	ldr	r2, [r3, #12]
 800a54e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a550:	60da      	str	r2, [r3, #12]
 800a552:	e00f      	b.n	800a574 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800a554:	4b46      	ldr	r3, [pc, #280]	; (800a670 <tcp_slowtmr+0x590>)
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a55a:	429a      	cmp	r2, r3
 800a55c:	d006      	beq.n	800a56c <tcp_slowtmr+0x48c>
 800a55e:	4b45      	ldr	r3, [pc, #276]	; (800a674 <tcp_slowtmr+0x594>)
 800a560:	f240 5271 	movw	r2, #1393	; 0x571
 800a564:	4946      	ldr	r1, [pc, #280]	; (800a680 <tcp_slowtmr+0x5a0>)
 800a566:	4845      	ldr	r0, [pc, #276]	; (800a67c <tcp_slowtmr+0x59c>)
 800a568:	f009 fc9e 	bl	8013ea8 <iprintf>
        tcp_active_pcbs = pcb->next;
 800a56c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a56e:	68db      	ldr	r3, [r3, #12]
 800a570:	4a3f      	ldr	r2, [pc, #252]	; (800a670 <tcp_slowtmr+0x590>)
 800a572:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800a574:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d013      	beq.n	800a5a4 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800a57c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a57e:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800a580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a582:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800a584:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800a586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a588:	3304      	adds	r3, #4
 800a58a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a58c:	8ad2      	ldrh	r2, [r2, #22]
 800a58e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a590:	8b09      	ldrh	r1, [r1, #24]
 800a592:	9102      	str	r1, [sp, #8]
 800a594:	9201      	str	r2, [sp, #4]
 800a596:	9300      	str	r3, [sp, #0]
 800a598:	462b      	mov	r3, r5
 800a59a:	4622      	mov	r2, r4
 800a59c:	4601      	mov	r1, r0
 800a59e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a5a0:	f004 fec6 	bl	800f330 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800a5a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5a6:	691b      	ldr	r3, [r3, #16]
 800a5a8:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800a5aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5ac:	7d1b      	ldrb	r3, [r3, #20]
 800a5ae:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800a5b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5b2:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800a5b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5b6:	68db      	ldr	r3, [r3, #12]
 800a5b8:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800a5ba:	6838      	ldr	r0, [r7, #0]
 800a5bc:	f7ff f838 	bl	8009630 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800a5c0:	4b30      	ldr	r3, [pc, #192]	; (800a684 <tcp_slowtmr+0x5a4>)
 800a5c2:	2200      	movs	r2, #0
 800a5c4:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d004      	beq.n	800a5d6 <tcp_slowtmr+0x4f6>
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	f06f 010c 	mvn.w	r1, #12
 800a5d2:	68b8      	ldr	r0, [r7, #8]
 800a5d4:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800a5d6:	4b2b      	ldr	r3, [pc, #172]	; (800a684 <tcp_slowtmr+0x5a4>)
 800a5d8:	781b      	ldrb	r3, [r3, #0]
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d037      	beq.n	800a64e <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800a5de:	e590      	b.n	800a102 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800a5e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5e2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800a5e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5e6:	68db      	ldr	r3, [r3, #12]
 800a5e8:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800a5ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5ec:	7f1b      	ldrb	r3, [r3, #28]
 800a5ee:	3301      	adds	r3, #1
 800a5f0:	b2da      	uxtb	r2, r3
 800a5f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5f4:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800a5f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5f8:	7f1a      	ldrb	r2, [r3, #28]
 800a5fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5fc:	7f5b      	ldrb	r3, [r3, #29]
 800a5fe:	429a      	cmp	r2, r3
 800a600:	d325      	bcc.n	800a64e <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800a602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a604:	2200      	movs	r2, #0
 800a606:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800a608:	4b1e      	ldr	r3, [pc, #120]	; (800a684 <tcp_slowtmr+0x5a4>)
 800a60a:	2200      	movs	r2, #0
 800a60c:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800a60e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a610:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a614:	2b00      	cmp	r3, #0
 800a616:	d00b      	beq.n	800a630 <tcp_slowtmr+0x550>
 800a618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a61a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a61e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a620:	6912      	ldr	r2, [r2, #16]
 800a622:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a624:	4610      	mov	r0, r2
 800a626:	4798      	blx	r3
 800a628:	4603      	mov	r3, r0
 800a62a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800a62e:	e002      	b.n	800a636 <tcp_slowtmr+0x556>
 800a630:	2300      	movs	r3, #0
 800a632:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800a636:	4b13      	ldr	r3, [pc, #76]	; (800a684 <tcp_slowtmr+0x5a4>)
 800a638:	781b      	ldrb	r3, [r3, #0]
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d000      	beq.n	800a640 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800a63e:	e560      	b.n	800a102 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800a640:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800a644:	2b00      	cmp	r3, #0
 800a646:	d102      	bne.n	800a64e <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800a648:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a64a:	f004 f8bd 	bl	800e7c8 <tcp_output>
  while (pcb != NULL) {
 800a64e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a650:	2b00      	cmp	r3, #0
 800a652:	f47f ad5c 	bne.w	800a10e <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800a656:	2300      	movs	r3, #0
 800a658:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800a65a:	4b0b      	ldr	r3, [pc, #44]	; (800a688 <tcp_slowtmr+0x5a8>)
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800a660:	e067      	b.n	800a732 <tcp_slowtmr+0x652>
 800a662:	bf00      	nop
 800a664:	20008214 	.word	0x20008214
 800a668:	10624dd3 	.word	0x10624dd3
 800a66c:	000124f8 	.word	0x000124f8
 800a670:	20008220 	.word	0x20008220
 800a674:	080159fc 	.word	0x080159fc
 800a678:	08015e34 	.word	0x08015e34
 800a67c:	08015a40 	.word	0x08015a40
 800a680:	08015e60 	.word	0x08015e60
 800a684:	20008228 	.word	0x20008228
 800a688:	20008224 	.word	0x20008224
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800a68c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a68e:	7d1b      	ldrb	r3, [r3, #20]
 800a690:	2b0a      	cmp	r3, #10
 800a692:	d006      	beq.n	800a6a2 <tcp_slowtmr+0x5c2>
 800a694:	4b2b      	ldr	r3, [pc, #172]	; (800a744 <tcp_slowtmr+0x664>)
 800a696:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800a69a:	492b      	ldr	r1, [pc, #172]	; (800a748 <tcp_slowtmr+0x668>)
 800a69c:	482b      	ldr	r0, [pc, #172]	; (800a74c <tcp_slowtmr+0x66c>)
 800a69e:	f009 fc03 	bl	8013ea8 <iprintf>
    pcb_remove = 0;
 800a6a2:	2300      	movs	r3, #0
 800a6a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800a6a8:	4b29      	ldr	r3, [pc, #164]	; (800a750 <tcp_slowtmr+0x670>)
 800a6aa:	681a      	ldr	r2, [r3, #0]
 800a6ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6ae:	6a1b      	ldr	r3, [r3, #32]
 800a6b0:	1ad3      	subs	r3, r2, r3
 800a6b2:	2bf0      	cmp	r3, #240	; 0xf0
 800a6b4:	d904      	bls.n	800a6c0 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800a6b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a6ba:	3301      	adds	r3, #1
 800a6bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800a6c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d02f      	beq.n	800a728 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800a6c8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a6ca:	f000 fc11 	bl	800aef0 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800a6ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d010      	beq.n	800a6f6 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800a6d4:	4b1f      	ldr	r3, [pc, #124]	; (800a754 <tcp_slowtmr+0x674>)
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a6da:	429a      	cmp	r2, r3
 800a6dc:	d106      	bne.n	800a6ec <tcp_slowtmr+0x60c>
 800a6de:	4b19      	ldr	r3, [pc, #100]	; (800a744 <tcp_slowtmr+0x664>)
 800a6e0:	f240 52af 	movw	r2, #1455	; 0x5af
 800a6e4:	491c      	ldr	r1, [pc, #112]	; (800a758 <tcp_slowtmr+0x678>)
 800a6e6:	4819      	ldr	r0, [pc, #100]	; (800a74c <tcp_slowtmr+0x66c>)
 800a6e8:	f009 fbde 	bl	8013ea8 <iprintf>
        prev->next = pcb->next;
 800a6ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6ee:	68da      	ldr	r2, [r3, #12]
 800a6f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6f2:	60da      	str	r2, [r3, #12]
 800a6f4:	e00f      	b.n	800a716 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800a6f6:	4b17      	ldr	r3, [pc, #92]	; (800a754 <tcp_slowtmr+0x674>)
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a6fc:	429a      	cmp	r2, r3
 800a6fe:	d006      	beq.n	800a70e <tcp_slowtmr+0x62e>
 800a700:	4b10      	ldr	r3, [pc, #64]	; (800a744 <tcp_slowtmr+0x664>)
 800a702:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800a706:	4915      	ldr	r1, [pc, #84]	; (800a75c <tcp_slowtmr+0x67c>)
 800a708:	4810      	ldr	r0, [pc, #64]	; (800a74c <tcp_slowtmr+0x66c>)
 800a70a:	f009 fbcd 	bl	8013ea8 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800a70e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a710:	68db      	ldr	r3, [r3, #12]
 800a712:	4a10      	ldr	r2, [pc, #64]	; (800a754 <tcp_slowtmr+0x674>)
 800a714:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800a716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a718:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800a71a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a71c:	68db      	ldr	r3, [r3, #12]
 800a71e:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800a720:	69f8      	ldr	r0, [r7, #28]
 800a722:	f7fe ff85 	bl	8009630 <tcp_free>
 800a726:	e004      	b.n	800a732 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800a728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a72a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800a72c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a72e:	68db      	ldr	r3, [r3, #12]
 800a730:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800a732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a734:	2b00      	cmp	r3, #0
 800a736:	d1a9      	bne.n	800a68c <tcp_slowtmr+0x5ac>
    }
  }
}
 800a738:	bf00      	nop
 800a73a:	bf00      	nop
 800a73c:	3730      	adds	r7, #48	; 0x30
 800a73e:	46bd      	mov	sp, r7
 800a740:	bdb0      	pop	{r4, r5, r7, pc}
 800a742:	bf00      	nop
 800a744:	080159fc 	.word	0x080159fc
 800a748:	08015e8c 	.word	0x08015e8c
 800a74c:	08015a40 	.word	0x08015a40
 800a750:	20008214 	.word	0x20008214
 800a754:	20008224 	.word	0x20008224
 800a758:	08015ebc 	.word	0x08015ebc
 800a75c:	08015ee4 	.word	0x08015ee4

0800a760 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800a760:	b580      	push	{r7, lr}
 800a762:	b082      	sub	sp, #8
 800a764:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800a766:	4b2d      	ldr	r3, [pc, #180]	; (800a81c <tcp_fasttmr+0xbc>)
 800a768:	781b      	ldrb	r3, [r3, #0]
 800a76a:	3301      	adds	r3, #1
 800a76c:	b2da      	uxtb	r2, r3
 800a76e:	4b2b      	ldr	r3, [pc, #172]	; (800a81c <tcp_fasttmr+0xbc>)
 800a770:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800a772:	4b2b      	ldr	r3, [pc, #172]	; (800a820 <tcp_fasttmr+0xc0>)
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800a778:	e048      	b.n	800a80c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	7f9a      	ldrb	r2, [r3, #30]
 800a77e:	4b27      	ldr	r3, [pc, #156]	; (800a81c <tcp_fasttmr+0xbc>)
 800a780:	781b      	ldrb	r3, [r3, #0]
 800a782:	429a      	cmp	r2, r3
 800a784:	d03f      	beq.n	800a806 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800a786:	4b25      	ldr	r3, [pc, #148]	; (800a81c <tcp_fasttmr+0xbc>)
 800a788:	781a      	ldrb	r2, [r3, #0]
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	8b5b      	ldrh	r3, [r3, #26]
 800a792:	f003 0301 	and.w	r3, r3, #1
 800a796:	2b00      	cmp	r3, #0
 800a798:	d010      	beq.n	800a7bc <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	8b5b      	ldrh	r3, [r3, #26]
 800a79e:	f043 0302 	orr.w	r3, r3, #2
 800a7a2:	b29a      	uxth	r2, r3
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800a7a8:	6878      	ldr	r0, [r7, #4]
 800a7aa:	f004 f80d 	bl	800e7c8 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	8b5b      	ldrh	r3, [r3, #26]
 800a7b2:	f023 0303 	bic.w	r3, r3, #3
 800a7b6:	b29a      	uxth	r2, r3
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	8b5b      	ldrh	r3, [r3, #26]
 800a7c0:	f003 0308 	and.w	r3, r3, #8
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d009      	beq.n	800a7dc <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	8b5b      	ldrh	r3, [r3, #26]
 800a7cc:	f023 0308 	bic.w	r3, r3, #8
 800a7d0:	b29a      	uxth	r2, r3
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800a7d6:	6878      	ldr	r0, [r7, #4]
 800a7d8:	f7ff f8be 	bl	8009958 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	68db      	ldr	r3, [r3, #12]
 800a7e0:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d00a      	beq.n	800a800 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800a7ea:	4b0e      	ldr	r3, [pc, #56]	; (800a824 <tcp_fasttmr+0xc4>)
 800a7ec:	2200      	movs	r2, #0
 800a7ee:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800a7f0:	6878      	ldr	r0, [r7, #4]
 800a7f2:	f000 f819 	bl	800a828 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800a7f6:	4b0b      	ldr	r3, [pc, #44]	; (800a824 <tcp_fasttmr+0xc4>)
 800a7f8:	781b      	ldrb	r3, [r3, #0]
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d000      	beq.n	800a800 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800a7fe:	e7b8      	b.n	800a772 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800a800:	683b      	ldr	r3, [r7, #0]
 800a802:	607b      	str	r3, [r7, #4]
 800a804:	e002      	b.n	800a80c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	68db      	ldr	r3, [r3, #12]
 800a80a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d1b3      	bne.n	800a77a <tcp_fasttmr+0x1a>
    }
  }
}
 800a812:	bf00      	nop
 800a814:	bf00      	nop
 800a816:	3708      	adds	r7, #8
 800a818:	46bd      	mov	sp, r7
 800a81a:	bd80      	pop	{r7, pc}
 800a81c:	2000822a 	.word	0x2000822a
 800a820:	20008220 	.word	0x20008220
 800a824:	20008228 	.word	0x20008228

0800a828 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800a828:	b590      	push	{r4, r7, lr}
 800a82a:	b085      	sub	sp, #20
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	2b00      	cmp	r3, #0
 800a834:	d109      	bne.n	800a84a <tcp_process_refused_data+0x22>
 800a836:	4b37      	ldr	r3, [pc, #220]	; (800a914 <tcp_process_refused_data+0xec>)
 800a838:	f240 6209 	movw	r2, #1545	; 0x609
 800a83c:	4936      	ldr	r1, [pc, #216]	; (800a918 <tcp_process_refused_data+0xf0>)
 800a83e:	4837      	ldr	r0, [pc, #220]	; (800a91c <tcp_process_refused_data+0xf4>)
 800a840:	f009 fb32 	bl	8013ea8 <iprintf>
 800a844:	f06f 030f 	mvn.w	r3, #15
 800a848:	e060      	b.n	800a90c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a84e:	7b5b      	ldrb	r3, [r3, #13]
 800a850:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a856:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	2200      	movs	r2, #0
 800a85c:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a864:	2b00      	cmp	r3, #0
 800a866:	d00b      	beq.n	800a880 <tcp_process_refused_data+0x58>
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	6918      	ldr	r0, [r3, #16]
 800a872:	2300      	movs	r3, #0
 800a874:	68ba      	ldr	r2, [r7, #8]
 800a876:	6879      	ldr	r1, [r7, #4]
 800a878:	47a0      	blx	r4
 800a87a:	4603      	mov	r3, r0
 800a87c:	73fb      	strb	r3, [r7, #15]
 800a87e:	e007      	b.n	800a890 <tcp_process_refused_data+0x68>
 800a880:	2300      	movs	r3, #0
 800a882:	68ba      	ldr	r2, [r7, #8]
 800a884:	6879      	ldr	r1, [r7, #4]
 800a886:	2000      	movs	r0, #0
 800a888:	f000 f8c2 	bl	800aa10 <tcp_recv_null>
 800a88c:	4603      	mov	r3, r0
 800a88e:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800a890:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a894:	2b00      	cmp	r3, #0
 800a896:	d12a      	bne.n	800a8ee <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800a898:	7bbb      	ldrb	r3, [r7, #14]
 800a89a:	f003 0320 	and.w	r3, r3, #32
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d033      	beq.n	800a90a <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a8a6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800a8aa:	d005      	beq.n	800a8b8 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a8b0:	3301      	adds	r3, #1
 800a8b2:	b29a      	uxth	r2, r3
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d00b      	beq.n	800a8da <tcp_process_refused_data+0xb2>
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	6918      	ldr	r0, [r3, #16]
 800a8cc:	2300      	movs	r3, #0
 800a8ce:	2200      	movs	r2, #0
 800a8d0:	6879      	ldr	r1, [r7, #4]
 800a8d2:	47a0      	blx	r4
 800a8d4:	4603      	mov	r3, r0
 800a8d6:	73fb      	strb	r3, [r7, #15]
 800a8d8:	e001      	b.n	800a8de <tcp_process_refused_data+0xb6>
 800a8da:	2300      	movs	r3, #0
 800a8dc:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800a8de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a8e2:	f113 0f0d 	cmn.w	r3, #13
 800a8e6:	d110      	bne.n	800a90a <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800a8e8:	f06f 030c 	mvn.w	r3, #12
 800a8ec:	e00e      	b.n	800a90c <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800a8ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a8f2:	f113 0f0d 	cmn.w	r3, #13
 800a8f6:	d102      	bne.n	800a8fe <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800a8f8:	f06f 030c 	mvn.w	r3, #12
 800a8fc:	e006      	b.n	800a90c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	68ba      	ldr	r2, [r7, #8]
 800a902:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800a904:	f06f 0304 	mvn.w	r3, #4
 800a908:	e000      	b.n	800a90c <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800a90a:	2300      	movs	r3, #0
}
 800a90c:	4618      	mov	r0, r3
 800a90e:	3714      	adds	r7, #20
 800a910:	46bd      	mov	sp, r7
 800a912:	bd90      	pop	{r4, r7, pc}
 800a914:	080159fc 	.word	0x080159fc
 800a918:	08015f0c 	.word	0x08015f0c
 800a91c:	08015a40 	.word	0x08015a40

0800a920 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800a920:	b580      	push	{r7, lr}
 800a922:	b084      	sub	sp, #16
 800a924:	af00      	add	r7, sp, #0
 800a926:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800a928:	e007      	b.n	800a93a <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800a930:	6878      	ldr	r0, [r7, #4]
 800a932:	f000 f80a 	bl	800a94a <tcp_seg_free>
    seg = next;
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d1f4      	bne.n	800a92a <tcp_segs_free+0xa>
  }
}
 800a940:	bf00      	nop
 800a942:	bf00      	nop
 800a944:	3710      	adds	r7, #16
 800a946:	46bd      	mov	sp, r7
 800a948:	bd80      	pop	{r7, pc}

0800a94a <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800a94a:	b580      	push	{r7, lr}
 800a94c:	b082      	sub	sp, #8
 800a94e:	af00      	add	r7, sp, #0
 800a950:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	2b00      	cmp	r3, #0
 800a956:	d00c      	beq.n	800a972 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	685b      	ldr	r3, [r3, #4]
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d004      	beq.n	800a96a <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	685b      	ldr	r3, [r3, #4]
 800a964:	4618      	mov	r0, r3
 800a966:	f7fe fba7 	bl	80090b8 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800a96a:	6879      	ldr	r1, [r7, #4]
 800a96c:	2003      	movs	r0, #3
 800a96e:	f7fd fcff 	bl	8008370 <memp_free>
  }
}
 800a972:	bf00      	nop
 800a974:	3708      	adds	r7, #8
 800a976:	46bd      	mov	sp, r7
 800a978:	bd80      	pop	{r7, pc}
	...

0800a97c <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 800a97c:	b580      	push	{r7, lr}
 800a97e:	b082      	sub	sp, #8
 800a980:	af00      	add	r7, sp, #0
 800a982:	6078      	str	r0, [r7, #4]
 800a984:	460b      	mov	r3, r1
 800a986:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d107      	bne.n	800a99e <tcp_setprio+0x22>
 800a98e:	4b07      	ldr	r3, [pc, #28]	; (800a9ac <tcp_setprio+0x30>)
 800a990:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 800a994:	4906      	ldr	r1, [pc, #24]	; (800a9b0 <tcp_setprio+0x34>)
 800a996:	4807      	ldr	r0, [pc, #28]	; (800a9b4 <tcp_setprio+0x38>)
 800a998:	f009 fa86 	bl	8013ea8 <iprintf>
 800a99c:	e002      	b.n	800a9a4 <tcp_setprio+0x28>

  pcb->prio = prio;
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	78fa      	ldrb	r2, [r7, #3]
 800a9a2:	755a      	strb	r2, [r3, #21]
}
 800a9a4:	3708      	adds	r7, #8
 800a9a6:	46bd      	mov	sp, r7
 800a9a8:	bd80      	pop	{r7, pc}
 800a9aa:	bf00      	nop
 800a9ac:	080159fc 	.word	0x080159fc
 800a9b0:	08015f34 	.word	0x08015f34
 800a9b4:	08015a40 	.word	0x08015a40

0800a9b8 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800a9b8:	b580      	push	{r7, lr}
 800a9ba:	b084      	sub	sp, #16
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d106      	bne.n	800a9d4 <tcp_seg_copy+0x1c>
 800a9c6:	4b0f      	ldr	r3, [pc, #60]	; (800aa04 <tcp_seg_copy+0x4c>)
 800a9c8:	f240 6282 	movw	r2, #1666	; 0x682
 800a9cc:	490e      	ldr	r1, [pc, #56]	; (800aa08 <tcp_seg_copy+0x50>)
 800a9ce:	480f      	ldr	r0, [pc, #60]	; (800aa0c <tcp_seg_copy+0x54>)
 800a9d0:	f009 fa6a 	bl	8013ea8 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800a9d4:	2003      	movs	r0, #3
 800a9d6:	f7fd fc79 	bl	80082cc <memp_malloc>
 800a9da:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d101      	bne.n	800a9e6 <tcp_seg_copy+0x2e>
    return NULL;
 800a9e2:	2300      	movs	r3, #0
 800a9e4:	e00a      	b.n	800a9fc <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800a9e6:	2210      	movs	r2, #16
 800a9e8:	6879      	ldr	r1, [r7, #4]
 800a9ea:	68f8      	ldr	r0, [r7, #12]
 800a9ec:	f009 f9b1 	bl	8013d52 <memcpy>
  pbuf_ref(cseg->p);
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	685b      	ldr	r3, [r3, #4]
 800a9f4:	4618      	mov	r0, r3
 800a9f6:	f7fe fc05 	bl	8009204 <pbuf_ref>
  return cseg;
 800a9fa:	68fb      	ldr	r3, [r7, #12]
}
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	3710      	adds	r7, #16
 800aa00:	46bd      	mov	sp, r7
 800aa02:	bd80      	pop	{r7, pc}
 800aa04:	080159fc 	.word	0x080159fc
 800aa08:	08015f50 	.word	0x08015f50
 800aa0c:	08015a40 	.word	0x08015a40

0800aa10 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800aa10:	b580      	push	{r7, lr}
 800aa12:	b084      	sub	sp, #16
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	60f8      	str	r0, [r7, #12]
 800aa18:	60b9      	str	r1, [r7, #8]
 800aa1a:	607a      	str	r2, [r7, #4]
 800aa1c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800aa1e:	68bb      	ldr	r3, [r7, #8]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d109      	bne.n	800aa38 <tcp_recv_null+0x28>
 800aa24:	4b12      	ldr	r3, [pc, #72]	; (800aa70 <tcp_recv_null+0x60>)
 800aa26:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800aa2a:	4912      	ldr	r1, [pc, #72]	; (800aa74 <tcp_recv_null+0x64>)
 800aa2c:	4812      	ldr	r0, [pc, #72]	; (800aa78 <tcp_recv_null+0x68>)
 800aa2e:	f009 fa3b 	bl	8013ea8 <iprintf>
 800aa32:	f06f 030f 	mvn.w	r3, #15
 800aa36:	e016      	b.n	800aa66 <tcp_recv_null+0x56>

  if (p != NULL) {
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d009      	beq.n	800aa52 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	891b      	ldrh	r3, [r3, #8]
 800aa42:	4619      	mov	r1, r3
 800aa44:	68b8      	ldr	r0, [r7, #8]
 800aa46:	f7ff fab5 	bl	8009fb4 <tcp_recved>
    pbuf_free(p);
 800aa4a:	6878      	ldr	r0, [r7, #4]
 800aa4c:	f7fe fb34 	bl	80090b8 <pbuf_free>
 800aa50:	e008      	b.n	800aa64 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800aa52:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d104      	bne.n	800aa64 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800aa5a:	68b8      	ldr	r0, [r7, #8]
 800aa5c:	f7fe ffe6 	bl	8009a2c <tcp_close>
 800aa60:	4603      	mov	r3, r0
 800aa62:	e000      	b.n	800aa66 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800aa64:	2300      	movs	r3, #0
}
 800aa66:	4618      	mov	r0, r3
 800aa68:	3710      	adds	r7, #16
 800aa6a:	46bd      	mov	sp, r7
 800aa6c:	bd80      	pop	{r7, pc}
 800aa6e:	bf00      	nop
 800aa70:	080159fc 	.word	0x080159fc
 800aa74:	08015f6c 	.word	0x08015f6c
 800aa78:	08015a40 	.word	0x08015a40

0800aa7c <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	b086      	sub	sp, #24
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	4603      	mov	r3, r0
 800aa84:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800aa86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	db01      	blt.n	800aa92 <tcp_kill_prio+0x16>
 800aa8e:	79fb      	ldrb	r3, [r7, #7]
 800aa90:	e000      	b.n	800aa94 <tcp_kill_prio+0x18>
 800aa92:	237f      	movs	r3, #127	; 0x7f
 800aa94:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800aa96:	7afb      	ldrb	r3, [r7, #11]
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d034      	beq.n	800ab06 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800aa9c:	7afb      	ldrb	r3, [r7, #11]
 800aa9e:	3b01      	subs	r3, #1
 800aaa0:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800aaa2:	2300      	movs	r3, #0
 800aaa4:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800aaa6:	2300      	movs	r3, #0
 800aaa8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800aaaa:	4b19      	ldr	r3, [pc, #100]	; (800ab10 <tcp_kill_prio+0x94>)
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	617b      	str	r3, [r7, #20]
 800aab0:	e01f      	b.n	800aaf2 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800aab2:	697b      	ldr	r3, [r7, #20]
 800aab4:	7d5b      	ldrb	r3, [r3, #21]
 800aab6:	7afa      	ldrb	r2, [r7, #11]
 800aab8:	429a      	cmp	r2, r3
 800aaba:	d80c      	bhi.n	800aad6 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800aabc:	697b      	ldr	r3, [r7, #20]
 800aabe:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800aac0:	7afa      	ldrb	r2, [r7, #11]
 800aac2:	429a      	cmp	r2, r3
 800aac4:	d112      	bne.n	800aaec <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800aac6:	4b13      	ldr	r3, [pc, #76]	; (800ab14 <tcp_kill_prio+0x98>)
 800aac8:	681a      	ldr	r2, [r3, #0]
 800aaca:	697b      	ldr	r3, [r7, #20]
 800aacc:	6a1b      	ldr	r3, [r3, #32]
 800aace:	1ad3      	subs	r3, r2, r3
 800aad0:	68fa      	ldr	r2, [r7, #12]
 800aad2:	429a      	cmp	r2, r3
 800aad4:	d80a      	bhi.n	800aaec <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800aad6:	4b0f      	ldr	r3, [pc, #60]	; (800ab14 <tcp_kill_prio+0x98>)
 800aad8:	681a      	ldr	r2, [r3, #0]
 800aada:	697b      	ldr	r3, [r7, #20]
 800aadc:	6a1b      	ldr	r3, [r3, #32]
 800aade:	1ad3      	subs	r3, r2, r3
 800aae0:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800aae2:	697b      	ldr	r3, [r7, #20]
 800aae4:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800aae6:	697b      	ldr	r3, [r7, #20]
 800aae8:	7d5b      	ldrb	r3, [r3, #21]
 800aaea:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800aaec:	697b      	ldr	r3, [r7, #20]
 800aaee:	68db      	ldr	r3, [r3, #12]
 800aaf0:	617b      	str	r3, [r7, #20]
 800aaf2:	697b      	ldr	r3, [r7, #20]
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d1dc      	bne.n	800aab2 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800aaf8:	693b      	ldr	r3, [r7, #16]
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d004      	beq.n	800ab08 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800aafe:	6938      	ldr	r0, [r7, #16]
 800ab00:	f7ff f87e 	bl	8009c00 <tcp_abort>
 800ab04:	e000      	b.n	800ab08 <tcp_kill_prio+0x8c>
    return;
 800ab06:	bf00      	nop
  }
}
 800ab08:	3718      	adds	r7, #24
 800ab0a:	46bd      	mov	sp, r7
 800ab0c:	bd80      	pop	{r7, pc}
 800ab0e:	bf00      	nop
 800ab10:	20008220 	.word	0x20008220
 800ab14:	20008214 	.word	0x20008214

0800ab18 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800ab18:	b580      	push	{r7, lr}
 800ab1a:	b086      	sub	sp, #24
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	4603      	mov	r3, r0
 800ab20:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800ab22:	79fb      	ldrb	r3, [r7, #7]
 800ab24:	2b08      	cmp	r3, #8
 800ab26:	d009      	beq.n	800ab3c <tcp_kill_state+0x24>
 800ab28:	79fb      	ldrb	r3, [r7, #7]
 800ab2a:	2b09      	cmp	r3, #9
 800ab2c:	d006      	beq.n	800ab3c <tcp_kill_state+0x24>
 800ab2e:	4b1a      	ldr	r3, [pc, #104]	; (800ab98 <tcp_kill_state+0x80>)
 800ab30:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800ab34:	4919      	ldr	r1, [pc, #100]	; (800ab9c <tcp_kill_state+0x84>)
 800ab36:	481a      	ldr	r0, [pc, #104]	; (800aba0 <tcp_kill_state+0x88>)
 800ab38:	f009 f9b6 	bl	8013ea8 <iprintf>

  inactivity = 0;
 800ab3c:	2300      	movs	r3, #0
 800ab3e:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800ab40:	2300      	movs	r3, #0
 800ab42:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ab44:	4b17      	ldr	r3, [pc, #92]	; (800aba4 <tcp_kill_state+0x8c>)
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	617b      	str	r3, [r7, #20]
 800ab4a:	e017      	b.n	800ab7c <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800ab4c:	697b      	ldr	r3, [r7, #20]
 800ab4e:	7d1b      	ldrb	r3, [r3, #20]
 800ab50:	79fa      	ldrb	r2, [r7, #7]
 800ab52:	429a      	cmp	r2, r3
 800ab54:	d10f      	bne.n	800ab76 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800ab56:	4b14      	ldr	r3, [pc, #80]	; (800aba8 <tcp_kill_state+0x90>)
 800ab58:	681a      	ldr	r2, [r3, #0]
 800ab5a:	697b      	ldr	r3, [r7, #20]
 800ab5c:	6a1b      	ldr	r3, [r3, #32]
 800ab5e:	1ad3      	subs	r3, r2, r3
 800ab60:	68fa      	ldr	r2, [r7, #12]
 800ab62:	429a      	cmp	r2, r3
 800ab64:	d807      	bhi.n	800ab76 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800ab66:	4b10      	ldr	r3, [pc, #64]	; (800aba8 <tcp_kill_state+0x90>)
 800ab68:	681a      	ldr	r2, [r3, #0]
 800ab6a:	697b      	ldr	r3, [r7, #20]
 800ab6c:	6a1b      	ldr	r3, [r3, #32]
 800ab6e:	1ad3      	subs	r3, r2, r3
 800ab70:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800ab72:	697b      	ldr	r3, [r7, #20]
 800ab74:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ab76:	697b      	ldr	r3, [r7, #20]
 800ab78:	68db      	ldr	r3, [r3, #12]
 800ab7a:	617b      	str	r3, [r7, #20]
 800ab7c:	697b      	ldr	r3, [r7, #20]
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d1e4      	bne.n	800ab4c <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800ab82:	693b      	ldr	r3, [r7, #16]
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d003      	beq.n	800ab90 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800ab88:	2100      	movs	r1, #0
 800ab8a:	6938      	ldr	r0, [r7, #16]
 800ab8c:	f7fe ff7a 	bl	8009a84 <tcp_abandon>
  }
}
 800ab90:	bf00      	nop
 800ab92:	3718      	adds	r7, #24
 800ab94:	46bd      	mov	sp, r7
 800ab96:	bd80      	pop	{r7, pc}
 800ab98:	080159fc 	.word	0x080159fc
 800ab9c:	08015f88 	.word	0x08015f88
 800aba0:	08015a40 	.word	0x08015a40
 800aba4:	20008220 	.word	0x20008220
 800aba8:	20008214 	.word	0x20008214

0800abac <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800abac:	b580      	push	{r7, lr}
 800abae:	b084      	sub	sp, #16
 800abb0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800abb2:	2300      	movs	r3, #0
 800abb4:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800abb6:	2300      	movs	r3, #0
 800abb8:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800abba:	4b12      	ldr	r3, [pc, #72]	; (800ac04 <tcp_kill_timewait+0x58>)
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	60fb      	str	r3, [r7, #12]
 800abc0:	e012      	b.n	800abe8 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800abc2:	4b11      	ldr	r3, [pc, #68]	; (800ac08 <tcp_kill_timewait+0x5c>)
 800abc4:	681a      	ldr	r2, [r3, #0]
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	6a1b      	ldr	r3, [r3, #32]
 800abca:	1ad3      	subs	r3, r2, r3
 800abcc:	687a      	ldr	r2, [r7, #4]
 800abce:	429a      	cmp	r2, r3
 800abd0:	d807      	bhi.n	800abe2 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800abd2:	4b0d      	ldr	r3, [pc, #52]	; (800ac08 <tcp_kill_timewait+0x5c>)
 800abd4:	681a      	ldr	r2, [r3, #0]
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	6a1b      	ldr	r3, [r3, #32]
 800abda:	1ad3      	subs	r3, r2, r3
 800abdc:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	68db      	ldr	r3, [r3, #12]
 800abe6:	60fb      	str	r3, [r7, #12]
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	2b00      	cmp	r3, #0
 800abec:	d1e9      	bne.n	800abc2 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800abee:	68bb      	ldr	r3, [r7, #8]
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d002      	beq.n	800abfa <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800abf4:	68b8      	ldr	r0, [r7, #8]
 800abf6:	f7ff f803 	bl	8009c00 <tcp_abort>
  }
}
 800abfa:	bf00      	nop
 800abfc:	3710      	adds	r7, #16
 800abfe:	46bd      	mov	sp, r7
 800ac00:	bd80      	pop	{r7, pc}
 800ac02:	bf00      	nop
 800ac04:	20008224 	.word	0x20008224
 800ac08:	20008214 	.word	0x20008214

0800ac0c <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800ac0c:	b580      	push	{r7, lr}
 800ac0e:	b082      	sub	sp, #8
 800ac10:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800ac12:	4b10      	ldr	r3, [pc, #64]	; (800ac54 <tcp_handle_closepend+0x48>)
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800ac18:	e014      	b.n	800ac44 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	68db      	ldr	r3, [r3, #12]
 800ac1e:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	8b5b      	ldrh	r3, [r3, #26]
 800ac24:	f003 0308 	and.w	r3, r3, #8
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d009      	beq.n	800ac40 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	8b5b      	ldrh	r3, [r3, #26]
 800ac30:	f023 0308 	bic.w	r3, r3, #8
 800ac34:	b29a      	uxth	r2, r3
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800ac3a:	6878      	ldr	r0, [r7, #4]
 800ac3c:	f7fe fe8c 	bl	8009958 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800ac40:	683b      	ldr	r3, [r7, #0]
 800ac42:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d1e7      	bne.n	800ac1a <tcp_handle_closepend+0xe>
  }
}
 800ac4a:	bf00      	nop
 800ac4c:	bf00      	nop
 800ac4e:	3708      	adds	r7, #8
 800ac50:	46bd      	mov	sp, r7
 800ac52:	bd80      	pop	{r7, pc}
 800ac54:	20008220 	.word	0x20008220

0800ac58 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800ac58:	b580      	push	{r7, lr}
 800ac5a:	b084      	sub	sp, #16
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	4603      	mov	r3, r0
 800ac60:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ac62:	2001      	movs	r0, #1
 800ac64:	f7fd fb32 	bl	80082cc <memp_malloc>
 800ac68:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d126      	bne.n	800acbe <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800ac70:	f7ff ffcc 	bl	800ac0c <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800ac74:	f7ff ff9a 	bl	800abac <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ac78:	2001      	movs	r0, #1
 800ac7a:	f7fd fb27 	bl	80082cc <memp_malloc>
 800ac7e:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d11b      	bne.n	800acbe <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800ac86:	2009      	movs	r0, #9
 800ac88:	f7ff ff46 	bl	800ab18 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ac8c:	2001      	movs	r0, #1
 800ac8e:	f7fd fb1d 	bl	80082cc <memp_malloc>
 800ac92:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d111      	bne.n	800acbe <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800ac9a:	2008      	movs	r0, #8
 800ac9c:	f7ff ff3c 	bl	800ab18 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800aca0:	2001      	movs	r0, #1
 800aca2:	f7fd fb13 	bl	80082cc <memp_malloc>
 800aca6:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d107      	bne.n	800acbe <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800acae:	79fb      	ldrb	r3, [r7, #7]
 800acb0:	4618      	mov	r0, r3
 800acb2:	f7ff fee3 	bl	800aa7c <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800acb6:	2001      	movs	r0, #1
 800acb8:	f7fd fb08 	bl	80082cc <memp_malloc>
 800acbc:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d03f      	beq.n	800ad44 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800acc4:	229c      	movs	r2, #156	; 0x9c
 800acc6:	2100      	movs	r1, #0
 800acc8:	68f8      	ldr	r0, [r7, #12]
 800acca:	f009 f850 	bl	8013d6e <memset>
    pcb->prio = prio;
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	79fa      	ldrb	r2, [r7, #7]
 800acd2:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800acda:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800ace4:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	22ff      	movs	r2, #255	; 0xff
 800acf2:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	f44f 7206 	mov.w	r2, #536	; 0x218
 800acfa:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	2206      	movs	r2, #6
 800ad00:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	2206      	movs	r2, #6
 800ad08:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ad10:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	2201      	movs	r2, #1
 800ad16:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800ad1a:	4b0d      	ldr	r3, [pc, #52]	; (800ad50 <tcp_alloc+0xf8>)
 800ad1c:	681a      	ldr	r2, [r3, #0]
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800ad22:	4b0c      	ldr	r3, [pc, #48]	; (800ad54 <tcp_alloc+0xfc>)
 800ad24:	781a      	ldrb	r2, [r3, #0]
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800ad30:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	4a08      	ldr	r2, [pc, #32]	; (800ad58 <tcp_alloc+0x100>)
 800ad38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	4a07      	ldr	r2, [pc, #28]	; (800ad5c <tcp_alloc+0x104>)
 800ad40:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800ad44:	68fb      	ldr	r3, [r7, #12]
}
 800ad46:	4618      	mov	r0, r3
 800ad48:	3710      	adds	r7, #16
 800ad4a:	46bd      	mov	sp, r7
 800ad4c:	bd80      	pop	{r7, pc}
 800ad4e:	bf00      	nop
 800ad50:	20008214 	.word	0x20008214
 800ad54:	2000822a 	.word	0x2000822a
 800ad58:	0800aa11 	.word	0x0800aa11
 800ad5c:	006ddd00 	.word	0x006ddd00

0800ad60 <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 800ad60:	b580      	push	{r7, lr}
 800ad62:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 800ad64:	2040      	movs	r0, #64	; 0x40
 800ad66:	f7ff ff77 	bl	800ac58 <tcp_alloc>
 800ad6a:	4603      	mov	r3, r0
}
 800ad6c:	4618      	mov	r0, r3
 800ad6e:	bd80      	pop	{r7, pc}

0800ad70 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800ad70:	b480      	push	{r7}
 800ad72:	b083      	sub	sp, #12
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	6078      	str	r0, [r7, #4]
 800ad78:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d002      	beq.n	800ad86 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	683a      	ldr	r2, [r7, #0]
 800ad84:	611a      	str	r2, [r3, #16]
  }
}
 800ad86:	bf00      	nop
 800ad88:	370c      	adds	r7, #12
 800ad8a:	46bd      	mov	sp, r7
 800ad8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad90:	4770      	bx	lr
	...

0800ad94 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800ad94:	b580      	push	{r7, lr}
 800ad96:	b082      	sub	sp, #8
 800ad98:	af00      	add	r7, sp, #0
 800ad9a:	6078      	str	r0, [r7, #4]
 800ad9c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d00e      	beq.n	800adc2 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	7d1b      	ldrb	r3, [r3, #20]
 800ada8:	2b01      	cmp	r3, #1
 800adaa:	d106      	bne.n	800adba <tcp_recv+0x26>
 800adac:	4b07      	ldr	r3, [pc, #28]	; (800adcc <tcp_recv+0x38>)
 800adae:	f240 72df 	movw	r2, #2015	; 0x7df
 800adb2:	4907      	ldr	r1, [pc, #28]	; (800add0 <tcp_recv+0x3c>)
 800adb4:	4807      	ldr	r0, [pc, #28]	; (800add4 <tcp_recv+0x40>)
 800adb6:	f009 f877 	bl	8013ea8 <iprintf>
    pcb->recv = recv;
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	683a      	ldr	r2, [r7, #0]
 800adbe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800adc2:	bf00      	nop
 800adc4:	3708      	adds	r7, #8
 800adc6:	46bd      	mov	sp, r7
 800adc8:	bd80      	pop	{r7, pc}
 800adca:	bf00      	nop
 800adcc:	080159fc 	.word	0x080159fc
 800add0:	08015f98 	.word	0x08015f98
 800add4:	08015a40 	.word	0x08015a40

0800add8 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800add8:	b580      	push	{r7, lr}
 800adda:	b082      	sub	sp, #8
 800addc:	af00      	add	r7, sp, #0
 800adde:	6078      	str	r0, [r7, #4]
 800ade0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d00e      	beq.n	800ae06 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	7d1b      	ldrb	r3, [r3, #20]
 800adec:	2b01      	cmp	r3, #1
 800adee:	d106      	bne.n	800adfe <tcp_sent+0x26>
 800adf0:	4b07      	ldr	r3, [pc, #28]	; (800ae10 <tcp_sent+0x38>)
 800adf2:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800adf6:	4907      	ldr	r1, [pc, #28]	; (800ae14 <tcp_sent+0x3c>)
 800adf8:	4807      	ldr	r0, [pc, #28]	; (800ae18 <tcp_sent+0x40>)
 800adfa:	f009 f855 	bl	8013ea8 <iprintf>
    pcb->sent = sent;
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	683a      	ldr	r2, [r7, #0]
 800ae02:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800ae06:	bf00      	nop
 800ae08:	3708      	adds	r7, #8
 800ae0a:	46bd      	mov	sp, r7
 800ae0c:	bd80      	pop	{r7, pc}
 800ae0e:	bf00      	nop
 800ae10:	080159fc 	.word	0x080159fc
 800ae14:	08015fc0 	.word	0x08015fc0
 800ae18:	08015a40 	.word	0x08015a40

0800ae1c <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800ae1c:	b580      	push	{r7, lr}
 800ae1e:	b082      	sub	sp, #8
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	6078      	str	r0, [r7, #4]
 800ae24:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d00e      	beq.n	800ae4a <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	7d1b      	ldrb	r3, [r3, #20]
 800ae30:	2b01      	cmp	r3, #1
 800ae32:	d106      	bne.n	800ae42 <tcp_err+0x26>
 800ae34:	4b07      	ldr	r3, [pc, #28]	; (800ae54 <tcp_err+0x38>)
 800ae36:	f640 020d 	movw	r2, #2061	; 0x80d
 800ae3a:	4907      	ldr	r1, [pc, #28]	; (800ae58 <tcp_err+0x3c>)
 800ae3c:	4807      	ldr	r0, [pc, #28]	; (800ae5c <tcp_err+0x40>)
 800ae3e:	f009 f833 	bl	8013ea8 <iprintf>
    pcb->errf = err;
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	683a      	ldr	r2, [r7, #0]
 800ae46:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800ae4a:	bf00      	nop
 800ae4c:	3708      	adds	r7, #8
 800ae4e:	46bd      	mov	sp, r7
 800ae50:	bd80      	pop	{r7, pc}
 800ae52:	bf00      	nop
 800ae54:	080159fc 	.word	0x080159fc
 800ae58:	08015fe8 	.word	0x08015fe8
 800ae5c:	08015a40 	.word	0x08015a40

0800ae60 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800ae60:	b480      	push	{r7}
 800ae62:	b085      	sub	sp, #20
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	6078      	str	r0, [r7, #4]
 800ae68:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d008      	beq.n	800ae82 <tcp_accept+0x22>
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	7d1b      	ldrb	r3, [r3, #20]
 800ae74:	2b01      	cmp	r3, #1
 800ae76:	d104      	bne.n	800ae82 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	683a      	ldr	r2, [r7, #0]
 800ae80:	619a      	str	r2, [r3, #24]
  }
}
 800ae82:	bf00      	nop
 800ae84:	3714      	adds	r7, #20
 800ae86:	46bd      	mov	sp, r7
 800ae88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae8c:	4770      	bx	lr
	...

0800ae90 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800ae90:	b580      	push	{r7, lr}
 800ae92:	b084      	sub	sp, #16
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	60f8      	str	r0, [r7, #12]
 800ae98:	60b9      	str	r1, [r7, #8]
 800ae9a:	4613      	mov	r3, r2
 800ae9c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d107      	bne.n	800aeb4 <tcp_poll+0x24>
 800aea4:	4b0e      	ldr	r3, [pc, #56]	; (800aee0 <tcp_poll+0x50>)
 800aea6:	f640 023d 	movw	r2, #2109	; 0x83d
 800aeaa:	490e      	ldr	r1, [pc, #56]	; (800aee4 <tcp_poll+0x54>)
 800aeac:	480e      	ldr	r0, [pc, #56]	; (800aee8 <tcp_poll+0x58>)
 800aeae:	f008 fffb 	bl	8013ea8 <iprintf>
 800aeb2:	e011      	b.n	800aed8 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	7d1b      	ldrb	r3, [r3, #20]
 800aeb8:	2b01      	cmp	r3, #1
 800aeba:	d106      	bne.n	800aeca <tcp_poll+0x3a>
 800aebc:	4b08      	ldr	r3, [pc, #32]	; (800aee0 <tcp_poll+0x50>)
 800aebe:	f640 023e 	movw	r2, #2110	; 0x83e
 800aec2:	490a      	ldr	r1, [pc, #40]	; (800aeec <tcp_poll+0x5c>)
 800aec4:	4808      	ldr	r0, [pc, #32]	; (800aee8 <tcp_poll+0x58>)
 800aec6:	f008 ffef 	bl	8013ea8 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	68ba      	ldr	r2, [r7, #8]
 800aece:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	79fa      	ldrb	r2, [r7, #7]
 800aed6:	775a      	strb	r2, [r3, #29]
}
 800aed8:	3710      	adds	r7, #16
 800aeda:	46bd      	mov	sp, r7
 800aedc:	bd80      	pop	{r7, pc}
 800aede:	bf00      	nop
 800aee0:	080159fc 	.word	0x080159fc
 800aee4:	08016010 	.word	0x08016010
 800aee8:	08015a40 	.word	0x08015a40
 800aeec:	08016028 	.word	0x08016028

0800aef0 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800aef0:	b580      	push	{r7, lr}
 800aef2:	b082      	sub	sp, #8
 800aef4:	af00      	add	r7, sp, #0
 800aef6:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d107      	bne.n	800af0e <tcp_pcb_purge+0x1e>
 800aefe:	4b21      	ldr	r3, [pc, #132]	; (800af84 <tcp_pcb_purge+0x94>)
 800af00:	f640 0251 	movw	r2, #2129	; 0x851
 800af04:	4920      	ldr	r1, [pc, #128]	; (800af88 <tcp_pcb_purge+0x98>)
 800af06:	4821      	ldr	r0, [pc, #132]	; (800af8c <tcp_pcb_purge+0x9c>)
 800af08:	f008 ffce 	bl	8013ea8 <iprintf>
 800af0c:	e037      	b.n	800af7e <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	7d1b      	ldrb	r3, [r3, #20]
 800af12:	2b00      	cmp	r3, #0
 800af14:	d033      	beq.n	800af7e <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800af1a:	2b0a      	cmp	r3, #10
 800af1c:	d02f      	beq.n	800af7e <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800af22:	2b01      	cmp	r3, #1
 800af24:	d02b      	beq.n	800af7e <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d007      	beq.n	800af3e <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800af32:	4618      	mov	r0, r3
 800af34:	f7fe f8c0 	bl	80090b8 <pbuf_free>
      pcb->refused_data = NULL;
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	2200      	movs	r2, #0
 800af3c:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800af42:	2b00      	cmp	r3, #0
 800af44:	d002      	beq.n	800af4c <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800af46:	6878      	ldr	r0, [r7, #4]
 800af48:	f000 f986 	bl	800b258 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800af52:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af58:	4618      	mov	r0, r3
 800af5a:	f7ff fce1 	bl	800a920 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af62:	4618      	mov	r0, r3
 800af64:	f7ff fcdc 	bl	800a920 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	2200      	movs	r2, #0
 800af6c:	66da      	str	r2, [r3, #108]	; 0x6c
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	2200      	movs	r2, #0
 800af7a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800af7e:	3708      	adds	r7, #8
 800af80:	46bd      	mov	sp, r7
 800af82:	bd80      	pop	{r7, pc}
 800af84:	080159fc 	.word	0x080159fc
 800af88:	08016048 	.word	0x08016048
 800af8c:	08015a40 	.word	0x08015a40

0800af90 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800af90:	b580      	push	{r7, lr}
 800af92:	b084      	sub	sp, #16
 800af94:	af00      	add	r7, sp, #0
 800af96:	6078      	str	r0, [r7, #4]
 800af98:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800af9a:	683b      	ldr	r3, [r7, #0]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d106      	bne.n	800afae <tcp_pcb_remove+0x1e>
 800afa0:	4b3e      	ldr	r3, [pc, #248]	; (800b09c <tcp_pcb_remove+0x10c>)
 800afa2:	f640 0283 	movw	r2, #2179	; 0x883
 800afa6:	493e      	ldr	r1, [pc, #248]	; (800b0a0 <tcp_pcb_remove+0x110>)
 800afa8:	483e      	ldr	r0, [pc, #248]	; (800b0a4 <tcp_pcb_remove+0x114>)
 800afaa:	f008 ff7d 	bl	8013ea8 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d106      	bne.n	800afc2 <tcp_pcb_remove+0x32>
 800afb4:	4b39      	ldr	r3, [pc, #228]	; (800b09c <tcp_pcb_remove+0x10c>)
 800afb6:	f640 0284 	movw	r2, #2180	; 0x884
 800afba:	493b      	ldr	r1, [pc, #236]	; (800b0a8 <tcp_pcb_remove+0x118>)
 800afbc:	4839      	ldr	r0, [pc, #228]	; (800b0a4 <tcp_pcb_remove+0x114>)
 800afbe:	f008 ff73 	bl	8013ea8 <iprintf>

  TCP_RMV(pcblist, pcb);
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	683a      	ldr	r2, [r7, #0]
 800afc8:	429a      	cmp	r2, r3
 800afca:	d105      	bne.n	800afd8 <tcp_pcb_remove+0x48>
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	68da      	ldr	r2, [r3, #12]
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	601a      	str	r2, [r3, #0]
 800afd6:	e013      	b.n	800b000 <tcp_pcb_remove+0x70>
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	60fb      	str	r3, [r7, #12]
 800afde:	e00c      	b.n	800affa <tcp_pcb_remove+0x6a>
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	68db      	ldr	r3, [r3, #12]
 800afe4:	683a      	ldr	r2, [r7, #0]
 800afe6:	429a      	cmp	r2, r3
 800afe8:	d104      	bne.n	800aff4 <tcp_pcb_remove+0x64>
 800afea:	683b      	ldr	r3, [r7, #0]
 800afec:	68da      	ldr	r2, [r3, #12]
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	60da      	str	r2, [r3, #12]
 800aff2:	e005      	b.n	800b000 <tcp_pcb_remove+0x70>
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	68db      	ldr	r3, [r3, #12]
 800aff8:	60fb      	str	r3, [r7, #12]
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	2b00      	cmp	r3, #0
 800affe:	d1ef      	bne.n	800afe0 <tcp_pcb_remove+0x50>
 800b000:	683b      	ldr	r3, [r7, #0]
 800b002:	2200      	movs	r2, #0
 800b004:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800b006:	6838      	ldr	r0, [r7, #0]
 800b008:	f7ff ff72 	bl	800aef0 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800b00c:	683b      	ldr	r3, [r7, #0]
 800b00e:	7d1b      	ldrb	r3, [r3, #20]
 800b010:	2b0a      	cmp	r3, #10
 800b012:	d013      	beq.n	800b03c <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800b014:	683b      	ldr	r3, [r7, #0]
 800b016:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800b018:	2b01      	cmp	r3, #1
 800b01a:	d00f      	beq.n	800b03c <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800b01c:	683b      	ldr	r3, [r7, #0]
 800b01e:	8b5b      	ldrh	r3, [r3, #26]
 800b020:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800b024:	2b00      	cmp	r3, #0
 800b026:	d009      	beq.n	800b03c <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800b028:	683b      	ldr	r3, [r7, #0]
 800b02a:	8b5b      	ldrh	r3, [r3, #26]
 800b02c:	f043 0302 	orr.w	r3, r3, #2
 800b030:	b29a      	uxth	r2, r3
 800b032:	683b      	ldr	r3, [r7, #0]
 800b034:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800b036:	6838      	ldr	r0, [r7, #0]
 800b038:	f003 fbc6 	bl	800e7c8 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800b03c:	683b      	ldr	r3, [r7, #0]
 800b03e:	7d1b      	ldrb	r3, [r3, #20]
 800b040:	2b01      	cmp	r3, #1
 800b042:	d020      	beq.n	800b086 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800b044:	683b      	ldr	r3, [r7, #0]
 800b046:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d006      	beq.n	800b05a <tcp_pcb_remove+0xca>
 800b04c:	4b13      	ldr	r3, [pc, #76]	; (800b09c <tcp_pcb_remove+0x10c>)
 800b04e:	f640 0293 	movw	r2, #2195	; 0x893
 800b052:	4916      	ldr	r1, [pc, #88]	; (800b0ac <tcp_pcb_remove+0x11c>)
 800b054:	4813      	ldr	r0, [pc, #76]	; (800b0a4 <tcp_pcb_remove+0x114>)
 800b056:	f008 ff27 	bl	8013ea8 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800b05a:	683b      	ldr	r3, [r7, #0]
 800b05c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d006      	beq.n	800b070 <tcp_pcb_remove+0xe0>
 800b062:	4b0e      	ldr	r3, [pc, #56]	; (800b09c <tcp_pcb_remove+0x10c>)
 800b064:	f640 0294 	movw	r2, #2196	; 0x894
 800b068:	4911      	ldr	r1, [pc, #68]	; (800b0b0 <tcp_pcb_remove+0x120>)
 800b06a:	480e      	ldr	r0, [pc, #56]	; (800b0a4 <tcp_pcb_remove+0x114>)
 800b06c:	f008 ff1c 	bl	8013ea8 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800b070:	683b      	ldr	r3, [r7, #0]
 800b072:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b074:	2b00      	cmp	r3, #0
 800b076:	d006      	beq.n	800b086 <tcp_pcb_remove+0xf6>
 800b078:	4b08      	ldr	r3, [pc, #32]	; (800b09c <tcp_pcb_remove+0x10c>)
 800b07a:	f640 0296 	movw	r2, #2198	; 0x896
 800b07e:	490d      	ldr	r1, [pc, #52]	; (800b0b4 <tcp_pcb_remove+0x124>)
 800b080:	4808      	ldr	r0, [pc, #32]	; (800b0a4 <tcp_pcb_remove+0x114>)
 800b082:	f008 ff11 	bl	8013ea8 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800b086:	683b      	ldr	r3, [r7, #0]
 800b088:	2200      	movs	r2, #0
 800b08a:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800b08c:	683b      	ldr	r3, [r7, #0]
 800b08e:	2200      	movs	r2, #0
 800b090:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800b092:	bf00      	nop
 800b094:	3710      	adds	r7, #16
 800b096:	46bd      	mov	sp, r7
 800b098:	bd80      	pop	{r7, pc}
 800b09a:	bf00      	nop
 800b09c:	080159fc 	.word	0x080159fc
 800b0a0:	08016064 	.word	0x08016064
 800b0a4:	08015a40 	.word	0x08015a40
 800b0a8:	08016080 	.word	0x08016080
 800b0ac:	080160a0 	.word	0x080160a0
 800b0b0:	080160b8 	.word	0x080160b8
 800b0b4:	080160d4 	.word	0x080160d4

0800b0b8 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800b0b8:	b580      	push	{r7, lr}
 800b0ba:	b082      	sub	sp, #8
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d106      	bne.n	800b0d4 <tcp_next_iss+0x1c>
 800b0c6:	4b0a      	ldr	r3, [pc, #40]	; (800b0f0 <tcp_next_iss+0x38>)
 800b0c8:	f640 02af 	movw	r2, #2223	; 0x8af
 800b0cc:	4909      	ldr	r1, [pc, #36]	; (800b0f4 <tcp_next_iss+0x3c>)
 800b0ce:	480a      	ldr	r0, [pc, #40]	; (800b0f8 <tcp_next_iss+0x40>)
 800b0d0:	f008 feea 	bl	8013ea8 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800b0d4:	4b09      	ldr	r3, [pc, #36]	; (800b0fc <tcp_next_iss+0x44>)
 800b0d6:	681a      	ldr	r2, [r3, #0]
 800b0d8:	4b09      	ldr	r3, [pc, #36]	; (800b100 <tcp_next_iss+0x48>)
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	4413      	add	r3, r2
 800b0de:	4a07      	ldr	r2, [pc, #28]	; (800b0fc <tcp_next_iss+0x44>)
 800b0e0:	6013      	str	r3, [r2, #0]
  return iss;
 800b0e2:	4b06      	ldr	r3, [pc, #24]	; (800b0fc <tcp_next_iss+0x44>)
 800b0e4:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800b0e6:	4618      	mov	r0, r3
 800b0e8:	3708      	adds	r7, #8
 800b0ea:	46bd      	mov	sp, r7
 800b0ec:	bd80      	pop	{r7, pc}
 800b0ee:	bf00      	nop
 800b0f0:	080159fc 	.word	0x080159fc
 800b0f4:	080160ec 	.word	0x080160ec
 800b0f8:	08015a40 	.word	0x08015a40
 800b0fc:	20000010 	.word	0x20000010
 800b100:	20008214 	.word	0x20008214

0800b104 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800b104:	b580      	push	{r7, lr}
 800b106:	b086      	sub	sp, #24
 800b108:	af00      	add	r7, sp, #0
 800b10a:	4603      	mov	r3, r0
 800b10c:	60b9      	str	r1, [r7, #8]
 800b10e:	607a      	str	r2, [r7, #4]
 800b110:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	2b00      	cmp	r3, #0
 800b116:	d106      	bne.n	800b126 <tcp_eff_send_mss_netif+0x22>
 800b118:	4b14      	ldr	r3, [pc, #80]	; (800b16c <tcp_eff_send_mss_netif+0x68>)
 800b11a:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800b11e:	4914      	ldr	r1, [pc, #80]	; (800b170 <tcp_eff_send_mss_netif+0x6c>)
 800b120:	4814      	ldr	r0, [pc, #80]	; (800b174 <tcp_eff_send_mss_netif+0x70>)
 800b122:	f008 fec1 	bl	8013ea8 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800b126:	68bb      	ldr	r3, [r7, #8]
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d101      	bne.n	800b130 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800b12c:	89fb      	ldrh	r3, [r7, #14]
 800b12e:	e019      	b.n	800b164 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800b130:	68bb      	ldr	r3, [r7, #8]
 800b132:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800b134:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800b136:	8afb      	ldrh	r3, [r7, #22]
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d012      	beq.n	800b162 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800b13c:	2328      	movs	r3, #40	; 0x28
 800b13e:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800b140:	8afa      	ldrh	r2, [r7, #22]
 800b142:	8abb      	ldrh	r3, [r7, #20]
 800b144:	429a      	cmp	r2, r3
 800b146:	d904      	bls.n	800b152 <tcp_eff_send_mss_netif+0x4e>
 800b148:	8afa      	ldrh	r2, [r7, #22]
 800b14a:	8abb      	ldrh	r3, [r7, #20]
 800b14c:	1ad3      	subs	r3, r2, r3
 800b14e:	b29b      	uxth	r3, r3
 800b150:	e000      	b.n	800b154 <tcp_eff_send_mss_netif+0x50>
 800b152:	2300      	movs	r3, #0
 800b154:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800b156:	8a7a      	ldrh	r2, [r7, #18]
 800b158:	89fb      	ldrh	r3, [r7, #14]
 800b15a:	4293      	cmp	r3, r2
 800b15c:	bf28      	it	cs
 800b15e:	4613      	movcs	r3, r2
 800b160:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800b162:	89fb      	ldrh	r3, [r7, #14]
}
 800b164:	4618      	mov	r0, r3
 800b166:	3718      	adds	r7, #24
 800b168:	46bd      	mov	sp, r7
 800b16a:	bd80      	pop	{r7, pc}
 800b16c:	080159fc 	.word	0x080159fc
 800b170:	08016108 	.word	0x08016108
 800b174:	08015a40 	.word	0x08015a40

0800b178 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800b178:	b580      	push	{r7, lr}
 800b17a:	b084      	sub	sp, #16
 800b17c:	af00      	add	r7, sp, #0
 800b17e:	6078      	str	r0, [r7, #4]
 800b180:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800b182:	683b      	ldr	r3, [r7, #0]
 800b184:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d119      	bne.n	800b1c0 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800b18c:	4b10      	ldr	r3, [pc, #64]	; (800b1d0 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800b18e:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800b192:	4910      	ldr	r1, [pc, #64]	; (800b1d4 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800b194:	4810      	ldr	r0, [pc, #64]	; (800b1d8 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800b196:	f008 fe87 	bl	8013ea8 <iprintf>

  while (pcb != NULL) {
 800b19a:	e011      	b.n	800b1c0 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	681a      	ldr	r2, [r3, #0]
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	429a      	cmp	r2, r3
 800b1a6:	d108      	bne.n	800b1ba <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	68db      	ldr	r3, [r3, #12]
 800b1ac:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800b1ae:	68f8      	ldr	r0, [r7, #12]
 800b1b0:	f7fe fd26 	bl	8009c00 <tcp_abort>
      pcb = next;
 800b1b4:	68bb      	ldr	r3, [r7, #8]
 800b1b6:	60fb      	str	r3, [r7, #12]
 800b1b8:	e002      	b.n	800b1c0 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	68db      	ldr	r3, [r3, #12]
 800b1be:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d1ea      	bne.n	800b19c <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800b1c6:	bf00      	nop
 800b1c8:	bf00      	nop
 800b1ca:	3710      	adds	r7, #16
 800b1cc:	46bd      	mov	sp, r7
 800b1ce:	bd80      	pop	{r7, pc}
 800b1d0:	080159fc 	.word	0x080159fc
 800b1d4:	08016130 	.word	0x08016130
 800b1d8:	08015a40 	.word	0x08015a40

0800b1dc <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800b1dc:	b580      	push	{r7, lr}
 800b1de:	b084      	sub	sp, #16
 800b1e0:	af00      	add	r7, sp, #0
 800b1e2:	6078      	str	r0, [r7, #4]
 800b1e4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d02a      	beq.n	800b242 <tcp_netif_ip_addr_changed+0x66>
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d026      	beq.n	800b242 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800b1f4:	4b15      	ldr	r3, [pc, #84]	; (800b24c <tcp_netif_ip_addr_changed+0x70>)
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	4619      	mov	r1, r3
 800b1fa:	6878      	ldr	r0, [r7, #4]
 800b1fc:	f7ff ffbc 	bl	800b178 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800b200:	4b13      	ldr	r3, [pc, #76]	; (800b250 <tcp_netif_ip_addr_changed+0x74>)
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	4619      	mov	r1, r3
 800b206:	6878      	ldr	r0, [r7, #4]
 800b208:	f7ff ffb6 	bl	800b178 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800b20c:	683b      	ldr	r3, [r7, #0]
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d017      	beq.n	800b242 <tcp_netif_ip_addr_changed+0x66>
 800b212:	683b      	ldr	r3, [r7, #0]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	2b00      	cmp	r3, #0
 800b218:	d013      	beq.n	800b242 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800b21a:	4b0e      	ldr	r3, [pc, #56]	; (800b254 <tcp_netif_ip_addr_changed+0x78>)
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	60fb      	str	r3, [r7, #12]
 800b220:	e00c      	b.n	800b23c <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	681a      	ldr	r2, [r3, #0]
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	429a      	cmp	r2, r3
 800b22c:	d103      	bne.n	800b236 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800b22e:	683b      	ldr	r3, [r7, #0]
 800b230:	681a      	ldr	r2, [r3, #0]
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	68db      	ldr	r3, [r3, #12]
 800b23a:	60fb      	str	r3, [r7, #12]
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d1ef      	bne.n	800b222 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800b242:	bf00      	nop
 800b244:	3710      	adds	r7, #16
 800b246:	46bd      	mov	sp, r7
 800b248:	bd80      	pop	{r7, pc}
 800b24a:	bf00      	nop
 800b24c:	20008220 	.word	0x20008220
 800b250:	20008218 	.word	0x20008218
 800b254:	2000821c 	.word	0x2000821c

0800b258 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800b258:	b580      	push	{r7, lr}
 800b25a:	b082      	sub	sp, #8
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b264:	2b00      	cmp	r3, #0
 800b266:	d007      	beq.n	800b278 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b26c:	4618      	mov	r0, r3
 800b26e:	f7ff fb57 	bl	800a920 <tcp_segs_free>
    pcb->ooseq = NULL;
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	2200      	movs	r2, #0
 800b276:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800b278:	bf00      	nop
 800b27a:	3708      	adds	r7, #8
 800b27c:	46bd      	mov	sp, r7
 800b27e:	bd80      	pop	{r7, pc}

0800b280 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800b280:	b590      	push	{r4, r7, lr}
 800b282:	b08d      	sub	sp, #52	; 0x34
 800b284:	af04      	add	r7, sp, #16
 800b286:	6078      	str	r0, [r7, #4]
 800b288:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d105      	bne.n	800b29c <tcp_input+0x1c>
 800b290:	4b9b      	ldr	r3, [pc, #620]	; (800b500 <tcp_input+0x280>)
 800b292:	2283      	movs	r2, #131	; 0x83
 800b294:	499b      	ldr	r1, [pc, #620]	; (800b504 <tcp_input+0x284>)
 800b296:	489c      	ldr	r0, [pc, #624]	; (800b508 <tcp_input+0x288>)
 800b298:	f008 fe06 	bl	8013ea8 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	685b      	ldr	r3, [r3, #4]
 800b2a0:	4a9a      	ldr	r2, [pc, #616]	; (800b50c <tcp_input+0x28c>)
 800b2a2:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	895b      	ldrh	r3, [r3, #10]
 800b2a8:	2b13      	cmp	r3, #19
 800b2aa:	f240 83d1 	bls.w	800ba50 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800b2ae:	4b98      	ldr	r3, [pc, #608]	; (800b510 <tcp_input+0x290>)
 800b2b0:	695b      	ldr	r3, [r3, #20]
 800b2b2:	4a97      	ldr	r2, [pc, #604]	; (800b510 <tcp_input+0x290>)
 800b2b4:	6812      	ldr	r2, [r2, #0]
 800b2b6:	4611      	mov	r1, r2
 800b2b8:	4618      	mov	r0, r3
 800b2ba:	f006 f89f 	bl	80113fc <ip4_addr_isbroadcast_u32>
 800b2be:	4603      	mov	r3, r0
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	f040 83c7 	bne.w	800ba54 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800b2c6:	4b92      	ldr	r3, [pc, #584]	; (800b510 <tcp_input+0x290>)
 800b2c8:	695b      	ldr	r3, [r3, #20]
 800b2ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800b2ce:	2be0      	cmp	r3, #224	; 0xe0
 800b2d0:	f000 83c0 	beq.w	800ba54 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800b2d4:	4b8d      	ldr	r3, [pc, #564]	; (800b50c <tcp_input+0x28c>)
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	899b      	ldrh	r3, [r3, #12]
 800b2da:	b29b      	uxth	r3, r3
 800b2dc:	4618      	mov	r0, r3
 800b2de:	f7fc fb3f 	bl	8007960 <lwip_htons>
 800b2e2:	4603      	mov	r3, r0
 800b2e4:	0b1b      	lsrs	r3, r3, #12
 800b2e6:	b29b      	uxth	r3, r3
 800b2e8:	b2db      	uxtb	r3, r3
 800b2ea:	009b      	lsls	r3, r3, #2
 800b2ec:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800b2ee:	7cbb      	ldrb	r3, [r7, #18]
 800b2f0:	2b13      	cmp	r3, #19
 800b2f2:	f240 83b1 	bls.w	800ba58 <tcp_input+0x7d8>
 800b2f6:	7cbb      	ldrb	r3, [r7, #18]
 800b2f8:	b29a      	uxth	r2, r3
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	891b      	ldrh	r3, [r3, #8]
 800b2fe:	429a      	cmp	r2, r3
 800b300:	f200 83aa 	bhi.w	800ba58 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800b304:	7cbb      	ldrb	r3, [r7, #18]
 800b306:	b29b      	uxth	r3, r3
 800b308:	3b14      	subs	r3, #20
 800b30a:	b29a      	uxth	r2, r3
 800b30c:	4b81      	ldr	r3, [pc, #516]	; (800b514 <tcp_input+0x294>)
 800b30e:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800b310:	4b81      	ldr	r3, [pc, #516]	; (800b518 <tcp_input+0x298>)
 800b312:	2200      	movs	r2, #0
 800b314:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	895a      	ldrh	r2, [r3, #10]
 800b31a:	7cbb      	ldrb	r3, [r7, #18]
 800b31c:	b29b      	uxth	r3, r3
 800b31e:	429a      	cmp	r2, r3
 800b320:	d309      	bcc.n	800b336 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800b322:	4b7c      	ldr	r3, [pc, #496]	; (800b514 <tcp_input+0x294>)
 800b324:	881a      	ldrh	r2, [r3, #0]
 800b326:	4b7d      	ldr	r3, [pc, #500]	; (800b51c <tcp_input+0x29c>)
 800b328:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800b32a:	7cbb      	ldrb	r3, [r7, #18]
 800b32c:	4619      	mov	r1, r3
 800b32e:	6878      	ldr	r0, [r7, #4]
 800b330:	f7fd fe3c 	bl	8008fac <pbuf_remove_header>
 800b334:	e04e      	b.n	800b3d4 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d105      	bne.n	800b34a <tcp_input+0xca>
 800b33e:	4b70      	ldr	r3, [pc, #448]	; (800b500 <tcp_input+0x280>)
 800b340:	22c2      	movs	r2, #194	; 0xc2
 800b342:	4977      	ldr	r1, [pc, #476]	; (800b520 <tcp_input+0x2a0>)
 800b344:	4870      	ldr	r0, [pc, #448]	; (800b508 <tcp_input+0x288>)
 800b346:	f008 fdaf 	bl	8013ea8 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800b34a:	2114      	movs	r1, #20
 800b34c:	6878      	ldr	r0, [r7, #4]
 800b34e:	f7fd fe2d 	bl	8008fac <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	895a      	ldrh	r2, [r3, #10]
 800b356:	4b71      	ldr	r3, [pc, #452]	; (800b51c <tcp_input+0x29c>)
 800b358:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800b35a:	4b6e      	ldr	r3, [pc, #440]	; (800b514 <tcp_input+0x294>)
 800b35c:	881a      	ldrh	r2, [r3, #0]
 800b35e:	4b6f      	ldr	r3, [pc, #444]	; (800b51c <tcp_input+0x29c>)
 800b360:	881b      	ldrh	r3, [r3, #0]
 800b362:	1ad3      	subs	r3, r2, r3
 800b364:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800b366:	4b6d      	ldr	r3, [pc, #436]	; (800b51c <tcp_input+0x29c>)
 800b368:	881b      	ldrh	r3, [r3, #0]
 800b36a:	4619      	mov	r1, r3
 800b36c:	6878      	ldr	r0, [r7, #4]
 800b36e:	f7fd fe1d 	bl	8008fac <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	895b      	ldrh	r3, [r3, #10]
 800b378:	8a3a      	ldrh	r2, [r7, #16]
 800b37a:	429a      	cmp	r2, r3
 800b37c:	f200 836e 	bhi.w	800ba5c <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	685b      	ldr	r3, [r3, #4]
 800b386:	4a64      	ldr	r2, [pc, #400]	; (800b518 <tcp_input+0x298>)
 800b388:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	8a3a      	ldrh	r2, [r7, #16]
 800b390:	4611      	mov	r1, r2
 800b392:	4618      	mov	r0, r3
 800b394:	f7fd fe0a 	bl	8008fac <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	891a      	ldrh	r2, [r3, #8]
 800b39c:	8a3b      	ldrh	r3, [r7, #16]
 800b39e:	1ad3      	subs	r3, r2, r3
 800b3a0:	b29a      	uxth	r2, r3
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	895b      	ldrh	r3, [r3, #10]
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d005      	beq.n	800b3ba <tcp_input+0x13a>
 800b3ae:	4b54      	ldr	r3, [pc, #336]	; (800b500 <tcp_input+0x280>)
 800b3b0:	22df      	movs	r2, #223	; 0xdf
 800b3b2:	495c      	ldr	r1, [pc, #368]	; (800b524 <tcp_input+0x2a4>)
 800b3b4:	4854      	ldr	r0, [pc, #336]	; (800b508 <tcp_input+0x288>)
 800b3b6:	f008 fd77 	bl	8013ea8 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	891a      	ldrh	r2, [r3, #8]
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	891b      	ldrh	r3, [r3, #8]
 800b3c4:	429a      	cmp	r2, r3
 800b3c6:	d005      	beq.n	800b3d4 <tcp_input+0x154>
 800b3c8:	4b4d      	ldr	r3, [pc, #308]	; (800b500 <tcp_input+0x280>)
 800b3ca:	22e0      	movs	r2, #224	; 0xe0
 800b3cc:	4956      	ldr	r1, [pc, #344]	; (800b528 <tcp_input+0x2a8>)
 800b3ce:	484e      	ldr	r0, [pc, #312]	; (800b508 <tcp_input+0x288>)
 800b3d0:	f008 fd6a 	bl	8013ea8 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800b3d4:	4b4d      	ldr	r3, [pc, #308]	; (800b50c <tcp_input+0x28c>)
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	881b      	ldrh	r3, [r3, #0]
 800b3da:	b29b      	uxth	r3, r3
 800b3dc:	4a4b      	ldr	r2, [pc, #300]	; (800b50c <tcp_input+0x28c>)
 800b3de:	6814      	ldr	r4, [r2, #0]
 800b3e0:	4618      	mov	r0, r3
 800b3e2:	f7fc fabd 	bl	8007960 <lwip_htons>
 800b3e6:	4603      	mov	r3, r0
 800b3e8:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800b3ea:	4b48      	ldr	r3, [pc, #288]	; (800b50c <tcp_input+0x28c>)
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	885b      	ldrh	r3, [r3, #2]
 800b3f0:	b29b      	uxth	r3, r3
 800b3f2:	4a46      	ldr	r2, [pc, #280]	; (800b50c <tcp_input+0x28c>)
 800b3f4:	6814      	ldr	r4, [r2, #0]
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	f7fc fab2 	bl	8007960 <lwip_htons>
 800b3fc:	4603      	mov	r3, r0
 800b3fe:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800b400:	4b42      	ldr	r3, [pc, #264]	; (800b50c <tcp_input+0x28c>)
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	685b      	ldr	r3, [r3, #4]
 800b406:	4a41      	ldr	r2, [pc, #260]	; (800b50c <tcp_input+0x28c>)
 800b408:	6814      	ldr	r4, [r2, #0]
 800b40a:	4618      	mov	r0, r3
 800b40c:	f7fc fabd 	bl	800798a <lwip_htonl>
 800b410:	4603      	mov	r3, r0
 800b412:	6063      	str	r3, [r4, #4]
 800b414:	6863      	ldr	r3, [r4, #4]
 800b416:	4a45      	ldr	r2, [pc, #276]	; (800b52c <tcp_input+0x2ac>)
 800b418:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800b41a:	4b3c      	ldr	r3, [pc, #240]	; (800b50c <tcp_input+0x28c>)
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	689b      	ldr	r3, [r3, #8]
 800b420:	4a3a      	ldr	r2, [pc, #232]	; (800b50c <tcp_input+0x28c>)
 800b422:	6814      	ldr	r4, [r2, #0]
 800b424:	4618      	mov	r0, r3
 800b426:	f7fc fab0 	bl	800798a <lwip_htonl>
 800b42a:	4603      	mov	r3, r0
 800b42c:	60a3      	str	r3, [r4, #8]
 800b42e:	68a3      	ldr	r3, [r4, #8]
 800b430:	4a3f      	ldr	r2, [pc, #252]	; (800b530 <tcp_input+0x2b0>)
 800b432:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800b434:	4b35      	ldr	r3, [pc, #212]	; (800b50c <tcp_input+0x28c>)
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	89db      	ldrh	r3, [r3, #14]
 800b43a:	b29b      	uxth	r3, r3
 800b43c:	4a33      	ldr	r2, [pc, #204]	; (800b50c <tcp_input+0x28c>)
 800b43e:	6814      	ldr	r4, [r2, #0]
 800b440:	4618      	mov	r0, r3
 800b442:	f7fc fa8d 	bl	8007960 <lwip_htons>
 800b446:	4603      	mov	r3, r0
 800b448:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800b44a:	4b30      	ldr	r3, [pc, #192]	; (800b50c <tcp_input+0x28c>)
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	899b      	ldrh	r3, [r3, #12]
 800b450:	b29b      	uxth	r3, r3
 800b452:	4618      	mov	r0, r3
 800b454:	f7fc fa84 	bl	8007960 <lwip_htons>
 800b458:	4603      	mov	r3, r0
 800b45a:	b2db      	uxtb	r3, r3
 800b45c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b460:	b2da      	uxtb	r2, r3
 800b462:	4b34      	ldr	r3, [pc, #208]	; (800b534 <tcp_input+0x2b4>)
 800b464:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	891a      	ldrh	r2, [r3, #8]
 800b46a:	4b33      	ldr	r3, [pc, #204]	; (800b538 <tcp_input+0x2b8>)
 800b46c:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800b46e:	4b31      	ldr	r3, [pc, #196]	; (800b534 <tcp_input+0x2b4>)
 800b470:	781b      	ldrb	r3, [r3, #0]
 800b472:	f003 0303 	and.w	r3, r3, #3
 800b476:	2b00      	cmp	r3, #0
 800b478:	d00c      	beq.n	800b494 <tcp_input+0x214>
    tcplen++;
 800b47a:	4b2f      	ldr	r3, [pc, #188]	; (800b538 <tcp_input+0x2b8>)
 800b47c:	881b      	ldrh	r3, [r3, #0]
 800b47e:	3301      	adds	r3, #1
 800b480:	b29a      	uxth	r2, r3
 800b482:	4b2d      	ldr	r3, [pc, #180]	; (800b538 <tcp_input+0x2b8>)
 800b484:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	891a      	ldrh	r2, [r3, #8]
 800b48a:	4b2b      	ldr	r3, [pc, #172]	; (800b538 <tcp_input+0x2b8>)
 800b48c:	881b      	ldrh	r3, [r3, #0]
 800b48e:	429a      	cmp	r2, r3
 800b490:	f200 82e6 	bhi.w	800ba60 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800b494:	2300      	movs	r3, #0
 800b496:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b498:	4b28      	ldr	r3, [pc, #160]	; (800b53c <tcp_input+0x2bc>)
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	61fb      	str	r3, [r7, #28]
 800b49e:	e09d      	b.n	800b5dc <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800b4a0:	69fb      	ldr	r3, [r7, #28]
 800b4a2:	7d1b      	ldrb	r3, [r3, #20]
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d105      	bne.n	800b4b4 <tcp_input+0x234>
 800b4a8:	4b15      	ldr	r3, [pc, #84]	; (800b500 <tcp_input+0x280>)
 800b4aa:	22fb      	movs	r2, #251	; 0xfb
 800b4ac:	4924      	ldr	r1, [pc, #144]	; (800b540 <tcp_input+0x2c0>)
 800b4ae:	4816      	ldr	r0, [pc, #88]	; (800b508 <tcp_input+0x288>)
 800b4b0:	f008 fcfa 	bl	8013ea8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800b4b4:	69fb      	ldr	r3, [r7, #28]
 800b4b6:	7d1b      	ldrb	r3, [r3, #20]
 800b4b8:	2b0a      	cmp	r3, #10
 800b4ba:	d105      	bne.n	800b4c8 <tcp_input+0x248>
 800b4bc:	4b10      	ldr	r3, [pc, #64]	; (800b500 <tcp_input+0x280>)
 800b4be:	22fc      	movs	r2, #252	; 0xfc
 800b4c0:	4920      	ldr	r1, [pc, #128]	; (800b544 <tcp_input+0x2c4>)
 800b4c2:	4811      	ldr	r0, [pc, #68]	; (800b508 <tcp_input+0x288>)
 800b4c4:	f008 fcf0 	bl	8013ea8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800b4c8:	69fb      	ldr	r3, [r7, #28]
 800b4ca:	7d1b      	ldrb	r3, [r3, #20]
 800b4cc:	2b01      	cmp	r3, #1
 800b4ce:	d105      	bne.n	800b4dc <tcp_input+0x25c>
 800b4d0:	4b0b      	ldr	r3, [pc, #44]	; (800b500 <tcp_input+0x280>)
 800b4d2:	22fd      	movs	r2, #253	; 0xfd
 800b4d4:	491c      	ldr	r1, [pc, #112]	; (800b548 <tcp_input+0x2c8>)
 800b4d6:	480c      	ldr	r0, [pc, #48]	; (800b508 <tcp_input+0x288>)
 800b4d8:	f008 fce6 	bl	8013ea8 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b4dc:	69fb      	ldr	r3, [r7, #28]
 800b4de:	7a1b      	ldrb	r3, [r3, #8]
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d033      	beq.n	800b54c <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800b4e4:	69fb      	ldr	r3, [r7, #28]
 800b4e6:	7a1a      	ldrb	r2, [r3, #8]
 800b4e8:	4b09      	ldr	r3, [pc, #36]	; (800b510 <tcp_input+0x290>)
 800b4ea:	685b      	ldr	r3, [r3, #4]
 800b4ec:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b4f0:	3301      	adds	r3, #1
 800b4f2:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b4f4:	429a      	cmp	r2, r3
 800b4f6:	d029      	beq.n	800b54c <tcp_input+0x2cc>
      prev = pcb;
 800b4f8:	69fb      	ldr	r3, [r7, #28]
 800b4fa:	61bb      	str	r3, [r7, #24]
      continue;
 800b4fc:	e06b      	b.n	800b5d6 <tcp_input+0x356>
 800b4fe:	bf00      	nop
 800b500:	08016164 	.word	0x08016164
 800b504:	08016198 	.word	0x08016198
 800b508:	080161b0 	.word	0x080161b0
 800b50c:	2000823c 	.word	0x2000823c
 800b510:	20004ac0 	.word	0x20004ac0
 800b514:	20008240 	.word	0x20008240
 800b518:	20008244 	.word	0x20008244
 800b51c:	20008242 	.word	0x20008242
 800b520:	080161d8 	.word	0x080161d8
 800b524:	080161e8 	.word	0x080161e8
 800b528:	080161f4 	.word	0x080161f4
 800b52c:	2000824c 	.word	0x2000824c
 800b530:	20008250 	.word	0x20008250
 800b534:	20008258 	.word	0x20008258
 800b538:	20008256 	.word	0x20008256
 800b53c:	20008220 	.word	0x20008220
 800b540:	08016214 	.word	0x08016214
 800b544:	0801623c 	.word	0x0801623c
 800b548:	08016268 	.word	0x08016268
    }

    if (pcb->remote_port == tcphdr->src &&
 800b54c:	69fb      	ldr	r3, [r7, #28]
 800b54e:	8b1a      	ldrh	r2, [r3, #24]
 800b550:	4b72      	ldr	r3, [pc, #456]	; (800b71c <tcp_input+0x49c>)
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	881b      	ldrh	r3, [r3, #0]
 800b556:	b29b      	uxth	r3, r3
 800b558:	429a      	cmp	r2, r3
 800b55a:	d13a      	bne.n	800b5d2 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800b55c:	69fb      	ldr	r3, [r7, #28]
 800b55e:	8ada      	ldrh	r2, [r3, #22]
 800b560:	4b6e      	ldr	r3, [pc, #440]	; (800b71c <tcp_input+0x49c>)
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	885b      	ldrh	r3, [r3, #2]
 800b566:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800b568:	429a      	cmp	r2, r3
 800b56a:	d132      	bne.n	800b5d2 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800b56c:	69fb      	ldr	r3, [r7, #28]
 800b56e:	685a      	ldr	r2, [r3, #4]
 800b570:	4b6b      	ldr	r3, [pc, #428]	; (800b720 <tcp_input+0x4a0>)
 800b572:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800b574:	429a      	cmp	r2, r3
 800b576:	d12c      	bne.n	800b5d2 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800b578:	69fb      	ldr	r3, [r7, #28]
 800b57a:	681a      	ldr	r2, [r3, #0]
 800b57c:	4b68      	ldr	r3, [pc, #416]	; (800b720 <tcp_input+0x4a0>)
 800b57e:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800b580:	429a      	cmp	r2, r3
 800b582:	d126      	bne.n	800b5d2 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800b584:	69fb      	ldr	r3, [r7, #28]
 800b586:	68db      	ldr	r3, [r3, #12]
 800b588:	69fa      	ldr	r2, [r7, #28]
 800b58a:	429a      	cmp	r2, r3
 800b58c:	d106      	bne.n	800b59c <tcp_input+0x31c>
 800b58e:	4b65      	ldr	r3, [pc, #404]	; (800b724 <tcp_input+0x4a4>)
 800b590:	f240 120d 	movw	r2, #269	; 0x10d
 800b594:	4964      	ldr	r1, [pc, #400]	; (800b728 <tcp_input+0x4a8>)
 800b596:	4865      	ldr	r0, [pc, #404]	; (800b72c <tcp_input+0x4ac>)
 800b598:	f008 fc86 	bl	8013ea8 <iprintf>
      if (prev != NULL) {
 800b59c:	69bb      	ldr	r3, [r7, #24]
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d00a      	beq.n	800b5b8 <tcp_input+0x338>
        prev->next = pcb->next;
 800b5a2:	69fb      	ldr	r3, [r7, #28]
 800b5a4:	68da      	ldr	r2, [r3, #12]
 800b5a6:	69bb      	ldr	r3, [r7, #24]
 800b5a8:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800b5aa:	4b61      	ldr	r3, [pc, #388]	; (800b730 <tcp_input+0x4b0>)
 800b5ac:	681a      	ldr	r2, [r3, #0]
 800b5ae:	69fb      	ldr	r3, [r7, #28]
 800b5b0:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800b5b2:	4a5f      	ldr	r2, [pc, #380]	; (800b730 <tcp_input+0x4b0>)
 800b5b4:	69fb      	ldr	r3, [r7, #28]
 800b5b6:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800b5b8:	69fb      	ldr	r3, [r7, #28]
 800b5ba:	68db      	ldr	r3, [r3, #12]
 800b5bc:	69fa      	ldr	r2, [r7, #28]
 800b5be:	429a      	cmp	r2, r3
 800b5c0:	d111      	bne.n	800b5e6 <tcp_input+0x366>
 800b5c2:	4b58      	ldr	r3, [pc, #352]	; (800b724 <tcp_input+0x4a4>)
 800b5c4:	f240 1215 	movw	r2, #277	; 0x115
 800b5c8:	495a      	ldr	r1, [pc, #360]	; (800b734 <tcp_input+0x4b4>)
 800b5ca:	4858      	ldr	r0, [pc, #352]	; (800b72c <tcp_input+0x4ac>)
 800b5cc:	f008 fc6c 	bl	8013ea8 <iprintf>
      break;
 800b5d0:	e009      	b.n	800b5e6 <tcp_input+0x366>
    }
    prev = pcb;
 800b5d2:	69fb      	ldr	r3, [r7, #28]
 800b5d4:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b5d6:	69fb      	ldr	r3, [r7, #28]
 800b5d8:	68db      	ldr	r3, [r3, #12]
 800b5da:	61fb      	str	r3, [r7, #28]
 800b5dc:	69fb      	ldr	r3, [r7, #28]
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	f47f af5e 	bne.w	800b4a0 <tcp_input+0x220>
 800b5e4:	e000      	b.n	800b5e8 <tcp_input+0x368>
      break;
 800b5e6:	bf00      	nop
  }

  if (pcb == NULL) {
 800b5e8:	69fb      	ldr	r3, [r7, #28]
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	f040 80aa 	bne.w	800b744 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b5f0:	4b51      	ldr	r3, [pc, #324]	; (800b738 <tcp_input+0x4b8>)
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	61fb      	str	r3, [r7, #28]
 800b5f6:	e03f      	b.n	800b678 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800b5f8:	69fb      	ldr	r3, [r7, #28]
 800b5fa:	7d1b      	ldrb	r3, [r3, #20]
 800b5fc:	2b0a      	cmp	r3, #10
 800b5fe:	d006      	beq.n	800b60e <tcp_input+0x38e>
 800b600:	4b48      	ldr	r3, [pc, #288]	; (800b724 <tcp_input+0x4a4>)
 800b602:	f240 121f 	movw	r2, #287	; 0x11f
 800b606:	494d      	ldr	r1, [pc, #308]	; (800b73c <tcp_input+0x4bc>)
 800b608:	4848      	ldr	r0, [pc, #288]	; (800b72c <tcp_input+0x4ac>)
 800b60a:	f008 fc4d 	bl	8013ea8 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b60e:	69fb      	ldr	r3, [r7, #28]
 800b610:	7a1b      	ldrb	r3, [r3, #8]
 800b612:	2b00      	cmp	r3, #0
 800b614:	d009      	beq.n	800b62a <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800b616:	69fb      	ldr	r3, [r7, #28]
 800b618:	7a1a      	ldrb	r2, [r3, #8]
 800b61a:	4b41      	ldr	r3, [pc, #260]	; (800b720 <tcp_input+0x4a0>)
 800b61c:	685b      	ldr	r3, [r3, #4]
 800b61e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b622:	3301      	adds	r3, #1
 800b624:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b626:	429a      	cmp	r2, r3
 800b628:	d122      	bne.n	800b670 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800b62a:	69fb      	ldr	r3, [r7, #28]
 800b62c:	8b1a      	ldrh	r2, [r3, #24]
 800b62e:	4b3b      	ldr	r3, [pc, #236]	; (800b71c <tcp_input+0x49c>)
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	881b      	ldrh	r3, [r3, #0]
 800b634:	b29b      	uxth	r3, r3
 800b636:	429a      	cmp	r2, r3
 800b638:	d11b      	bne.n	800b672 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800b63a:	69fb      	ldr	r3, [r7, #28]
 800b63c:	8ada      	ldrh	r2, [r3, #22]
 800b63e:	4b37      	ldr	r3, [pc, #220]	; (800b71c <tcp_input+0x49c>)
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	885b      	ldrh	r3, [r3, #2]
 800b644:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800b646:	429a      	cmp	r2, r3
 800b648:	d113      	bne.n	800b672 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800b64a:	69fb      	ldr	r3, [r7, #28]
 800b64c:	685a      	ldr	r2, [r3, #4]
 800b64e:	4b34      	ldr	r3, [pc, #208]	; (800b720 <tcp_input+0x4a0>)
 800b650:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800b652:	429a      	cmp	r2, r3
 800b654:	d10d      	bne.n	800b672 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800b656:	69fb      	ldr	r3, [r7, #28]
 800b658:	681a      	ldr	r2, [r3, #0]
 800b65a:	4b31      	ldr	r3, [pc, #196]	; (800b720 <tcp_input+0x4a0>)
 800b65c:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800b65e:	429a      	cmp	r2, r3
 800b660:	d107      	bne.n	800b672 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800b662:	69f8      	ldr	r0, [r7, #28]
 800b664:	f000 fb56 	bl	800bd14 <tcp_timewait_input>
        }
        pbuf_free(p);
 800b668:	6878      	ldr	r0, [r7, #4]
 800b66a:	f7fd fd25 	bl	80090b8 <pbuf_free>
        return;
 800b66e:	e1fd      	b.n	800ba6c <tcp_input+0x7ec>
        continue;
 800b670:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b672:	69fb      	ldr	r3, [r7, #28]
 800b674:	68db      	ldr	r3, [r3, #12]
 800b676:	61fb      	str	r3, [r7, #28]
 800b678:	69fb      	ldr	r3, [r7, #28]
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d1bc      	bne.n	800b5f8 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800b67e:	2300      	movs	r3, #0
 800b680:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800b682:	4b2f      	ldr	r3, [pc, #188]	; (800b740 <tcp_input+0x4c0>)
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	617b      	str	r3, [r7, #20]
 800b688:	e02a      	b.n	800b6e0 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800b68a:	697b      	ldr	r3, [r7, #20]
 800b68c:	7a1b      	ldrb	r3, [r3, #8]
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d00c      	beq.n	800b6ac <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800b692:	697b      	ldr	r3, [r7, #20]
 800b694:	7a1a      	ldrb	r2, [r3, #8]
 800b696:	4b22      	ldr	r3, [pc, #136]	; (800b720 <tcp_input+0x4a0>)
 800b698:	685b      	ldr	r3, [r3, #4]
 800b69a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b69e:	3301      	adds	r3, #1
 800b6a0:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800b6a2:	429a      	cmp	r2, r3
 800b6a4:	d002      	beq.n	800b6ac <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800b6a6:	697b      	ldr	r3, [r7, #20]
 800b6a8:	61bb      	str	r3, [r7, #24]
        continue;
 800b6aa:	e016      	b.n	800b6da <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800b6ac:	697b      	ldr	r3, [r7, #20]
 800b6ae:	8ada      	ldrh	r2, [r3, #22]
 800b6b0:	4b1a      	ldr	r3, [pc, #104]	; (800b71c <tcp_input+0x49c>)
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	885b      	ldrh	r3, [r3, #2]
 800b6b6:	b29b      	uxth	r3, r3
 800b6b8:	429a      	cmp	r2, r3
 800b6ba:	d10c      	bne.n	800b6d6 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800b6bc:	697b      	ldr	r3, [r7, #20]
 800b6be:	681a      	ldr	r2, [r3, #0]
 800b6c0:	4b17      	ldr	r3, [pc, #92]	; (800b720 <tcp_input+0x4a0>)
 800b6c2:	695b      	ldr	r3, [r3, #20]
 800b6c4:	429a      	cmp	r2, r3
 800b6c6:	d00f      	beq.n	800b6e8 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800b6c8:	697b      	ldr	r3, [r7, #20]
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d00d      	beq.n	800b6ea <tcp_input+0x46a>
 800b6ce:	697b      	ldr	r3, [r7, #20]
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d009      	beq.n	800b6ea <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800b6d6:	697b      	ldr	r3, [r7, #20]
 800b6d8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800b6da:	697b      	ldr	r3, [r7, #20]
 800b6dc:	68db      	ldr	r3, [r3, #12]
 800b6de:	617b      	str	r3, [r7, #20]
 800b6e0:	697b      	ldr	r3, [r7, #20]
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d1d1      	bne.n	800b68a <tcp_input+0x40a>
 800b6e6:	e000      	b.n	800b6ea <tcp_input+0x46a>
            break;
 800b6e8:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800b6ea:	697b      	ldr	r3, [r7, #20]
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d029      	beq.n	800b744 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800b6f0:	69bb      	ldr	r3, [r7, #24]
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d00a      	beq.n	800b70c <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800b6f6:	697b      	ldr	r3, [r7, #20]
 800b6f8:	68da      	ldr	r2, [r3, #12]
 800b6fa:	69bb      	ldr	r3, [r7, #24]
 800b6fc:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800b6fe:	4b10      	ldr	r3, [pc, #64]	; (800b740 <tcp_input+0x4c0>)
 800b700:	681a      	ldr	r2, [r3, #0]
 800b702:	697b      	ldr	r3, [r7, #20]
 800b704:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800b706:	4a0e      	ldr	r2, [pc, #56]	; (800b740 <tcp_input+0x4c0>)
 800b708:	697b      	ldr	r3, [r7, #20]
 800b70a:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800b70c:	6978      	ldr	r0, [r7, #20]
 800b70e:	f000 fa03 	bl	800bb18 <tcp_listen_input>
      }
      pbuf_free(p);
 800b712:	6878      	ldr	r0, [r7, #4]
 800b714:	f7fd fcd0 	bl	80090b8 <pbuf_free>
      return;
 800b718:	e1a8      	b.n	800ba6c <tcp_input+0x7ec>
 800b71a:	bf00      	nop
 800b71c:	2000823c 	.word	0x2000823c
 800b720:	20004ac0 	.word	0x20004ac0
 800b724:	08016164 	.word	0x08016164
 800b728:	08016290 	.word	0x08016290
 800b72c:	080161b0 	.word	0x080161b0
 800b730:	20008220 	.word	0x20008220
 800b734:	080162bc 	.word	0x080162bc
 800b738:	20008224 	.word	0x20008224
 800b73c:	080162e8 	.word	0x080162e8
 800b740:	2000821c 	.word	0x2000821c
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800b744:	69fb      	ldr	r3, [r7, #28]
 800b746:	2b00      	cmp	r3, #0
 800b748:	f000 8158 	beq.w	800b9fc <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800b74c:	4b95      	ldr	r3, [pc, #596]	; (800b9a4 <tcp_input+0x724>)
 800b74e:	2200      	movs	r2, #0
 800b750:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	891a      	ldrh	r2, [r3, #8]
 800b756:	4b93      	ldr	r3, [pc, #588]	; (800b9a4 <tcp_input+0x724>)
 800b758:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800b75a:	4a92      	ldr	r2, [pc, #584]	; (800b9a4 <tcp_input+0x724>)
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800b760:	4b91      	ldr	r3, [pc, #580]	; (800b9a8 <tcp_input+0x728>)
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	4a8f      	ldr	r2, [pc, #572]	; (800b9a4 <tcp_input+0x724>)
 800b766:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800b768:	4b90      	ldr	r3, [pc, #576]	; (800b9ac <tcp_input+0x72c>)
 800b76a:	2200      	movs	r2, #0
 800b76c:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800b76e:	4b90      	ldr	r3, [pc, #576]	; (800b9b0 <tcp_input+0x730>)
 800b770:	2200      	movs	r2, #0
 800b772:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800b774:	4b8f      	ldr	r3, [pc, #572]	; (800b9b4 <tcp_input+0x734>)
 800b776:	2200      	movs	r2, #0
 800b778:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800b77a:	4b8f      	ldr	r3, [pc, #572]	; (800b9b8 <tcp_input+0x738>)
 800b77c:	781b      	ldrb	r3, [r3, #0]
 800b77e:	f003 0308 	and.w	r3, r3, #8
 800b782:	2b00      	cmp	r3, #0
 800b784:	d006      	beq.n	800b794 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	7b5b      	ldrb	r3, [r3, #13]
 800b78a:	f043 0301 	orr.w	r3, r3, #1
 800b78e:	b2da      	uxtb	r2, r3
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800b794:	69fb      	ldr	r3, [r7, #28]
 800b796:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d017      	beq.n	800b7cc <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800b79c:	69f8      	ldr	r0, [r7, #28]
 800b79e:	f7ff f843 	bl	800a828 <tcp_process_refused_data>
 800b7a2:	4603      	mov	r3, r0
 800b7a4:	f113 0f0d 	cmn.w	r3, #13
 800b7a8:	d007      	beq.n	800b7ba <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800b7aa:	69fb      	ldr	r3, [r7, #28]
 800b7ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d00c      	beq.n	800b7cc <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800b7b2:	4b82      	ldr	r3, [pc, #520]	; (800b9bc <tcp_input+0x73c>)
 800b7b4:	881b      	ldrh	r3, [r3, #0]
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d008      	beq.n	800b7cc <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800b7ba:	69fb      	ldr	r3, [r7, #28]
 800b7bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	f040 80e3 	bne.w	800b98a <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800b7c4:	69f8      	ldr	r0, [r7, #28]
 800b7c6:	f003 fe05 	bl	800f3d4 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800b7ca:	e0de      	b.n	800b98a <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800b7cc:	4a7c      	ldr	r2, [pc, #496]	; (800b9c0 <tcp_input+0x740>)
 800b7ce:	69fb      	ldr	r3, [r7, #28]
 800b7d0:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800b7d2:	69f8      	ldr	r0, [r7, #28]
 800b7d4:	f000 fb18 	bl	800be08 <tcp_process>
 800b7d8:	4603      	mov	r3, r0
 800b7da:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800b7dc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b7e0:	f113 0f0d 	cmn.w	r3, #13
 800b7e4:	f000 80d3 	beq.w	800b98e <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800b7e8:	4b71      	ldr	r3, [pc, #452]	; (800b9b0 <tcp_input+0x730>)
 800b7ea:	781b      	ldrb	r3, [r3, #0]
 800b7ec:	f003 0308 	and.w	r3, r3, #8
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d015      	beq.n	800b820 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800b7f4:	69fb      	ldr	r3, [r7, #28]
 800b7f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d008      	beq.n	800b810 <tcp_input+0x590>
 800b7fe:	69fb      	ldr	r3, [r7, #28]
 800b800:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b804:	69fa      	ldr	r2, [r7, #28]
 800b806:	6912      	ldr	r2, [r2, #16]
 800b808:	f06f 010d 	mvn.w	r1, #13
 800b80c:	4610      	mov	r0, r2
 800b80e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800b810:	69f9      	ldr	r1, [r7, #28]
 800b812:	486c      	ldr	r0, [pc, #432]	; (800b9c4 <tcp_input+0x744>)
 800b814:	f7ff fbbc 	bl	800af90 <tcp_pcb_remove>
        tcp_free(pcb);
 800b818:	69f8      	ldr	r0, [r7, #28]
 800b81a:	f7fd ff09 	bl	8009630 <tcp_free>
 800b81e:	e0da      	b.n	800b9d6 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800b820:	2300      	movs	r3, #0
 800b822:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800b824:	4b63      	ldr	r3, [pc, #396]	; (800b9b4 <tcp_input+0x734>)
 800b826:	881b      	ldrh	r3, [r3, #0]
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d01d      	beq.n	800b868 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800b82c:	4b61      	ldr	r3, [pc, #388]	; (800b9b4 <tcp_input+0x734>)
 800b82e:	881b      	ldrh	r3, [r3, #0]
 800b830:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800b832:	69fb      	ldr	r3, [r7, #28]
 800b834:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d00a      	beq.n	800b852 <tcp_input+0x5d2>
 800b83c:	69fb      	ldr	r3, [r7, #28]
 800b83e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b842:	69fa      	ldr	r2, [r7, #28]
 800b844:	6910      	ldr	r0, [r2, #16]
 800b846:	89fa      	ldrh	r2, [r7, #14]
 800b848:	69f9      	ldr	r1, [r7, #28]
 800b84a:	4798      	blx	r3
 800b84c:	4603      	mov	r3, r0
 800b84e:	74fb      	strb	r3, [r7, #19]
 800b850:	e001      	b.n	800b856 <tcp_input+0x5d6>
 800b852:	2300      	movs	r3, #0
 800b854:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800b856:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b85a:	f113 0f0d 	cmn.w	r3, #13
 800b85e:	f000 8098 	beq.w	800b992 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800b862:	4b54      	ldr	r3, [pc, #336]	; (800b9b4 <tcp_input+0x734>)
 800b864:	2200      	movs	r2, #0
 800b866:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800b868:	69f8      	ldr	r0, [r7, #28]
 800b86a:	f000 f915 	bl	800ba98 <tcp_input_delayed_close>
 800b86e:	4603      	mov	r3, r0
 800b870:	2b00      	cmp	r3, #0
 800b872:	f040 8090 	bne.w	800b996 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800b876:	4b4d      	ldr	r3, [pc, #308]	; (800b9ac <tcp_input+0x72c>)
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d041      	beq.n	800b902 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800b87e:	69fb      	ldr	r3, [r7, #28]
 800b880:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b882:	2b00      	cmp	r3, #0
 800b884:	d006      	beq.n	800b894 <tcp_input+0x614>
 800b886:	4b50      	ldr	r3, [pc, #320]	; (800b9c8 <tcp_input+0x748>)
 800b888:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800b88c:	494f      	ldr	r1, [pc, #316]	; (800b9cc <tcp_input+0x74c>)
 800b88e:	4850      	ldr	r0, [pc, #320]	; (800b9d0 <tcp_input+0x750>)
 800b890:	f008 fb0a 	bl	8013ea8 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800b894:	69fb      	ldr	r3, [r7, #28]
 800b896:	8b5b      	ldrh	r3, [r3, #26]
 800b898:	f003 0310 	and.w	r3, r3, #16
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d008      	beq.n	800b8b2 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800b8a0:	4b42      	ldr	r3, [pc, #264]	; (800b9ac <tcp_input+0x72c>)
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	4618      	mov	r0, r3
 800b8a6:	f7fd fc07 	bl	80090b8 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800b8aa:	69f8      	ldr	r0, [r7, #28]
 800b8ac:	f7fe f9a8 	bl	8009c00 <tcp_abort>
            goto aborted;
 800b8b0:	e091      	b.n	800b9d6 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800b8b2:	69fb      	ldr	r3, [r7, #28]
 800b8b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d00c      	beq.n	800b8d6 <tcp_input+0x656>
 800b8bc:	69fb      	ldr	r3, [r7, #28]
 800b8be:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800b8c2:	69fb      	ldr	r3, [r7, #28]
 800b8c4:	6918      	ldr	r0, [r3, #16]
 800b8c6:	4b39      	ldr	r3, [pc, #228]	; (800b9ac <tcp_input+0x72c>)
 800b8c8:	681a      	ldr	r2, [r3, #0]
 800b8ca:	2300      	movs	r3, #0
 800b8cc:	69f9      	ldr	r1, [r7, #28]
 800b8ce:	47a0      	blx	r4
 800b8d0:	4603      	mov	r3, r0
 800b8d2:	74fb      	strb	r3, [r7, #19]
 800b8d4:	e008      	b.n	800b8e8 <tcp_input+0x668>
 800b8d6:	4b35      	ldr	r3, [pc, #212]	; (800b9ac <tcp_input+0x72c>)
 800b8d8:	681a      	ldr	r2, [r3, #0]
 800b8da:	2300      	movs	r3, #0
 800b8dc:	69f9      	ldr	r1, [r7, #28]
 800b8de:	2000      	movs	r0, #0
 800b8e0:	f7ff f896 	bl	800aa10 <tcp_recv_null>
 800b8e4:	4603      	mov	r3, r0
 800b8e6:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800b8e8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b8ec:	f113 0f0d 	cmn.w	r3, #13
 800b8f0:	d053      	beq.n	800b99a <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800b8f2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d003      	beq.n	800b902 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800b8fa:	4b2c      	ldr	r3, [pc, #176]	; (800b9ac <tcp_input+0x72c>)
 800b8fc:	681a      	ldr	r2, [r3, #0]
 800b8fe:	69fb      	ldr	r3, [r7, #28]
 800b900:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800b902:	4b2b      	ldr	r3, [pc, #172]	; (800b9b0 <tcp_input+0x730>)
 800b904:	781b      	ldrb	r3, [r3, #0]
 800b906:	f003 0320 	and.w	r3, r3, #32
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d030      	beq.n	800b970 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800b90e:	69fb      	ldr	r3, [r7, #28]
 800b910:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b912:	2b00      	cmp	r3, #0
 800b914:	d009      	beq.n	800b92a <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800b916:	69fb      	ldr	r3, [r7, #28]
 800b918:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b91a:	7b5a      	ldrb	r2, [r3, #13]
 800b91c:	69fb      	ldr	r3, [r7, #28]
 800b91e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b920:	f042 0220 	orr.w	r2, r2, #32
 800b924:	b2d2      	uxtb	r2, r2
 800b926:	735a      	strb	r2, [r3, #13]
 800b928:	e022      	b.n	800b970 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800b92a:	69fb      	ldr	r3, [r7, #28]
 800b92c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b92e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800b932:	d005      	beq.n	800b940 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800b934:	69fb      	ldr	r3, [r7, #28]
 800b936:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b938:	3301      	adds	r3, #1
 800b93a:	b29a      	uxth	r2, r3
 800b93c:	69fb      	ldr	r3, [r7, #28]
 800b93e:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800b940:	69fb      	ldr	r3, [r7, #28]
 800b942:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b946:	2b00      	cmp	r3, #0
 800b948:	d00b      	beq.n	800b962 <tcp_input+0x6e2>
 800b94a:	69fb      	ldr	r3, [r7, #28]
 800b94c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800b950:	69fb      	ldr	r3, [r7, #28]
 800b952:	6918      	ldr	r0, [r3, #16]
 800b954:	2300      	movs	r3, #0
 800b956:	2200      	movs	r2, #0
 800b958:	69f9      	ldr	r1, [r7, #28]
 800b95a:	47a0      	blx	r4
 800b95c:	4603      	mov	r3, r0
 800b95e:	74fb      	strb	r3, [r7, #19]
 800b960:	e001      	b.n	800b966 <tcp_input+0x6e6>
 800b962:	2300      	movs	r3, #0
 800b964:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800b966:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b96a:	f113 0f0d 	cmn.w	r3, #13
 800b96e:	d016      	beq.n	800b99e <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800b970:	4b13      	ldr	r3, [pc, #76]	; (800b9c0 <tcp_input+0x740>)
 800b972:	2200      	movs	r2, #0
 800b974:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800b976:	69f8      	ldr	r0, [r7, #28]
 800b978:	f000 f88e 	bl	800ba98 <tcp_input_delayed_close>
 800b97c:	4603      	mov	r3, r0
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d128      	bne.n	800b9d4 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800b982:	69f8      	ldr	r0, [r7, #28]
 800b984:	f002 ff20 	bl	800e7c8 <tcp_output>
 800b988:	e025      	b.n	800b9d6 <tcp_input+0x756>
        goto aborted;
 800b98a:	bf00      	nop
 800b98c:	e023      	b.n	800b9d6 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800b98e:	bf00      	nop
 800b990:	e021      	b.n	800b9d6 <tcp_input+0x756>
              goto aborted;
 800b992:	bf00      	nop
 800b994:	e01f      	b.n	800b9d6 <tcp_input+0x756>
          goto aborted;
 800b996:	bf00      	nop
 800b998:	e01d      	b.n	800b9d6 <tcp_input+0x756>
            goto aborted;
 800b99a:	bf00      	nop
 800b99c:	e01b      	b.n	800b9d6 <tcp_input+0x756>
              goto aborted;
 800b99e:	bf00      	nop
 800b9a0:	e019      	b.n	800b9d6 <tcp_input+0x756>
 800b9a2:	bf00      	nop
 800b9a4:	2000822c 	.word	0x2000822c
 800b9a8:	2000823c 	.word	0x2000823c
 800b9ac:	2000825c 	.word	0x2000825c
 800b9b0:	20008259 	.word	0x20008259
 800b9b4:	20008254 	.word	0x20008254
 800b9b8:	20008258 	.word	0x20008258
 800b9bc:	20008256 	.word	0x20008256
 800b9c0:	20008260 	.word	0x20008260
 800b9c4:	20008220 	.word	0x20008220
 800b9c8:	08016164 	.word	0x08016164
 800b9cc:	08016318 	.word	0x08016318
 800b9d0:	080161b0 	.word	0x080161b0
          goto aborted;
 800b9d4:	bf00      	nop
    tcp_input_pcb = NULL;
 800b9d6:	4b27      	ldr	r3, [pc, #156]	; (800ba74 <tcp_input+0x7f4>)
 800b9d8:	2200      	movs	r2, #0
 800b9da:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800b9dc:	4b26      	ldr	r3, [pc, #152]	; (800ba78 <tcp_input+0x7f8>)
 800b9de:	2200      	movs	r2, #0
 800b9e0:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800b9e2:	4b26      	ldr	r3, [pc, #152]	; (800ba7c <tcp_input+0x7fc>)
 800b9e4:	685b      	ldr	r3, [r3, #4]
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d03f      	beq.n	800ba6a <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800b9ea:	4b24      	ldr	r3, [pc, #144]	; (800ba7c <tcp_input+0x7fc>)
 800b9ec:	685b      	ldr	r3, [r3, #4]
 800b9ee:	4618      	mov	r0, r3
 800b9f0:	f7fd fb62 	bl	80090b8 <pbuf_free>
      inseg.p = NULL;
 800b9f4:	4b21      	ldr	r3, [pc, #132]	; (800ba7c <tcp_input+0x7fc>)
 800b9f6:	2200      	movs	r2, #0
 800b9f8:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800b9fa:	e036      	b.n	800ba6a <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800b9fc:	4b20      	ldr	r3, [pc, #128]	; (800ba80 <tcp_input+0x800>)
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	899b      	ldrh	r3, [r3, #12]
 800ba02:	b29b      	uxth	r3, r3
 800ba04:	4618      	mov	r0, r3
 800ba06:	f7fb ffab 	bl	8007960 <lwip_htons>
 800ba0a:	4603      	mov	r3, r0
 800ba0c:	b2db      	uxtb	r3, r3
 800ba0e:	f003 0304 	and.w	r3, r3, #4
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d118      	bne.n	800ba48 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ba16:	4b1b      	ldr	r3, [pc, #108]	; (800ba84 <tcp_input+0x804>)
 800ba18:	6819      	ldr	r1, [r3, #0]
 800ba1a:	4b1b      	ldr	r3, [pc, #108]	; (800ba88 <tcp_input+0x808>)
 800ba1c:	881b      	ldrh	r3, [r3, #0]
 800ba1e:	461a      	mov	r2, r3
 800ba20:	4b1a      	ldr	r3, [pc, #104]	; (800ba8c <tcp_input+0x80c>)
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ba26:	4b16      	ldr	r3, [pc, #88]	; (800ba80 <tcp_input+0x800>)
 800ba28:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ba2a:	885b      	ldrh	r3, [r3, #2]
 800ba2c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ba2e:	4a14      	ldr	r2, [pc, #80]	; (800ba80 <tcp_input+0x800>)
 800ba30:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ba32:	8812      	ldrh	r2, [r2, #0]
 800ba34:	b292      	uxth	r2, r2
 800ba36:	9202      	str	r2, [sp, #8]
 800ba38:	9301      	str	r3, [sp, #4]
 800ba3a:	4b15      	ldr	r3, [pc, #84]	; (800ba90 <tcp_input+0x810>)
 800ba3c:	9300      	str	r3, [sp, #0]
 800ba3e:	4b15      	ldr	r3, [pc, #84]	; (800ba94 <tcp_input+0x814>)
 800ba40:	4602      	mov	r2, r0
 800ba42:	2000      	movs	r0, #0
 800ba44:	f003 fc74 	bl	800f330 <tcp_rst>
    pbuf_free(p);
 800ba48:	6878      	ldr	r0, [r7, #4]
 800ba4a:	f7fd fb35 	bl	80090b8 <pbuf_free>
  return;
 800ba4e:	e00c      	b.n	800ba6a <tcp_input+0x7ea>
    goto dropped;
 800ba50:	bf00      	nop
 800ba52:	e006      	b.n	800ba62 <tcp_input+0x7e2>
    goto dropped;
 800ba54:	bf00      	nop
 800ba56:	e004      	b.n	800ba62 <tcp_input+0x7e2>
    goto dropped;
 800ba58:	bf00      	nop
 800ba5a:	e002      	b.n	800ba62 <tcp_input+0x7e2>
      goto dropped;
 800ba5c:	bf00      	nop
 800ba5e:	e000      	b.n	800ba62 <tcp_input+0x7e2>
      goto dropped;
 800ba60:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800ba62:	6878      	ldr	r0, [r7, #4]
 800ba64:	f7fd fb28 	bl	80090b8 <pbuf_free>
 800ba68:	e000      	b.n	800ba6c <tcp_input+0x7ec>
  return;
 800ba6a:	bf00      	nop
}
 800ba6c:	3724      	adds	r7, #36	; 0x24
 800ba6e:	46bd      	mov	sp, r7
 800ba70:	bd90      	pop	{r4, r7, pc}
 800ba72:	bf00      	nop
 800ba74:	20008260 	.word	0x20008260
 800ba78:	2000825c 	.word	0x2000825c
 800ba7c:	2000822c 	.word	0x2000822c
 800ba80:	2000823c 	.word	0x2000823c
 800ba84:	20008250 	.word	0x20008250
 800ba88:	20008256 	.word	0x20008256
 800ba8c:	2000824c 	.word	0x2000824c
 800ba90:	20004ad0 	.word	0x20004ad0
 800ba94:	20004ad4 	.word	0x20004ad4

0800ba98 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800ba98:	b580      	push	{r7, lr}
 800ba9a:	b082      	sub	sp, #8
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d106      	bne.n	800bab4 <tcp_input_delayed_close+0x1c>
 800baa6:	4b17      	ldr	r3, [pc, #92]	; (800bb04 <tcp_input_delayed_close+0x6c>)
 800baa8:	f240 225a 	movw	r2, #602	; 0x25a
 800baac:	4916      	ldr	r1, [pc, #88]	; (800bb08 <tcp_input_delayed_close+0x70>)
 800baae:	4817      	ldr	r0, [pc, #92]	; (800bb0c <tcp_input_delayed_close+0x74>)
 800bab0:	f008 f9fa 	bl	8013ea8 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800bab4:	4b16      	ldr	r3, [pc, #88]	; (800bb10 <tcp_input_delayed_close+0x78>)
 800bab6:	781b      	ldrb	r3, [r3, #0]
 800bab8:	f003 0310 	and.w	r3, r3, #16
 800babc:	2b00      	cmp	r3, #0
 800babe:	d01c      	beq.n	800bafa <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	8b5b      	ldrh	r3, [r3, #26]
 800bac4:	f003 0310 	and.w	r3, r3, #16
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d10d      	bne.n	800bae8 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d008      	beq.n	800bae8 <tcp_input_delayed_close+0x50>
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800badc:	687a      	ldr	r2, [r7, #4]
 800bade:	6912      	ldr	r2, [r2, #16]
 800bae0:	f06f 010e 	mvn.w	r1, #14
 800bae4:	4610      	mov	r0, r2
 800bae6:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800bae8:	6879      	ldr	r1, [r7, #4]
 800baea:	480a      	ldr	r0, [pc, #40]	; (800bb14 <tcp_input_delayed_close+0x7c>)
 800baec:	f7ff fa50 	bl	800af90 <tcp_pcb_remove>
    tcp_free(pcb);
 800baf0:	6878      	ldr	r0, [r7, #4]
 800baf2:	f7fd fd9d 	bl	8009630 <tcp_free>
    return 1;
 800baf6:	2301      	movs	r3, #1
 800baf8:	e000      	b.n	800bafc <tcp_input_delayed_close+0x64>
  }
  return 0;
 800bafa:	2300      	movs	r3, #0
}
 800bafc:	4618      	mov	r0, r3
 800bafe:	3708      	adds	r7, #8
 800bb00:	46bd      	mov	sp, r7
 800bb02:	bd80      	pop	{r7, pc}
 800bb04:	08016164 	.word	0x08016164
 800bb08:	08016334 	.word	0x08016334
 800bb0c:	080161b0 	.word	0x080161b0
 800bb10:	20008259 	.word	0x20008259
 800bb14:	20008220 	.word	0x20008220

0800bb18 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800bb18:	b590      	push	{r4, r7, lr}
 800bb1a:	b08b      	sub	sp, #44	; 0x2c
 800bb1c:	af04      	add	r7, sp, #16
 800bb1e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800bb20:	4b6f      	ldr	r3, [pc, #444]	; (800bce0 <tcp_listen_input+0x1c8>)
 800bb22:	781b      	ldrb	r3, [r3, #0]
 800bb24:	f003 0304 	and.w	r3, r3, #4
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	f040 80d2 	bne.w	800bcd2 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d106      	bne.n	800bb42 <tcp_listen_input+0x2a>
 800bb34:	4b6b      	ldr	r3, [pc, #428]	; (800bce4 <tcp_listen_input+0x1cc>)
 800bb36:	f240 2281 	movw	r2, #641	; 0x281
 800bb3a:	496b      	ldr	r1, [pc, #428]	; (800bce8 <tcp_listen_input+0x1d0>)
 800bb3c:	486b      	ldr	r0, [pc, #428]	; (800bcec <tcp_listen_input+0x1d4>)
 800bb3e:	f008 f9b3 	bl	8013ea8 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800bb42:	4b67      	ldr	r3, [pc, #412]	; (800bce0 <tcp_listen_input+0x1c8>)
 800bb44:	781b      	ldrb	r3, [r3, #0]
 800bb46:	f003 0310 	and.w	r3, r3, #16
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d019      	beq.n	800bb82 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bb4e:	4b68      	ldr	r3, [pc, #416]	; (800bcf0 <tcp_listen_input+0x1d8>)
 800bb50:	6819      	ldr	r1, [r3, #0]
 800bb52:	4b68      	ldr	r3, [pc, #416]	; (800bcf4 <tcp_listen_input+0x1dc>)
 800bb54:	881b      	ldrh	r3, [r3, #0]
 800bb56:	461a      	mov	r2, r3
 800bb58:	4b67      	ldr	r3, [pc, #412]	; (800bcf8 <tcp_listen_input+0x1e0>)
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800bb5e:	4b67      	ldr	r3, [pc, #412]	; (800bcfc <tcp_listen_input+0x1e4>)
 800bb60:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bb62:	885b      	ldrh	r3, [r3, #2]
 800bb64:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800bb66:	4a65      	ldr	r2, [pc, #404]	; (800bcfc <tcp_listen_input+0x1e4>)
 800bb68:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bb6a:	8812      	ldrh	r2, [r2, #0]
 800bb6c:	b292      	uxth	r2, r2
 800bb6e:	9202      	str	r2, [sp, #8]
 800bb70:	9301      	str	r3, [sp, #4]
 800bb72:	4b63      	ldr	r3, [pc, #396]	; (800bd00 <tcp_listen_input+0x1e8>)
 800bb74:	9300      	str	r3, [sp, #0]
 800bb76:	4b63      	ldr	r3, [pc, #396]	; (800bd04 <tcp_listen_input+0x1ec>)
 800bb78:	4602      	mov	r2, r0
 800bb7a:	6878      	ldr	r0, [r7, #4]
 800bb7c:	f003 fbd8 	bl	800f330 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800bb80:	e0a9      	b.n	800bcd6 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800bb82:	4b57      	ldr	r3, [pc, #348]	; (800bce0 <tcp_listen_input+0x1c8>)
 800bb84:	781b      	ldrb	r3, [r3, #0]
 800bb86:	f003 0302 	and.w	r3, r3, #2
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	f000 80a3 	beq.w	800bcd6 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	7d5b      	ldrb	r3, [r3, #21]
 800bb94:	4618      	mov	r0, r3
 800bb96:	f7ff f85f 	bl	800ac58 <tcp_alloc>
 800bb9a:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800bb9c:	697b      	ldr	r3, [r7, #20]
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d111      	bne.n	800bbc6 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	699b      	ldr	r3, [r3, #24]
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d00a      	beq.n	800bbc0 <tcp_listen_input+0xa8>
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	699b      	ldr	r3, [r3, #24]
 800bbae:	687a      	ldr	r2, [r7, #4]
 800bbb0:	6910      	ldr	r0, [r2, #16]
 800bbb2:	f04f 32ff 	mov.w	r2, #4294967295
 800bbb6:	2100      	movs	r1, #0
 800bbb8:	4798      	blx	r3
 800bbba:	4603      	mov	r3, r0
 800bbbc:	73bb      	strb	r3, [r7, #14]
      return;
 800bbbe:	e08b      	b.n	800bcd8 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800bbc0:	23f0      	movs	r3, #240	; 0xf0
 800bbc2:	73bb      	strb	r3, [r7, #14]
      return;
 800bbc4:	e088      	b.n	800bcd8 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800bbc6:	4b50      	ldr	r3, [pc, #320]	; (800bd08 <tcp_listen_input+0x1f0>)
 800bbc8:	695a      	ldr	r2, [r3, #20]
 800bbca:	697b      	ldr	r3, [r7, #20]
 800bbcc:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800bbce:	4b4e      	ldr	r3, [pc, #312]	; (800bd08 <tcp_listen_input+0x1f0>)
 800bbd0:	691a      	ldr	r2, [r3, #16]
 800bbd2:	697b      	ldr	r3, [r7, #20]
 800bbd4:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	8ada      	ldrh	r2, [r3, #22]
 800bbda:	697b      	ldr	r3, [r7, #20]
 800bbdc:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800bbde:	4b47      	ldr	r3, [pc, #284]	; (800bcfc <tcp_listen_input+0x1e4>)
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	881b      	ldrh	r3, [r3, #0]
 800bbe4:	b29a      	uxth	r2, r3
 800bbe6:	697b      	ldr	r3, [r7, #20]
 800bbe8:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800bbea:	697b      	ldr	r3, [r7, #20]
 800bbec:	2203      	movs	r2, #3
 800bbee:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800bbf0:	4b41      	ldr	r3, [pc, #260]	; (800bcf8 <tcp_listen_input+0x1e0>)
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	1c5a      	adds	r2, r3, #1
 800bbf6:	697b      	ldr	r3, [r7, #20]
 800bbf8:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800bbfa:	697b      	ldr	r3, [r7, #20]
 800bbfc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bbfe:	697b      	ldr	r3, [r7, #20]
 800bc00:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800bc02:	6978      	ldr	r0, [r7, #20]
 800bc04:	f7ff fa58 	bl	800b0b8 <tcp_next_iss>
 800bc08:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800bc0a:	697b      	ldr	r3, [r7, #20]
 800bc0c:	693a      	ldr	r2, [r7, #16]
 800bc0e:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800bc10:	697b      	ldr	r3, [r7, #20]
 800bc12:	693a      	ldr	r2, [r7, #16]
 800bc14:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800bc16:	697b      	ldr	r3, [r7, #20]
 800bc18:	693a      	ldr	r2, [r7, #16]
 800bc1a:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800bc1c:	697b      	ldr	r3, [r7, #20]
 800bc1e:	693a      	ldr	r2, [r7, #16]
 800bc20:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800bc22:	4b35      	ldr	r3, [pc, #212]	; (800bcf8 <tcp_listen_input+0x1e0>)
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	1e5a      	subs	r2, r3, #1
 800bc28:	697b      	ldr	r3, [r7, #20]
 800bc2a:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	691a      	ldr	r2, [r3, #16]
 800bc30:	697b      	ldr	r3, [r7, #20]
 800bc32:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800bc34:	697b      	ldr	r3, [r7, #20]
 800bc36:	687a      	ldr	r2, [r7, #4]
 800bc38:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	7a5b      	ldrb	r3, [r3, #9]
 800bc3e:	f003 030c 	and.w	r3, r3, #12
 800bc42:	b2da      	uxtb	r2, r3
 800bc44:	697b      	ldr	r3, [r7, #20]
 800bc46:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	7a1a      	ldrb	r2, [r3, #8]
 800bc4c:	697b      	ldr	r3, [r7, #20]
 800bc4e:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800bc50:	4b2e      	ldr	r3, [pc, #184]	; (800bd0c <tcp_listen_input+0x1f4>)
 800bc52:	681a      	ldr	r2, [r3, #0]
 800bc54:	697b      	ldr	r3, [r7, #20]
 800bc56:	60da      	str	r2, [r3, #12]
 800bc58:	4a2c      	ldr	r2, [pc, #176]	; (800bd0c <tcp_listen_input+0x1f4>)
 800bc5a:	697b      	ldr	r3, [r7, #20]
 800bc5c:	6013      	str	r3, [r2, #0]
 800bc5e:	f003 fd29 	bl	800f6b4 <tcp_timer_needed>
 800bc62:	4b2b      	ldr	r3, [pc, #172]	; (800bd10 <tcp_listen_input+0x1f8>)
 800bc64:	2201      	movs	r2, #1
 800bc66:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800bc68:	6978      	ldr	r0, [r7, #20]
 800bc6a:	f001 fd8f 	bl	800d78c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800bc6e:	4b23      	ldr	r3, [pc, #140]	; (800bcfc <tcp_listen_input+0x1e4>)
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	89db      	ldrh	r3, [r3, #14]
 800bc74:	b29a      	uxth	r2, r3
 800bc76:	697b      	ldr	r3, [r7, #20]
 800bc78:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800bc7c:	697b      	ldr	r3, [r7, #20]
 800bc7e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800bc82:	697b      	ldr	r3, [r7, #20]
 800bc84:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800bc88:	697b      	ldr	r3, [r7, #20]
 800bc8a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800bc8c:	697b      	ldr	r3, [r7, #20]
 800bc8e:	3304      	adds	r3, #4
 800bc90:	4618      	mov	r0, r3
 800bc92:	f005 f91d 	bl	8010ed0 <ip4_route>
 800bc96:	4601      	mov	r1, r0
 800bc98:	697b      	ldr	r3, [r7, #20]
 800bc9a:	3304      	adds	r3, #4
 800bc9c:	461a      	mov	r2, r3
 800bc9e:	4620      	mov	r0, r4
 800bca0:	f7ff fa30 	bl	800b104 <tcp_eff_send_mss_netif>
 800bca4:	4603      	mov	r3, r0
 800bca6:	461a      	mov	r2, r3
 800bca8:	697b      	ldr	r3, [r7, #20]
 800bcaa:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800bcac:	2112      	movs	r1, #18
 800bcae:	6978      	ldr	r0, [r7, #20]
 800bcb0:	f002 fc9c 	bl	800e5ec <tcp_enqueue_flags>
 800bcb4:	4603      	mov	r3, r0
 800bcb6:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800bcb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d004      	beq.n	800bcca <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800bcc0:	2100      	movs	r1, #0
 800bcc2:	6978      	ldr	r0, [r7, #20]
 800bcc4:	f7fd fede 	bl	8009a84 <tcp_abandon>
      return;
 800bcc8:	e006      	b.n	800bcd8 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800bcca:	6978      	ldr	r0, [r7, #20]
 800bccc:	f002 fd7c 	bl	800e7c8 <tcp_output>
  return;
 800bcd0:	e001      	b.n	800bcd6 <tcp_listen_input+0x1be>
    return;
 800bcd2:	bf00      	nop
 800bcd4:	e000      	b.n	800bcd8 <tcp_listen_input+0x1c0>
  return;
 800bcd6:	bf00      	nop
}
 800bcd8:	371c      	adds	r7, #28
 800bcda:	46bd      	mov	sp, r7
 800bcdc:	bd90      	pop	{r4, r7, pc}
 800bcde:	bf00      	nop
 800bce0:	20008258 	.word	0x20008258
 800bce4:	08016164 	.word	0x08016164
 800bce8:	0801635c 	.word	0x0801635c
 800bcec:	080161b0 	.word	0x080161b0
 800bcf0:	20008250 	.word	0x20008250
 800bcf4:	20008256 	.word	0x20008256
 800bcf8:	2000824c 	.word	0x2000824c
 800bcfc:	2000823c 	.word	0x2000823c
 800bd00:	20004ad0 	.word	0x20004ad0
 800bd04:	20004ad4 	.word	0x20004ad4
 800bd08:	20004ac0 	.word	0x20004ac0
 800bd0c:	20008220 	.word	0x20008220
 800bd10:	20008228 	.word	0x20008228

0800bd14 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800bd14:	b580      	push	{r7, lr}
 800bd16:	b086      	sub	sp, #24
 800bd18:	af04      	add	r7, sp, #16
 800bd1a:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800bd1c:	4b2f      	ldr	r3, [pc, #188]	; (800bddc <tcp_timewait_input+0xc8>)
 800bd1e:	781b      	ldrb	r3, [r3, #0]
 800bd20:	f003 0304 	and.w	r3, r3, #4
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d153      	bne.n	800bdd0 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d106      	bne.n	800bd3c <tcp_timewait_input+0x28>
 800bd2e:	4b2c      	ldr	r3, [pc, #176]	; (800bde0 <tcp_timewait_input+0xcc>)
 800bd30:	f240 22ee 	movw	r2, #750	; 0x2ee
 800bd34:	492b      	ldr	r1, [pc, #172]	; (800bde4 <tcp_timewait_input+0xd0>)
 800bd36:	482c      	ldr	r0, [pc, #176]	; (800bde8 <tcp_timewait_input+0xd4>)
 800bd38:	f008 f8b6 	bl	8013ea8 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800bd3c:	4b27      	ldr	r3, [pc, #156]	; (800bddc <tcp_timewait_input+0xc8>)
 800bd3e:	781b      	ldrb	r3, [r3, #0]
 800bd40:	f003 0302 	and.w	r3, r3, #2
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d02a      	beq.n	800bd9e <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800bd48:	4b28      	ldr	r3, [pc, #160]	; (800bdec <tcp_timewait_input+0xd8>)
 800bd4a:	681a      	ldr	r2, [r3, #0]
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd50:	1ad3      	subs	r3, r2, r3
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	db2d      	blt.n	800bdb2 <tcp_timewait_input+0x9e>
 800bd56:	4b25      	ldr	r3, [pc, #148]	; (800bdec <tcp_timewait_input+0xd8>)
 800bd58:	681a      	ldr	r2, [r3, #0]
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd5e:	6879      	ldr	r1, [r7, #4]
 800bd60:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800bd62:	440b      	add	r3, r1
 800bd64:	1ad3      	subs	r3, r2, r3
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	dc23      	bgt.n	800bdb2 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bd6a:	4b21      	ldr	r3, [pc, #132]	; (800bdf0 <tcp_timewait_input+0xdc>)
 800bd6c:	6819      	ldr	r1, [r3, #0]
 800bd6e:	4b21      	ldr	r3, [pc, #132]	; (800bdf4 <tcp_timewait_input+0xe0>)
 800bd70:	881b      	ldrh	r3, [r3, #0]
 800bd72:	461a      	mov	r2, r3
 800bd74:	4b1d      	ldr	r3, [pc, #116]	; (800bdec <tcp_timewait_input+0xd8>)
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800bd7a:	4b1f      	ldr	r3, [pc, #124]	; (800bdf8 <tcp_timewait_input+0xe4>)
 800bd7c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bd7e:	885b      	ldrh	r3, [r3, #2]
 800bd80:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800bd82:	4a1d      	ldr	r2, [pc, #116]	; (800bdf8 <tcp_timewait_input+0xe4>)
 800bd84:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bd86:	8812      	ldrh	r2, [r2, #0]
 800bd88:	b292      	uxth	r2, r2
 800bd8a:	9202      	str	r2, [sp, #8]
 800bd8c:	9301      	str	r3, [sp, #4]
 800bd8e:	4b1b      	ldr	r3, [pc, #108]	; (800bdfc <tcp_timewait_input+0xe8>)
 800bd90:	9300      	str	r3, [sp, #0]
 800bd92:	4b1b      	ldr	r3, [pc, #108]	; (800be00 <tcp_timewait_input+0xec>)
 800bd94:	4602      	mov	r2, r0
 800bd96:	6878      	ldr	r0, [r7, #4]
 800bd98:	f003 faca 	bl	800f330 <tcp_rst>
      return;
 800bd9c:	e01b      	b.n	800bdd6 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800bd9e:	4b0f      	ldr	r3, [pc, #60]	; (800bddc <tcp_timewait_input+0xc8>)
 800bda0:	781b      	ldrb	r3, [r3, #0]
 800bda2:	f003 0301 	and.w	r3, r3, #1
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d003      	beq.n	800bdb2 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800bdaa:	4b16      	ldr	r3, [pc, #88]	; (800be04 <tcp_timewait_input+0xf0>)
 800bdac:	681a      	ldr	r2, [r3, #0]
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800bdb2:	4b10      	ldr	r3, [pc, #64]	; (800bdf4 <tcp_timewait_input+0xe0>)
 800bdb4:	881b      	ldrh	r3, [r3, #0]
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d00c      	beq.n	800bdd4 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	8b5b      	ldrh	r3, [r3, #26]
 800bdbe:	f043 0302 	orr.w	r3, r3, #2
 800bdc2:	b29a      	uxth	r2, r3
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800bdc8:	6878      	ldr	r0, [r7, #4]
 800bdca:	f002 fcfd 	bl	800e7c8 <tcp_output>
  }
  return;
 800bdce:	e001      	b.n	800bdd4 <tcp_timewait_input+0xc0>
    return;
 800bdd0:	bf00      	nop
 800bdd2:	e000      	b.n	800bdd6 <tcp_timewait_input+0xc2>
  return;
 800bdd4:	bf00      	nop
}
 800bdd6:	3708      	adds	r7, #8
 800bdd8:	46bd      	mov	sp, r7
 800bdda:	bd80      	pop	{r7, pc}
 800bddc:	20008258 	.word	0x20008258
 800bde0:	08016164 	.word	0x08016164
 800bde4:	0801637c 	.word	0x0801637c
 800bde8:	080161b0 	.word	0x080161b0
 800bdec:	2000824c 	.word	0x2000824c
 800bdf0:	20008250 	.word	0x20008250
 800bdf4:	20008256 	.word	0x20008256
 800bdf8:	2000823c 	.word	0x2000823c
 800bdfc:	20004ad0 	.word	0x20004ad0
 800be00:	20004ad4 	.word	0x20004ad4
 800be04:	20008214 	.word	0x20008214

0800be08 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800be08:	b590      	push	{r4, r7, lr}
 800be0a:	b08d      	sub	sp, #52	; 0x34
 800be0c:	af04      	add	r7, sp, #16
 800be0e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800be10:	2300      	movs	r3, #0
 800be12:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800be14:	2300      	movs	r3, #0
 800be16:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d106      	bne.n	800be2c <tcp_process+0x24>
 800be1e:	4b9d      	ldr	r3, [pc, #628]	; (800c094 <tcp_process+0x28c>)
 800be20:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800be24:	499c      	ldr	r1, [pc, #624]	; (800c098 <tcp_process+0x290>)
 800be26:	489d      	ldr	r0, [pc, #628]	; (800c09c <tcp_process+0x294>)
 800be28:	f008 f83e 	bl	8013ea8 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800be2c:	4b9c      	ldr	r3, [pc, #624]	; (800c0a0 <tcp_process+0x298>)
 800be2e:	781b      	ldrb	r3, [r3, #0]
 800be30:	f003 0304 	and.w	r3, r3, #4
 800be34:	2b00      	cmp	r3, #0
 800be36:	d04e      	beq.n	800bed6 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	7d1b      	ldrb	r3, [r3, #20]
 800be3c:	2b02      	cmp	r3, #2
 800be3e:	d108      	bne.n	800be52 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800be44:	4b97      	ldr	r3, [pc, #604]	; (800c0a4 <tcp_process+0x29c>)
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	429a      	cmp	r2, r3
 800be4a:	d123      	bne.n	800be94 <tcp_process+0x8c>
        acceptable = 1;
 800be4c:	2301      	movs	r3, #1
 800be4e:	76fb      	strb	r3, [r7, #27]
 800be50:	e020      	b.n	800be94 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800be56:	4b94      	ldr	r3, [pc, #592]	; (800c0a8 <tcp_process+0x2a0>)
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	429a      	cmp	r2, r3
 800be5c:	d102      	bne.n	800be64 <tcp_process+0x5c>
        acceptable = 1;
 800be5e:	2301      	movs	r3, #1
 800be60:	76fb      	strb	r3, [r7, #27]
 800be62:	e017      	b.n	800be94 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800be64:	4b90      	ldr	r3, [pc, #576]	; (800c0a8 <tcp_process+0x2a0>)
 800be66:	681a      	ldr	r2, [r3, #0]
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be6c:	1ad3      	subs	r3, r2, r3
 800be6e:	2b00      	cmp	r3, #0
 800be70:	db10      	blt.n	800be94 <tcp_process+0x8c>
 800be72:	4b8d      	ldr	r3, [pc, #564]	; (800c0a8 <tcp_process+0x2a0>)
 800be74:	681a      	ldr	r2, [r3, #0]
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be7a:	6879      	ldr	r1, [r7, #4]
 800be7c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800be7e:	440b      	add	r3, r1
 800be80:	1ad3      	subs	r3, r2, r3
 800be82:	2b00      	cmp	r3, #0
 800be84:	dc06      	bgt.n	800be94 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	8b5b      	ldrh	r3, [r3, #26]
 800be8a:	f043 0302 	orr.w	r3, r3, #2
 800be8e:	b29a      	uxth	r2, r3
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800be94:	7efb      	ldrb	r3, [r7, #27]
 800be96:	2b00      	cmp	r3, #0
 800be98:	d01b      	beq.n	800bed2 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	7d1b      	ldrb	r3, [r3, #20]
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d106      	bne.n	800beb0 <tcp_process+0xa8>
 800bea2:	4b7c      	ldr	r3, [pc, #496]	; (800c094 <tcp_process+0x28c>)
 800bea4:	f44f 724e 	mov.w	r2, #824	; 0x338
 800bea8:	4980      	ldr	r1, [pc, #512]	; (800c0ac <tcp_process+0x2a4>)
 800beaa:	487c      	ldr	r0, [pc, #496]	; (800c09c <tcp_process+0x294>)
 800beac:	f007 fffc 	bl	8013ea8 <iprintf>
      recv_flags |= TF_RESET;
 800beb0:	4b7f      	ldr	r3, [pc, #508]	; (800c0b0 <tcp_process+0x2a8>)
 800beb2:	781b      	ldrb	r3, [r3, #0]
 800beb4:	f043 0308 	orr.w	r3, r3, #8
 800beb8:	b2da      	uxtb	r2, r3
 800beba:	4b7d      	ldr	r3, [pc, #500]	; (800c0b0 <tcp_process+0x2a8>)
 800bebc:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	8b5b      	ldrh	r3, [r3, #26]
 800bec2:	f023 0301 	bic.w	r3, r3, #1
 800bec6:	b29a      	uxth	r2, r3
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800becc:	f06f 030d 	mvn.w	r3, #13
 800bed0:	e37a      	b.n	800c5c8 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800bed2:	2300      	movs	r3, #0
 800bed4:	e378      	b.n	800c5c8 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800bed6:	4b72      	ldr	r3, [pc, #456]	; (800c0a0 <tcp_process+0x298>)
 800bed8:	781b      	ldrb	r3, [r3, #0]
 800beda:	f003 0302 	and.w	r3, r3, #2
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d010      	beq.n	800bf04 <tcp_process+0xfc>
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	7d1b      	ldrb	r3, [r3, #20]
 800bee6:	2b02      	cmp	r3, #2
 800bee8:	d00c      	beq.n	800bf04 <tcp_process+0xfc>
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	7d1b      	ldrb	r3, [r3, #20]
 800beee:	2b03      	cmp	r3, #3
 800bef0:	d008      	beq.n	800bf04 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	8b5b      	ldrh	r3, [r3, #26]
 800bef6:	f043 0302 	orr.w	r3, r3, #2
 800befa:	b29a      	uxth	r2, r3
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800bf00:	2300      	movs	r3, #0
 800bf02:	e361      	b.n	800c5c8 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	8b5b      	ldrh	r3, [r3, #26]
 800bf08:	f003 0310 	and.w	r3, r3, #16
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d103      	bne.n	800bf18 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800bf10:	4b68      	ldr	r3, [pc, #416]	; (800c0b4 <tcp_process+0x2ac>)
 800bf12:	681a      	ldr	r2, [r3, #0]
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	2200      	movs	r2, #0
 800bf1c:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	2200      	movs	r2, #0
 800bf24:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800bf28:	6878      	ldr	r0, [r7, #4]
 800bf2a:	f001 fc2f 	bl	800d78c <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	7d1b      	ldrb	r3, [r3, #20]
 800bf32:	3b02      	subs	r3, #2
 800bf34:	2b07      	cmp	r3, #7
 800bf36:	f200 8337 	bhi.w	800c5a8 <tcp_process+0x7a0>
 800bf3a:	a201      	add	r2, pc, #4	; (adr r2, 800bf40 <tcp_process+0x138>)
 800bf3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf40:	0800bf61 	.word	0x0800bf61
 800bf44:	0800c191 	.word	0x0800c191
 800bf48:	0800c309 	.word	0x0800c309
 800bf4c:	0800c333 	.word	0x0800c333
 800bf50:	0800c457 	.word	0x0800c457
 800bf54:	0800c309 	.word	0x0800c309
 800bf58:	0800c4e3 	.word	0x0800c4e3
 800bf5c:	0800c573 	.word	0x0800c573
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800bf60:	4b4f      	ldr	r3, [pc, #316]	; (800c0a0 <tcp_process+0x298>)
 800bf62:	781b      	ldrb	r3, [r3, #0]
 800bf64:	f003 0310 	and.w	r3, r3, #16
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	f000 80e4 	beq.w	800c136 <tcp_process+0x32e>
 800bf6e:	4b4c      	ldr	r3, [pc, #304]	; (800c0a0 <tcp_process+0x298>)
 800bf70:	781b      	ldrb	r3, [r3, #0]
 800bf72:	f003 0302 	and.w	r3, r3, #2
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	f000 80dd 	beq.w	800c136 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf80:	1c5a      	adds	r2, r3, #1
 800bf82:	4b48      	ldr	r3, [pc, #288]	; (800c0a4 <tcp_process+0x29c>)
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	429a      	cmp	r2, r3
 800bf88:	f040 80d5 	bne.w	800c136 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800bf8c:	4b46      	ldr	r3, [pc, #280]	; (800c0a8 <tcp_process+0x2a0>)
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	1c5a      	adds	r2, r3, #1
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800bf9e:	4b41      	ldr	r3, [pc, #260]	; (800c0a4 <tcp_process+0x29c>)
 800bfa0:	681a      	ldr	r2, [r3, #0]
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800bfa6:	4b44      	ldr	r3, [pc, #272]	; (800c0b8 <tcp_process+0x2b0>)
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	89db      	ldrh	r3, [r3, #14]
 800bfac:	b29a      	uxth	r2, r3
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800bfc0:	4b39      	ldr	r3, [pc, #228]	; (800c0a8 <tcp_process+0x2a0>)
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	1e5a      	subs	r2, r3, #1
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	2204      	movs	r2, #4
 800bfce:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	3304      	adds	r3, #4
 800bfd8:	4618      	mov	r0, r3
 800bfda:	f004 ff79 	bl	8010ed0 <ip4_route>
 800bfde:	4601      	mov	r1, r0
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	3304      	adds	r3, #4
 800bfe4:	461a      	mov	r2, r3
 800bfe6:	4620      	mov	r0, r4
 800bfe8:	f7ff f88c 	bl	800b104 <tcp_eff_send_mss_netif>
 800bfec:	4603      	mov	r3, r0
 800bfee:	461a      	mov	r2, r3
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bff8:	009a      	lsls	r2, r3, #2
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bffe:	005b      	lsls	r3, r3, #1
 800c000:	f241 111c 	movw	r1, #4380	; 0x111c
 800c004:	428b      	cmp	r3, r1
 800c006:	bf38      	it	cc
 800c008:	460b      	movcc	r3, r1
 800c00a:	429a      	cmp	r2, r3
 800c00c:	d204      	bcs.n	800c018 <tcp_process+0x210>
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c012:	009b      	lsls	r3, r3, #2
 800c014:	b29b      	uxth	r3, r3
 800c016:	e00d      	b.n	800c034 <tcp_process+0x22c>
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c01c:	005b      	lsls	r3, r3, #1
 800c01e:	f241 121c 	movw	r2, #4380	; 0x111c
 800c022:	4293      	cmp	r3, r2
 800c024:	d904      	bls.n	800c030 <tcp_process+0x228>
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c02a:	005b      	lsls	r3, r3, #1
 800c02c:	b29b      	uxth	r3, r3
 800c02e:	e001      	b.n	800c034 <tcp_process+0x22c>
 800c030:	f241 131c 	movw	r3, #4380	; 0x111c
 800c034:	687a      	ldr	r2, [r7, #4]
 800c036:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c040:	2b00      	cmp	r3, #0
 800c042:	d106      	bne.n	800c052 <tcp_process+0x24a>
 800c044:	4b13      	ldr	r3, [pc, #76]	; (800c094 <tcp_process+0x28c>)
 800c046:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800c04a:	491c      	ldr	r1, [pc, #112]	; (800c0bc <tcp_process+0x2b4>)
 800c04c:	4813      	ldr	r0, [pc, #76]	; (800c09c <tcp_process+0x294>)
 800c04e:	f007 ff2b 	bl	8013ea8 <iprintf>
        --pcb->snd_queuelen;
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c058:	3b01      	subs	r3, #1
 800c05a:	b29a      	uxth	r2, r3
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c066:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800c068:	69fb      	ldr	r3, [r7, #28]
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d12a      	bne.n	800c0c4 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c072:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800c074:	69fb      	ldr	r3, [r7, #28]
 800c076:	2b00      	cmp	r3, #0
 800c078:	d106      	bne.n	800c088 <tcp_process+0x280>
 800c07a:	4b06      	ldr	r3, [pc, #24]	; (800c094 <tcp_process+0x28c>)
 800c07c:	f44f 725d 	mov.w	r2, #884	; 0x374
 800c080:	490f      	ldr	r1, [pc, #60]	; (800c0c0 <tcp_process+0x2b8>)
 800c082:	4806      	ldr	r0, [pc, #24]	; (800c09c <tcp_process+0x294>)
 800c084:	f007 ff10 	bl	8013ea8 <iprintf>
          pcb->unsent = rseg->next;
 800c088:	69fb      	ldr	r3, [r7, #28]
 800c08a:	681a      	ldr	r2, [r3, #0]
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	66da      	str	r2, [r3, #108]	; 0x6c
 800c090:	e01c      	b.n	800c0cc <tcp_process+0x2c4>
 800c092:	bf00      	nop
 800c094:	08016164 	.word	0x08016164
 800c098:	0801639c 	.word	0x0801639c
 800c09c:	080161b0 	.word	0x080161b0
 800c0a0:	20008258 	.word	0x20008258
 800c0a4:	20008250 	.word	0x20008250
 800c0a8:	2000824c 	.word	0x2000824c
 800c0ac:	080163b8 	.word	0x080163b8
 800c0b0:	20008259 	.word	0x20008259
 800c0b4:	20008214 	.word	0x20008214
 800c0b8:	2000823c 	.word	0x2000823c
 800c0bc:	080163d8 	.word	0x080163d8
 800c0c0:	080163f0 	.word	0x080163f0
        } else {
          pcb->unacked = rseg->next;
 800c0c4:	69fb      	ldr	r3, [r7, #28]
 800c0c6:	681a      	ldr	r2, [r3, #0]
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800c0cc:	69f8      	ldr	r0, [r7, #28]
 800c0ce:	f7fe fc3c 	bl	800a94a <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d104      	bne.n	800c0e4 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c0e0:	861a      	strh	r2, [r3, #48]	; 0x30
 800c0e2:	e006      	b.n	800c0f2 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	2200      	movs	r2, #0
 800c0e8:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	2200      	movs	r2, #0
 800c0ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d00a      	beq.n	800c112 <tcp_process+0x30a>
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c102:	687a      	ldr	r2, [r7, #4]
 800c104:	6910      	ldr	r0, [r2, #16]
 800c106:	2200      	movs	r2, #0
 800c108:	6879      	ldr	r1, [r7, #4]
 800c10a:	4798      	blx	r3
 800c10c:	4603      	mov	r3, r0
 800c10e:	76bb      	strb	r3, [r7, #26]
 800c110:	e001      	b.n	800c116 <tcp_process+0x30e>
 800c112:	2300      	movs	r3, #0
 800c114:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800c116:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800c11a:	f113 0f0d 	cmn.w	r3, #13
 800c11e:	d102      	bne.n	800c126 <tcp_process+0x31e>
          return ERR_ABRT;
 800c120:	f06f 030c 	mvn.w	r3, #12
 800c124:	e250      	b.n	800c5c8 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	8b5b      	ldrh	r3, [r3, #26]
 800c12a:	f043 0302 	orr.w	r3, r3, #2
 800c12e:	b29a      	uxth	r2, r3
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800c134:	e23a      	b.n	800c5ac <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800c136:	4b98      	ldr	r3, [pc, #608]	; (800c398 <tcp_process+0x590>)
 800c138:	781b      	ldrb	r3, [r3, #0]
 800c13a:	f003 0310 	and.w	r3, r3, #16
 800c13e:	2b00      	cmp	r3, #0
 800c140:	f000 8234 	beq.w	800c5ac <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c144:	4b95      	ldr	r3, [pc, #596]	; (800c39c <tcp_process+0x594>)
 800c146:	6819      	ldr	r1, [r3, #0]
 800c148:	4b95      	ldr	r3, [pc, #596]	; (800c3a0 <tcp_process+0x598>)
 800c14a:	881b      	ldrh	r3, [r3, #0]
 800c14c:	461a      	mov	r2, r3
 800c14e:	4b95      	ldr	r3, [pc, #596]	; (800c3a4 <tcp_process+0x59c>)
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c154:	4b94      	ldr	r3, [pc, #592]	; (800c3a8 <tcp_process+0x5a0>)
 800c156:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c158:	885b      	ldrh	r3, [r3, #2]
 800c15a:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c15c:	4a92      	ldr	r2, [pc, #584]	; (800c3a8 <tcp_process+0x5a0>)
 800c15e:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c160:	8812      	ldrh	r2, [r2, #0]
 800c162:	b292      	uxth	r2, r2
 800c164:	9202      	str	r2, [sp, #8]
 800c166:	9301      	str	r3, [sp, #4]
 800c168:	4b90      	ldr	r3, [pc, #576]	; (800c3ac <tcp_process+0x5a4>)
 800c16a:	9300      	str	r3, [sp, #0]
 800c16c:	4b90      	ldr	r3, [pc, #576]	; (800c3b0 <tcp_process+0x5a8>)
 800c16e:	4602      	mov	r2, r0
 800c170:	6878      	ldr	r0, [r7, #4]
 800c172:	f003 f8dd 	bl	800f330 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c17c:	2b05      	cmp	r3, #5
 800c17e:	f200 8215 	bhi.w	800c5ac <tcp_process+0x7a4>
          pcb->rtime = 0;
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	2200      	movs	r2, #0
 800c186:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800c188:	6878      	ldr	r0, [r7, #4]
 800c18a:	f002 fea7 	bl	800eedc <tcp_rexmit_rto>
      break;
 800c18e:	e20d      	b.n	800c5ac <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800c190:	4b81      	ldr	r3, [pc, #516]	; (800c398 <tcp_process+0x590>)
 800c192:	781b      	ldrb	r3, [r3, #0]
 800c194:	f003 0310 	and.w	r3, r3, #16
 800c198:	2b00      	cmp	r3, #0
 800c19a:	f000 80a1 	beq.w	800c2e0 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800c19e:	4b7f      	ldr	r3, [pc, #508]	; (800c39c <tcp_process+0x594>)
 800c1a0:	681a      	ldr	r2, [r3, #0]
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c1a6:	1ad3      	subs	r3, r2, r3
 800c1a8:	3b01      	subs	r3, #1
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	db7e      	blt.n	800c2ac <tcp_process+0x4a4>
 800c1ae:	4b7b      	ldr	r3, [pc, #492]	; (800c39c <tcp_process+0x594>)
 800c1b0:	681a      	ldr	r2, [r3, #0]
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c1b6:	1ad3      	subs	r3, r2, r3
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	dc77      	bgt.n	800c2ac <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	2204      	movs	r2, #4
 800c1c0:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d102      	bne.n	800c1d0 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800c1ca:	23fa      	movs	r3, #250	; 0xfa
 800c1cc:	76bb      	strb	r3, [r7, #26]
 800c1ce:	e01d      	b.n	800c20c <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c1d4:	699b      	ldr	r3, [r3, #24]
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d106      	bne.n	800c1e8 <tcp_process+0x3e0>
 800c1da:	4b76      	ldr	r3, [pc, #472]	; (800c3b4 <tcp_process+0x5ac>)
 800c1dc:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800c1e0:	4975      	ldr	r1, [pc, #468]	; (800c3b8 <tcp_process+0x5b0>)
 800c1e2:	4876      	ldr	r0, [pc, #472]	; (800c3bc <tcp_process+0x5b4>)
 800c1e4:	f007 fe60 	bl	8013ea8 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c1ec:	699b      	ldr	r3, [r3, #24]
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d00a      	beq.n	800c208 <tcp_process+0x400>
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c1f6:	699b      	ldr	r3, [r3, #24]
 800c1f8:	687a      	ldr	r2, [r7, #4]
 800c1fa:	6910      	ldr	r0, [r2, #16]
 800c1fc:	2200      	movs	r2, #0
 800c1fe:	6879      	ldr	r1, [r7, #4]
 800c200:	4798      	blx	r3
 800c202:	4603      	mov	r3, r0
 800c204:	76bb      	strb	r3, [r7, #26]
 800c206:	e001      	b.n	800c20c <tcp_process+0x404>
 800c208:	23f0      	movs	r3, #240	; 0xf0
 800c20a:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800c20c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800c210:	2b00      	cmp	r3, #0
 800c212:	d00a      	beq.n	800c22a <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800c214:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800c218:	f113 0f0d 	cmn.w	r3, #13
 800c21c:	d002      	beq.n	800c224 <tcp_process+0x41c>
              tcp_abort(pcb);
 800c21e:	6878      	ldr	r0, [r7, #4]
 800c220:	f7fd fcee 	bl	8009c00 <tcp_abort>
            }
            return ERR_ABRT;
 800c224:	f06f 030c 	mvn.w	r3, #12
 800c228:	e1ce      	b.n	800c5c8 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800c22a:	6878      	ldr	r0, [r7, #4]
 800c22c:	f000 fae0 	bl	800c7f0 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800c230:	4b63      	ldr	r3, [pc, #396]	; (800c3c0 <tcp_process+0x5b8>)
 800c232:	881b      	ldrh	r3, [r3, #0]
 800c234:	2b00      	cmp	r3, #0
 800c236:	d005      	beq.n	800c244 <tcp_process+0x43c>
            recv_acked--;
 800c238:	4b61      	ldr	r3, [pc, #388]	; (800c3c0 <tcp_process+0x5b8>)
 800c23a:	881b      	ldrh	r3, [r3, #0]
 800c23c:	3b01      	subs	r3, #1
 800c23e:	b29a      	uxth	r2, r3
 800c240:	4b5f      	ldr	r3, [pc, #380]	; (800c3c0 <tcp_process+0x5b8>)
 800c242:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c248:	009a      	lsls	r2, r3, #2
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c24e:	005b      	lsls	r3, r3, #1
 800c250:	f241 111c 	movw	r1, #4380	; 0x111c
 800c254:	428b      	cmp	r3, r1
 800c256:	bf38      	it	cc
 800c258:	460b      	movcc	r3, r1
 800c25a:	429a      	cmp	r2, r3
 800c25c:	d204      	bcs.n	800c268 <tcp_process+0x460>
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c262:	009b      	lsls	r3, r3, #2
 800c264:	b29b      	uxth	r3, r3
 800c266:	e00d      	b.n	800c284 <tcp_process+0x47c>
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c26c:	005b      	lsls	r3, r3, #1
 800c26e:	f241 121c 	movw	r2, #4380	; 0x111c
 800c272:	4293      	cmp	r3, r2
 800c274:	d904      	bls.n	800c280 <tcp_process+0x478>
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c27a:	005b      	lsls	r3, r3, #1
 800c27c:	b29b      	uxth	r3, r3
 800c27e:	e001      	b.n	800c284 <tcp_process+0x47c>
 800c280:	f241 131c 	movw	r3, #4380	; 0x111c
 800c284:	687a      	ldr	r2, [r7, #4]
 800c286:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800c28a:	4b4e      	ldr	r3, [pc, #312]	; (800c3c4 <tcp_process+0x5bc>)
 800c28c:	781b      	ldrb	r3, [r3, #0]
 800c28e:	f003 0320 	and.w	r3, r3, #32
 800c292:	2b00      	cmp	r3, #0
 800c294:	d037      	beq.n	800c306 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	8b5b      	ldrh	r3, [r3, #26]
 800c29a:	f043 0302 	orr.w	r3, r3, #2
 800c29e:	b29a      	uxth	r2, r3
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	2207      	movs	r2, #7
 800c2a8:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800c2aa:	e02c      	b.n	800c306 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c2ac:	4b3b      	ldr	r3, [pc, #236]	; (800c39c <tcp_process+0x594>)
 800c2ae:	6819      	ldr	r1, [r3, #0]
 800c2b0:	4b3b      	ldr	r3, [pc, #236]	; (800c3a0 <tcp_process+0x598>)
 800c2b2:	881b      	ldrh	r3, [r3, #0]
 800c2b4:	461a      	mov	r2, r3
 800c2b6:	4b3b      	ldr	r3, [pc, #236]	; (800c3a4 <tcp_process+0x59c>)
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c2bc:	4b3a      	ldr	r3, [pc, #232]	; (800c3a8 <tcp_process+0x5a0>)
 800c2be:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c2c0:	885b      	ldrh	r3, [r3, #2]
 800c2c2:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c2c4:	4a38      	ldr	r2, [pc, #224]	; (800c3a8 <tcp_process+0x5a0>)
 800c2c6:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c2c8:	8812      	ldrh	r2, [r2, #0]
 800c2ca:	b292      	uxth	r2, r2
 800c2cc:	9202      	str	r2, [sp, #8]
 800c2ce:	9301      	str	r3, [sp, #4]
 800c2d0:	4b36      	ldr	r3, [pc, #216]	; (800c3ac <tcp_process+0x5a4>)
 800c2d2:	9300      	str	r3, [sp, #0]
 800c2d4:	4b36      	ldr	r3, [pc, #216]	; (800c3b0 <tcp_process+0x5a8>)
 800c2d6:	4602      	mov	r2, r0
 800c2d8:	6878      	ldr	r0, [r7, #4]
 800c2da:	f003 f829 	bl	800f330 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800c2de:	e167      	b.n	800c5b0 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800c2e0:	4b2d      	ldr	r3, [pc, #180]	; (800c398 <tcp_process+0x590>)
 800c2e2:	781b      	ldrb	r3, [r3, #0]
 800c2e4:	f003 0302 	and.w	r3, r3, #2
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	f000 8161 	beq.w	800c5b0 <tcp_process+0x7a8>
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2f2:	1e5a      	subs	r2, r3, #1
 800c2f4:	4b2b      	ldr	r3, [pc, #172]	; (800c3a4 <tcp_process+0x59c>)
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	429a      	cmp	r2, r3
 800c2fa:	f040 8159 	bne.w	800c5b0 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800c2fe:	6878      	ldr	r0, [r7, #4]
 800c300:	f002 fe0e 	bl	800ef20 <tcp_rexmit>
      break;
 800c304:	e154      	b.n	800c5b0 <tcp_process+0x7a8>
 800c306:	e153      	b.n	800c5b0 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800c308:	6878      	ldr	r0, [r7, #4]
 800c30a:	f000 fa71 	bl	800c7f0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800c30e:	4b2d      	ldr	r3, [pc, #180]	; (800c3c4 <tcp_process+0x5bc>)
 800c310:	781b      	ldrb	r3, [r3, #0]
 800c312:	f003 0320 	and.w	r3, r3, #32
 800c316:	2b00      	cmp	r3, #0
 800c318:	f000 814c 	beq.w	800c5b4 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	8b5b      	ldrh	r3, [r3, #26]
 800c320:	f043 0302 	orr.w	r3, r3, #2
 800c324:	b29a      	uxth	r2, r3
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	2207      	movs	r2, #7
 800c32e:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c330:	e140      	b.n	800c5b4 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800c332:	6878      	ldr	r0, [r7, #4]
 800c334:	f000 fa5c 	bl	800c7f0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800c338:	4b22      	ldr	r3, [pc, #136]	; (800c3c4 <tcp_process+0x5bc>)
 800c33a:	781b      	ldrb	r3, [r3, #0]
 800c33c:	f003 0320 	and.w	r3, r3, #32
 800c340:	2b00      	cmp	r3, #0
 800c342:	d071      	beq.n	800c428 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c344:	4b14      	ldr	r3, [pc, #80]	; (800c398 <tcp_process+0x590>)
 800c346:	781b      	ldrb	r3, [r3, #0]
 800c348:	f003 0310 	and.w	r3, r3, #16
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d060      	beq.n	800c412 <tcp_process+0x60a>
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c354:	4b11      	ldr	r3, [pc, #68]	; (800c39c <tcp_process+0x594>)
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	429a      	cmp	r2, r3
 800c35a:	d15a      	bne.n	800c412 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c360:	2b00      	cmp	r3, #0
 800c362:	d156      	bne.n	800c412 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	8b5b      	ldrh	r3, [r3, #26]
 800c368:	f043 0302 	orr.w	r3, r3, #2
 800c36c:	b29a      	uxth	r2, r3
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800c372:	6878      	ldr	r0, [r7, #4]
 800c374:	f7fe fdbc 	bl	800aef0 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800c378:	4b13      	ldr	r3, [pc, #76]	; (800c3c8 <tcp_process+0x5c0>)
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	687a      	ldr	r2, [r7, #4]
 800c37e:	429a      	cmp	r2, r3
 800c380:	d105      	bne.n	800c38e <tcp_process+0x586>
 800c382:	4b11      	ldr	r3, [pc, #68]	; (800c3c8 <tcp_process+0x5c0>)
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	68db      	ldr	r3, [r3, #12]
 800c388:	4a0f      	ldr	r2, [pc, #60]	; (800c3c8 <tcp_process+0x5c0>)
 800c38a:	6013      	str	r3, [r2, #0]
 800c38c:	e02e      	b.n	800c3ec <tcp_process+0x5e4>
 800c38e:	4b0e      	ldr	r3, [pc, #56]	; (800c3c8 <tcp_process+0x5c0>)
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	617b      	str	r3, [r7, #20]
 800c394:	e027      	b.n	800c3e6 <tcp_process+0x5de>
 800c396:	bf00      	nop
 800c398:	20008258 	.word	0x20008258
 800c39c:	20008250 	.word	0x20008250
 800c3a0:	20008256 	.word	0x20008256
 800c3a4:	2000824c 	.word	0x2000824c
 800c3a8:	2000823c 	.word	0x2000823c
 800c3ac:	20004ad0 	.word	0x20004ad0
 800c3b0:	20004ad4 	.word	0x20004ad4
 800c3b4:	08016164 	.word	0x08016164
 800c3b8:	08016404 	.word	0x08016404
 800c3bc:	080161b0 	.word	0x080161b0
 800c3c0:	20008254 	.word	0x20008254
 800c3c4:	20008259 	.word	0x20008259
 800c3c8:	20008220 	.word	0x20008220
 800c3cc:	697b      	ldr	r3, [r7, #20]
 800c3ce:	68db      	ldr	r3, [r3, #12]
 800c3d0:	687a      	ldr	r2, [r7, #4]
 800c3d2:	429a      	cmp	r2, r3
 800c3d4:	d104      	bne.n	800c3e0 <tcp_process+0x5d8>
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	68da      	ldr	r2, [r3, #12]
 800c3da:	697b      	ldr	r3, [r7, #20]
 800c3dc:	60da      	str	r2, [r3, #12]
 800c3de:	e005      	b.n	800c3ec <tcp_process+0x5e4>
 800c3e0:	697b      	ldr	r3, [r7, #20]
 800c3e2:	68db      	ldr	r3, [r3, #12]
 800c3e4:	617b      	str	r3, [r7, #20]
 800c3e6:	697b      	ldr	r3, [r7, #20]
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d1ef      	bne.n	800c3cc <tcp_process+0x5c4>
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	2200      	movs	r2, #0
 800c3f0:	60da      	str	r2, [r3, #12]
 800c3f2:	4b77      	ldr	r3, [pc, #476]	; (800c5d0 <tcp_process+0x7c8>)
 800c3f4:	2201      	movs	r2, #1
 800c3f6:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	220a      	movs	r2, #10
 800c3fc:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800c3fe:	4b75      	ldr	r3, [pc, #468]	; (800c5d4 <tcp_process+0x7cc>)
 800c400:	681a      	ldr	r2, [r3, #0]
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	60da      	str	r2, [r3, #12]
 800c406:	4a73      	ldr	r2, [pc, #460]	; (800c5d4 <tcp_process+0x7cc>)
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	6013      	str	r3, [r2, #0]
 800c40c:	f003 f952 	bl	800f6b4 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800c410:	e0d2      	b.n	800c5b8 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	8b5b      	ldrh	r3, [r3, #26]
 800c416:	f043 0302 	orr.w	r3, r3, #2
 800c41a:	b29a      	uxth	r2, r3
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	2208      	movs	r2, #8
 800c424:	751a      	strb	r2, [r3, #20]
      break;
 800c426:	e0c7      	b.n	800c5b8 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c428:	4b6b      	ldr	r3, [pc, #428]	; (800c5d8 <tcp_process+0x7d0>)
 800c42a:	781b      	ldrb	r3, [r3, #0]
 800c42c:	f003 0310 	and.w	r3, r3, #16
 800c430:	2b00      	cmp	r3, #0
 800c432:	f000 80c1 	beq.w	800c5b8 <tcp_process+0x7b0>
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c43a:	4b68      	ldr	r3, [pc, #416]	; (800c5dc <tcp_process+0x7d4>)
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	429a      	cmp	r2, r3
 800c440:	f040 80ba 	bne.w	800c5b8 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c448:	2b00      	cmp	r3, #0
 800c44a:	f040 80b5 	bne.w	800c5b8 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	2206      	movs	r2, #6
 800c452:	751a      	strb	r2, [r3, #20]
      break;
 800c454:	e0b0      	b.n	800c5b8 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800c456:	6878      	ldr	r0, [r7, #4]
 800c458:	f000 f9ca 	bl	800c7f0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800c45c:	4b60      	ldr	r3, [pc, #384]	; (800c5e0 <tcp_process+0x7d8>)
 800c45e:	781b      	ldrb	r3, [r3, #0]
 800c460:	f003 0320 	and.w	r3, r3, #32
 800c464:	2b00      	cmp	r3, #0
 800c466:	f000 80a9 	beq.w	800c5bc <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	8b5b      	ldrh	r3, [r3, #26]
 800c46e:	f043 0302 	orr.w	r3, r3, #2
 800c472:	b29a      	uxth	r2, r3
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800c478:	6878      	ldr	r0, [r7, #4]
 800c47a:	f7fe fd39 	bl	800aef0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800c47e:	4b59      	ldr	r3, [pc, #356]	; (800c5e4 <tcp_process+0x7dc>)
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	687a      	ldr	r2, [r7, #4]
 800c484:	429a      	cmp	r2, r3
 800c486:	d105      	bne.n	800c494 <tcp_process+0x68c>
 800c488:	4b56      	ldr	r3, [pc, #344]	; (800c5e4 <tcp_process+0x7dc>)
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	68db      	ldr	r3, [r3, #12]
 800c48e:	4a55      	ldr	r2, [pc, #340]	; (800c5e4 <tcp_process+0x7dc>)
 800c490:	6013      	str	r3, [r2, #0]
 800c492:	e013      	b.n	800c4bc <tcp_process+0x6b4>
 800c494:	4b53      	ldr	r3, [pc, #332]	; (800c5e4 <tcp_process+0x7dc>)
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	613b      	str	r3, [r7, #16]
 800c49a:	e00c      	b.n	800c4b6 <tcp_process+0x6ae>
 800c49c:	693b      	ldr	r3, [r7, #16]
 800c49e:	68db      	ldr	r3, [r3, #12]
 800c4a0:	687a      	ldr	r2, [r7, #4]
 800c4a2:	429a      	cmp	r2, r3
 800c4a4:	d104      	bne.n	800c4b0 <tcp_process+0x6a8>
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	68da      	ldr	r2, [r3, #12]
 800c4aa:	693b      	ldr	r3, [r7, #16]
 800c4ac:	60da      	str	r2, [r3, #12]
 800c4ae:	e005      	b.n	800c4bc <tcp_process+0x6b4>
 800c4b0:	693b      	ldr	r3, [r7, #16]
 800c4b2:	68db      	ldr	r3, [r3, #12]
 800c4b4:	613b      	str	r3, [r7, #16]
 800c4b6:	693b      	ldr	r3, [r7, #16]
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d1ef      	bne.n	800c49c <tcp_process+0x694>
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	2200      	movs	r2, #0
 800c4c0:	60da      	str	r2, [r3, #12]
 800c4c2:	4b43      	ldr	r3, [pc, #268]	; (800c5d0 <tcp_process+0x7c8>)
 800c4c4:	2201      	movs	r2, #1
 800c4c6:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	220a      	movs	r2, #10
 800c4cc:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800c4ce:	4b41      	ldr	r3, [pc, #260]	; (800c5d4 <tcp_process+0x7cc>)
 800c4d0:	681a      	ldr	r2, [r3, #0]
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	60da      	str	r2, [r3, #12]
 800c4d6:	4a3f      	ldr	r2, [pc, #252]	; (800c5d4 <tcp_process+0x7cc>)
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	6013      	str	r3, [r2, #0]
 800c4dc:	f003 f8ea 	bl	800f6b4 <tcp_timer_needed>
      }
      break;
 800c4e0:	e06c      	b.n	800c5bc <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800c4e2:	6878      	ldr	r0, [r7, #4]
 800c4e4:	f000 f984 	bl	800c7f0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800c4e8:	4b3b      	ldr	r3, [pc, #236]	; (800c5d8 <tcp_process+0x7d0>)
 800c4ea:	781b      	ldrb	r3, [r3, #0]
 800c4ec:	f003 0310 	and.w	r3, r3, #16
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d065      	beq.n	800c5c0 <tcp_process+0x7b8>
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c4f8:	4b38      	ldr	r3, [pc, #224]	; (800c5dc <tcp_process+0x7d4>)
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	429a      	cmp	r2, r3
 800c4fe:	d15f      	bne.n	800c5c0 <tcp_process+0x7b8>
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c504:	2b00      	cmp	r3, #0
 800c506:	d15b      	bne.n	800c5c0 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800c508:	6878      	ldr	r0, [r7, #4]
 800c50a:	f7fe fcf1 	bl	800aef0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800c50e:	4b35      	ldr	r3, [pc, #212]	; (800c5e4 <tcp_process+0x7dc>)
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	687a      	ldr	r2, [r7, #4]
 800c514:	429a      	cmp	r2, r3
 800c516:	d105      	bne.n	800c524 <tcp_process+0x71c>
 800c518:	4b32      	ldr	r3, [pc, #200]	; (800c5e4 <tcp_process+0x7dc>)
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	68db      	ldr	r3, [r3, #12]
 800c51e:	4a31      	ldr	r2, [pc, #196]	; (800c5e4 <tcp_process+0x7dc>)
 800c520:	6013      	str	r3, [r2, #0]
 800c522:	e013      	b.n	800c54c <tcp_process+0x744>
 800c524:	4b2f      	ldr	r3, [pc, #188]	; (800c5e4 <tcp_process+0x7dc>)
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	60fb      	str	r3, [r7, #12]
 800c52a:	e00c      	b.n	800c546 <tcp_process+0x73e>
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	68db      	ldr	r3, [r3, #12]
 800c530:	687a      	ldr	r2, [r7, #4]
 800c532:	429a      	cmp	r2, r3
 800c534:	d104      	bne.n	800c540 <tcp_process+0x738>
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	68da      	ldr	r2, [r3, #12]
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	60da      	str	r2, [r3, #12]
 800c53e:	e005      	b.n	800c54c <tcp_process+0x744>
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	68db      	ldr	r3, [r3, #12]
 800c544:	60fb      	str	r3, [r7, #12]
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d1ef      	bne.n	800c52c <tcp_process+0x724>
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	2200      	movs	r2, #0
 800c550:	60da      	str	r2, [r3, #12]
 800c552:	4b1f      	ldr	r3, [pc, #124]	; (800c5d0 <tcp_process+0x7c8>)
 800c554:	2201      	movs	r2, #1
 800c556:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	220a      	movs	r2, #10
 800c55c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800c55e:	4b1d      	ldr	r3, [pc, #116]	; (800c5d4 <tcp_process+0x7cc>)
 800c560:	681a      	ldr	r2, [r3, #0]
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	60da      	str	r2, [r3, #12]
 800c566:	4a1b      	ldr	r2, [pc, #108]	; (800c5d4 <tcp_process+0x7cc>)
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	6013      	str	r3, [r2, #0]
 800c56c:	f003 f8a2 	bl	800f6b4 <tcp_timer_needed>
      }
      break;
 800c570:	e026      	b.n	800c5c0 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800c572:	6878      	ldr	r0, [r7, #4]
 800c574:	f000 f93c 	bl	800c7f0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800c578:	4b17      	ldr	r3, [pc, #92]	; (800c5d8 <tcp_process+0x7d0>)
 800c57a:	781b      	ldrb	r3, [r3, #0]
 800c57c:	f003 0310 	and.w	r3, r3, #16
 800c580:	2b00      	cmp	r3, #0
 800c582:	d01f      	beq.n	800c5c4 <tcp_process+0x7bc>
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c588:	4b14      	ldr	r3, [pc, #80]	; (800c5dc <tcp_process+0x7d4>)
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	429a      	cmp	r2, r3
 800c58e:	d119      	bne.n	800c5c4 <tcp_process+0x7bc>
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c594:	2b00      	cmp	r3, #0
 800c596:	d115      	bne.n	800c5c4 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800c598:	4b11      	ldr	r3, [pc, #68]	; (800c5e0 <tcp_process+0x7d8>)
 800c59a:	781b      	ldrb	r3, [r3, #0]
 800c59c:	f043 0310 	orr.w	r3, r3, #16
 800c5a0:	b2da      	uxtb	r2, r3
 800c5a2:	4b0f      	ldr	r3, [pc, #60]	; (800c5e0 <tcp_process+0x7d8>)
 800c5a4:	701a      	strb	r2, [r3, #0]
      }
      break;
 800c5a6:	e00d      	b.n	800c5c4 <tcp_process+0x7bc>
    default:
      break;
 800c5a8:	bf00      	nop
 800c5aa:	e00c      	b.n	800c5c6 <tcp_process+0x7be>
      break;
 800c5ac:	bf00      	nop
 800c5ae:	e00a      	b.n	800c5c6 <tcp_process+0x7be>
      break;
 800c5b0:	bf00      	nop
 800c5b2:	e008      	b.n	800c5c6 <tcp_process+0x7be>
      break;
 800c5b4:	bf00      	nop
 800c5b6:	e006      	b.n	800c5c6 <tcp_process+0x7be>
      break;
 800c5b8:	bf00      	nop
 800c5ba:	e004      	b.n	800c5c6 <tcp_process+0x7be>
      break;
 800c5bc:	bf00      	nop
 800c5be:	e002      	b.n	800c5c6 <tcp_process+0x7be>
      break;
 800c5c0:	bf00      	nop
 800c5c2:	e000      	b.n	800c5c6 <tcp_process+0x7be>
      break;
 800c5c4:	bf00      	nop
  }
  return ERR_OK;
 800c5c6:	2300      	movs	r3, #0
}
 800c5c8:	4618      	mov	r0, r3
 800c5ca:	3724      	adds	r7, #36	; 0x24
 800c5cc:	46bd      	mov	sp, r7
 800c5ce:	bd90      	pop	{r4, r7, pc}
 800c5d0:	20008228 	.word	0x20008228
 800c5d4:	20008224 	.word	0x20008224
 800c5d8:	20008258 	.word	0x20008258
 800c5dc:	20008250 	.word	0x20008250
 800c5e0:	20008259 	.word	0x20008259
 800c5e4:	20008220 	.word	0x20008220

0800c5e8 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800c5e8:	b590      	push	{r4, r7, lr}
 800c5ea:	b085      	sub	sp, #20
 800c5ec:	af00      	add	r7, sp, #0
 800c5ee:	6078      	str	r0, [r7, #4]
 800c5f0:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d106      	bne.n	800c606 <tcp_oos_insert_segment+0x1e>
 800c5f8:	4b3b      	ldr	r3, [pc, #236]	; (800c6e8 <tcp_oos_insert_segment+0x100>)
 800c5fa:	f240 421f 	movw	r2, #1055	; 0x41f
 800c5fe:	493b      	ldr	r1, [pc, #236]	; (800c6ec <tcp_oos_insert_segment+0x104>)
 800c600:	483b      	ldr	r0, [pc, #236]	; (800c6f0 <tcp_oos_insert_segment+0x108>)
 800c602:	f007 fc51 	bl	8013ea8 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	68db      	ldr	r3, [r3, #12]
 800c60a:	899b      	ldrh	r3, [r3, #12]
 800c60c:	b29b      	uxth	r3, r3
 800c60e:	4618      	mov	r0, r3
 800c610:	f7fb f9a6 	bl	8007960 <lwip_htons>
 800c614:	4603      	mov	r3, r0
 800c616:	b2db      	uxtb	r3, r3
 800c618:	f003 0301 	and.w	r3, r3, #1
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d028      	beq.n	800c672 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800c620:	6838      	ldr	r0, [r7, #0]
 800c622:	f7fe f97d 	bl	800a920 <tcp_segs_free>
    next = NULL;
 800c626:	2300      	movs	r3, #0
 800c628:	603b      	str	r3, [r7, #0]
 800c62a:	e056      	b.n	800c6da <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800c62c:	683b      	ldr	r3, [r7, #0]
 800c62e:	68db      	ldr	r3, [r3, #12]
 800c630:	899b      	ldrh	r3, [r3, #12]
 800c632:	b29b      	uxth	r3, r3
 800c634:	4618      	mov	r0, r3
 800c636:	f7fb f993 	bl	8007960 <lwip_htons>
 800c63a:	4603      	mov	r3, r0
 800c63c:	b2db      	uxtb	r3, r3
 800c63e:	f003 0301 	and.w	r3, r3, #1
 800c642:	2b00      	cmp	r3, #0
 800c644:	d00d      	beq.n	800c662 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	68db      	ldr	r3, [r3, #12]
 800c64a:	899b      	ldrh	r3, [r3, #12]
 800c64c:	b29c      	uxth	r4, r3
 800c64e:	2001      	movs	r0, #1
 800c650:	f7fb f986 	bl	8007960 <lwip_htons>
 800c654:	4603      	mov	r3, r0
 800c656:	461a      	mov	r2, r3
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	68db      	ldr	r3, [r3, #12]
 800c65c:	4322      	orrs	r2, r4
 800c65e:	b292      	uxth	r2, r2
 800c660:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800c662:	683b      	ldr	r3, [r7, #0]
 800c664:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800c666:	683b      	ldr	r3, [r7, #0]
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800c66c:	68f8      	ldr	r0, [r7, #12]
 800c66e:	f7fe f96c 	bl	800a94a <tcp_seg_free>
    while (next &&
 800c672:	683b      	ldr	r3, [r7, #0]
 800c674:	2b00      	cmp	r3, #0
 800c676:	d00e      	beq.n	800c696 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	891b      	ldrh	r3, [r3, #8]
 800c67c:	461a      	mov	r2, r3
 800c67e:	4b1d      	ldr	r3, [pc, #116]	; (800c6f4 <tcp_oos_insert_segment+0x10c>)
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	441a      	add	r2, r3
 800c684:	683b      	ldr	r3, [r7, #0]
 800c686:	68db      	ldr	r3, [r3, #12]
 800c688:	685b      	ldr	r3, [r3, #4]
 800c68a:	6839      	ldr	r1, [r7, #0]
 800c68c:	8909      	ldrh	r1, [r1, #8]
 800c68e:	440b      	add	r3, r1
 800c690:	1ad3      	subs	r3, r2, r3
    while (next &&
 800c692:	2b00      	cmp	r3, #0
 800c694:	daca      	bge.n	800c62c <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800c696:	683b      	ldr	r3, [r7, #0]
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d01e      	beq.n	800c6da <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	891b      	ldrh	r3, [r3, #8]
 800c6a0:	461a      	mov	r2, r3
 800c6a2:	4b14      	ldr	r3, [pc, #80]	; (800c6f4 <tcp_oos_insert_segment+0x10c>)
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	441a      	add	r2, r3
 800c6a8:	683b      	ldr	r3, [r7, #0]
 800c6aa:	68db      	ldr	r3, [r3, #12]
 800c6ac:	685b      	ldr	r3, [r3, #4]
 800c6ae:	1ad3      	subs	r3, r2, r3
    if (next &&
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	dd12      	ble.n	800c6da <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800c6b4:	683b      	ldr	r3, [r7, #0]
 800c6b6:	68db      	ldr	r3, [r3, #12]
 800c6b8:	685b      	ldr	r3, [r3, #4]
 800c6ba:	b29a      	uxth	r2, r3
 800c6bc:	4b0d      	ldr	r3, [pc, #52]	; (800c6f4 <tcp_oos_insert_segment+0x10c>)
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	b29b      	uxth	r3, r3
 800c6c2:	1ad3      	subs	r3, r2, r3
 800c6c4:	b29a      	uxth	r2, r3
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	685a      	ldr	r2, [r3, #4]
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	891b      	ldrh	r3, [r3, #8]
 800c6d2:	4619      	mov	r1, r3
 800c6d4:	4610      	mov	r0, r2
 800c6d6:	f7fc fb69 	bl	8008dac <pbuf_realloc>
    }
  }
  cseg->next = next;
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	683a      	ldr	r2, [r7, #0]
 800c6de:	601a      	str	r2, [r3, #0]
}
 800c6e0:	bf00      	nop
 800c6e2:	3714      	adds	r7, #20
 800c6e4:	46bd      	mov	sp, r7
 800c6e6:	bd90      	pop	{r4, r7, pc}
 800c6e8:	08016164 	.word	0x08016164
 800c6ec:	08016424 	.word	0x08016424
 800c6f0:	080161b0 	.word	0x080161b0
 800c6f4:	2000824c 	.word	0x2000824c

0800c6f8 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800c6f8:	b5b0      	push	{r4, r5, r7, lr}
 800c6fa:	b086      	sub	sp, #24
 800c6fc:	af00      	add	r7, sp, #0
 800c6fe:	60f8      	str	r0, [r7, #12]
 800c700:	60b9      	str	r1, [r7, #8]
 800c702:	607a      	str	r2, [r7, #4]
 800c704:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800c706:	e03e      	b.n	800c786 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800c708:	68bb      	ldr	r3, [r7, #8]
 800c70a:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800c70c:	68bb      	ldr	r3, [r7, #8]
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800c712:	697b      	ldr	r3, [r7, #20]
 800c714:	685b      	ldr	r3, [r3, #4]
 800c716:	4618      	mov	r0, r3
 800c718:	f7fc fd5c 	bl	80091d4 <pbuf_clen>
 800c71c:	4603      	mov	r3, r0
 800c71e:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c726:	8a7a      	ldrh	r2, [r7, #18]
 800c728:	429a      	cmp	r2, r3
 800c72a:	d906      	bls.n	800c73a <tcp_free_acked_segments+0x42>
 800c72c:	4b2a      	ldr	r3, [pc, #168]	; (800c7d8 <tcp_free_acked_segments+0xe0>)
 800c72e:	f240 4257 	movw	r2, #1111	; 0x457
 800c732:	492a      	ldr	r1, [pc, #168]	; (800c7dc <tcp_free_acked_segments+0xe4>)
 800c734:	482a      	ldr	r0, [pc, #168]	; (800c7e0 <tcp_free_acked_segments+0xe8>)
 800c736:	f007 fbb7 	bl	8013ea8 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800c740:	8a7b      	ldrh	r3, [r7, #18]
 800c742:	1ad3      	subs	r3, r2, r3
 800c744:	b29a      	uxth	r2, r3
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800c74c:	697b      	ldr	r3, [r7, #20]
 800c74e:	891a      	ldrh	r2, [r3, #8]
 800c750:	4b24      	ldr	r3, [pc, #144]	; (800c7e4 <tcp_free_acked_segments+0xec>)
 800c752:	881b      	ldrh	r3, [r3, #0]
 800c754:	4413      	add	r3, r2
 800c756:	b29a      	uxth	r2, r3
 800c758:	4b22      	ldr	r3, [pc, #136]	; (800c7e4 <tcp_free_acked_segments+0xec>)
 800c75a:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800c75c:	6978      	ldr	r0, [r7, #20]
 800c75e:	f7fe f8f4 	bl	800a94a <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d00c      	beq.n	800c786 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800c76c:	68bb      	ldr	r3, [r7, #8]
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d109      	bne.n	800c786 <tcp_free_acked_segments+0x8e>
 800c772:	683b      	ldr	r3, [r7, #0]
 800c774:	2b00      	cmp	r3, #0
 800c776:	d106      	bne.n	800c786 <tcp_free_acked_segments+0x8e>
 800c778:	4b17      	ldr	r3, [pc, #92]	; (800c7d8 <tcp_free_acked_segments+0xe0>)
 800c77a:	f240 4261 	movw	r2, #1121	; 0x461
 800c77e:	491a      	ldr	r1, [pc, #104]	; (800c7e8 <tcp_free_acked_segments+0xf0>)
 800c780:	4817      	ldr	r0, [pc, #92]	; (800c7e0 <tcp_free_acked_segments+0xe8>)
 800c782:	f007 fb91 	bl	8013ea8 <iprintf>
  while (seg_list != NULL &&
 800c786:	68bb      	ldr	r3, [r7, #8]
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d020      	beq.n	800c7ce <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800c78c:	68bb      	ldr	r3, [r7, #8]
 800c78e:	68db      	ldr	r3, [r3, #12]
 800c790:	685b      	ldr	r3, [r3, #4]
 800c792:	4618      	mov	r0, r3
 800c794:	f7fb f8f9 	bl	800798a <lwip_htonl>
 800c798:	4604      	mov	r4, r0
 800c79a:	68bb      	ldr	r3, [r7, #8]
 800c79c:	891b      	ldrh	r3, [r3, #8]
 800c79e:	461d      	mov	r5, r3
 800c7a0:	68bb      	ldr	r3, [r7, #8]
 800c7a2:	68db      	ldr	r3, [r3, #12]
 800c7a4:	899b      	ldrh	r3, [r3, #12]
 800c7a6:	b29b      	uxth	r3, r3
 800c7a8:	4618      	mov	r0, r3
 800c7aa:	f7fb f8d9 	bl	8007960 <lwip_htons>
 800c7ae:	4603      	mov	r3, r0
 800c7b0:	b2db      	uxtb	r3, r3
 800c7b2:	f003 0303 	and.w	r3, r3, #3
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d001      	beq.n	800c7be <tcp_free_acked_segments+0xc6>
 800c7ba:	2301      	movs	r3, #1
 800c7bc:	e000      	b.n	800c7c0 <tcp_free_acked_segments+0xc8>
 800c7be:	2300      	movs	r3, #0
 800c7c0:	442b      	add	r3, r5
 800c7c2:	18e2      	adds	r2, r4, r3
 800c7c4:	4b09      	ldr	r3, [pc, #36]	; (800c7ec <tcp_free_acked_segments+0xf4>)
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	dd9c      	ble.n	800c708 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800c7ce:	68bb      	ldr	r3, [r7, #8]
}
 800c7d0:	4618      	mov	r0, r3
 800c7d2:	3718      	adds	r7, #24
 800c7d4:	46bd      	mov	sp, r7
 800c7d6:	bdb0      	pop	{r4, r5, r7, pc}
 800c7d8:	08016164 	.word	0x08016164
 800c7dc:	0801644c 	.word	0x0801644c
 800c7e0:	080161b0 	.word	0x080161b0
 800c7e4:	20008254 	.word	0x20008254
 800c7e8:	08016474 	.word	0x08016474
 800c7ec:	20008250 	.word	0x20008250

0800c7f0 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800c7f0:	b5b0      	push	{r4, r5, r7, lr}
 800c7f2:	b094      	sub	sp, #80	; 0x50
 800c7f4:	af00      	add	r7, sp, #0
 800c7f6:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800c7f8:	2300      	movs	r3, #0
 800c7fa:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d106      	bne.n	800c810 <tcp_receive+0x20>
 800c802:	4b91      	ldr	r3, [pc, #580]	; (800ca48 <tcp_receive+0x258>)
 800c804:	f240 427b 	movw	r2, #1147	; 0x47b
 800c808:	4990      	ldr	r1, [pc, #576]	; (800ca4c <tcp_receive+0x25c>)
 800c80a:	4891      	ldr	r0, [pc, #580]	; (800ca50 <tcp_receive+0x260>)
 800c80c:	f007 fb4c 	bl	8013ea8 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	7d1b      	ldrb	r3, [r3, #20]
 800c814:	2b03      	cmp	r3, #3
 800c816:	d806      	bhi.n	800c826 <tcp_receive+0x36>
 800c818:	4b8b      	ldr	r3, [pc, #556]	; (800ca48 <tcp_receive+0x258>)
 800c81a:	f240 427c 	movw	r2, #1148	; 0x47c
 800c81e:	498d      	ldr	r1, [pc, #564]	; (800ca54 <tcp_receive+0x264>)
 800c820:	488b      	ldr	r0, [pc, #556]	; (800ca50 <tcp_receive+0x260>)
 800c822:	f007 fb41 	bl	8013ea8 <iprintf>

  if (flags & TCP_ACK) {
 800c826:	4b8c      	ldr	r3, [pc, #560]	; (800ca58 <tcp_receive+0x268>)
 800c828:	781b      	ldrb	r3, [r3, #0]
 800c82a:	f003 0310 	and.w	r3, r3, #16
 800c82e:	2b00      	cmp	r3, #0
 800c830:	f000 8264 	beq.w	800ccfc <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c83a:	461a      	mov	r2, r3
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c840:	4413      	add	r3, r2
 800c842:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c848:	4b84      	ldr	r3, [pc, #528]	; (800ca5c <tcp_receive+0x26c>)
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	1ad3      	subs	r3, r2, r3
 800c84e:	2b00      	cmp	r3, #0
 800c850:	db1b      	blt.n	800c88a <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c856:	4b81      	ldr	r3, [pc, #516]	; (800ca5c <tcp_receive+0x26c>)
 800c858:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800c85a:	429a      	cmp	r2, r3
 800c85c:	d106      	bne.n	800c86c <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c862:	4b7f      	ldr	r3, [pc, #508]	; (800ca60 <tcp_receive+0x270>)
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	1ad3      	subs	r3, r2, r3
 800c868:	2b00      	cmp	r3, #0
 800c86a:	db0e      	blt.n	800c88a <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c870:	4b7b      	ldr	r3, [pc, #492]	; (800ca60 <tcp_receive+0x270>)
 800c872:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800c874:	429a      	cmp	r2, r3
 800c876:	d125      	bne.n	800c8c4 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800c878:	4b7a      	ldr	r3, [pc, #488]	; (800ca64 <tcp_receive+0x274>)
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	89db      	ldrh	r3, [r3, #14]
 800c87e:	b29a      	uxth	r2, r3
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c886:	429a      	cmp	r2, r3
 800c888:	d91c      	bls.n	800c8c4 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800c88a:	4b76      	ldr	r3, [pc, #472]	; (800ca64 <tcp_receive+0x274>)
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	89db      	ldrh	r3, [r3, #14]
 800c890:	b29a      	uxth	r2, r3
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c8a4:	429a      	cmp	r2, r3
 800c8a6:	d205      	bcs.n	800c8b4 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800c8b4:	4b69      	ldr	r3, [pc, #420]	; (800ca5c <tcp_receive+0x26c>)
 800c8b6:	681a      	ldr	r2, [r3, #0]
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800c8bc:	4b68      	ldr	r3, [pc, #416]	; (800ca60 <tcp_receive+0x270>)
 800c8be:	681a      	ldr	r2, [r3, #0]
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800c8c4:	4b66      	ldr	r3, [pc, #408]	; (800ca60 <tcp_receive+0x270>)
 800c8c6:	681a      	ldr	r2, [r3, #0]
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c8cc:	1ad3      	subs	r3, r2, r3
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	dc58      	bgt.n	800c984 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800c8d2:	4b65      	ldr	r3, [pc, #404]	; (800ca68 <tcp_receive+0x278>)
 800c8d4:	881b      	ldrh	r3, [r3, #0]
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d14b      	bne.n	800c972 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c8de:	687a      	ldr	r2, [r7, #4]
 800c8e0:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800c8e4:	4413      	add	r3, r2
 800c8e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c8e8:	429a      	cmp	r2, r3
 800c8ea:	d142      	bne.n	800c972 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	db3d      	blt.n	800c972 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c8fa:	4b59      	ldr	r3, [pc, #356]	; (800ca60 <tcp_receive+0x270>)
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	429a      	cmp	r2, r3
 800c900:	d137      	bne.n	800c972 <tcp_receive+0x182>
              found_dupack = 1;
 800c902:	2301      	movs	r3, #1
 800c904:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c90c:	2bff      	cmp	r3, #255	; 0xff
 800c90e:	d007      	beq.n	800c920 <tcp_receive+0x130>
                ++pcb->dupacks;
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c916:	3301      	adds	r3, #1
 800c918:	b2da      	uxtb	r2, r3
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c926:	2b03      	cmp	r3, #3
 800c928:	d91b      	bls.n	800c962 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c934:	4413      	add	r3, r2
 800c936:	b29a      	uxth	r2, r3
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c93e:	429a      	cmp	r2, r3
 800c940:	d30a      	bcc.n	800c958 <tcp_receive+0x168>
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c94c:	4413      	add	r3, r2
 800c94e:	b29a      	uxth	r2, r3
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800c956:	e004      	b.n	800c962 <tcp_receive+0x172>
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c95e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c968:	2b02      	cmp	r3, #2
 800c96a:	d902      	bls.n	800c972 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800c96c:	6878      	ldr	r0, [r7, #4]
 800c96e:	f002 fb43 	bl	800eff8 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800c972:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c974:	2b00      	cmp	r3, #0
 800c976:	f040 8161 	bne.w	800cc3c <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	2200      	movs	r2, #0
 800c97e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c982:	e15b      	b.n	800cc3c <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800c984:	4b36      	ldr	r3, [pc, #216]	; (800ca60 <tcp_receive+0x270>)
 800c986:	681a      	ldr	r2, [r3, #0]
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c98c:	1ad3      	subs	r3, r2, r3
 800c98e:	3b01      	subs	r3, #1
 800c990:	2b00      	cmp	r3, #0
 800c992:	f2c0 814e 	blt.w	800cc32 <tcp_receive+0x442>
 800c996:	4b32      	ldr	r3, [pc, #200]	; (800ca60 <tcp_receive+0x270>)
 800c998:	681a      	ldr	r2, [r3, #0]
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c99e:	1ad3      	subs	r3, r2, r3
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	f300 8146 	bgt.w	800cc32 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	8b5b      	ldrh	r3, [r3, #26]
 800c9aa:	f003 0304 	and.w	r3, r3, #4
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d010      	beq.n	800c9d4 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	8b5b      	ldrh	r3, [r3, #26]
 800c9b6:	f023 0304 	bic.w	r3, r3, #4
 800c9ba:	b29a      	uxth	r2, r3
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	2200      	movs	r2, #0
 800c9d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	2200      	movs	r2, #0
 800c9d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800c9e2:	10db      	asrs	r3, r3, #3
 800c9e4:	b21b      	sxth	r3, r3
 800c9e6:	b29a      	uxth	r2, r3
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800c9ee:	b29b      	uxth	r3, r3
 800c9f0:	4413      	add	r3, r2
 800c9f2:	b29b      	uxth	r3, r3
 800c9f4:	b21a      	sxth	r2, r3
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800c9fc:	4b18      	ldr	r3, [pc, #96]	; (800ca60 <tcp_receive+0x270>)
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	b29a      	uxth	r2, r3
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ca06:	b29b      	uxth	r3, r3
 800ca08:	1ad3      	subs	r3, r2, r3
 800ca0a:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	2200      	movs	r2, #0
 800ca10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800ca14:	4b12      	ldr	r3, [pc, #72]	; (800ca60 <tcp_receive+0x270>)
 800ca16:	681a      	ldr	r2, [r3, #0]
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	7d1b      	ldrb	r3, [r3, #20]
 800ca20:	2b03      	cmp	r3, #3
 800ca22:	f240 8097 	bls.w	800cb54 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800ca32:	429a      	cmp	r2, r3
 800ca34:	d245      	bcs.n	800cac2 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	8b5b      	ldrh	r3, [r3, #26]
 800ca3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d014      	beq.n	800ca6c <tcp_receive+0x27c>
 800ca42:	2301      	movs	r3, #1
 800ca44:	e013      	b.n	800ca6e <tcp_receive+0x27e>
 800ca46:	bf00      	nop
 800ca48:	08016164 	.word	0x08016164
 800ca4c:	08016494 	.word	0x08016494
 800ca50:	080161b0 	.word	0x080161b0
 800ca54:	080164b0 	.word	0x080164b0
 800ca58:	20008258 	.word	0x20008258
 800ca5c:	2000824c 	.word	0x2000824c
 800ca60:	20008250 	.word	0x20008250
 800ca64:	2000823c 	.word	0x2000823c
 800ca68:	20008256 	.word	0x20008256
 800ca6c:	2302      	movs	r3, #2
 800ca6e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800ca72:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800ca76:	b29a      	uxth	r2, r3
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ca7c:	fb12 f303 	smulbb	r3, r2, r3
 800ca80:	b29b      	uxth	r3, r3
 800ca82:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ca84:	4293      	cmp	r3, r2
 800ca86:	bf28      	it	cs
 800ca88:	4613      	movcs	r3, r2
 800ca8a:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ca92:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ca94:	4413      	add	r3, r2
 800ca96:	b29a      	uxth	r2, r3
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ca9e:	429a      	cmp	r2, r3
 800caa0:	d309      	bcc.n	800cab6 <tcp_receive+0x2c6>
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800caa8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800caaa:	4413      	add	r3, r2
 800caac:	b29a      	uxth	r2, r3
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800cab4:	e04e      	b.n	800cb54 <tcp_receive+0x364>
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cabc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800cac0:	e048      	b.n	800cb54 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800cac8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800caca:	4413      	add	r3, r2
 800cacc:	b29a      	uxth	r2, r3
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800cad4:	429a      	cmp	r2, r3
 800cad6:	d309      	bcc.n	800caec <tcp_receive+0x2fc>
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800cade:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800cae0:	4413      	add	r3, r2
 800cae2:	b29a      	uxth	r2, r3
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800caea:	e004      	b.n	800caf6 <tcp_receive+0x306>
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800caf2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800cb02:	429a      	cmp	r2, r3
 800cb04:	d326      	bcc.n	800cb54 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800cb12:	1ad3      	subs	r3, r2, r3
 800cb14:	b29a      	uxth	r2, r3
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cb26:	4413      	add	r3, r2
 800cb28:	b29a      	uxth	r2, r3
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800cb30:	429a      	cmp	r2, r3
 800cb32:	d30a      	bcc.n	800cb4a <tcp_receive+0x35a>
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cb3e:	4413      	add	r3, r2
 800cb40:	b29a      	uxth	r2, r3
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800cb48:	e004      	b.n	800cb54 <tcp_receive+0x364>
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cb50:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cb5c:	4a98      	ldr	r2, [pc, #608]	; (800cdc0 <tcp_receive+0x5d0>)
 800cb5e:	6878      	ldr	r0, [r7, #4]
 800cb60:	f7ff fdca 	bl	800c6f8 <tcp_free_acked_segments>
 800cb64:	4602      	mov	r2, r0
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cb72:	4a94      	ldr	r2, [pc, #592]	; (800cdc4 <tcp_receive+0x5d4>)
 800cb74:	6878      	ldr	r0, [r7, #4]
 800cb76:	f7ff fdbf 	bl	800c6f8 <tcp_free_acked_segments>
 800cb7a:	4602      	mov	r2, r0
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d104      	bne.n	800cb92 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cb8e:	861a      	strh	r2, [r3, #48]	; 0x30
 800cb90:	e002      	b.n	800cb98 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	2200      	movs	r2, #0
 800cb96:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	2200      	movs	r2, #0
 800cb9c:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d103      	bne.n	800cbae <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	2200      	movs	r2, #0
 800cbaa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800cbb4:	4b84      	ldr	r3, [pc, #528]	; (800cdc8 <tcp_receive+0x5d8>)
 800cbb6:	881b      	ldrh	r3, [r3, #0]
 800cbb8:	4413      	add	r3, r2
 800cbba:	b29a      	uxth	r2, r3
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	8b5b      	ldrh	r3, [r3, #26]
 800cbc6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d035      	beq.n	800cc3a <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d118      	bne.n	800cc08 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d00c      	beq.n	800cbf8 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cbe6:	68db      	ldr	r3, [r3, #12]
 800cbe8:	685b      	ldr	r3, [r3, #4]
 800cbea:	4618      	mov	r0, r3
 800cbec:	f7fa fecd 	bl	800798a <lwip_htonl>
 800cbf0:	4603      	mov	r3, r0
 800cbf2:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	dc20      	bgt.n	800cc3a <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	8b5b      	ldrh	r3, [r3, #26]
 800cbfc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800cc00:	b29a      	uxth	r2, r3
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800cc06:	e018      	b.n	800cc3a <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc10:	68db      	ldr	r3, [r3, #12]
 800cc12:	685b      	ldr	r3, [r3, #4]
 800cc14:	4618      	mov	r0, r3
 800cc16:	f7fa feb8 	bl	800798a <lwip_htonl>
 800cc1a:	4603      	mov	r3, r0
 800cc1c:	1ae3      	subs	r3, r4, r3
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	dc0b      	bgt.n	800cc3a <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	8b5b      	ldrh	r3, [r3, #26]
 800cc26:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800cc2a:	b29a      	uxth	r2, r3
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800cc30:	e003      	b.n	800cc3a <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800cc32:	6878      	ldr	r0, [r7, #4]
 800cc34:	f002 fbce 	bl	800f3d4 <tcp_send_empty_ack>
 800cc38:	e000      	b.n	800cc3c <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800cc3a:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d05b      	beq.n	800ccfc <tcp_receive+0x50c>
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cc48:	4b60      	ldr	r3, [pc, #384]	; (800cdcc <tcp_receive+0x5dc>)
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	1ad3      	subs	r3, r2, r3
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	da54      	bge.n	800ccfc <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800cc52:	4b5f      	ldr	r3, [pc, #380]	; (800cdd0 <tcp_receive+0x5e0>)
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	b29a      	uxth	r2, r3
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc5c:	b29b      	uxth	r3, r3
 800cc5e:	1ad3      	subs	r3, r2, r3
 800cc60:	b29b      	uxth	r3, r3
 800cc62:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800cc66:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800cc70:	10db      	asrs	r3, r3, #3
 800cc72:	b21b      	sxth	r3, r3
 800cc74:	b29b      	uxth	r3, r3
 800cc76:	1ad3      	subs	r3, r2, r3
 800cc78:	b29b      	uxth	r3, r3
 800cc7a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800cc84:	b29a      	uxth	r2, r3
 800cc86:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800cc8a:	4413      	add	r3, r2
 800cc8c:	b29b      	uxth	r3, r3
 800cc8e:	b21a      	sxth	r2, r3
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800cc94:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	da05      	bge.n	800cca8 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800cc9c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800cca0:	425b      	negs	r3, r3
 800cca2:	b29b      	uxth	r3, r3
 800cca4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800cca8:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800ccb2:	109b      	asrs	r3, r3, #2
 800ccb4:	b21b      	sxth	r3, r3
 800ccb6:	b29b      	uxth	r3, r3
 800ccb8:	1ad3      	subs	r3, r2, r3
 800ccba:	b29b      	uxth	r3, r3
 800ccbc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800ccc6:	b29a      	uxth	r2, r3
 800ccc8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800cccc:	4413      	add	r3, r2
 800ccce:	b29b      	uxth	r3, r3
 800ccd0:	b21a      	sxth	r2, r3
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800ccdc:	10db      	asrs	r3, r3, #3
 800ccde:	b21b      	sxth	r3, r3
 800cce0:	b29a      	uxth	r2, r3
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800cce8:	b29b      	uxth	r3, r3
 800ccea:	4413      	add	r3, r2
 800ccec:	b29b      	uxth	r3, r3
 800ccee:	b21a      	sxth	r2, r3
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	2200      	movs	r2, #0
 800ccfa:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800ccfc:	4b35      	ldr	r3, [pc, #212]	; (800cdd4 <tcp_receive+0x5e4>)
 800ccfe:	881b      	ldrh	r3, [r3, #0]
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	f000 84e2 	beq.w	800d6ca <tcp_receive+0xeda>
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	7d1b      	ldrb	r3, [r3, #20]
 800cd0a:	2b06      	cmp	r3, #6
 800cd0c:	f200 84dd 	bhi.w	800d6ca <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cd14:	4b30      	ldr	r3, [pc, #192]	; (800cdd8 <tcp_receive+0x5e8>)
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	1ad3      	subs	r3, r2, r3
 800cd1a:	3b01      	subs	r3, #1
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	f2c0 808f 	blt.w	800ce40 <tcp_receive+0x650>
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cd26:	4b2b      	ldr	r3, [pc, #172]	; (800cdd4 <tcp_receive+0x5e4>)
 800cd28:	881b      	ldrh	r3, [r3, #0]
 800cd2a:	4619      	mov	r1, r3
 800cd2c:	4b2a      	ldr	r3, [pc, #168]	; (800cdd8 <tcp_receive+0x5e8>)
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	440b      	add	r3, r1
 800cd32:	1ad3      	subs	r3, r2, r3
 800cd34:	3301      	adds	r3, #1
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	f300 8082 	bgt.w	800ce40 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800cd3c:	4b27      	ldr	r3, [pc, #156]	; (800cddc <tcp_receive+0x5ec>)
 800cd3e:	685b      	ldr	r3, [r3, #4]
 800cd40:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cd46:	4b24      	ldr	r3, [pc, #144]	; (800cdd8 <tcp_receive+0x5e8>)
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	1ad3      	subs	r3, r2, r3
 800cd4c:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800cd4e:	4b23      	ldr	r3, [pc, #140]	; (800cddc <tcp_receive+0x5ec>)
 800cd50:	685b      	ldr	r3, [r3, #4]
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d106      	bne.n	800cd64 <tcp_receive+0x574>
 800cd56:	4b22      	ldr	r3, [pc, #136]	; (800cde0 <tcp_receive+0x5f0>)
 800cd58:	f240 5294 	movw	r2, #1428	; 0x594
 800cd5c:	4921      	ldr	r1, [pc, #132]	; (800cde4 <tcp_receive+0x5f4>)
 800cd5e:	4822      	ldr	r0, [pc, #136]	; (800cde8 <tcp_receive+0x5f8>)
 800cd60:	f007 f8a2 	bl	8013ea8 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800cd64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd66:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800cd6a:	4293      	cmp	r3, r2
 800cd6c:	d906      	bls.n	800cd7c <tcp_receive+0x58c>
 800cd6e:	4b1c      	ldr	r3, [pc, #112]	; (800cde0 <tcp_receive+0x5f0>)
 800cd70:	f240 5295 	movw	r2, #1429	; 0x595
 800cd74:	491d      	ldr	r1, [pc, #116]	; (800cdec <tcp_receive+0x5fc>)
 800cd76:	481c      	ldr	r0, [pc, #112]	; (800cde8 <tcp_receive+0x5f8>)
 800cd78:	f007 f896 	bl	8013ea8 <iprintf>
      off = (u16_t)off32;
 800cd7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd7e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800cd82:	4b16      	ldr	r3, [pc, #88]	; (800cddc <tcp_receive+0x5ec>)
 800cd84:	685b      	ldr	r3, [r3, #4]
 800cd86:	891b      	ldrh	r3, [r3, #8]
 800cd88:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800cd8c:	429a      	cmp	r2, r3
 800cd8e:	d906      	bls.n	800cd9e <tcp_receive+0x5ae>
 800cd90:	4b13      	ldr	r3, [pc, #76]	; (800cde0 <tcp_receive+0x5f0>)
 800cd92:	f240 5297 	movw	r2, #1431	; 0x597
 800cd96:	4916      	ldr	r1, [pc, #88]	; (800cdf0 <tcp_receive+0x600>)
 800cd98:	4813      	ldr	r0, [pc, #76]	; (800cde8 <tcp_receive+0x5f8>)
 800cd9a:	f007 f885 	bl	8013ea8 <iprintf>
      inseg.len -= off;
 800cd9e:	4b0f      	ldr	r3, [pc, #60]	; (800cddc <tcp_receive+0x5ec>)
 800cda0:	891a      	ldrh	r2, [r3, #8]
 800cda2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800cda6:	1ad3      	subs	r3, r2, r3
 800cda8:	b29a      	uxth	r2, r3
 800cdaa:	4b0c      	ldr	r3, [pc, #48]	; (800cddc <tcp_receive+0x5ec>)
 800cdac:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800cdae:	4b0b      	ldr	r3, [pc, #44]	; (800cddc <tcp_receive+0x5ec>)
 800cdb0:	685b      	ldr	r3, [r3, #4]
 800cdb2:	891a      	ldrh	r2, [r3, #8]
 800cdb4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800cdb8:	1ad3      	subs	r3, r2, r3
 800cdba:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800cdbc:	e02a      	b.n	800ce14 <tcp_receive+0x624>
 800cdbe:	bf00      	nop
 800cdc0:	080164cc 	.word	0x080164cc
 800cdc4:	080164d4 	.word	0x080164d4
 800cdc8:	20008254 	.word	0x20008254
 800cdcc:	20008250 	.word	0x20008250
 800cdd0:	20008214 	.word	0x20008214
 800cdd4:	20008256 	.word	0x20008256
 800cdd8:	2000824c 	.word	0x2000824c
 800cddc:	2000822c 	.word	0x2000822c
 800cde0:	08016164 	.word	0x08016164
 800cde4:	080164dc 	.word	0x080164dc
 800cde8:	080161b0 	.word	0x080161b0
 800cdec:	080164ec 	.word	0x080164ec
 800cdf0:	080164fc 	.word	0x080164fc
        off -= p->len;
 800cdf4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cdf6:	895b      	ldrh	r3, [r3, #10]
 800cdf8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800cdfc:	1ad3      	subs	r3, r2, r3
 800cdfe:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800ce02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ce04:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800ce06:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800ce08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ce0a:	2200      	movs	r2, #0
 800ce0c:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800ce0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800ce14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ce16:	895b      	ldrh	r3, [r3, #10]
 800ce18:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ce1c:	429a      	cmp	r2, r3
 800ce1e:	d8e9      	bhi.n	800cdf4 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800ce20:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ce24:	4619      	mov	r1, r3
 800ce26:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800ce28:	f7fc f8c0 	bl	8008fac <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce30:	4a91      	ldr	r2, [pc, #580]	; (800d078 <tcp_receive+0x888>)
 800ce32:	6013      	str	r3, [r2, #0]
 800ce34:	4b91      	ldr	r3, [pc, #580]	; (800d07c <tcp_receive+0x88c>)
 800ce36:	68db      	ldr	r3, [r3, #12]
 800ce38:	4a8f      	ldr	r2, [pc, #572]	; (800d078 <tcp_receive+0x888>)
 800ce3a:	6812      	ldr	r2, [r2, #0]
 800ce3c:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800ce3e:	e00d      	b.n	800ce5c <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800ce40:	4b8d      	ldr	r3, [pc, #564]	; (800d078 <tcp_receive+0x888>)
 800ce42:	681a      	ldr	r2, [r3, #0]
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce48:	1ad3      	subs	r3, r2, r3
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	da06      	bge.n	800ce5c <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	8b5b      	ldrh	r3, [r3, #26]
 800ce52:	f043 0302 	orr.w	r3, r3, #2
 800ce56:	b29a      	uxth	r2, r3
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800ce5c:	4b86      	ldr	r3, [pc, #536]	; (800d078 <tcp_receive+0x888>)
 800ce5e:	681a      	ldr	r2, [r3, #0]
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce64:	1ad3      	subs	r3, r2, r3
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	f2c0 842a 	blt.w	800d6c0 <tcp_receive+0xed0>
 800ce6c:	4b82      	ldr	r3, [pc, #520]	; (800d078 <tcp_receive+0x888>)
 800ce6e:	681a      	ldr	r2, [r3, #0]
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce74:	6879      	ldr	r1, [r7, #4]
 800ce76:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ce78:	440b      	add	r3, r1
 800ce7a:	1ad3      	subs	r3, r2, r3
 800ce7c:	3301      	adds	r3, #1
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	f300 841e 	bgt.w	800d6c0 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ce88:	4b7b      	ldr	r3, [pc, #492]	; (800d078 <tcp_receive+0x888>)
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	429a      	cmp	r2, r3
 800ce8e:	f040 829a 	bne.w	800d3c6 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800ce92:	4b7a      	ldr	r3, [pc, #488]	; (800d07c <tcp_receive+0x88c>)
 800ce94:	891c      	ldrh	r4, [r3, #8]
 800ce96:	4b79      	ldr	r3, [pc, #484]	; (800d07c <tcp_receive+0x88c>)
 800ce98:	68db      	ldr	r3, [r3, #12]
 800ce9a:	899b      	ldrh	r3, [r3, #12]
 800ce9c:	b29b      	uxth	r3, r3
 800ce9e:	4618      	mov	r0, r3
 800cea0:	f7fa fd5e 	bl	8007960 <lwip_htons>
 800cea4:	4603      	mov	r3, r0
 800cea6:	b2db      	uxtb	r3, r3
 800cea8:	f003 0303 	and.w	r3, r3, #3
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d001      	beq.n	800ceb4 <tcp_receive+0x6c4>
 800ceb0:	2301      	movs	r3, #1
 800ceb2:	e000      	b.n	800ceb6 <tcp_receive+0x6c6>
 800ceb4:	2300      	movs	r3, #0
 800ceb6:	4423      	add	r3, r4
 800ceb8:	b29a      	uxth	r2, r3
 800ceba:	4b71      	ldr	r3, [pc, #452]	; (800d080 <tcp_receive+0x890>)
 800cebc:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800cec2:	4b6f      	ldr	r3, [pc, #444]	; (800d080 <tcp_receive+0x890>)
 800cec4:	881b      	ldrh	r3, [r3, #0]
 800cec6:	429a      	cmp	r2, r3
 800cec8:	d275      	bcs.n	800cfb6 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800ceca:	4b6c      	ldr	r3, [pc, #432]	; (800d07c <tcp_receive+0x88c>)
 800cecc:	68db      	ldr	r3, [r3, #12]
 800cece:	899b      	ldrh	r3, [r3, #12]
 800ced0:	b29b      	uxth	r3, r3
 800ced2:	4618      	mov	r0, r3
 800ced4:	f7fa fd44 	bl	8007960 <lwip_htons>
 800ced8:	4603      	mov	r3, r0
 800ceda:	b2db      	uxtb	r3, r3
 800cedc:	f003 0301 	and.w	r3, r3, #1
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d01f      	beq.n	800cf24 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800cee4:	4b65      	ldr	r3, [pc, #404]	; (800d07c <tcp_receive+0x88c>)
 800cee6:	68db      	ldr	r3, [r3, #12]
 800cee8:	899b      	ldrh	r3, [r3, #12]
 800ceea:	b29b      	uxth	r3, r3
 800ceec:	b21b      	sxth	r3, r3
 800ceee:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800cef2:	b21c      	sxth	r4, r3
 800cef4:	4b61      	ldr	r3, [pc, #388]	; (800d07c <tcp_receive+0x88c>)
 800cef6:	68db      	ldr	r3, [r3, #12]
 800cef8:	899b      	ldrh	r3, [r3, #12]
 800cefa:	b29b      	uxth	r3, r3
 800cefc:	4618      	mov	r0, r3
 800cefe:	f7fa fd2f 	bl	8007960 <lwip_htons>
 800cf02:	4603      	mov	r3, r0
 800cf04:	b2db      	uxtb	r3, r3
 800cf06:	b29b      	uxth	r3, r3
 800cf08:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800cf0c:	b29b      	uxth	r3, r3
 800cf0e:	4618      	mov	r0, r3
 800cf10:	f7fa fd26 	bl	8007960 <lwip_htons>
 800cf14:	4603      	mov	r3, r0
 800cf16:	b21b      	sxth	r3, r3
 800cf18:	4323      	orrs	r3, r4
 800cf1a:	b21a      	sxth	r2, r3
 800cf1c:	4b57      	ldr	r3, [pc, #348]	; (800d07c <tcp_receive+0x88c>)
 800cf1e:	68db      	ldr	r3, [r3, #12]
 800cf20:	b292      	uxth	r2, r2
 800cf22:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800cf28:	4b54      	ldr	r3, [pc, #336]	; (800d07c <tcp_receive+0x88c>)
 800cf2a:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800cf2c:	4b53      	ldr	r3, [pc, #332]	; (800d07c <tcp_receive+0x88c>)
 800cf2e:	68db      	ldr	r3, [r3, #12]
 800cf30:	899b      	ldrh	r3, [r3, #12]
 800cf32:	b29b      	uxth	r3, r3
 800cf34:	4618      	mov	r0, r3
 800cf36:	f7fa fd13 	bl	8007960 <lwip_htons>
 800cf3a:	4603      	mov	r3, r0
 800cf3c:	b2db      	uxtb	r3, r3
 800cf3e:	f003 0302 	and.w	r3, r3, #2
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d005      	beq.n	800cf52 <tcp_receive+0x762>
            inseg.len -= 1;
 800cf46:	4b4d      	ldr	r3, [pc, #308]	; (800d07c <tcp_receive+0x88c>)
 800cf48:	891b      	ldrh	r3, [r3, #8]
 800cf4a:	3b01      	subs	r3, #1
 800cf4c:	b29a      	uxth	r2, r3
 800cf4e:	4b4b      	ldr	r3, [pc, #300]	; (800d07c <tcp_receive+0x88c>)
 800cf50:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800cf52:	4b4a      	ldr	r3, [pc, #296]	; (800d07c <tcp_receive+0x88c>)
 800cf54:	685b      	ldr	r3, [r3, #4]
 800cf56:	4a49      	ldr	r2, [pc, #292]	; (800d07c <tcp_receive+0x88c>)
 800cf58:	8912      	ldrh	r2, [r2, #8]
 800cf5a:	4611      	mov	r1, r2
 800cf5c:	4618      	mov	r0, r3
 800cf5e:	f7fb ff25 	bl	8008dac <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800cf62:	4b46      	ldr	r3, [pc, #280]	; (800d07c <tcp_receive+0x88c>)
 800cf64:	891c      	ldrh	r4, [r3, #8]
 800cf66:	4b45      	ldr	r3, [pc, #276]	; (800d07c <tcp_receive+0x88c>)
 800cf68:	68db      	ldr	r3, [r3, #12]
 800cf6a:	899b      	ldrh	r3, [r3, #12]
 800cf6c:	b29b      	uxth	r3, r3
 800cf6e:	4618      	mov	r0, r3
 800cf70:	f7fa fcf6 	bl	8007960 <lwip_htons>
 800cf74:	4603      	mov	r3, r0
 800cf76:	b2db      	uxtb	r3, r3
 800cf78:	f003 0303 	and.w	r3, r3, #3
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d001      	beq.n	800cf84 <tcp_receive+0x794>
 800cf80:	2301      	movs	r3, #1
 800cf82:	e000      	b.n	800cf86 <tcp_receive+0x796>
 800cf84:	2300      	movs	r3, #0
 800cf86:	4423      	add	r3, r4
 800cf88:	b29a      	uxth	r2, r3
 800cf8a:	4b3d      	ldr	r3, [pc, #244]	; (800d080 <tcp_receive+0x890>)
 800cf8c:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800cf8e:	4b3c      	ldr	r3, [pc, #240]	; (800d080 <tcp_receive+0x890>)
 800cf90:	881b      	ldrh	r3, [r3, #0]
 800cf92:	461a      	mov	r2, r3
 800cf94:	4b38      	ldr	r3, [pc, #224]	; (800d078 <tcp_receive+0x888>)
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	441a      	add	r2, r3
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf9e:	6879      	ldr	r1, [r7, #4]
 800cfa0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800cfa2:	440b      	add	r3, r1
 800cfa4:	429a      	cmp	r2, r3
 800cfa6:	d006      	beq.n	800cfb6 <tcp_receive+0x7c6>
 800cfa8:	4b36      	ldr	r3, [pc, #216]	; (800d084 <tcp_receive+0x894>)
 800cfaa:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800cfae:	4936      	ldr	r1, [pc, #216]	; (800d088 <tcp_receive+0x898>)
 800cfb0:	4836      	ldr	r0, [pc, #216]	; (800d08c <tcp_receive+0x89c>)
 800cfb2:	f006 ff79 	bl	8013ea8 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	f000 80e7 	beq.w	800d18e <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800cfc0:	4b2e      	ldr	r3, [pc, #184]	; (800d07c <tcp_receive+0x88c>)
 800cfc2:	68db      	ldr	r3, [r3, #12]
 800cfc4:	899b      	ldrh	r3, [r3, #12]
 800cfc6:	b29b      	uxth	r3, r3
 800cfc8:	4618      	mov	r0, r3
 800cfca:	f7fa fcc9 	bl	8007960 <lwip_htons>
 800cfce:	4603      	mov	r3, r0
 800cfd0:	b2db      	uxtb	r3, r3
 800cfd2:	f003 0301 	and.w	r3, r3, #1
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d010      	beq.n	800cffc <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800cfda:	e00a      	b.n	800cff2 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cfe0:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cfe6:	681a      	ldr	r2, [r3, #0]
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800cfec:	68f8      	ldr	r0, [r7, #12]
 800cfee:	f7fd fcac 	bl	800a94a <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d1f0      	bne.n	800cfdc <tcp_receive+0x7ec>
 800cffa:	e0c8      	b.n	800d18e <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d000:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800d002:	e052      	b.n	800d0aa <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800d004:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d006:	68db      	ldr	r3, [r3, #12]
 800d008:	899b      	ldrh	r3, [r3, #12]
 800d00a:	b29b      	uxth	r3, r3
 800d00c:	4618      	mov	r0, r3
 800d00e:	f7fa fca7 	bl	8007960 <lwip_htons>
 800d012:	4603      	mov	r3, r0
 800d014:	b2db      	uxtb	r3, r3
 800d016:	f003 0301 	and.w	r3, r3, #1
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d03d      	beq.n	800d09a <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800d01e:	4b17      	ldr	r3, [pc, #92]	; (800d07c <tcp_receive+0x88c>)
 800d020:	68db      	ldr	r3, [r3, #12]
 800d022:	899b      	ldrh	r3, [r3, #12]
 800d024:	b29b      	uxth	r3, r3
 800d026:	4618      	mov	r0, r3
 800d028:	f7fa fc9a 	bl	8007960 <lwip_htons>
 800d02c:	4603      	mov	r3, r0
 800d02e:	b2db      	uxtb	r3, r3
 800d030:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800d034:	2b00      	cmp	r3, #0
 800d036:	d130      	bne.n	800d09a <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800d038:	4b10      	ldr	r3, [pc, #64]	; (800d07c <tcp_receive+0x88c>)
 800d03a:	68db      	ldr	r3, [r3, #12]
 800d03c:	899b      	ldrh	r3, [r3, #12]
 800d03e:	b29c      	uxth	r4, r3
 800d040:	2001      	movs	r0, #1
 800d042:	f7fa fc8d 	bl	8007960 <lwip_htons>
 800d046:	4603      	mov	r3, r0
 800d048:	461a      	mov	r2, r3
 800d04a:	4b0c      	ldr	r3, [pc, #48]	; (800d07c <tcp_receive+0x88c>)
 800d04c:	68db      	ldr	r3, [r3, #12]
 800d04e:	4322      	orrs	r2, r4
 800d050:	b292      	uxth	r2, r2
 800d052:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800d054:	4b09      	ldr	r3, [pc, #36]	; (800d07c <tcp_receive+0x88c>)
 800d056:	891c      	ldrh	r4, [r3, #8]
 800d058:	4b08      	ldr	r3, [pc, #32]	; (800d07c <tcp_receive+0x88c>)
 800d05a:	68db      	ldr	r3, [r3, #12]
 800d05c:	899b      	ldrh	r3, [r3, #12]
 800d05e:	b29b      	uxth	r3, r3
 800d060:	4618      	mov	r0, r3
 800d062:	f7fa fc7d 	bl	8007960 <lwip_htons>
 800d066:	4603      	mov	r3, r0
 800d068:	b2db      	uxtb	r3, r3
 800d06a:	f003 0303 	and.w	r3, r3, #3
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d00e      	beq.n	800d090 <tcp_receive+0x8a0>
 800d072:	2301      	movs	r3, #1
 800d074:	e00d      	b.n	800d092 <tcp_receive+0x8a2>
 800d076:	bf00      	nop
 800d078:	2000824c 	.word	0x2000824c
 800d07c:	2000822c 	.word	0x2000822c
 800d080:	20008256 	.word	0x20008256
 800d084:	08016164 	.word	0x08016164
 800d088:	0801650c 	.word	0x0801650c
 800d08c:	080161b0 	.word	0x080161b0
 800d090:	2300      	movs	r3, #0
 800d092:	4423      	add	r3, r4
 800d094:	b29a      	uxth	r2, r3
 800d096:	4b98      	ldr	r3, [pc, #608]	; (800d2f8 <tcp_receive+0xb08>)
 800d098:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800d09a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d09c:	613b      	str	r3, [r7, #16]
              next = next->next;
 800d09e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800d0a4:	6938      	ldr	r0, [r7, #16]
 800d0a6:	f7fd fc50 	bl	800a94a <tcp_seg_free>
            while (next &&
 800d0aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d00e      	beq.n	800d0ce <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800d0b0:	4b91      	ldr	r3, [pc, #580]	; (800d2f8 <tcp_receive+0xb08>)
 800d0b2:	881b      	ldrh	r3, [r3, #0]
 800d0b4:	461a      	mov	r2, r3
 800d0b6:	4b91      	ldr	r3, [pc, #580]	; (800d2fc <tcp_receive+0xb0c>)
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	441a      	add	r2, r3
 800d0bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d0be:	68db      	ldr	r3, [r3, #12]
 800d0c0:	685b      	ldr	r3, [r3, #4]
 800d0c2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d0c4:	8909      	ldrh	r1, [r1, #8]
 800d0c6:	440b      	add	r3, r1
 800d0c8:	1ad3      	subs	r3, r2, r3
            while (next &&
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	da9a      	bge.n	800d004 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800d0ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d059      	beq.n	800d188 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 800d0d4:	4b88      	ldr	r3, [pc, #544]	; (800d2f8 <tcp_receive+0xb08>)
 800d0d6:	881b      	ldrh	r3, [r3, #0]
 800d0d8:	461a      	mov	r2, r3
 800d0da:	4b88      	ldr	r3, [pc, #544]	; (800d2fc <tcp_receive+0xb0c>)
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	441a      	add	r2, r3
 800d0e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d0e2:	68db      	ldr	r3, [r3, #12]
 800d0e4:	685b      	ldr	r3, [r3, #4]
 800d0e6:	1ad3      	subs	r3, r2, r3
            if (next &&
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	dd4d      	ble.n	800d188 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800d0ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d0ee:	68db      	ldr	r3, [r3, #12]
 800d0f0:	685b      	ldr	r3, [r3, #4]
 800d0f2:	b29a      	uxth	r2, r3
 800d0f4:	4b81      	ldr	r3, [pc, #516]	; (800d2fc <tcp_receive+0xb0c>)
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	b29b      	uxth	r3, r3
 800d0fa:	1ad3      	subs	r3, r2, r3
 800d0fc:	b29a      	uxth	r2, r3
 800d0fe:	4b80      	ldr	r3, [pc, #512]	; (800d300 <tcp_receive+0xb10>)
 800d100:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800d102:	4b7f      	ldr	r3, [pc, #508]	; (800d300 <tcp_receive+0xb10>)
 800d104:	68db      	ldr	r3, [r3, #12]
 800d106:	899b      	ldrh	r3, [r3, #12]
 800d108:	b29b      	uxth	r3, r3
 800d10a:	4618      	mov	r0, r3
 800d10c:	f7fa fc28 	bl	8007960 <lwip_htons>
 800d110:	4603      	mov	r3, r0
 800d112:	b2db      	uxtb	r3, r3
 800d114:	f003 0302 	and.w	r3, r3, #2
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d005      	beq.n	800d128 <tcp_receive+0x938>
                inseg.len -= 1;
 800d11c:	4b78      	ldr	r3, [pc, #480]	; (800d300 <tcp_receive+0xb10>)
 800d11e:	891b      	ldrh	r3, [r3, #8]
 800d120:	3b01      	subs	r3, #1
 800d122:	b29a      	uxth	r2, r3
 800d124:	4b76      	ldr	r3, [pc, #472]	; (800d300 <tcp_receive+0xb10>)
 800d126:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800d128:	4b75      	ldr	r3, [pc, #468]	; (800d300 <tcp_receive+0xb10>)
 800d12a:	685b      	ldr	r3, [r3, #4]
 800d12c:	4a74      	ldr	r2, [pc, #464]	; (800d300 <tcp_receive+0xb10>)
 800d12e:	8912      	ldrh	r2, [r2, #8]
 800d130:	4611      	mov	r1, r2
 800d132:	4618      	mov	r0, r3
 800d134:	f7fb fe3a 	bl	8008dac <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800d138:	4b71      	ldr	r3, [pc, #452]	; (800d300 <tcp_receive+0xb10>)
 800d13a:	891c      	ldrh	r4, [r3, #8]
 800d13c:	4b70      	ldr	r3, [pc, #448]	; (800d300 <tcp_receive+0xb10>)
 800d13e:	68db      	ldr	r3, [r3, #12]
 800d140:	899b      	ldrh	r3, [r3, #12]
 800d142:	b29b      	uxth	r3, r3
 800d144:	4618      	mov	r0, r3
 800d146:	f7fa fc0b 	bl	8007960 <lwip_htons>
 800d14a:	4603      	mov	r3, r0
 800d14c:	b2db      	uxtb	r3, r3
 800d14e:	f003 0303 	and.w	r3, r3, #3
 800d152:	2b00      	cmp	r3, #0
 800d154:	d001      	beq.n	800d15a <tcp_receive+0x96a>
 800d156:	2301      	movs	r3, #1
 800d158:	e000      	b.n	800d15c <tcp_receive+0x96c>
 800d15a:	2300      	movs	r3, #0
 800d15c:	4423      	add	r3, r4
 800d15e:	b29a      	uxth	r2, r3
 800d160:	4b65      	ldr	r3, [pc, #404]	; (800d2f8 <tcp_receive+0xb08>)
 800d162:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800d164:	4b64      	ldr	r3, [pc, #400]	; (800d2f8 <tcp_receive+0xb08>)
 800d166:	881b      	ldrh	r3, [r3, #0]
 800d168:	461a      	mov	r2, r3
 800d16a:	4b64      	ldr	r3, [pc, #400]	; (800d2fc <tcp_receive+0xb0c>)
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	441a      	add	r2, r3
 800d170:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d172:	68db      	ldr	r3, [r3, #12]
 800d174:	685b      	ldr	r3, [r3, #4]
 800d176:	429a      	cmp	r2, r3
 800d178:	d006      	beq.n	800d188 <tcp_receive+0x998>
 800d17a:	4b62      	ldr	r3, [pc, #392]	; (800d304 <tcp_receive+0xb14>)
 800d17c:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800d180:	4961      	ldr	r1, [pc, #388]	; (800d308 <tcp_receive+0xb18>)
 800d182:	4862      	ldr	r0, [pc, #392]	; (800d30c <tcp_receive+0xb1c>)
 800d184:	f006 fe90 	bl	8013ea8 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d18c:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800d18e:	4b5a      	ldr	r3, [pc, #360]	; (800d2f8 <tcp_receive+0xb08>)
 800d190:	881b      	ldrh	r3, [r3, #0]
 800d192:	461a      	mov	r2, r3
 800d194:	4b59      	ldr	r3, [pc, #356]	; (800d2fc <tcp_receive+0xb0c>)
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	441a      	add	r2, r3
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d1a2:	4b55      	ldr	r3, [pc, #340]	; (800d2f8 <tcp_receive+0xb08>)
 800d1a4:	881b      	ldrh	r3, [r3, #0]
 800d1a6:	429a      	cmp	r2, r3
 800d1a8:	d206      	bcs.n	800d1b8 <tcp_receive+0x9c8>
 800d1aa:	4b56      	ldr	r3, [pc, #344]	; (800d304 <tcp_receive+0xb14>)
 800d1ac:	f240 6207 	movw	r2, #1543	; 0x607
 800d1b0:	4957      	ldr	r1, [pc, #348]	; (800d310 <tcp_receive+0xb20>)
 800d1b2:	4856      	ldr	r0, [pc, #344]	; (800d30c <tcp_receive+0xb1c>)
 800d1b4:	f006 fe78 	bl	8013ea8 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d1bc:	4b4e      	ldr	r3, [pc, #312]	; (800d2f8 <tcp_receive+0xb08>)
 800d1be:	881b      	ldrh	r3, [r3, #0]
 800d1c0:	1ad3      	subs	r3, r2, r3
 800d1c2:	b29a      	uxth	r2, r3
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800d1c8:	6878      	ldr	r0, [r7, #4]
 800d1ca:	f7fc fe99 	bl	8009f00 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800d1ce:	4b4c      	ldr	r3, [pc, #304]	; (800d300 <tcp_receive+0xb10>)
 800d1d0:	685b      	ldr	r3, [r3, #4]
 800d1d2:	891b      	ldrh	r3, [r3, #8]
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d006      	beq.n	800d1e6 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 800d1d8:	4b49      	ldr	r3, [pc, #292]	; (800d300 <tcp_receive+0xb10>)
 800d1da:	685b      	ldr	r3, [r3, #4]
 800d1dc:	4a4d      	ldr	r2, [pc, #308]	; (800d314 <tcp_receive+0xb24>)
 800d1de:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800d1e0:	4b47      	ldr	r3, [pc, #284]	; (800d300 <tcp_receive+0xb10>)
 800d1e2:	2200      	movs	r2, #0
 800d1e4:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800d1e6:	4b46      	ldr	r3, [pc, #280]	; (800d300 <tcp_receive+0xb10>)
 800d1e8:	68db      	ldr	r3, [r3, #12]
 800d1ea:	899b      	ldrh	r3, [r3, #12]
 800d1ec:	b29b      	uxth	r3, r3
 800d1ee:	4618      	mov	r0, r3
 800d1f0:	f7fa fbb6 	bl	8007960 <lwip_htons>
 800d1f4:	4603      	mov	r3, r0
 800d1f6:	b2db      	uxtb	r3, r3
 800d1f8:	f003 0301 	and.w	r3, r3, #1
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	f000 80b8 	beq.w	800d372 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800d202:	4b45      	ldr	r3, [pc, #276]	; (800d318 <tcp_receive+0xb28>)
 800d204:	781b      	ldrb	r3, [r3, #0]
 800d206:	f043 0320 	orr.w	r3, r3, #32
 800d20a:	b2da      	uxtb	r2, r3
 800d20c:	4b42      	ldr	r3, [pc, #264]	; (800d318 <tcp_receive+0xb28>)
 800d20e:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800d210:	e0af      	b.n	800d372 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d216:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d21c:	68db      	ldr	r3, [r3, #12]
 800d21e:	685b      	ldr	r3, [r3, #4]
 800d220:	4a36      	ldr	r2, [pc, #216]	; (800d2fc <tcp_receive+0xb0c>)
 800d222:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800d224:	68bb      	ldr	r3, [r7, #8]
 800d226:	891b      	ldrh	r3, [r3, #8]
 800d228:	461c      	mov	r4, r3
 800d22a:	68bb      	ldr	r3, [r7, #8]
 800d22c:	68db      	ldr	r3, [r3, #12]
 800d22e:	899b      	ldrh	r3, [r3, #12]
 800d230:	b29b      	uxth	r3, r3
 800d232:	4618      	mov	r0, r3
 800d234:	f7fa fb94 	bl	8007960 <lwip_htons>
 800d238:	4603      	mov	r3, r0
 800d23a:	b2db      	uxtb	r3, r3
 800d23c:	f003 0303 	and.w	r3, r3, #3
 800d240:	2b00      	cmp	r3, #0
 800d242:	d001      	beq.n	800d248 <tcp_receive+0xa58>
 800d244:	2301      	movs	r3, #1
 800d246:	e000      	b.n	800d24a <tcp_receive+0xa5a>
 800d248:	2300      	movs	r3, #0
 800d24a:	191a      	adds	r2, r3, r4
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d250:	441a      	add	r2, r3
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d25a:	461c      	mov	r4, r3
 800d25c:	68bb      	ldr	r3, [r7, #8]
 800d25e:	891b      	ldrh	r3, [r3, #8]
 800d260:	461d      	mov	r5, r3
 800d262:	68bb      	ldr	r3, [r7, #8]
 800d264:	68db      	ldr	r3, [r3, #12]
 800d266:	899b      	ldrh	r3, [r3, #12]
 800d268:	b29b      	uxth	r3, r3
 800d26a:	4618      	mov	r0, r3
 800d26c:	f7fa fb78 	bl	8007960 <lwip_htons>
 800d270:	4603      	mov	r3, r0
 800d272:	b2db      	uxtb	r3, r3
 800d274:	f003 0303 	and.w	r3, r3, #3
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d001      	beq.n	800d280 <tcp_receive+0xa90>
 800d27c:	2301      	movs	r3, #1
 800d27e:	e000      	b.n	800d282 <tcp_receive+0xa92>
 800d280:	2300      	movs	r3, #0
 800d282:	442b      	add	r3, r5
 800d284:	429c      	cmp	r4, r3
 800d286:	d206      	bcs.n	800d296 <tcp_receive+0xaa6>
 800d288:	4b1e      	ldr	r3, [pc, #120]	; (800d304 <tcp_receive+0xb14>)
 800d28a:	f240 622b 	movw	r2, #1579	; 0x62b
 800d28e:	4923      	ldr	r1, [pc, #140]	; (800d31c <tcp_receive+0xb2c>)
 800d290:	481e      	ldr	r0, [pc, #120]	; (800d30c <tcp_receive+0xb1c>)
 800d292:	f006 fe09 	bl	8013ea8 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800d296:	68bb      	ldr	r3, [r7, #8]
 800d298:	891b      	ldrh	r3, [r3, #8]
 800d29a:	461c      	mov	r4, r3
 800d29c:	68bb      	ldr	r3, [r7, #8]
 800d29e:	68db      	ldr	r3, [r3, #12]
 800d2a0:	899b      	ldrh	r3, [r3, #12]
 800d2a2:	b29b      	uxth	r3, r3
 800d2a4:	4618      	mov	r0, r3
 800d2a6:	f7fa fb5b 	bl	8007960 <lwip_htons>
 800d2aa:	4603      	mov	r3, r0
 800d2ac:	b2db      	uxtb	r3, r3
 800d2ae:	f003 0303 	and.w	r3, r3, #3
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d001      	beq.n	800d2ba <tcp_receive+0xaca>
 800d2b6:	2301      	movs	r3, #1
 800d2b8:	e000      	b.n	800d2bc <tcp_receive+0xacc>
 800d2ba:	2300      	movs	r3, #0
 800d2bc:	1919      	adds	r1, r3, r4
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d2c2:	b28b      	uxth	r3, r1
 800d2c4:	1ad3      	subs	r3, r2, r3
 800d2c6:	b29a      	uxth	r2, r3
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800d2cc:	6878      	ldr	r0, [r7, #4]
 800d2ce:	f7fc fe17 	bl	8009f00 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800d2d2:	68bb      	ldr	r3, [r7, #8]
 800d2d4:	685b      	ldr	r3, [r3, #4]
 800d2d6:	891b      	ldrh	r3, [r3, #8]
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d028      	beq.n	800d32e <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800d2dc:	4b0d      	ldr	r3, [pc, #52]	; (800d314 <tcp_receive+0xb24>)
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d01d      	beq.n	800d320 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 800d2e4:	4b0b      	ldr	r3, [pc, #44]	; (800d314 <tcp_receive+0xb24>)
 800d2e6:	681a      	ldr	r2, [r3, #0]
 800d2e8:	68bb      	ldr	r3, [r7, #8]
 800d2ea:	685b      	ldr	r3, [r3, #4]
 800d2ec:	4619      	mov	r1, r3
 800d2ee:	4610      	mov	r0, r2
 800d2f0:	f7fb ffb0 	bl	8009254 <pbuf_cat>
 800d2f4:	e018      	b.n	800d328 <tcp_receive+0xb38>
 800d2f6:	bf00      	nop
 800d2f8:	20008256 	.word	0x20008256
 800d2fc:	2000824c 	.word	0x2000824c
 800d300:	2000822c 	.word	0x2000822c
 800d304:	08016164 	.word	0x08016164
 800d308:	08016544 	.word	0x08016544
 800d30c:	080161b0 	.word	0x080161b0
 800d310:	08016580 	.word	0x08016580
 800d314:	2000825c 	.word	0x2000825c
 800d318:	20008259 	.word	0x20008259
 800d31c:	080165a0 	.word	0x080165a0
            } else {
              recv_data = cseg->p;
 800d320:	68bb      	ldr	r3, [r7, #8]
 800d322:	685b      	ldr	r3, [r3, #4]
 800d324:	4a70      	ldr	r2, [pc, #448]	; (800d4e8 <tcp_receive+0xcf8>)
 800d326:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800d328:	68bb      	ldr	r3, [r7, #8]
 800d32a:	2200      	movs	r2, #0
 800d32c:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800d32e:	68bb      	ldr	r3, [r7, #8]
 800d330:	68db      	ldr	r3, [r3, #12]
 800d332:	899b      	ldrh	r3, [r3, #12]
 800d334:	b29b      	uxth	r3, r3
 800d336:	4618      	mov	r0, r3
 800d338:	f7fa fb12 	bl	8007960 <lwip_htons>
 800d33c:	4603      	mov	r3, r0
 800d33e:	b2db      	uxtb	r3, r3
 800d340:	f003 0301 	and.w	r3, r3, #1
 800d344:	2b00      	cmp	r3, #0
 800d346:	d00d      	beq.n	800d364 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800d348:	4b68      	ldr	r3, [pc, #416]	; (800d4ec <tcp_receive+0xcfc>)
 800d34a:	781b      	ldrb	r3, [r3, #0]
 800d34c:	f043 0320 	orr.w	r3, r3, #32
 800d350:	b2da      	uxtb	r2, r3
 800d352:	4b66      	ldr	r3, [pc, #408]	; (800d4ec <tcp_receive+0xcfc>)
 800d354:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	7d1b      	ldrb	r3, [r3, #20]
 800d35a:	2b04      	cmp	r3, #4
 800d35c:	d102      	bne.n	800d364 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	2207      	movs	r2, #7
 800d362:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800d364:	68bb      	ldr	r3, [r7, #8]
 800d366:	681a      	ldr	r2, [r3, #0]
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800d36c:	68b8      	ldr	r0, [r7, #8]
 800d36e:	f7fd faec 	bl	800a94a <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d376:	2b00      	cmp	r3, #0
 800d378:	d008      	beq.n	800d38c <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d37e:	68db      	ldr	r3, [r3, #12]
 800d380:	685a      	ldr	r2, [r3, #4]
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800d386:	429a      	cmp	r2, r3
 800d388:	f43f af43 	beq.w	800d212 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	8b5b      	ldrh	r3, [r3, #26]
 800d390:	f003 0301 	and.w	r3, r3, #1
 800d394:	2b00      	cmp	r3, #0
 800d396:	d00e      	beq.n	800d3b6 <tcp_receive+0xbc6>
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	8b5b      	ldrh	r3, [r3, #26]
 800d39c:	f023 0301 	bic.w	r3, r3, #1
 800d3a0:	b29a      	uxth	r2, r3
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	835a      	strh	r2, [r3, #26]
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	8b5b      	ldrh	r3, [r3, #26]
 800d3aa:	f043 0302 	orr.w	r3, r3, #2
 800d3ae:	b29a      	uxth	r2, r3
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800d3b4:	e188      	b.n	800d6c8 <tcp_receive+0xed8>
        tcp_ack(pcb);
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	8b5b      	ldrh	r3, [r3, #26]
 800d3ba:	f043 0301 	orr.w	r3, r3, #1
 800d3be:	b29a      	uxth	r2, r3
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800d3c4:	e180      	b.n	800d6c8 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d106      	bne.n	800d3dc <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800d3ce:	4848      	ldr	r0, [pc, #288]	; (800d4f0 <tcp_receive+0xd00>)
 800d3d0:	f7fd faf2 	bl	800a9b8 <tcp_seg_copy>
 800d3d4:	4602      	mov	r2, r0
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	675a      	str	r2, [r3, #116]	; 0x74
 800d3da:	e16d      	b.n	800d6b8 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800d3dc:	2300      	movs	r3, #0
 800d3de:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d3e4:	63bb      	str	r3, [r7, #56]	; 0x38
 800d3e6:	e157      	b.n	800d698 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 800d3e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3ea:	68db      	ldr	r3, [r3, #12]
 800d3ec:	685a      	ldr	r2, [r3, #4]
 800d3ee:	4b41      	ldr	r3, [pc, #260]	; (800d4f4 <tcp_receive+0xd04>)
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	429a      	cmp	r2, r3
 800d3f4:	d11d      	bne.n	800d432 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800d3f6:	4b3e      	ldr	r3, [pc, #248]	; (800d4f0 <tcp_receive+0xd00>)
 800d3f8:	891a      	ldrh	r2, [r3, #8]
 800d3fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3fc:	891b      	ldrh	r3, [r3, #8]
 800d3fe:	429a      	cmp	r2, r3
 800d400:	f240 814f 	bls.w	800d6a2 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800d404:	483a      	ldr	r0, [pc, #232]	; (800d4f0 <tcp_receive+0xd00>)
 800d406:	f7fd fad7 	bl	800a9b8 <tcp_seg_copy>
 800d40a:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800d40c:	697b      	ldr	r3, [r7, #20]
 800d40e:	2b00      	cmp	r3, #0
 800d410:	f000 8149 	beq.w	800d6a6 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 800d414:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d416:	2b00      	cmp	r3, #0
 800d418:	d003      	beq.n	800d422 <tcp_receive+0xc32>
                    prev->next = cseg;
 800d41a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d41c:	697a      	ldr	r2, [r7, #20]
 800d41e:	601a      	str	r2, [r3, #0]
 800d420:	e002      	b.n	800d428 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	697a      	ldr	r2, [r7, #20]
 800d426:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800d428:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d42a:	6978      	ldr	r0, [r7, #20]
 800d42c:	f7ff f8dc 	bl	800c5e8 <tcp_oos_insert_segment>
                }
                break;
 800d430:	e139      	b.n	800d6a6 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800d432:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d434:	2b00      	cmp	r3, #0
 800d436:	d117      	bne.n	800d468 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800d438:	4b2e      	ldr	r3, [pc, #184]	; (800d4f4 <tcp_receive+0xd04>)
 800d43a:	681a      	ldr	r2, [r3, #0]
 800d43c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d43e:	68db      	ldr	r3, [r3, #12]
 800d440:	685b      	ldr	r3, [r3, #4]
 800d442:	1ad3      	subs	r3, r2, r3
 800d444:	2b00      	cmp	r3, #0
 800d446:	da57      	bge.n	800d4f8 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800d448:	4829      	ldr	r0, [pc, #164]	; (800d4f0 <tcp_receive+0xd00>)
 800d44a:	f7fd fab5 	bl	800a9b8 <tcp_seg_copy>
 800d44e:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800d450:	69bb      	ldr	r3, [r7, #24]
 800d452:	2b00      	cmp	r3, #0
 800d454:	f000 8129 	beq.w	800d6aa <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	69ba      	ldr	r2, [r7, #24]
 800d45c:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800d45e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d460:	69b8      	ldr	r0, [r7, #24]
 800d462:	f7ff f8c1 	bl	800c5e8 <tcp_oos_insert_segment>
                  }
                  break;
 800d466:	e120      	b.n	800d6aa <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800d468:	4b22      	ldr	r3, [pc, #136]	; (800d4f4 <tcp_receive+0xd04>)
 800d46a:	681a      	ldr	r2, [r3, #0]
 800d46c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d46e:	68db      	ldr	r3, [r3, #12]
 800d470:	685b      	ldr	r3, [r3, #4]
 800d472:	1ad3      	subs	r3, r2, r3
 800d474:	3b01      	subs	r3, #1
 800d476:	2b00      	cmp	r3, #0
 800d478:	db3e      	blt.n	800d4f8 <tcp_receive+0xd08>
 800d47a:	4b1e      	ldr	r3, [pc, #120]	; (800d4f4 <tcp_receive+0xd04>)
 800d47c:	681a      	ldr	r2, [r3, #0]
 800d47e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d480:	68db      	ldr	r3, [r3, #12]
 800d482:	685b      	ldr	r3, [r3, #4]
 800d484:	1ad3      	subs	r3, r2, r3
 800d486:	3301      	adds	r3, #1
 800d488:	2b00      	cmp	r3, #0
 800d48a:	dc35      	bgt.n	800d4f8 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800d48c:	4818      	ldr	r0, [pc, #96]	; (800d4f0 <tcp_receive+0xd00>)
 800d48e:	f7fd fa93 	bl	800a9b8 <tcp_seg_copy>
 800d492:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800d494:	69fb      	ldr	r3, [r7, #28]
 800d496:	2b00      	cmp	r3, #0
 800d498:	f000 8109 	beq.w	800d6ae <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800d49c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d49e:	68db      	ldr	r3, [r3, #12]
 800d4a0:	685b      	ldr	r3, [r3, #4]
 800d4a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d4a4:	8912      	ldrh	r2, [r2, #8]
 800d4a6:	441a      	add	r2, r3
 800d4a8:	4b12      	ldr	r3, [pc, #72]	; (800d4f4 <tcp_receive+0xd04>)
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	1ad3      	subs	r3, r2, r3
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	dd12      	ble.n	800d4d8 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800d4b2:	4b10      	ldr	r3, [pc, #64]	; (800d4f4 <tcp_receive+0xd04>)
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	b29a      	uxth	r2, r3
 800d4b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4ba:	68db      	ldr	r3, [r3, #12]
 800d4bc:	685b      	ldr	r3, [r3, #4]
 800d4be:	b29b      	uxth	r3, r3
 800d4c0:	1ad3      	subs	r3, r2, r3
 800d4c2:	b29a      	uxth	r2, r3
 800d4c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4c6:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800d4c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4ca:	685a      	ldr	r2, [r3, #4]
 800d4cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4ce:	891b      	ldrh	r3, [r3, #8]
 800d4d0:	4619      	mov	r1, r3
 800d4d2:	4610      	mov	r0, r2
 800d4d4:	f7fb fc6a 	bl	8008dac <pbuf_realloc>
                    }
                    prev->next = cseg;
 800d4d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4da:	69fa      	ldr	r2, [r7, #28]
 800d4dc:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800d4de:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d4e0:	69f8      	ldr	r0, [r7, #28]
 800d4e2:	f7ff f881 	bl	800c5e8 <tcp_oos_insert_segment>
                  }
                  break;
 800d4e6:	e0e2      	b.n	800d6ae <tcp_receive+0xebe>
 800d4e8:	2000825c 	.word	0x2000825c
 800d4ec:	20008259 	.word	0x20008259
 800d4f0:	2000822c 	.word	0x2000822c
 800d4f4:	2000824c 	.word	0x2000824c
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800d4f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4fa:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800d4fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	2b00      	cmp	r3, #0
 800d502:	f040 80c6 	bne.w	800d692 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800d506:	4b80      	ldr	r3, [pc, #512]	; (800d708 <tcp_receive+0xf18>)
 800d508:	681a      	ldr	r2, [r3, #0]
 800d50a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d50c:	68db      	ldr	r3, [r3, #12]
 800d50e:	685b      	ldr	r3, [r3, #4]
 800d510:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800d512:	2b00      	cmp	r3, #0
 800d514:	f340 80bd 	ble.w	800d692 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800d518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d51a:	68db      	ldr	r3, [r3, #12]
 800d51c:	899b      	ldrh	r3, [r3, #12]
 800d51e:	b29b      	uxth	r3, r3
 800d520:	4618      	mov	r0, r3
 800d522:	f7fa fa1d 	bl	8007960 <lwip_htons>
 800d526:	4603      	mov	r3, r0
 800d528:	b2db      	uxtb	r3, r3
 800d52a:	f003 0301 	and.w	r3, r3, #1
 800d52e:	2b00      	cmp	r3, #0
 800d530:	f040 80bf 	bne.w	800d6b2 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800d534:	4875      	ldr	r0, [pc, #468]	; (800d70c <tcp_receive+0xf1c>)
 800d536:	f7fd fa3f 	bl	800a9b8 <tcp_seg_copy>
 800d53a:	4602      	mov	r2, r0
 800d53c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d53e:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800d540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	2b00      	cmp	r3, #0
 800d546:	f000 80b6 	beq.w	800d6b6 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800d54a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d54c:	68db      	ldr	r3, [r3, #12]
 800d54e:	685b      	ldr	r3, [r3, #4]
 800d550:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d552:	8912      	ldrh	r2, [r2, #8]
 800d554:	441a      	add	r2, r3
 800d556:	4b6c      	ldr	r3, [pc, #432]	; (800d708 <tcp_receive+0xf18>)
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	1ad3      	subs	r3, r2, r3
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	dd12      	ble.n	800d586 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800d560:	4b69      	ldr	r3, [pc, #420]	; (800d708 <tcp_receive+0xf18>)
 800d562:	681b      	ldr	r3, [r3, #0]
 800d564:	b29a      	uxth	r2, r3
 800d566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d568:	68db      	ldr	r3, [r3, #12]
 800d56a:	685b      	ldr	r3, [r3, #4]
 800d56c:	b29b      	uxth	r3, r3
 800d56e:	1ad3      	subs	r3, r2, r3
 800d570:	b29a      	uxth	r2, r3
 800d572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d574:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800d576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d578:	685a      	ldr	r2, [r3, #4]
 800d57a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d57c:	891b      	ldrh	r3, [r3, #8]
 800d57e:	4619      	mov	r1, r3
 800d580:	4610      	mov	r0, r2
 800d582:	f7fb fc13 	bl	8008dac <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800d586:	4b62      	ldr	r3, [pc, #392]	; (800d710 <tcp_receive+0xf20>)
 800d588:	881b      	ldrh	r3, [r3, #0]
 800d58a:	461a      	mov	r2, r3
 800d58c:	4b5e      	ldr	r3, [pc, #376]	; (800d708 <tcp_receive+0xf18>)
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	441a      	add	r2, r3
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d596:	6879      	ldr	r1, [r7, #4]
 800d598:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d59a:	440b      	add	r3, r1
 800d59c:	1ad3      	subs	r3, r2, r3
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	f340 8089 	ble.w	800d6b6 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800d5a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	68db      	ldr	r3, [r3, #12]
 800d5aa:	899b      	ldrh	r3, [r3, #12]
 800d5ac:	b29b      	uxth	r3, r3
 800d5ae:	4618      	mov	r0, r3
 800d5b0:	f7fa f9d6 	bl	8007960 <lwip_htons>
 800d5b4:	4603      	mov	r3, r0
 800d5b6:	b2db      	uxtb	r3, r3
 800d5b8:	f003 0301 	and.w	r3, r3, #1
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d022      	beq.n	800d606 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800d5c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	68db      	ldr	r3, [r3, #12]
 800d5c6:	899b      	ldrh	r3, [r3, #12]
 800d5c8:	b29b      	uxth	r3, r3
 800d5ca:	b21b      	sxth	r3, r3
 800d5cc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800d5d0:	b21c      	sxth	r4, r3
 800d5d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	68db      	ldr	r3, [r3, #12]
 800d5d8:	899b      	ldrh	r3, [r3, #12]
 800d5da:	b29b      	uxth	r3, r3
 800d5dc:	4618      	mov	r0, r3
 800d5de:	f7fa f9bf 	bl	8007960 <lwip_htons>
 800d5e2:	4603      	mov	r3, r0
 800d5e4:	b2db      	uxtb	r3, r3
 800d5e6:	b29b      	uxth	r3, r3
 800d5e8:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800d5ec:	b29b      	uxth	r3, r3
 800d5ee:	4618      	mov	r0, r3
 800d5f0:	f7fa f9b6 	bl	8007960 <lwip_htons>
 800d5f4:	4603      	mov	r3, r0
 800d5f6:	b21b      	sxth	r3, r3
 800d5f8:	4323      	orrs	r3, r4
 800d5fa:	b21a      	sxth	r2, r3
 800d5fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	68db      	ldr	r3, [r3, #12]
 800d602:	b292      	uxth	r2, r2
 800d604:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d60a:	b29a      	uxth	r2, r3
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d610:	4413      	add	r3, r2
 800d612:	b299      	uxth	r1, r3
 800d614:	4b3c      	ldr	r3, [pc, #240]	; (800d708 <tcp_receive+0xf18>)
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	b29a      	uxth	r2, r3
 800d61a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	1a8a      	subs	r2, r1, r2
 800d620:	b292      	uxth	r2, r2
 800d622:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800d624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	685a      	ldr	r2, [r3, #4]
 800d62a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	891b      	ldrh	r3, [r3, #8]
 800d630:	4619      	mov	r1, r3
 800d632:	4610      	mov	r0, r2
 800d634:	f7fb fbba 	bl	8008dac <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800d638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	891c      	ldrh	r4, [r3, #8]
 800d63e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	68db      	ldr	r3, [r3, #12]
 800d644:	899b      	ldrh	r3, [r3, #12]
 800d646:	b29b      	uxth	r3, r3
 800d648:	4618      	mov	r0, r3
 800d64a:	f7fa f989 	bl	8007960 <lwip_htons>
 800d64e:	4603      	mov	r3, r0
 800d650:	b2db      	uxtb	r3, r3
 800d652:	f003 0303 	and.w	r3, r3, #3
 800d656:	2b00      	cmp	r3, #0
 800d658:	d001      	beq.n	800d65e <tcp_receive+0xe6e>
 800d65a:	2301      	movs	r3, #1
 800d65c:	e000      	b.n	800d660 <tcp_receive+0xe70>
 800d65e:	2300      	movs	r3, #0
 800d660:	4423      	add	r3, r4
 800d662:	b29a      	uxth	r2, r3
 800d664:	4b2a      	ldr	r3, [pc, #168]	; (800d710 <tcp_receive+0xf20>)
 800d666:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800d668:	4b29      	ldr	r3, [pc, #164]	; (800d710 <tcp_receive+0xf20>)
 800d66a:	881b      	ldrh	r3, [r3, #0]
 800d66c:	461a      	mov	r2, r3
 800d66e:	4b26      	ldr	r3, [pc, #152]	; (800d708 <tcp_receive+0xf18>)
 800d670:	681b      	ldr	r3, [r3, #0]
 800d672:	441a      	add	r2, r3
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d678:	6879      	ldr	r1, [r7, #4]
 800d67a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d67c:	440b      	add	r3, r1
 800d67e:	429a      	cmp	r2, r3
 800d680:	d019      	beq.n	800d6b6 <tcp_receive+0xec6>
 800d682:	4b24      	ldr	r3, [pc, #144]	; (800d714 <tcp_receive+0xf24>)
 800d684:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800d688:	4923      	ldr	r1, [pc, #140]	; (800d718 <tcp_receive+0xf28>)
 800d68a:	4824      	ldr	r0, [pc, #144]	; (800d71c <tcp_receive+0xf2c>)
 800d68c:	f006 fc0c 	bl	8013ea8 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800d690:	e011      	b.n	800d6b6 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800d692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d694:	681b      	ldr	r3, [r3, #0]
 800d696:	63bb      	str	r3, [r7, #56]	; 0x38
 800d698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	f47f aea4 	bne.w	800d3e8 <tcp_receive+0xbf8>
 800d6a0:	e00a      	b.n	800d6b8 <tcp_receive+0xec8>
                break;
 800d6a2:	bf00      	nop
 800d6a4:	e008      	b.n	800d6b8 <tcp_receive+0xec8>
                break;
 800d6a6:	bf00      	nop
 800d6a8:	e006      	b.n	800d6b8 <tcp_receive+0xec8>
                  break;
 800d6aa:	bf00      	nop
 800d6ac:	e004      	b.n	800d6b8 <tcp_receive+0xec8>
                  break;
 800d6ae:	bf00      	nop
 800d6b0:	e002      	b.n	800d6b8 <tcp_receive+0xec8>
                  break;
 800d6b2:	bf00      	nop
 800d6b4:	e000      	b.n	800d6b8 <tcp_receive+0xec8>
                break;
 800d6b6:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800d6b8:	6878      	ldr	r0, [r7, #4]
 800d6ba:	f001 fe8b 	bl	800f3d4 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800d6be:	e003      	b.n	800d6c8 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800d6c0:	6878      	ldr	r0, [r7, #4]
 800d6c2:	f001 fe87 	bl	800f3d4 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800d6c6:	e01a      	b.n	800d6fe <tcp_receive+0xf0e>
 800d6c8:	e019      	b.n	800d6fe <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800d6ca:	4b0f      	ldr	r3, [pc, #60]	; (800d708 <tcp_receive+0xf18>)
 800d6cc:	681a      	ldr	r2, [r3, #0]
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6d2:	1ad3      	subs	r3, r2, r3
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	db0a      	blt.n	800d6ee <tcp_receive+0xefe>
 800d6d8:	4b0b      	ldr	r3, [pc, #44]	; (800d708 <tcp_receive+0xf18>)
 800d6da:	681a      	ldr	r2, [r3, #0]
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6e0:	6879      	ldr	r1, [r7, #4]
 800d6e2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d6e4:	440b      	add	r3, r1
 800d6e6:	1ad3      	subs	r3, r2, r3
 800d6e8:	3301      	adds	r3, #1
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	dd07      	ble.n	800d6fe <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	8b5b      	ldrh	r3, [r3, #26]
 800d6f2:	f043 0302 	orr.w	r3, r3, #2
 800d6f6:	b29a      	uxth	r2, r3
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800d6fc:	e7ff      	b.n	800d6fe <tcp_receive+0xf0e>
 800d6fe:	bf00      	nop
 800d700:	3750      	adds	r7, #80	; 0x50
 800d702:	46bd      	mov	sp, r7
 800d704:	bdb0      	pop	{r4, r5, r7, pc}
 800d706:	bf00      	nop
 800d708:	2000824c 	.word	0x2000824c
 800d70c:	2000822c 	.word	0x2000822c
 800d710:	20008256 	.word	0x20008256
 800d714:	08016164 	.word	0x08016164
 800d718:	0801650c 	.word	0x0801650c
 800d71c:	080161b0 	.word	0x080161b0

0800d720 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800d720:	b480      	push	{r7}
 800d722:	b083      	sub	sp, #12
 800d724:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800d726:	4b15      	ldr	r3, [pc, #84]	; (800d77c <tcp_get_next_optbyte+0x5c>)
 800d728:	881b      	ldrh	r3, [r3, #0]
 800d72a:	1c5a      	adds	r2, r3, #1
 800d72c:	b291      	uxth	r1, r2
 800d72e:	4a13      	ldr	r2, [pc, #76]	; (800d77c <tcp_get_next_optbyte+0x5c>)
 800d730:	8011      	strh	r1, [r2, #0]
 800d732:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800d734:	4b12      	ldr	r3, [pc, #72]	; (800d780 <tcp_get_next_optbyte+0x60>)
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d004      	beq.n	800d746 <tcp_get_next_optbyte+0x26>
 800d73c:	4b11      	ldr	r3, [pc, #68]	; (800d784 <tcp_get_next_optbyte+0x64>)
 800d73e:	881b      	ldrh	r3, [r3, #0]
 800d740:	88fa      	ldrh	r2, [r7, #6]
 800d742:	429a      	cmp	r2, r3
 800d744:	d208      	bcs.n	800d758 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800d746:	4b10      	ldr	r3, [pc, #64]	; (800d788 <tcp_get_next_optbyte+0x68>)
 800d748:	681b      	ldr	r3, [r3, #0]
 800d74a:	3314      	adds	r3, #20
 800d74c:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800d74e:	88fb      	ldrh	r3, [r7, #6]
 800d750:	683a      	ldr	r2, [r7, #0]
 800d752:	4413      	add	r3, r2
 800d754:	781b      	ldrb	r3, [r3, #0]
 800d756:	e00b      	b.n	800d770 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800d758:	88fb      	ldrh	r3, [r7, #6]
 800d75a:	b2da      	uxtb	r2, r3
 800d75c:	4b09      	ldr	r3, [pc, #36]	; (800d784 <tcp_get_next_optbyte+0x64>)
 800d75e:	881b      	ldrh	r3, [r3, #0]
 800d760:	b2db      	uxtb	r3, r3
 800d762:	1ad3      	subs	r3, r2, r3
 800d764:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800d766:	4b06      	ldr	r3, [pc, #24]	; (800d780 <tcp_get_next_optbyte+0x60>)
 800d768:	681a      	ldr	r2, [r3, #0]
 800d76a:	797b      	ldrb	r3, [r7, #5]
 800d76c:	4413      	add	r3, r2
 800d76e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d770:	4618      	mov	r0, r3
 800d772:	370c      	adds	r7, #12
 800d774:	46bd      	mov	sp, r7
 800d776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d77a:	4770      	bx	lr
 800d77c:	20008248 	.word	0x20008248
 800d780:	20008244 	.word	0x20008244
 800d784:	20008242 	.word	0x20008242
 800d788:	2000823c 	.word	0x2000823c

0800d78c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800d78c:	b580      	push	{r7, lr}
 800d78e:	b084      	sub	sp, #16
 800d790:	af00      	add	r7, sp, #0
 800d792:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	2b00      	cmp	r3, #0
 800d798:	d106      	bne.n	800d7a8 <tcp_parseopt+0x1c>
 800d79a:	4b32      	ldr	r3, [pc, #200]	; (800d864 <tcp_parseopt+0xd8>)
 800d79c:	f240 727d 	movw	r2, #1917	; 0x77d
 800d7a0:	4931      	ldr	r1, [pc, #196]	; (800d868 <tcp_parseopt+0xdc>)
 800d7a2:	4832      	ldr	r0, [pc, #200]	; (800d86c <tcp_parseopt+0xe0>)
 800d7a4:	f006 fb80 	bl	8013ea8 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800d7a8:	4b31      	ldr	r3, [pc, #196]	; (800d870 <tcp_parseopt+0xe4>)
 800d7aa:	881b      	ldrh	r3, [r3, #0]
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d055      	beq.n	800d85c <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800d7b0:	4b30      	ldr	r3, [pc, #192]	; (800d874 <tcp_parseopt+0xe8>)
 800d7b2:	2200      	movs	r2, #0
 800d7b4:	801a      	strh	r2, [r3, #0]
 800d7b6:	e045      	b.n	800d844 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800d7b8:	f7ff ffb2 	bl	800d720 <tcp_get_next_optbyte>
 800d7bc:	4603      	mov	r3, r0
 800d7be:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800d7c0:	7bfb      	ldrb	r3, [r7, #15]
 800d7c2:	2b02      	cmp	r3, #2
 800d7c4:	d006      	beq.n	800d7d4 <tcp_parseopt+0x48>
 800d7c6:	2b02      	cmp	r3, #2
 800d7c8:	dc2b      	bgt.n	800d822 <tcp_parseopt+0x96>
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d041      	beq.n	800d852 <tcp_parseopt+0xc6>
 800d7ce:	2b01      	cmp	r3, #1
 800d7d0:	d127      	bne.n	800d822 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800d7d2:	e037      	b.n	800d844 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800d7d4:	f7ff ffa4 	bl	800d720 <tcp_get_next_optbyte>
 800d7d8:	4603      	mov	r3, r0
 800d7da:	2b04      	cmp	r3, #4
 800d7dc:	d13b      	bne.n	800d856 <tcp_parseopt+0xca>
 800d7de:	4b25      	ldr	r3, [pc, #148]	; (800d874 <tcp_parseopt+0xe8>)
 800d7e0:	881b      	ldrh	r3, [r3, #0]
 800d7e2:	3301      	adds	r3, #1
 800d7e4:	4a22      	ldr	r2, [pc, #136]	; (800d870 <tcp_parseopt+0xe4>)
 800d7e6:	8812      	ldrh	r2, [r2, #0]
 800d7e8:	4293      	cmp	r3, r2
 800d7ea:	da34      	bge.n	800d856 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800d7ec:	f7ff ff98 	bl	800d720 <tcp_get_next_optbyte>
 800d7f0:	4603      	mov	r3, r0
 800d7f2:	b29b      	uxth	r3, r3
 800d7f4:	021b      	lsls	r3, r3, #8
 800d7f6:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800d7f8:	f7ff ff92 	bl	800d720 <tcp_get_next_optbyte>
 800d7fc:	4603      	mov	r3, r0
 800d7fe:	b29a      	uxth	r2, r3
 800d800:	89bb      	ldrh	r3, [r7, #12]
 800d802:	4313      	orrs	r3, r2
 800d804:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800d806:	89bb      	ldrh	r3, [r7, #12]
 800d808:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800d80c:	d804      	bhi.n	800d818 <tcp_parseopt+0x8c>
 800d80e:	89bb      	ldrh	r3, [r7, #12]
 800d810:	2b00      	cmp	r3, #0
 800d812:	d001      	beq.n	800d818 <tcp_parseopt+0x8c>
 800d814:	89ba      	ldrh	r2, [r7, #12]
 800d816:	e001      	b.n	800d81c <tcp_parseopt+0x90>
 800d818:	f44f 7206 	mov.w	r2, #536	; 0x218
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800d820:	e010      	b.n	800d844 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800d822:	f7ff ff7d 	bl	800d720 <tcp_get_next_optbyte>
 800d826:	4603      	mov	r3, r0
 800d828:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800d82a:	7afb      	ldrb	r3, [r7, #11]
 800d82c:	2b01      	cmp	r3, #1
 800d82e:	d914      	bls.n	800d85a <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800d830:	7afb      	ldrb	r3, [r7, #11]
 800d832:	b29a      	uxth	r2, r3
 800d834:	4b0f      	ldr	r3, [pc, #60]	; (800d874 <tcp_parseopt+0xe8>)
 800d836:	881b      	ldrh	r3, [r3, #0]
 800d838:	4413      	add	r3, r2
 800d83a:	b29b      	uxth	r3, r3
 800d83c:	3b02      	subs	r3, #2
 800d83e:	b29a      	uxth	r2, r3
 800d840:	4b0c      	ldr	r3, [pc, #48]	; (800d874 <tcp_parseopt+0xe8>)
 800d842:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800d844:	4b0b      	ldr	r3, [pc, #44]	; (800d874 <tcp_parseopt+0xe8>)
 800d846:	881a      	ldrh	r2, [r3, #0]
 800d848:	4b09      	ldr	r3, [pc, #36]	; (800d870 <tcp_parseopt+0xe4>)
 800d84a:	881b      	ldrh	r3, [r3, #0]
 800d84c:	429a      	cmp	r2, r3
 800d84e:	d3b3      	bcc.n	800d7b8 <tcp_parseopt+0x2c>
 800d850:	e004      	b.n	800d85c <tcp_parseopt+0xd0>
          return;
 800d852:	bf00      	nop
 800d854:	e002      	b.n	800d85c <tcp_parseopt+0xd0>
            return;
 800d856:	bf00      	nop
 800d858:	e000      	b.n	800d85c <tcp_parseopt+0xd0>
            return;
 800d85a:	bf00      	nop
      }
    }
  }
}
 800d85c:	3710      	adds	r7, #16
 800d85e:	46bd      	mov	sp, r7
 800d860:	bd80      	pop	{r7, pc}
 800d862:	bf00      	nop
 800d864:	08016164 	.word	0x08016164
 800d868:	080165c8 	.word	0x080165c8
 800d86c:	080161b0 	.word	0x080161b0
 800d870:	20008240 	.word	0x20008240
 800d874:	20008248 	.word	0x20008248

0800d878 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800d878:	b480      	push	{r7}
 800d87a:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800d87c:	4b05      	ldr	r3, [pc, #20]	; (800d894 <tcp_trigger_input_pcb_close+0x1c>)
 800d87e:	781b      	ldrb	r3, [r3, #0]
 800d880:	f043 0310 	orr.w	r3, r3, #16
 800d884:	b2da      	uxtb	r2, r3
 800d886:	4b03      	ldr	r3, [pc, #12]	; (800d894 <tcp_trigger_input_pcb_close+0x1c>)
 800d888:	701a      	strb	r2, [r3, #0]
}
 800d88a:	bf00      	nop
 800d88c:	46bd      	mov	sp, r7
 800d88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d892:	4770      	bx	lr
 800d894:	20008259 	.word	0x20008259

0800d898 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800d898:	b580      	push	{r7, lr}
 800d89a:	b084      	sub	sp, #16
 800d89c:	af00      	add	r7, sp, #0
 800d89e:	60f8      	str	r0, [r7, #12]
 800d8a0:	60b9      	str	r1, [r7, #8]
 800d8a2:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800d8a4:	68fb      	ldr	r3, [r7, #12]
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d00a      	beq.n	800d8c0 <tcp_route+0x28>
 800d8aa:	68fb      	ldr	r3, [r7, #12]
 800d8ac:	7a1b      	ldrb	r3, [r3, #8]
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d006      	beq.n	800d8c0 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800d8b2:	68fb      	ldr	r3, [r7, #12]
 800d8b4:	7a1b      	ldrb	r3, [r3, #8]
 800d8b6:	4618      	mov	r0, r3
 800d8b8:	f7fb f870 	bl	800899c <netif_get_by_index>
 800d8bc:	4603      	mov	r3, r0
 800d8be:	e003      	b.n	800d8c8 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800d8c0:	6878      	ldr	r0, [r7, #4]
 800d8c2:	f003 fb05 	bl	8010ed0 <ip4_route>
 800d8c6:	4603      	mov	r3, r0
  }
}
 800d8c8:	4618      	mov	r0, r3
 800d8ca:	3710      	adds	r7, #16
 800d8cc:	46bd      	mov	sp, r7
 800d8ce:	bd80      	pop	{r7, pc}

0800d8d0 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800d8d0:	b590      	push	{r4, r7, lr}
 800d8d2:	b087      	sub	sp, #28
 800d8d4:	af00      	add	r7, sp, #0
 800d8d6:	60f8      	str	r0, [r7, #12]
 800d8d8:	60b9      	str	r1, [r7, #8]
 800d8da:	603b      	str	r3, [r7, #0]
 800d8dc:	4613      	mov	r3, r2
 800d8de:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800d8e0:	68fb      	ldr	r3, [r7, #12]
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d105      	bne.n	800d8f2 <tcp_create_segment+0x22>
 800d8e6:	4b44      	ldr	r3, [pc, #272]	; (800d9f8 <tcp_create_segment+0x128>)
 800d8e8:	22a3      	movs	r2, #163	; 0xa3
 800d8ea:	4944      	ldr	r1, [pc, #272]	; (800d9fc <tcp_create_segment+0x12c>)
 800d8ec:	4844      	ldr	r0, [pc, #272]	; (800da00 <tcp_create_segment+0x130>)
 800d8ee:	f006 fadb 	bl	8013ea8 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800d8f2:	68bb      	ldr	r3, [r7, #8]
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d105      	bne.n	800d904 <tcp_create_segment+0x34>
 800d8f8:	4b3f      	ldr	r3, [pc, #252]	; (800d9f8 <tcp_create_segment+0x128>)
 800d8fa:	22a4      	movs	r2, #164	; 0xa4
 800d8fc:	4941      	ldr	r1, [pc, #260]	; (800da04 <tcp_create_segment+0x134>)
 800d8fe:	4840      	ldr	r0, [pc, #256]	; (800da00 <tcp_create_segment+0x130>)
 800d900:	f006 fad2 	bl	8013ea8 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800d904:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d908:	009b      	lsls	r3, r3, #2
 800d90a:	b2db      	uxtb	r3, r3
 800d90c:	f003 0304 	and.w	r3, r3, #4
 800d910:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800d912:	2003      	movs	r0, #3
 800d914:	f7fa fcda 	bl	80082cc <memp_malloc>
 800d918:	6138      	str	r0, [r7, #16]
 800d91a:	693b      	ldr	r3, [r7, #16]
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d104      	bne.n	800d92a <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800d920:	68b8      	ldr	r0, [r7, #8]
 800d922:	f7fb fbc9 	bl	80090b8 <pbuf_free>
    return NULL;
 800d926:	2300      	movs	r3, #0
 800d928:	e061      	b.n	800d9ee <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800d92a:	693b      	ldr	r3, [r7, #16]
 800d92c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800d930:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800d932:	693b      	ldr	r3, [r7, #16]
 800d934:	2200      	movs	r2, #0
 800d936:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800d938:	693b      	ldr	r3, [r7, #16]
 800d93a:	68ba      	ldr	r2, [r7, #8]
 800d93c:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800d93e:	68bb      	ldr	r3, [r7, #8]
 800d940:	891a      	ldrh	r2, [r3, #8]
 800d942:	7dfb      	ldrb	r3, [r7, #23]
 800d944:	b29b      	uxth	r3, r3
 800d946:	429a      	cmp	r2, r3
 800d948:	d205      	bcs.n	800d956 <tcp_create_segment+0x86>
 800d94a:	4b2b      	ldr	r3, [pc, #172]	; (800d9f8 <tcp_create_segment+0x128>)
 800d94c:	22b0      	movs	r2, #176	; 0xb0
 800d94e:	492e      	ldr	r1, [pc, #184]	; (800da08 <tcp_create_segment+0x138>)
 800d950:	482b      	ldr	r0, [pc, #172]	; (800da00 <tcp_create_segment+0x130>)
 800d952:	f006 faa9 	bl	8013ea8 <iprintf>
  seg->len = p->tot_len - optlen;
 800d956:	68bb      	ldr	r3, [r7, #8]
 800d958:	891a      	ldrh	r2, [r3, #8]
 800d95a:	7dfb      	ldrb	r3, [r7, #23]
 800d95c:	b29b      	uxth	r3, r3
 800d95e:	1ad3      	subs	r3, r2, r3
 800d960:	b29a      	uxth	r2, r3
 800d962:	693b      	ldr	r3, [r7, #16]
 800d964:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800d966:	2114      	movs	r1, #20
 800d968:	68b8      	ldr	r0, [r7, #8]
 800d96a:	f7fb fb0f 	bl	8008f8c <pbuf_add_header>
 800d96e:	4603      	mov	r3, r0
 800d970:	2b00      	cmp	r3, #0
 800d972:	d004      	beq.n	800d97e <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800d974:	6938      	ldr	r0, [r7, #16]
 800d976:	f7fc ffe8 	bl	800a94a <tcp_seg_free>
    return NULL;
 800d97a:	2300      	movs	r3, #0
 800d97c:	e037      	b.n	800d9ee <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800d97e:	693b      	ldr	r3, [r7, #16]
 800d980:	685b      	ldr	r3, [r3, #4]
 800d982:	685a      	ldr	r2, [r3, #4]
 800d984:	693b      	ldr	r3, [r7, #16]
 800d986:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800d988:	68fb      	ldr	r3, [r7, #12]
 800d98a:	8ada      	ldrh	r2, [r3, #22]
 800d98c:	693b      	ldr	r3, [r7, #16]
 800d98e:	68dc      	ldr	r4, [r3, #12]
 800d990:	4610      	mov	r0, r2
 800d992:	f7f9 ffe5 	bl	8007960 <lwip_htons>
 800d996:	4603      	mov	r3, r0
 800d998:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800d99a:	68fb      	ldr	r3, [r7, #12]
 800d99c:	8b1a      	ldrh	r2, [r3, #24]
 800d99e:	693b      	ldr	r3, [r7, #16]
 800d9a0:	68dc      	ldr	r4, [r3, #12]
 800d9a2:	4610      	mov	r0, r2
 800d9a4:	f7f9 ffdc 	bl	8007960 <lwip_htons>
 800d9a8:	4603      	mov	r3, r0
 800d9aa:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800d9ac:	693b      	ldr	r3, [r7, #16]
 800d9ae:	68dc      	ldr	r4, [r3, #12]
 800d9b0:	6838      	ldr	r0, [r7, #0]
 800d9b2:	f7f9 ffea 	bl	800798a <lwip_htonl>
 800d9b6:	4603      	mov	r3, r0
 800d9b8:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800d9ba:	7dfb      	ldrb	r3, [r7, #23]
 800d9bc:	089b      	lsrs	r3, r3, #2
 800d9be:	b2db      	uxtb	r3, r3
 800d9c0:	b29b      	uxth	r3, r3
 800d9c2:	3305      	adds	r3, #5
 800d9c4:	b29b      	uxth	r3, r3
 800d9c6:	031b      	lsls	r3, r3, #12
 800d9c8:	b29a      	uxth	r2, r3
 800d9ca:	79fb      	ldrb	r3, [r7, #7]
 800d9cc:	b29b      	uxth	r3, r3
 800d9ce:	4313      	orrs	r3, r2
 800d9d0:	b29a      	uxth	r2, r3
 800d9d2:	693b      	ldr	r3, [r7, #16]
 800d9d4:	68dc      	ldr	r4, [r3, #12]
 800d9d6:	4610      	mov	r0, r2
 800d9d8:	f7f9 ffc2 	bl	8007960 <lwip_htons>
 800d9dc:	4603      	mov	r3, r0
 800d9de:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800d9e0:	693b      	ldr	r3, [r7, #16]
 800d9e2:	68db      	ldr	r3, [r3, #12]
 800d9e4:	2200      	movs	r2, #0
 800d9e6:	749a      	strb	r2, [r3, #18]
 800d9e8:	2200      	movs	r2, #0
 800d9ea:	74da      	strb	r2, [r3, #19]
  return seg;
 800d9ec:	693b      	ldr	r3, [r7, #16]
}
 800d9ee:	4618      	mov	r0, r3
 800d9f0:	371c      	adds	r7, #28
 800d9f2:	46bd      	mov	sp, r7
 800d9f4:	bd90      	pop	{r4, r7, pc}
 800d9f6:	bf00      	nop
 800d9f8:	080165e4 	.word	0x080165e4
 800d9fc:	08016618 	.word	0x08016618
 800da00:	08016638 	.word	0x08016638
 800da04:	08016660 	.word	0x08016660
 800da08:	08016684 	.word	0x08016684

0800da0c <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 800da0c:	b580      	push	{r7, lr}
 800da0e:	b086      	sub	sp, #24
 800da10:	af00      	add	r7, sp, #0
 800da12:	607b      	str	r3, [r7, #4]
 800da14:	4603      	mov	r3, r0
 800da16:	73fb      	strb	r3, [r7, #15]
 800da18:	460b      	mov	r3, r1
 800da1a:	81bb      	strh	r3, [r7, #12]
 800da1c:	4613      	mov	r3, r2
 800da1e:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 800da20:	89bb      	ldrh	r3, [r7, #12]
 800da22:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	2b00      	cmp	r3, #0
 800da28:	d105      	bne.n	800da36 <tcp_pbuf_prealloc+0x2a>
 800da2a:	4b30      	ldr	r3, [pc, #192]	; (800daec <tcp_pbuf_prealloc+0xe0>)
 800da2c:	22e8      	movs	r2, #232	; 0xe8
 800da2e:	4930      	ldr	r1, [pc, #192]	; (800daf0 <tcp_pbuf_prealloc+0xe4>)
 800da30:	4830      	ldr	r0, [pc, #192]	; (800daf4 <tcp_pbuf_prealloc+0xe8>)
 800da32:	f006 fa39 	bl	8013ea8 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800da36:	6a3b      	ldr	r3, [r7, #32]
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d105      	bne.n	800da48 <tcp_pbuf_prealloc+0x3c>
 800da3c:	4b2b      	ldr	r3, [pc, #172]	; (800daec <tcp_pbuf_prealloc+0xe0>)
 800da3e:	22e9      	movs	r2, #233	; 0xe9
 800da40:	492d      	ldr	r1, [pc, #180]	; (800daf8 <tcp_pbuf_prealloc+0xec>)
 800da42:	482c      	ldr	r0, [pc, #176]	; (800daf4 <tcp_pbuf_prealloc+0xe8>)
 800da44:	f006 fa30 	bl	8013ea8 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800da48:	89ba      	ldrh	r2, [r7, #12]
 800da4a:	897b      	ldrh	r3, [r7, #10]
 800da4c:	429a      	cmp	r2, r3
 800da4e:	d221      	bcs.n	800da94 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800da50:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800da54:	f003 0302 	and.w	r3, r3, #2
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d111      	bne.n	800da80 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 800da5c:	6a3b      	ldr	r3, [r7, #32]
 800da5e:	8b5b      	ldrh	r3, [r3, #26]
 800da60:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800da64:	2b00      	cmp	r3, #0
 800da66:	d115      	bne.n	800da94 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 800da68:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d007      	beq.n	800da80 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 800da70:	6a3b      	ldr	r3, [r7, #32]
 800da72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 800da74:	2b00      	cmp	r3, #0
 800da76:	d103      	bne.n	800da80 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 800da78:	6a3b      	ldr	r3, [r7, #32]
 800da7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d009      	beq.n	800da94 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800da80:	89bb      	ldrh	r3, [r7, #12]
 800da82:	f203 231b 	addw	r3, r3, #539	; 0x21b
 800da86:	f023 0203 	bic.w	r2, r3, #3
 800da8a:	897b      	ldrh	r3, [r7, #10]
 800da8c:	4293      	cmp	r3, r2
 800da8e:	bf28      	it	cs
 800da90:	4613      	movcs	r3, r2
 800da92:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800da94:	8af9      	ldrh	r1, [r7, #22]
 800da96:	7bfb      	ldrb	r3, [r7, #15]
 800da98:	f44f 7220 	mov.w	r2, #640	; 0x280
 800da9c:	4618      	mov	r0, r3
 800da9e:	f7fb f827 	bl	8008af0 <pbuf_alloc>
 800daa2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800daa4:	693b      	ldr	r3, [r7, #16]
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d101      	bne.n	800daae <tcp_pbuf_prealloc+0xa2>
    return NULL;
 800daaa:	2300      	movs	r3, #0
 800daac:	e019      	b.n	800dae2 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800daae:	693b      	ldr	r3, [r7, #16]
 800dab0:	681b      	ldr	r3, [r3, #0]
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d006      	beq.n	800dac4 <tcp_pbuf_prealloc+0xb8>
 800dab6:	4b0d      	ldr	r3, [pc, #52]	; (800daec <tcp_pbuf_prealloc+0xe0>)
 800dab8:	f240 120b 	movw	r2, #267	; 0x10b
 800dabc:	490f      	ldr	r1, [pc, #60]	; (800dafc <tcp_pbuf_prealloc+0xf0>)
 800dabe:	480d      	ldr	r0, [pc, #52]	; (800daf4 <tcp_pbuf_prealloc+0xe8>)
 800dac0:	f006 f9f2 	bl	8013ea8 <iprintf>
  *oversize = p->len - length;
 800dac4:	693b      	ldr	r3, [r7, #16]
 800dac6:	895a      	ldrh	r2, [r3, #10]
 800dac8:	89bb      	ldrh	r3, [r7, #12]
 800daca:	1ad3      	subs	r3, r2, r3
 800dacc:	b29a      	uxth	r2, r3
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800dad2:	693b      	ldr	r3, [r7, #16]
 800dad4:	89ba      	ldrh	r2, [r7, #12]
 800dad6:	811a      	strh	r2, [r3, #8]
 800dad8:	693b      	ldr	r3, [r7, #16]
 800dada:	891a      	ldrh	r2, [r3, #8]
 800dadc:	693b      	ldr	r3, [r7, #16]
 800dade:	815a      	strh	r2, [r3, #10]
  return p;
 800dae0:	693b      	ldr	r3, [r7, #16]
}
 800dae2:	4618      	mov	r0, r3
 800dae4:	3718      	adds	r7, #24
 800dae6:	46bd      	mov	sp, r7
 800dae8:	bd80      	pop	{r7, pc}
 800daea:	bf00      	nop
 800daec:	080165e4 	.word	0x080165e4
 800daf0:	0801669c 	.word	0x0801669c
 800daf4:	08016638 	.word	0x08016638
 800daf8:	080166c0 	.word	0x080166c0
 800dafc:	080166e0 	.word	0x080166e0

0800db00 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 800db00:	b580      	push	{r7, lr}
 800db02:	b082      	sub	sp, #8
 800db04:	af00      	add	r7, sp, #0
 800db06:	6078      	str	r0, [r7, #4]
 800db08:	460b      	mov	r3, r1
 800db0a:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	2b00      	cmp	r3, #0
 800db10:	d106      	bne.n	800db20 <tcp_write_checks+0x20>
 800db12:	4b33      	ldr	r3, [pc, #204]	; (800dbe0 <tcp_write_checks+0xe0>)
 800db14:	f240 1233 	movw	r2, #307	; 0x133
 800db18:	4932      	ldr	r1, [pc, #200]	; (800dbe4 <tcp_write_checks+0xe4>)
 800db1a:	4833      	ldr	r0, [pc, #204]	; (800dbe8 <tcp_write_checks+0xe8>)
 800db1c:	f006 f9c4 	bl	8013ea8 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	7d1b      	ldrb	r3, [r3, #20]
 800db24:	2b04      	cmp	r3, #4
 800db26:	d00e      	beq.n	800db46 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 800db2c:	2b07      	cmp	r3, #7
 800db2e:	d00a      	beq.n	800db46 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 800db34:	2b02      	cmp	r3, #2
 800db36:	d006      	beq.n	800db46 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 800db3c:	2b03      	cmp	r3, #3
 800db3e:	d002      	beq.n	800db46 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 800db40:	f06f 030a 	mvn.w	r3, #10
 800db44:	e048      	b.n	800dbd8 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 800db46:	887b      	ldrh	r3, [r7, #2]
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d101      	bne.n	800db50 <tcp_write_checks+0x50>
    return ERR_OK;
 800db4c:	2300      	movs	r3, #0
 800db4e:	e043      	b.n	800dbd8 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800db56:	887a      	ldrh	r2, [r7, #2]
 800db58:	429a      	cmp	r2, r3
 800db5a:	d909      	bls.n	800db70 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	8b5b      	ldrh	r3, [r3, #26]
 800db60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800db64:	b29a      	uxth	r2, r3
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800db6a:	f04f 33ff 	mov.w	r3, #4294967295
 800db6e:	e033      	b.n	800dbd8 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800db76:	2b08      	cmp	r3, #8
 800db78:	d909      	bls.n	800db8e <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	8b5b      	ldrh	r3, [r3, #26]
 800db7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800db82:	b29a      	uxth	r2, r3
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800db88:	f04f 33ff 	mov.w	r3, #4294967295
 800db8c:	e024      	b.n	800dbd8 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800db94:	2b00      	cmp	r3, #0
 800db96:	d00f      	beq.n	800dbb8 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d11a      	bne.n	800dbd6 <tcp_write_checks+0xd6>
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d116      	bne.n	800dbd6 <tcp_write_checks+0xd6>
 800dba8:	4b0d      	ldr	r3, [pc, #52]	; (800dbe0 <tcp_write_checks+0xe0>)
 800dbaa:	f240 1255 	movw	r2, #341	; 0x155
 800dbae:	490f      	ldr	r1, [pc, #60]	; (800dbec <tcp_write_checks+0xec>)
 800dbb0:	480d      	ldr	r0, [pc, #52]	; (800dbe8 <tcp_write_checks+0xe8>)
 800dbb2:	f006 f979 	bl	8013ea8 <iprintf>
 800dbb6:	e00e      	b.n	800dbd6 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d103      	bne.n	800dbc8 <tcp_write_checks+0xc8>
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d006      	beq.n	800dbd6 <tcp_write_checks+0xd6>
 800dbc8:	4b05      	ldr	r3, [pc, #20]	; (800dbe0 <tcp_write_checks+0xe0>)
 800dbca:	f44f 72ac 	mov.w	r2, #344	; 0x158
 800dbce:	4908      	ldr	r1, [pc, #32]	; (800dbf0 <tcp_write_checks+0xf0>)
 800dbd0:	4805      	ldr	r0, [pc, #20]	; (800dbe8 <tcp_write_checks+0xe8>)
 800dbd2:	f006 f969 	bl	8013ea8 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 800dbd6:	2300      	movs	r3, #0
}
 800dbd8:	4618      	mov	r0, r3
 800dbda:	3708      	adds	r7, #8
 800dbdc:	46bd      	mov	sp, r7
 800dbde:	bd80      	pop	{r7, pc}
 800dbe0:	080165e4 	.word	0x080165e4
 800dbe4:	080166f4 	.word	0x080166f4
 800dbe8:	08016638 	.word	0x08016638
 800dbec:	08016714 	.word	0x08016714
 800dbf0:	08016750 	.word	0x08016750

0800dbf4 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 800dbf4:	b590      	push	{r4, r7, lr}
 800dbf6:	b09b      	sub	sp, #108	; 0x6c
 800dbf8:	af04      	add	r7, sp, #16
 800dbfa:	60f8      	str	r0, [r7, #12]
 800dbfc:	60b9      	str	r1, [r7, #8]
 800dbfe:	4611      	mov	r1, r2
 800dc00:	461a      	mov	r2, r3
 800dc02:	460b      	mov	r3, r1
 800dc04:	80fb      	strh	r3, [r7, #6]
 800dc06:	4613      	mov	r3, r2
 800dc08:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 800dc0a:	2300      	movs	r3, #0
 800dc0c:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800dc0e:	2300      	movs	r3, #0
 800dc10:	653b      	str	r3, [r7, #80]	; 0x50
 800dc12:	2300      	movs	r3, #0
 800dc14:	64fb      	str	r3, [r7, #76]	; 0x4c
 800dc16:	2300      	movs	r3, #0
 800dc18:	64bb      	str	r3, [r7, #72]	; 0x48
 800dc1a:	2300      	movs	r3, #0
 800dc1c:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 800dc1e:	2300      	movs	r3, #0
 800dc20:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 800dc24:	2300      	movs	r3, #0
 800dc26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 800dc2a:	2300      	movs	r3, #0
 800dc2c:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 800dc2e:	2300      	movs	r3, #0
 800dc30:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 800dc32:	2300      	movs	r3, #0
 800dc34:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d109      	bne.n	800dc50 <tcp_write+0x5c>
 800dc3c:	4ba4      	ldr	r3, [pc, #656]	; (800ded0 <tcp_write+0x2dc>)
 800dc3e:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 800dc42:	49a4      	ldr	r1, [pc, #656]	; (800ded4 <tcp_write+0x2e0>)
 800dc44:	48a4      	ldr	r0, [pc, #656]	; (800ded8 <tcp_write+0x2e4>)
 800dc46:	f006 f92f 	bl	8013ea8 <iprintf>
 800dc4a:	f06f 030f 	mvn.w	r3, #15
 800dc4e:	e32a      	b.n	800e2a6 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800dc50:	68fb      	ldr	r3, [r7, #12]
 800dc52:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dc56:	085b      	lsrs	r3, r3, #1
 800dc58:	b29a      	uxth	r2, r3
 800dc5a:	68fb      	ldr	r3, [r7, #12]
 800dc5c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dc5e:	4293      	cmp	r3, r2
 800dc60:	bf28      	it	cs
 800dc62:	4613      	movcs	r3, r2
 800dc64:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 800dc66:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d102      	bne.n	800dc72 <tcp_write+0x7e>
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dc70:	e000      	b.n	800dc74 <tcp_write+0x80>
 800dc72:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dc74:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800dc76:	68bb      	ldr	r3, [r7, #8]
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d109      	bne.n	800dc90 <tcp_write+0x9c>
 800dc7c:	4b94      	ldr	r3, [pc, #592]	; (800ded0 <tcp_write+0x2dc>)
 800dc7e:	f240 12ad 	movw	r2, #429	; 0x1ad
 800dc82:	4996      	ldr	r1, [pc, #600]	; (800dedc <tcp_write+0x2e8>)
 800dc84:	4894      	ldr	r0, [pc, #592]	; (800ded8 <tcp_write+0x2e4>)
 800dc86:	f006 f90f 	bl	8013ea8 <iprintf>
 800dc8a:	f06f 030f 	mvn.w	r3, #15
 800dc8e:	e30a      	b.n	800e2a6 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 800dc90:	88fb      	ldrh	r3, [r7, #6]
 800dc92:	4619      	mov	r1, r3
 800dc94:	68f8      	ldr	r0, [r7, #12]
 800dc96:	f7ff ff33 	bl	800db00 <tcp_write_checks>
 800dc9a:	4603      	mov	r3, r0
 800dc9c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 800dca0:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d002      	beq.n	800dcae <tcp_write+0xba>
    return err;
 800dca8:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800dcac:	e2fb      	b.n	800e2a6 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 800dcae:	68fb      	ldr	r3, [r7, #12]
 800dcb0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800dcb4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800dcb8:	2300      	movs	r3, #0
 800dcba:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	f000 80f6 	beq.w	800deb4 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800dcc8:	68fb      	ldr	r3, [r7, #12]
 800dcca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dccc:	653b      	str	r3, [r7, #80]	; 0x50
 800dcce:	e002      	b.n	800dcd6 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 800dcd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800dcd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dcd8:	681b      	ldr	r3, [r3, #0]
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d1f8      	bne.n	800dcd0 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800dcde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dce0:	7a9b      	ldrb	r3, [r3, #10]
 800dce2:	009b      	lsls	r3, r3, #2
 800dce4:	b29b      	uxth	r3, r3
 800dce6:	f003 0304 	and.w	r3, r3, #4
 800dcea:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800dcec:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800dcee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dcf0:	891b      	ldrh	r3, [r3, #8]
 800dcf2:	4619      	mov	r1, r3
 800dcf4:	8c3b      	ldrh	r3, [r7, #32]
 800dcf6:	440b      	add	r3, r1
 800dcf8:	429a      	cmp	r2, r3
 800dcfa:	da06      	bge.n	800dd0a <tcp_write+0x116>
 800dcfc:	4b74      	ldr	r3, [pc, #464]	; (800ded0 <tcp_write+0x2dc>)
 800dcfe:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800dd02:	4977      	ldr	r1, [pc, #476]	; (800dee0 <tcp_write+0x2ec>)
 800dd04:	4874      	ldr	r0, [pc, #464]	; (800ded8 <tcp_write+0x2e4>)
 800dd06:	f006 f8cf 	bl	8013ea8 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800dd0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dd0c:	891a      	ldrh	r2, [r3, #8]
 800dd0e:	8c3b      	ldrh	r3, [r7, #32]
 800dd10:	4413      	add	r3, r2
 800dd12:	b29b      	uxth	r3, r3
 800dd14:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800dd16:	1ad3      	subs	r3, r2, r3
 800dd18:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 800dd1a:	68fb      	ldr	r3, [r7, #12]
 800dd1c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800dd20:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 800dd22:	8a7b      	ldrh	r3, [r7, #18]
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	d026      	beq.n	800dd76 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800dd28:	8a7b      	ldrh	r3, [r7, #18]
 800dd2a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800dd2c:	429a      	cmp	r2, r3
 800dd2e:	d206      	bcs.n	800dd3e <tcp_write+0x14a>
 800dd30:	4b67      	ldr	r3, [pc, #412]	; (800ded0 <tcp_write+0x2dc>)
 800dd32:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 800dd36:	496b      	ldr	r1, [pc, #428]	; (800dee4 <tcp_write+0x2f0>)
 800dd38:	4867      	ldr	r0, [pc, #412]	; (800ded8 <tcp_write+0x2e4>)
 800dd3a:	f006 f8b5 	bl	8013ea8 <iprintf>
      seg = last_unsent;
 800dd3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dd40:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800dd42:	8a7b      	ldrh	r3, [r7, #18]
 800dd44:	88fa      	ldrh	r2, [r7, #6]
 800dd46:	4293      	cmp	r3, r2
 800dd48:	bf28      	it	cs
 800dd4a:	4613      	movcs	r3, r2
 800dd4c:	b29b      	uxth	r3, r3
 800dd4e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800dd50:	4293      	cmp	r3, r2
 800dd52:	bf28      	it	cs
 800dd54:	4613      	movcs	r3, r2
 800dd56:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 800dd58:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800dd5c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800dd5e:	4413      	add	r3, r2
 800dd60:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 800dd64:	8a7a      	ldrh	r2, [r7, #18]
 800dd66:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800dd68:	1ad3      	subs	r3, r2, r3
 800dd6a:	b29b      	uxth	r3, r3
 800dd6c:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 800dd6e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800dd70:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800dd72:	1ad3      	subs	r3, r2, r3
 800dd74:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800dd76:	8a7b      	ldrh	r3, [r7, #18]
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d00b      	beq.n	800dd94 <tcp_write+0x1a0>
 800dd7c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800dd80:	88fb      	ldrh	r3, [r7, #6]
 800dd82:	429a      	cmp	r2, r3
 800dd84:	d006      	beq.n	800dd94 <tcp_write+0x1a0>
 800dd86:	4b52      	ldr	r3, [pc, #328]	; (800ded0 <tcp_write+0x2dc>)
 800dd88:	f44f 7200 	mov.w	r2, #512	; 0x200
 800dd8c:	4956      	ldr	r1, [pc, #344]	; (800dee8 <tcp_write+0x2f4>)
 800dd8e:	4852      	ldr	r0, [pc, #328]	; (800ded8 <tcp_write+0x2e4>)
 800dd90:	f006 f88a 	bl	8013ea8 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800dd94:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800dd98:	88fb      	ldrh	r3, [r7, #6]
 800dd9a:	429a      	cmp	r2, r3
 800dd9c:	f080 8167 	bcs.w	800e06e <tcp_write+0x47a>
 800dda0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	f000 8163 	beq.w	800e06e <tcp_write+0x47a>
 800dda8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ddaa:	891b      	ldrh	r3, [r3, #8]
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	f000 815e 	beq.w	800e06e <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800ddb2:	88fa      	ldrh	r2, [r7, #6]
 800ddb4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ddb8:	1ad2      	subs	r2, r2, r3
 800ddba:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800ddbc:	4293      	cmp	r3, r2
 800ddbe:	bfa8      	it	ge
 800ddc0:	4613      	movge	r3, r2
 800ddc2:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 800ddc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ddc6:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800ddc8:	797b      	ldrb	r3, [r7, #5]
 800ddca:	f003 0301 	and.w	r3, r3, #1
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d027      	beq.n	800de22 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800ddd2:	f107 0012 	add.w	r0, r7, #18
 800ddd6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800ddd8:	8bf9      	ldrh	r1, [r7, #30]
 800ddda:	2301      	movs	r3, #1
 800dddc:	9302      	str	r3, [sp, #8]
 800ddde:	797b      	ldrb	r3, [r7, #5]
 800dde0:	9301      	str	r3, [sp, #4]
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	9300      	str	r3, [sp, #0]
 800dde6:	4603      	mov	r3, r0
 800dde8:	2000      	movs	r0, #0
 800ddea:	f7ff fe0f 	bl	800da0c <tcp_pbuf_prealloc>
 800ddee:	6578      	str	r0, [r7, #84]	; 0x54
 800ddf0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	f000 8225 	beq.w	800e242 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800ddf8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ddfa:	6858      	ldr	r0, [r3, #4]
 800ddfc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800de00:	68ba      	ldr	r2, [r7, #8]
 800de02:	4413      	add	r3, r2
 800de04:	8bfa      	ldrh	r2, [r7, #30]
 800de06:	4619      	mov	r1, r3
 800de08:	f005 ffa3 	bl	8013d52 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 800de0c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800de0e:	f7fb f9e1 	bl	80091d4 <pbuf_clen>
 800de12:	4603      	mov	r3, r0
 800de14:	461a      	mov	r2, r3
 800de16:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800de1a:	4413      	add	r3, r2
 800de1c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800de20:	e041      	b.n	800dea6 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800de22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800de24:	685b      	ldr	r3, [r3, #4]
 800de26:	637b      	str	r3, [r7, #52]	; 0x34
 800de28:	e002      	b.n	800de30 <tcp_write+0x23c>
 800de2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de2c:	681b      	ldr	r3, [r3, #0]
 800de2e:	637b      	str	r3, [r7, #52]	; 0x34
 800de30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	2b00      	cmp	r3, #0
 800de36:	d1f8      	bne.n	800de2a <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800de38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de3a:	7b1b      	ldrb	r3, [r3, #12]
 800de3c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800de40:	2b00      	cmp	r3, #0
 800de42:	d115      	bne.n	800de70 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800de44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de46:	685b      	ldr	r3, [r3, #4]
 800de48:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800de4a:	8952      	ldrh	r2, [r2, #10]
 800de4c:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800de4e:	68ba      	ldr	r2, [r7, #8]
 800de50:	429a      	cmp	r2, r3
 800de52:	d10d      	bne.n	800de70 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800de54:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d006      	beq.n	800de6a <tcp_write+0x276>
 800de5c:	4b1c      	ldr	r3, [pc, #112]	; (800ded0 <tcp_write+0x2dc>)
 800de5e:	f240 2231 	movw	r2, #561	; 0x231
 800de62:	4922      	ldr	r1, [pc, #136]	; (800deec <tcp_write+0x2f8>)
 800de64:	481c      	ldr	r0, [pc, #112]	; (800ded8 <tcp_write+0x2e4>)
 800de66:	f006 f81f 	bl	8013ea8 <iprintf>
          extendlen = seglen;
 800de6a:	8bfb      	ldrh	r3, [r7, #30]
 800de6c:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800de6e:	e01a      	b.n	800dea6 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800de70:	8bfb      	ldrh	r3, [r7, #30]
 800de72:	2201      	movs	r2, #1
 800de74:	4619      	mov	r1, r3
 800de76:	2000      	movs	r0, #0
 800de78:	f7fa fe3a 	bl	8008af0 <pbuf_alloc>
 800de7c:	6578      	str	r0, [r7, #84]	; 0x54
 800de7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800de80:	2b00      	cmp	r3, #0
 800de82:	f000 81e0 	beq.w	800e246 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800de86:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800de8a:	68ba      	ldr	r2, [r7, #8]
 800de8c:	441a      	add	r2, r3
 800de8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800de90:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 800de92:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800de94:	f7fb f99e 	bl	80091d4 <pbuf_clen>
 800de98:	4603      	mov	r3, r0
 800de9a:	461a      	mov	r2, r3
 800de9c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800dea0:	4413      	add	r3, r2
 800dea2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 800dea6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800deaa:	8bfb      	ldrh	r3, [r7, #30]
 800deac:	4413      	add	r3, r2
 800deae:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800deb2:	e0dc      	b.n	800e06e <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800deba:	2b00      	cmp	r3, #0
 800debc:	f000 80d7 	beq.w	800e06e <tcp_write+0x47a>
 800dec0:	4b03      	ldr	r3, [pc, #12]	; (800ded0 <tcp_write+0x2dc>)
 800dec2:	f240 224a 	movw	r2, #586	; 0x24a
 800dec6:	490a      	ldr	r1, [pc, #40]	; (800def0 <tcp_write+0x2fc>)
 800dec8:	4803      	ldr	r0, [pc, #12]	; (800ded8 <tcp_write+0x2e4>)
 800deca:	f005 ffed 	bl	8013ea8 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 800dece:	e0ce      	b.n	800e06e <tcp_write+0x47a>
 800ded0:	080165e4 	.word	0x080165e4
 800ded4:	08016784 	.word	0x08016784
 800ded8:	08016638 	.word	0x08016638
 800dedc:	0801679c 	.word	0x0801679c
 800dee0:	080167d0 	.word	0x080167d0
 800dee4:	080167e8 	.word	0x080167e8
 800dee8:	08016808 	.word	0x08016808
 800deec:	08016828 	.word	0x08016828
 800def0:	08016854 	.word	0x08016854
    struct pbuf *p;
    u16_t left = len - pos;
 800def4:	88fa      	ldrh	r2, [r7, #6]
 800def6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800defa:	1ad3      	subs	r3, r2, r3
 800defc:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 800defe:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800df02:	b29b      	uxth	r3, r3
 800df04:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800df06:	1ad3      	subs	r3, r2, r3
 800df08:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 800df0a:	8b7a      	ldrh	r2, [r7, #26]
 800df0c:	8bbb      	ldrh	r3, [r7, #28]
 800df0e:	4293      	cmp	r3, r2
 800df10:	bf28      	it	cs
 800df12:	4613      	movcs	r3, r2
 800df14:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800df16:	797b      	ldrb	r3, [r7, #5]
 800df18:	f003 0301 	and.w	r3, r3, #1
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	d036      	beq.n	800df8e <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800df20:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800df24:	b29a      	uxth	r2, r3
 800df26:	8b3b      	ldrh	r3, [r7, #24]
 800df28:	4413      	add	r3, r2
 800df2a:	b299      	uxth	r1, r3
 800df2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800df2e:	2b00      	cmp	r3, #0
 800df30:	bf0c      	ite	eq
 800df32:	2301      	moveq	r3, #1
 800df34:	2300      	movne	r3, #0
 800df36:	b2db      	uxtb	r3, r3
 800df38:	f107 0012 	add.w	r0, r7, #18
 800df3c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800df3e:	9302      	str	r3, [sp, #8]
 800df40:	797b      	ldrb	r3, [r7, #5]
 800df42:	9301      	str	r3, [sp, #4]
 800df44:	68fb      	ldr	r3, [r7, #12]
 800df46:	9300      	str	r3, [sp, #0]
 800df48:	4603      	mov	r3, r0
 800df4a:	2036      	movs	r0, #54	; 0x36
 800df4c:	f7ff fd5e 	bl	800da0c <tcp_pbuf_prealloc>
 800df50:	6338      	str	r0, [r7, #48]	; 0x30
 800df52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df54:	2b00      	cmp	r3, #0
 800df56:	f000 8178 	beq.w	800e24a <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800df5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df5c:	895b      	ldrh	r3, [r3, #10]
 800df5e:	8b3a      	ldrh	r2, [r7, #24]
 800df60:	429a      	cmp	r2, r3
 800df62:	d906      	bls.n	800df72 <tcp_write+0x37e>
 800df64:	4b8c      	ldr	r3, [pc, #560]	; (800e198 <tcp_write+0x5a4>)
 800df66:	f240 2266 	movw	r2, #614	; 0x266
 800df6a:	498c      	ldr	r1, [pc, #560]	; (800e19c <tcp_write+0x5a8>)
 800df6c:	488c      	ldr	r0, [pc, #560]	; (800e1a0 <tcp_write+0x5ac>)
 800df6e:	f005 ff9b 	bl	8013ea8 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800df72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df74:	685a      	ldr	r2, [r3, #4]
 800df76:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800df7a:	18d0      	adds	r0, r2, r3
 800df7c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800df80:	68ba      	ldr	r2, [r7, #8]
 800df82:	4413      	add	r3, r2
 800df84:	8b3a      	ldrh	r2, [r7, #24]
 800df86:	4619      	mov	r1, r3
 800df88:	f005 fee3 	bl	8013d52 <memcpy>
 800df8c:	e02f      	b.n	800dfee <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800df8e:	8a7b      	ldrh	r3, [r7, #18]
 800df90:	2b00      	cmp	r3, #0
 800df92:	d006      	beq.n	800dfa2 <tcp_write+0x3ae>
 800df94:	4b80      	ldr	r3, [pc, #512]	; (800e198 <tcp_write+0x5a4>)
 800df96:	f240 2271 	movw	r2, #625	; 0x271
 800df9a:	4982      	ldr	r1, [pc, #520]	; (800e1a4 <tcp_write+0x5b0>)
 800df9c:	4880      	ldr	r0, [pc, #512]	; (800e1a0 <tcp_write+0x5ac>)
 800df9e:	f005 ff83 	bl	8013ea8 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800dfa2:	8b3b      	ldrh	r3, [r7, #24]
 800dfa4:	2201      	movs	r2, #1
 800dfa6:	4619      	mov	r1, r3
 800dfa8:	2036      	movs	r0, #54	; 0x36
 800dfaa:	f7fa fda1 	bl	8008af0 <pbuf_alloc>
 800dfae:	6178      	str	r0, [r7, #20]
 800dfb0:	697b      	ldr	r3, [r7, #20]
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	f000 814b 	beq.w	800e24e <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800dfb8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800dfbc:	68ba      	ldr	r2, [r7, #8]
 800dfbe:	441a      	add	r2, r3
 800dfc0:	697b      	ldr	r3, [r7, #20]
 800dfc2:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800dfc4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800dfc8:	b29b      	uxth	r3, r3
 800dfca:	f44f 7220 	mov.w	r2, #640	; 0x280
 800dfce:	4619      	mov	r1, r3
 800dfd0:	2036      	movs	r0, #54	; 0x36
 800dfd2:	f7fa fd8d 	bl	8008af0 <pbuf_alloc>
 800dfd6:	6338      	str	r0, [r7, #48]	; 0x30
 800dfd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d103      	bne.n	800dfe6 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 800dfde:	6978      	ldr	r0, [r7, #20]
 800dfe0:	f7fb f86a 	bl	80090b8 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 800dfe4:	e136      	b.n	800e254 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 800dfe6:	6979      	ldr	r1, [r7, #20]
 800dfe8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dfea:	f7fb f933 	bl	8009254 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 800dfee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dff0:	f7fb f8f0 	bl	80091d4 <pbuf_clen>
 800dff4:	4603      	mov	r3, r0
 800dff6:	461a      	mov	r2, r3
 800dff8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800dffc:	4413      	add	r3, r2
 800dffe:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800e002:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800e006:	2b09      	cmp	r3, #9
 800e008:	d903      	bls.n	800e012 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 800e00a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e00c:	f7fb f854 	bl	80090b8 <pbuf_free>
      goto memerr;
 800e010:	e120      	b.n	800e254 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800e012:	68fb      	ldr	r3, [r7, #12]
 800e014:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e016:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e01a:	441a      	add	r2, r3
 800e01c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e020:	9300      	str	r3, [sp, #0]
 800e022:	4613      	mov	r3, r2
 800e024:	2200      	movs	r2, #0
 800e026:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e028:	68f8      	ldr	r0, [r7, #12]
 800e02a:	f7ff fc51 	bl	800d8d0 <tcp_create_segment>
 800e02e:	64f8      	str	r0, [r7, #76]	; 0x4c
 800e030:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e032:	2b00      	cmp	r3, #0
 800e034:	f000 810d 	beq.w	800e252 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 800e038:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	d102      	bne.n	800e044 <tcp_write+0x450>
      queue = seg;
 800e03e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e040:	647b      	str	r3, [r7, #68]	; 0x44
 800e042:	e00c      	b.n	800e05e <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800e044:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e046:	2b00      	cmp	r3, #0
 800e048:	d106      	bne.n	800e058 <tcp_write+0x464>
 800e04a:	4b53      	ldr	r3, [pc, #332]	; (800e198 <tcp_write+0x5a4>)
 800e04c:	f240 22ab 	movw	r2, #683	; 0x2ab
 800e050:	4955      	ldr	r1, [pc, #340]	; (800e1a8 <tcp_write+0x5b4>)
 800e052:	4853      	ldr	r0, [pc, #332]	; (800e1a0 <tcp_write+0x5ac>)
 800e054:	f005 ff28 	bl	8013ea8 <iprintf>
      prev_seg->next = seg;
 800e058:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e05a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e05c:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 800e05e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e060:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 800e062:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e066:	8b3b      	ldrh	r3, [r7, #24]
 800e068:	4413      	add	r3, r2
 800e06a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 800e06e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e072:	88fb      	ldrh	r3, [r7, #6]
 800e074:	429a      	cmp	r2, r3
 800e076:	f4ff af3d 	bcc.w	800def4 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 800e07a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d02c      	beq.n	800e0da <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 800e080:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e082:	685b      	ldr	r3, [r3, #4]
 800e084:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e086:	e01e      	b.n	800e0c6 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 800e088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e08a:	891a      	ldrh	r2, [r3, #8]
 800e08c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e08e:	4413      	add	r3, r2
 800e090:	b29a      	uxth	r2, r3
 800e092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e094:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 800e096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e098:	681b      	ldr	r3, [r3, #0]
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	d110      	bne.n	800e0c0 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800e09e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0a0:	685b      	ldr	r3, [r3, #4]
 800e0a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e0a4:	8952      	ldrh	r2, [r2, #10]
 800e0a6:	4413      	add	r3, r2
 800e0a8:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800e0aa:	68b9      	ldr	r1, [r7, #8]
 800e0ac:	4618      	mov	r0, r3
 800e0ae:	f005 fe50 	bl	8013d52 <memcpy>
        p->len += oversize_used;
 800e0b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0b4:	895a      	ldrh	r2, [r3, #10]
 800e0b6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e0b8:	4413      	add	r3, r2
 800e0ba:	b29a      	uxth	r2, r3
 800e0bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0be:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800e0c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e0c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d1dd      	bne.n	800e088 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 800e0cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e0ce:	891a      	ldrh	r2, [r3, #8]
 800e0d0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e0d2:	4413      	add	r3, r2
 800e0d4:	b29a      	uxth	r2, r3
 800e0d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e0d8:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 800e0da:	8a7a      	ldrh	r2, [r7, #18]
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 800e0e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d018      	beq.n	800e11a <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800e0e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d106      	bne.n	800e0fc <tcp_write+0x508>
 800e0ee:	4b2a      	ldr	r3, [pc, #168]	; (800e198 <tcp_write+0x5a4>)
 800e0f0:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 800e0f4:	492d      	ldr	r1, [pc, #180]	; (800e1ac <tcp_write+0x5b8>)
 800e0f6:	482a      	ldr	r0, [pc, #168]	; (800e1a0 <tcp_write+0x5ac>)
 800e0f8:	f005 fed6 	bl	8013ea8 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 800e0fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e0fe:	685b      	ldr	r3, [r3, #4]
 800e100:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e102:	4618      	mov	r0, r3
 800e104:	f7fb f8a6 	bl	8009254 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800e108:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e10a:	891a      	ldrh	r2, [r3, #8]
 800e10c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e10e:	891b      	ldrh	r3, [r3, #8]
 800e110:	4413      	add	r3, r2
 800e112:	b29a      	uxth	r2, r3
 800e114:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e116:	811a      	strh	r2, [r3, #8]
 800e118:	e037      	b.n	800e18a <tcp_write+0x596>
  } else if (extendlen > 0) {
 800e11a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d034      	beq.n	800e18a <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800e120:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e122:	2b00      	cmp	r3, #0
 800e124:	d003      	beq.n	800e12e <tcp_write+0x53a>
 800e126:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e128:	685b      	ldr	r3, [r3, #4]
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	d106      	bne.n	800e13c <tcp_write+0x548>
 800e12e:	4b1a      	ldr	r3, [pc, #104]	; (800e198 <tcp_write+0x5a4>)
 800e130:	f240 22e6 	movw	r2, #742	; 0x2e6
 800e134:	491e      	ldr	r1, [pc, #120]	; (800e1b0 <tcp_write+0x5bc>)
 800e136:	481a      	ldr	r0, [pc, #104]	; (800e1a0 <tcp_write+0x5ac>)
 800e138:	f005 feb6 	bl	8013ea8 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800e13c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e13e:	685b      	ldr	r3, [r3, #4]
 800e140:	62bb      	str	r3, [r7, #40]	; 0x28
 800e142:	e009      	b.n	800e158 <tcp_write+0x564>
      p->tot_len += extendlen;
 800e144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e146:	891a      	ldrh	r2, [r3, #8]
 800e148:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e14a:	4413      	add	r3, r2
 800e14c:	b29a      	uxth	r2, r3
 800e14e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e150:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800e152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e154:	681b      	ldr	r3, [r3, #0]
 800e156:	62bb      	str	r3, [r7, #40]	; 0x28
 800e158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e15a:	681b      	ldr	r3, [r3, #0]
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	d1f1      	bne.n	800e144 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 800e160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e162:	891a      	ldrh	r2, [r3, #8]
 800e164:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e166:	4413      	add	r3, r2
 800e168:	b29a      	uxth	r2, r3
 800e16a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e16c:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 800e16e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e170:	895a      	ldrh	r2, [r3, #10]
 800e172:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e174:	4413      	add	r3, r2
 800e176:	b29a      	uxth	r2, r3
 800e178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e17a:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800e17c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e17e:	891a      	ldrh	r2, [r3, #8]
 800e180:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e182:	4413      	add	r3, r2
 800e184:	b29a      	uxth	r2, r3
 800e186:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e188:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 800e18a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d111      	bne.n	800e1b4 <tcp_write+0x5c0>
    pcb->unsent = queue;
 800e190:	68fb      	ldr	r3, [r7, #12]
 800e192:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e194:	66da      	str	r2, [r3, #108]	; 0x6c
 800e196:	e010      	b.n	800e1ba <tcp_write+0x5c6>
 800e198:	080165e4 	.word	0x080165e4
 800e19c:	08016884 	.word	0x08016884
 800e1a0:	08016638 	.word	0x08016638
 800e1a4:	080168c4 	.word	0x080168c4
 800e1a8:	080168d4 	.word	0x080168d4
 800e1ac:	080168e8 	.word	0x080168e8
 800e1b0:	08016920 	.word	0x08016920
  } else {
    last_unsent->next = queue;
 800e1b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e1b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e1b8:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 800e1ba:	68fb      	ldr	r3, [r7, #12]
 800e1bc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e1be:	88fb      	ldrh	r3, [r7, #6]
 800e1c0:	441a      	add	r2, r3
 800e1c2:	68fb      	ldr	r3, [r7, #12]
 800e1c4:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 800e1c6:	68fb      	ldr	r3, [r7, #12]
 800e1c8:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800e1cc:	88fb      	ldrh	r3, [r7, #6]
 800e1ce:	1ad3      	subs	r3, r2, r3
 800e1d0:	b29a      	uxth	r2, r3
 800e1d2:	68fb      	ldr	r3, [r7, #12]
 800e1d4:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 800e1d8:	68fb      	ldr	r3, [r7, #12]
 800e1da:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800e1de:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800e1e2:	68fb      	ldr	r3, [r7, #12]
 800e1e4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	d00e      	beq.n	800e20a <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 800e1ec:	68fb      	ldr	r3, [r7, #12]
 800e1ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	d10a      	bne.n	800e20a <tcp_write+0x616>
 800e1f4:	68fb      	ldr	r3, [r7, #12]
 800e1f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d106      	bne.n	800e20a <tcp_write+0x616>
 800e1fc:	4b2c      	ldr	r3, [pc, #176]	; (800e2b0 <tcp_write+0x6bc>)
 800e1fe:	f240 3212 	movw	r2, #786	; 0x312
 800e202:	492c      	ldr	r1, [pc, #176]	; (800e2b4 <tcp_write+0x6c0>)
 800e204:	482c      	ldr	r0, [pc, #176]	; (800e2b8 <tcp_write+0x6c4>)
 800e206:	f005 fe4f 	bl	8013ea8 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800e20a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	d016      	beq.n	800e23e <tcp_write+0x64a>
 800e210:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e212:	68db      	ldr	r3, [r3, #12]
 800e214:	2b00      	cmp	r3, #0
 800e216:	d012      	beq.n	800e23e <tcp_write+0x64a>
 800e218:	797b      	ldrb	r3, [r7, #5]
 800e21a:	f003 0302 	and.w	r3, r3, #2
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d10d      	bne.n	800e23e <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800e222:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e224:	68db      	ldr	r3, [r3, #12]
 800e226:	899b      	ldrh	r3, [r3, #12]
 800e228:	b29c      	uxth	r4, r3
 800e22a:	2008      	movs	r0, #8
 800e22c:	f7f9 fb98 	bl	8007960 <lwip_htons>
 800e230:	4603      	mov	r3, r0
 800e232:	461a      	mov	r2, r3
 800e234:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e236:	68db      	ldr	r3, [r3, #12]
 800e238:	4322      	orrs	r2, r4
 800e23a:	b292      	uxth	r2, r2
 800e23c:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 800e23e:	2300      	movs	r3, #0
 800e240:	e031      	b.n	800e2a6 <tcp_write+0x6b2>
          goto memerr;
 800e242:	bf00      	nop
 800e244:	e006      	b.n	800e254 <tcp_write+0x660>
            goto memerr;
 800e246:	bf00      	nop
 800e248:	e004      	b.n	800e254 <tcp_write+0x660>
        goto memerr;
 800e24a:	bf00      	nop
 800e24c:	e002      	b.n	800e254 <tcp_write+0x660>
        goto memerr;
 800e24e:	bf00      	nop
 800e250:	e000      	b.n	800e254 <tcp_write+0x660>
      goto memerr;
 800e252:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800e254:	68fb      	ldr	r3, [r7, #12]
 800e256:	8b5b      	ldrh	r3, [r3, #26]
 800e258:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e25c:	b29a      	uxth	r2, r3
 800e25e:	68fb      	ldr	r3, [r7, #12]
 800e260:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 800e262:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e264:	2b00      	cmp	r3, #0
 800e266:	d002      	beq.n	800e26e <tcp_write+0x67a>
    pbuf_free(concat_p);
 800e268:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800e26a:	f7fa ff25 	bl	80090b8 <pbuf_free>
  }
  if (queue != NULL) {
 800e26e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e270:	2b00      	cmp	r3, #0
 800e272:	d002      	beq.n	800e27a <tcp_write+0x686>
    tcp_segs_free(queue);
 800e274:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800e276:	f7fc fb53 	bl	800a920 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 800e27a:	68fb      	ldr	r3, [r7, #12]
 800e27c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e280:	2b00      	cmp	r3, #0
 800e282:	d00e      	beq.n	800e2a2 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800e284:	68fb      	ldr	r3, [r7, #12]
 800e286:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d10a      	bne.n	800e2a2 <tcp_write+0x6ae>
 800e28c:	68fb      	ldr	r3, [r7, #12]
 800e28e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e290:	2b00      	cmp	r3, #0
 800e292:	d106      	bne.n	800e2a2 <tcp_write+0x6ae>
 800e294:	4b06      	ldr	r3, [pc, #24]	; (800e2b0 <tcp_write+0x6bc>)
 800e296:	f240 3227 	movw	r2, #807	; 0x327
 800e29a:	4906      	ldr	r1, [pc, #24]	; (800e2b4 <tcp_write+0x6c0>)
 800e29c:	4806      	ldr	r0, [pc, #24]	; (800e2b8 <tcp_write+0x6c4>)
 800e29e:	f005 fe03 	bl	8013ea8 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 800e2a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e2a6:	4618      	mov	r0, r3
 800e2a8:	375c      	adds	r7, #92	; 0x5c
 800e2aa:	46bd      	mov	sp, r7
 800e2ac:	bd90      	pop	{r4, r7, pc}
 800e2ae:	bf00      	nop
 800e2b0:	080165e4 	.word	0x080165e4
 800e2b4:	08016958 	.word	0x08016958
 800e2b8:	08016638 	.word	0x08016638

0800e2bc <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800e2bc:	b590      	push	{r4, r7, lr}
 800e2be:	b08b      	sub	sp, #44	; 0x2c
 800e2c0:	af02      	add	r7, sp, #8
 800e2c2:	6078      	str	r0, [r7, #4]
 800e2c4:	460b      	mov	r3, r1
 800e2c6:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800e2c8:	2300      	movs	r3, #0
 800e2ca:	61fb      	str	r3, [r7, #28]
 800e2cc:	2300      	movs	r3, #0
 800e2ce:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800e2d0:	2300      	movs	r3, #0
 800e2d2:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	d106      	bne.n	800e2e8 <tcp_split_unsent_seg+0x2c>
 800e2da:	4b95      	ldr	r3, [pc, #596]	; (800e530 <tcp_split_unsent_seg+0x274>)
 800e2dc:	f240 324b 	movw	r2, #843	; 0x34b
 800e2e0:	4994      	ldr	r1, [pc, #592]	; (800e534 <tcp_split_unsent_seg+0x278>)
 800e2e2:	4895      	ldr	r0, [pc, #596]	; (800e538 <tcp_split_unsent_seg+0x27c>)
 800e2e4:	f005 fde0 	bl	8013ea8 <iprintf>

  useg = pcb->unsent;
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e2ec:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800e2ee:	697b      	ldr	r3, [r7, #20]
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d102      	bne.n	800e2fa <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800e2f4:	f04f 33ff 	mov.w	r3, #4294967295
 800e2f8:	e116      	b.n	800e528 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800e2fa:	887b      	ldrh	r3, [r7, #2]
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	d109      	bne.n	800e314 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800e300:	4b8b      	ldr	r3, [pc, #556]	; (800e530 <tcp_split_unsent_seg+0x274>)
 800e302:	f240 3253 	movw	r2, #851	; 0x353
 800e306:	498d      	ldr	r1, [pc, #564]	; (800e53c <tcp_split_unsent_seg+0x280>)
 800e308:	488b      	ldr	r0, [pc, #556]	; (800e538 <tcp_split_unsent_seg+0x27c>)
 800e30a:	f005 fdcd 	bl	8013ea8 <iprintf>
    return ERR_VAL;
 800e30e:	f06f 0305 	mvn.w	r3, #5
 800e312:	e109      	b.n	800e528 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800e314:	697b      	ldr	r3, [r7, #20]
 800e316:	891b      	ldrh	r3, [r3, #8]
 800e318:	887a      	ldrh	r2, [r7, #2]
 800e31a:	429a      	cmp	r2, r3
 800e31c:	d301      	bcc.n	800e322 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800e31e:	2300      	movs	r3, #0
 800e320:	e102      	b.n	800e528 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e326:	887a      	ldrh	r2, [r7, #2]
 800e328:	429a      	cmp	r2, r3
 800e32a:	d906      	bls.n	800e33a <tcp_split_unsent_seg+0x7e>
 800e32c:	4b80      	ldr	r3, [pc, #512]	; (800e530 <tcp_split_unsent_seg+0x274>)
 800e32e:	f240 325b 	movw	r2, #859	; 0x35b
 800e332:	4983      	ldr	r1, [pc, #524]	; (800e540 <tcp_split_unsent_seg+0x284>)
 800e334:	4880      	ldr	r0, [pc, #512]	; (800e538 <tcp_split_unsent_seg+0x27c>)
 800e336:	f005 fdb7 	bl	8013ea8 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800e33a:	697b      	ldr	r3, [r7, #20]
 800e33c:	891b      	ldrh	r3, [r3, #8]
 800e33e:	2b00      	cmp	r3, #0
 800e340:	d106      	bne.n	800e350 <tcp_split_unsent_seg+0x94>
 800e342:	4b7b      	ldr	r3, [pc, #492]	; (800e530 <tcp_split_unsent_seg+0x274>)
 800e344:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800e348:	497e      	ldr	r1, [pc, #504]	; (800e544 <tcp_split_unsent_seg+0x288>)
 800e34a:	487b      	ldr	r0, [pc, #492]	; (800e538 <tcp_split_unsent_seg+0x27c>)
 800e34c:	f005 fdac 	bl	8013ea8 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800e350:	697b      	ldr	r3, [r7, #20]
 800e352:	7a9b      	ldrb	r3, [r3, #10]
 800e354:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800e356:	7bfb      	ldrb	r3, [r7, #15]
 800e358:	009b      	lsls	r3, r3, #2
 800e35a:	b2db      	uxtb	r3, r3
 800e35c:	f003 0304 	and.w	r3, r3, #4
 800e360:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800e362:	697b      	ldr	r3, [r7, #20]
 800e364:	891a      	ldrh	r2, [r3, #8]
 800e366:	887b      	ldrh	r3, [r7, #2]
 800e368:	1ad3      	subs	r3, r2, r3
 800e36a:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800e36c:	7bbb      	ldrb	r3, [r7, #14]
 800e36e:	b29a      	uxth	r2, r3
 800e370:	89bb      	ldrh	r3, [r7, #12]
 800e372:	4413      	add	r3, r2
 800e374:	b29b      	uxth	r3, r3
 800e376:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e37a:	4619      	mov	r1, r3
 800e37c:	2036      	movs	r0, #54	; 0x36
 800e37e:	f7fa fbb7 	bl	8008af0 <pbuf_alloc>
 800e382:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800e384:	693b      	ldr	r3, [r7, #16]
 800e386:	2b00      	cmp	r3, #0
 800e388:	f000 80b7 	beq.w	800e4fa <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800e38c:	697b      	ldr	r3, [r7, #20]
 800e38e:	685b      	ldr	r3, [r3, #4]
 800e390:	891a      	ldrh	r2, [r3, #8]
 800e392:	697b      	ldr	r3, [r7, #20]
 800e394:	891b      	ldrh	r3, [r3, #8]
 800e396:	1ad3      	subs	r3, r2, r3
 800e398:	b29a      	uxth	r2, r3
 800e39a:	887b      	ldrh	r3, [r7, #2]
 800e39c:	4413      	add	r3, r2
 800e39e:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800e3a0:	697b      	ldr	r3, [r7, #20]
 800e3a2:	6858      	ldr	r0, [r3, #4]
 800e3a4:	693b      	ldr	r3, [r7, #16]
 800e3a6:	685a      	ldr	r2, [r3, #4]
 800e3a8:	7bbb      	ldrb	r3, [r7, #14]
 800e3aa:	18d1      	adds	r1, r2, r3
 800e3ac:	897b      	ldrh	r3, [r7, #10]
 800e3ae:	89ba      	ldrh	r2, [r7, #12]
 800e3b0:	f7fb f888 	bl	80094c4 <pbuf_copy_partial>
 800e3b4:	4603      	mov	r3, r0
 800e3b6:	461a      	mov	r2, r3
 800e3b8:	89bb      	ldrh	r3, [r7, #12]
 800e3ba:	4293      	cmp	r3, r2
 800e3bc:	f040 809f 	bne.w	800e4fe <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800e3c0:	697b      	ldr	r3, [r7, #20]
 800e3c2:	68db      	ldr	r3, [r3, #12]
 800e3c4:	899b      	ldrh	r3, [r3, #12]
 800e3c6:	b29b      	uxth	r3, r3
 800e3c8:	4618      	mov	r0, r3
 800e3ca:	f7f9 fac9 	bl	8007960 <lwip_htons>
 800e3ce:	4603      	mov	r3, r0
 800e3d0:	b2db      	uxtb	r3, r3
 800e3d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e3d6:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800e3d8:	2300      	movs	r3, #0
 800e3da:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800e3dc:	7efb      	ldrb	r3, [r7, #27]
 800e3de:	f003 0308 	and.w	r3, r3, #8
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	d007      	beq.n	800e3f6 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800e3e6:	7efb      	ldrb	r3, [r7, #27]
 800e3e8:	f023 0308 	bic.w	r3, r3, #8
 800e3ec:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800e3ee:	7ebb      	ldrb	r3, [r7, #26]
 800e3f0:	f043 0308 	orr.w	r3, r3, #8
 800e3f4:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800e3f6:	7efb      	ldrb	r3, [r7, #27]
 800e3f8:	f003 0301 	and.w	r3, r3, #1
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d007      	beq.n	800e410 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800e400:	7efb      	ldrb	r3, [r7, #27]
 800e402:	f023 0301 	bic.w	r3, r3, #1
 800e406:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800e408:	7ebb      	ldrb	r3, [r7, #26]
 800e40a:	f043 0301 	orr.w	r3, r3, #1
 800e40e:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800e410:	697b      	ldr	r3, [r7, #20]
 800e412:	68db      	ldr	r3, [r3, #12]
 800e414:	685b      	ldr	r3, [r3, #4]
 800e416:	4618      	mov	r0, r3
 800e418:	f7f9 fab7 	bl	800798a <lwip_htonl>
 800e41c:	4602      	mov	r2, r0
 800e41e:	887b      	ldrh	r3, [r7, #2]
 800e420:	18d1      	adds	r1, r2, r3
 800e422:	7eba      	ldrb	r2, [r7, #26]
 800e424:	7bfb      	ldrb	r3, [r7, #15]
 800e426:	9300      	str	r3, [sp, #0]
 800e428:	460b      	mov	r3, r1
 800e42a:	6939      	ldr	r1, [r7, #16]
 800e42c:	6878      	ldr	r0, [r7, #4]
 800e42e:	f7ff fa4f 	bl	800d8d0 <tcp_create_segment>
 800e432:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800e434:	69fb      	ldr	r3, [r7, #28]
 800e436:	2b00      	cmp	r3, #0
 800e438:	d063      	beq.n	800e502 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800e43a:	697b      	ldr	r3, [r7, #20]
 800e43c:	685b      	ldr	r3, [r3, #4]
 800e43e:	4618      	mov	r0, r3
 800e440:	f7fa fec8 	bl	80091d4 <pbuf_clen>
 800e444:	4603      	mov	r3, r0
 800e446:	461a      	mov	r2, r3
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e44e:	1a9b      	subs	r3, r3, r2
 800e450:	b29a      	uxth	r2, r3
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800e458:	697b      	ldr	r3, [r7, #20]
 800e45a:	6858      	ldr	r0, [r3, #4]
 800e45c:	697b      	ldr	r3, [r7, #20]
 800e45e:	685b      	ldr	r3, [r3, #4]
 800e460:	891a      	ldrh	r2, [r3, #8]
 800e462:	89bb      	ldrh	r3, [r7, #12]
 800e464:	1ad3      	subs	r3, r2, r3
 800e466:	b29b      	uxth	r3, r3
 800e468:	4619      	mov	r1, r3
 800e46a:	f7fa fc9f 	bl	8008dac <pbuf_realloc>
  useg->len -= remainder;
 800e46e:	697b      	ldr	r3, [r7, #20]
 800e470:	891a      	ldrh	r2, [r3, #8]
 800e472:	89bb      	ldrh	r3, [r7, #12]
 800e474:	1ad3      	subs	r3, r2, r3
 800e476:	b29a      	uxth	r2, r3
 800e478:	697b      	ldr	r3, [r7, #20]
 800e47a:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800e47c:	697b      	ldr	r3, [r7, #20]
 800e47e:	68db      	ldr	r3, [r3, #12]
 800e480:	899b      	ldrh	r3, [r3, #12]
 800e482:	b29c      	uxth	r4, r3
 800e484:	7efb      	ldrb	r3, [r7, #27]
 800e486:	b29b      	uxth	r3, r3
 800e488:	4618      	mov	r0, r3
 800e48a:	f7f9 fa69 	bl	8007960 <lwip_htons>
 800e48e:	4603      	mov	r3, r0
 800e490:	461a      	mov	r2, r3
 800e492:	697b      	ldr	r3, [r7, #20]
 800e494:	68db      	ldr	r3, [r3, #12]
 800e496:	4322      	orrs	r2, r4
 800e498:	b292      	uxth	r2, r2
 800e49a:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800e49c:	697b      	ldr	r3, [r7, #20]
 800e49e:	685b      	ldr	r3, [r3, #4]
 800e4a0:	4618      	mov	r0, r3
 800e4a2:	f7fa fe97 	bl	80091d4 <pbuf_clen>
 800e4a6:	4603      	mov	r3, r0
 800e4a8:	461a      	mov	r2, r3
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e4b0:	4413      	add	r3, r2
 800e4b2:	b29a      	uxth	r2, r3
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800e4ba:	69fb      	ldr	r3, [r7, #28]
 800e4bc:	685b      	ldr	r3, [r3, #4]
 800e4be:	4618      	mov	r0, r3
 800e4c0:	f7fa fe88 	bl	80091d4 <pbuf_clen>
 800e4c4:	4603      	mov	r3, r0
 800e4c6:	461a      	mov	r2, r3
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e4ce:	4413      	add	r3, r2
 800e4d0:	b29a      	uxth	r2, r3
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800e4d8:	697b      	ldr	r3, [r7, #20]
 800e4da:	681a      	ldr	r2, [r3, #0]
 800e4dc:	69fb      	ldr	r3, [r7, #28]
 800e4de:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800e4e0:	697b      	ldr	r3, [r7, #20]
 800e4e2:	69fa      	ldr	r2, [r7, #28]
 800e4e4:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800e4e6:	69fb      	ldr	r3, [r7, #28]
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d103      	bne.n	800e4f6 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	2200      	movs	r2, #0
 800e4f2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800e4f6:	2300      	movs	r3, #0
 800e4f8:	e016      	b.n	800e528 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800e4fa:	bf00      	nop
 800e4fc:	e002      	b.n	800e504 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800e4fe:	bf00      	nop
 800e500:	e000      	b.n	800e504 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800e502:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800e504:	69fb      	ldr	r3, [r7, #28]
 800e506:	2b00      	cmp	r3, #0
 800e508:	d006      	beq.n	800e518 <tcp_split_unsent_seg+0x25c>
 800e50a:	4b09      	ldr	r3, [pc, #36]	; (800e530 <tcp_split_unsent_seg+0x274>)
 800e50c:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800e510:	490d      	ldr	r1, [pc, #52]	; (800e548 <tcp_split_unsent_seg+0x28c>)
 800e512:	4809      	ldr	r0, [pc, #36]	; (800e538 <tcp_split_unsent_seg+0x27c>)
 800e514:	f005 fcc8 	bl	8013ea8 <iprintf>
  if (p != NULL) {
 800e518:	693b      	ldr	r3, [r7, #16]
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d002      	beq.n	800e524 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800e51e:	6938      	ldr	r0, [r7, #16]
 800e520:	f7fa fdca 	bl	80090b8 <pbuf_free>
  }

  return ERR_MEM;
 800e524:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e528:	4618      	mov	r0, r3
 800e52a:	3724      	adds	r7, #36	; 0x24
 800e52c:	46bd      	mov	sp, r7
 800e52e:	bd90      	pop	{r4, r7, pc}
 800e530:	080165e4 	.word	0x080165e4
 800e534:	08016978 	.word	0x08016978
 800e538:	08016638 	.word	0x08016638
 800e53c:	0801699c 	.word	0x0801699c
 800e540:	080169c0 	.word	0x080169c0
 800e544:	080169d0 	.word	0x080169d0
 800e548:	080169e0 	.word	0x080169e0

0800e54c <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800e54c:	b590      	push	{r4, r7, lr}
 800e54e:	b085      	sub	sp, #20
 800e550:	af00      	add	r7, sp, #0
 800e552:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	2b00      	cmp	r3, #0
 800e558:	d106      	bne.n	800e568 <tcp_send_fin+0x1c>
 800e55a:	4b21      	ldr	r3, [pc, #132]	; (800e5e0 <tcp_send_fin+0x94>)
 800e55c:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800e560:	4920      	ldr	r1, [pc, #128]	; (800e5e4 <tcp_send_fin+0x98>)
 800e562:	4821      	ldr	r0, [pc, #132]	; (800e5e8 <tcp_send_fin+0x9c>)
 800e564:	f005 fca0 	bl	8013ea8 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e56c:	2b00      	cmp	r3, #0
 800e56e:	d02e      	beq.n	800e5ce <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e574:	60fb      	str	r3, [r7, #12]
 800e576:	e002      	b.n	800e57e <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800e578:	68fb      	ldr	r3, [r7, #12]
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800e57e:	68fb      	ldr	r3, [r7, #12]
 800e580:	681b      	ldr	r3, [r3, #0]
 800e582:	2b00      	cmp	r3, #0
 800e584:	d1f8      	bne.n	800e578 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800e586:	68fb      	ldr	r3, [r7, #12]
 800e588:	68db      	ldr	r3, [r3, #12]
 800e58a:	899b      	ldrh	r3, [r3, #12]
 800e58c:	b29b      	uxth	r3, r3
 800e58e:	4618      	mov	r0, r3
 800e590:	f7f9 f9e6 	bl	8007960 <lwip_htons>
 800e594:	4603      	mov	r3, r0
 800e596:	b2db      	uxtb	r3, r3
 800e598:	f003 0307 	and.w	r3, r3, #7
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	d116      	bne.n	800e5ce <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800e5a0:	68fb      	ldr	r3, [r7, #12]
 800e5a2:	68db      	ldr	r3, [r3, #12]
 800e5a4:	899b      	ldrh	r3, [r3, #12]
 800e5a6:	b29c      	uxth	r4, r3
 800e5a8:	2001      	movs	r0, #1
 800e5aa:	f7f9 f9d9 	bl	8007960 <lwip_htons>
 800e5ae:	4603      	mov	r3, r0
 800e5b0:	461a      	mov	r2, r3
 800e5b2:	68fb      	ldr	r3, [r7, #12]
 800e5b4:	68db      	ldr	r3, [r3, #12]
 800e5b6:	4322      	orrs	r2, r4
 800e5b8:	b292      	uxth	r2, r2
 800e5ba:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	8b5b      	ldrh	r3, [r3, #26]
 800e5c0:	f043 0320 	orr.w	r3, r3, #32
 800e5c4:	b29a      	uxth	r2, r3
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800e5ca:	2300      	movs	r3, #0
 800e5cc:	e004      	b.n	800e5d8 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800e5ce:	2101      	movs	r1, #1
 800e5d0:	6878      	ldr	r0, [r7, #4]
 800e5d2:	f000 f80b 	bl	800e5ec <tcp_enqueue_flags>
 800e5d6:	4603      	mov	r3, r0
}
 800e5d8:	4618      	mov	r0, r3
 800e5da:	3714      	adds	r7, #20
 800e5dc:	46bd      	mov	sp, r7
 800e5de:	bd90      	pop	{r4, r7, pc}
 800e5e0:	080165e4 	.word	0x080165e4
 800e5e4:	080169ec 	.word	0x080169ec
 800e5e8:	08016638 	.word	0x08016638

0800e5ec <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800e5ec:	b580      	push	{r7, lr}
 800e5ee:	b08a      	sub	sp, #40	; 0x28
 800e5f0:	af02      	add	r7, sp, #8
 800e5f2:	6078      	str	r0, [r7, #4]
 800e5f4:	460b      	mov	r3, r1
 800e5f6:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800e5f8:	2300      	movs	r3, #0
 800e5fa:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800e5fc:	2300      	movs	r3, #0
 800e5fe:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800e600:	78fb      	ldrb	r3, [r7, #3]
 800e602:	f003 0303 	and.w	r3, r3, #3
 800e606:	2b00      	cmp	r3, #0
 800e608:	d106      	bne.n	800e618 <tcp_enqueue_flags+0x2c>
 800e60a:	4b67      	ldr	r3, [pc, #412]	; (800e7a8 <tcp_enqueue_flags+0x1bc>)
 800e60c:	f240 4211 	movw	r2, #1041	; 0x411
 800e610:	4966      	ldr	r1, [pc, #408]	; (800e7ac <tcp_enqueue_flags+0x1c0>)
 800e612:	4867      	ldr	r0, [pc, #412]	; (800e7b0 <tcp_enqueue_flags+0x1c4>)
 800e614:	f005 fc48 	bl	8013ea8 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	d106      	bne.n	800e62c <tcp_enqueue_flags+0x40>
 800e61e:	4b62      	ldr	r3, [pc, #392]	; (800e7a8 <tcp_enqueue_flags+0x1bc>)
 800e620:	f240 4213 	movw	r2, #1043	; 0x413
 800e624:	4963      	ldr	r1, [pc, #396]	; (800e7b4 <tcp_enqueue_flags+0x1c8>)
 800e626:	4862      	ldr	r0, [pc, #392]	; (800e7b0 <tcp_enqueue_flags+0x1c4>)
 800e628:	f005 fc3e 	bl	8013ea8 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800e62c:	78fb      	ldrb	r3, [r7, #3]
 800e62e:	f003 0302 	and.w	r3, r3, #2
 800e632:	2b00      	cmp	r3, #0
 800e634:	d001      	beq.n	800e63a <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800e636:	2301      	movs	r3, #1
 800e638:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800e63a:	7ffb      	ldrb	r3, [r7, #31]
 800e63c:	009b      	lsls	r3, r3, #2
 800e63e:	b2db      	uxtb	r3, r3
 800e640:	f003 0304 	and.w	r3, r3, #4
 800e644:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800e646:	7dfb      	ldrb	r3, [r7, #23]
 800e648:	b29b      	uxth	r3, r3
 800e64a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e64e:	4619      	mov	r1, r3
 800e650:	2036      	movs	r0, #54	; 0x36
 800e652:	f7fa fa4d 	bl	8008af0 <pbuf_alloc>
 800e656:	6138      	str	r0, [r7, #16]
 800e658:	693b      	ldr	r3, [r7, #16]
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	d109      	bne.n	800e672 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	8b5b      	ldrh	r3, [r3, #26]
 800e662:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e666:	b29a      	uxth	r2, r3
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800e66c:	f04f 33ff 	mov.w	r3, #4294967295
 800e670:	e095      	b.n	800e79e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800e672:	693b      	ldr	r3, [r7, #16]
 800e674:	895a      	ldrh	r2, [r3, #10]
 800e676:	7dfb      	ldrb	r3, [r7, #23]
 800e678:	b29b      	uxth	r3, r3
 800e67a:	429a      	cmp	r2, r3
 800e67c:	d206      	bcs.n	800e68c <tcp_enqueue_flags+0xa0>
 800e67e:	4b4a      	ldr	r3, [pc, #296]	; (800e7a8 <tcp_enqueue_flags+0x1bc>)
 800e680:	f240 4239 	movw	r2, #1081	; 0x439
 800e684:	494c      	ldr	r1, [pc, #304]	; (800e7b8 <tcp_enqueue_flags+0x1cc>)
 800e686:	484a      	ldr	r0, [pc, #296]	; (800e7b0 <tcp_enqueue_flags+0x1c4>)
 800e688:	f005 fc0e 	bl	8013ea8 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800e690:	78fa      	ldrb	r2, [r7, #3]
 800e692:	7ffb      	ldrb	r3, [r7, #31]
 800e694:	9300      	str	r3, [sp, #0]
 800e696:	460b      	mov	r3, r1
 800e698:	6939      	ldr	r1, [r7, #16]
 800e69a:	6878      	ldr	r0, [r7, #4]
 800e69c:	f7ff f918 	bl	800d8d0 <tcp_create_segment>
 800e6a0:	60f8      	str	r0, [r7, #12]
 800e6a2:	68fb      	ldr	r3, [r7, #12]
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	d109      	bne.n	800e6bc <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	8b5b      	ldrh	r3, [r3, #26]
 800e6ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e6b0:	b29a      	uxth	r2, r3
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800e6b6:	f04f 33ff 	mov.w	r3, #4294967295
 800e6ba:	e070      	b.n	800e79e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800e6bc:	68fb      	ldr	r3, [r7, #12]
 800e6be:	68db      	ldr	r3, [r3, #12]
 800e6c0:	f003 0303 	and.w	r3, r3, #3
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	d006      	beq.n	800e6d6 <tcp_enqueue_flags+0xea>
 800e6c8:	4b37      	ldr	r3, [pc, #220]	; (800e7a8 <tcp_enqueue_flags+0x1bc>)
 800e6ca:	f240 4242 	movw	r2, #1090	; 0x442
 800e6ce:	493b      	ldr	r1, [pc, #236]	; (800e7bc <tcp_enqueue_flags+0x1d0>)
 800e6d0:	4837      	ldr	r0, [pc, #220]	; (800e7b0 <tcp_enqueue_flags+0x1c4>)
 800e6d2:	f005 fbe9 	bl	8013ea8 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800e6d6:	68fb      	ldr	r3, [r7, #12]
 800e6d8:	891b      	ldrh	r3, [r3, #8]
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	d006      	beq.n	800e6ec <tcp_enqueue_flags+0x100>
 800e6de:	4b32      	ldr	r3, [pc, #200]	; (800e7a8 <tcp_enqueue_flags+0x1bc>)
 800e6e0:	f240 4243 	movw	r2, #1091	; 0x443
 800e6e4:	4936      	ldr	r1, [pc, #216]	; (800e7c0 <tcp_enqueue_flags+0x1d4>)
 800e6e6:	4832      	ldr	r0, [pc, #200]	; (800e7b0 <tcp_enqueue_flags+0x1c4>)
 800e6e8:	f005 fbde 	bl	8013ea8 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	d103      	bne.n	800e6fc <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	68fa      	ldr	r2, [r7, #12]
 800e6f8:	66da      	str	r2, [r3, #108]	; 0x6c
 800e6fa:	e00d      	b.n	800e718 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e700:	61bb      	str	r3, [r7, #24]
 800e702:	e002      	b.n	800e70a <tcp_enqueue_flags+0x11e>
 800e704:	69bb      	ldr	r3, [r7, #24]
 800e706:	681b      	ldr	r3, [r3, #0]
 800e708:	61bb      	str	r3, [r7, #24]
 800e70a:	69bb      	ldr	r3, [r7, #24]
 800e70c:	681b      	ldr	r3, [r3, #0]
 800e70e:	2b00      	cmp	r3, #0
 800e710:	d1f8      	bne.n	800e704 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800e712:	69bb      	ldr	r3, [r7, #24]
 800e714:	68fa      	ldr	r2, [r7, #12]
 800e716:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	2200      	movs	r2, #0
 800e71c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800e720:	78fb      	ldrb	r3, [r7, #3]
 800e722:	f003 0302 	and.w	r3, r3, #2
 800e726:	2b00      	cmp	r3, #0
 800e728:	d104      	bne.n	800e734 <tcp_enqueue_flags+0x148>
 800e72a:	78fb      	ldrb	r3, [r7, #3]
 800e72c:	f003 0301 	and.w	r3, r3, #1
 800e730:	2b00      	cmp	r3, #0
 800e732:	d004      	beq.n	800e73e <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e738:	1c5a      	adds	r2, r3, #1
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800e73e:	78fb      	ldrb	r3, [r7, #3]
 800e740:	f003 0301 	and.w	r3, r3, #1
 800e744:	2b00      	cmp	r3, #0
 800e746:	d006      	beq.n	800e756 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	8b5b      	ldrh	r3, [r3, #26]
 800e74c:	f043 0320 	orr.w	r3, r3, #32
 800e750:	b29a      	uxth	r2, r3
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800e756:	68fb      	ldr	r3, [r7, #12]
 800e758:	685b      	ldr	r3, [r3, #4]
 800e75a:	4618      	mov	r0, r3
 800e75c:	f7fa fd3a 	bl	80091d4 <pbuf_clen>
 800e760:	4603      	mov	r3, r0
 800e762:	461a      	mov	r2, r3
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e76a:	4413      	add	r3, r2
 800e76c:	b29a      	uxth	r2, r3
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d00e      	beq.n	800e79c <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e782:	2b00      	cmp	r3, #0
 800e784:	d10a      	bne.n	800e79c <tcp_enqueue_flags+0x1b0>
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	d106      	bne.n	800e79c <tcp_enqueue_flags+0x1b0>
 800e78e:	4b06      	ldr	r3, [pc, #24]	; (800e7a8 <tcp_enqueue_flags+0x1bc>)
 800e790:	f240 4265 	movw	r2, #1125	; 0x465
 800e794:	490b      	ldr	r1, [pc, #44]	; (800e7c4 <tcp_enqueue_flags+0x1d8>)
 800e796:	4806      	ldr	r0, [pc, #24]	; (800e7b0 <tcp_enqueue_flags+0x1c4>)
 800e798:	f005 fb86 	bl	8013ea8 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800e79c:	2300      	movs	r3, #0
}
 800e79e:	4618      	mov	r0, r3
 800e7a0:	3720      	adds	r7, #32
 800e7a2:	46bd      	mov	sp, r7
 800e7a4:	bd80      	pop	{r7, pc}
 800e7a6:	bf00      	nop
 800e7a8:	080165e4 	.word	0x080165e4
 800e7ac:	08016a08 	.word	0x08016a08
 800e7b0:	08016638 	.word	0x08016638
 800e7b4:	08016a60 	.word	0x08016a60
 800e7b8:	08016a80 	.word	0x08016a80
 800e7bc:	08016abc 	.word	0x08016abc
 800e7c0:	08016ad4 	.word	0x08016ad4
 800e7c4:	08016b00 	.word	0x08016b00

0800e7c8 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800e7c8:	b5b0      	push	{r4, r5, r7, lr}
 800e7ca:	b08a      	sub	sp, #40	; 0x28
 800e7cc:	af00      	add	r7, sp, #0
 800e7ce:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	d106      	bne.n	800e7e4 <tcp_output+0x1c>
 800e7d6:	4b8a      	ldr	r3, [pc, #552]	; (800ea00 <tcp_output+0x238>)
 800e7d8:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800e7dc:	4989      	ldr	r1, [pc, #548]	; (800ea04 <tcp_output+0x23c>)
 800e7de:	488a      	ldr	r0, [pc, #552]	; (800ea08 <tcp_output+0x240>)
 800e7e0:	f005 fb62 	bl	8013ea8 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	7d1b      	ldrb	r3, [r3, #20]
 800e7e8:	2b01      	cmp	r3, #1
 800e7ea:	d106      	bne.n	800e7fa <tcp_output+0x32>
 800e7ec:	4b84      	ldr	r3, [pc, #528]	; (800ea00 <tcp_output+0x238>)
 800e7ee:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800e7f2:	4986      	ldr	r1, [pc, #536]	; (800ea0c <tcp_output+0x244>)
 800e7f4:	4884      	ldr	r0, [pc, #528]	; (800ea08 <tcp_output+0x240>)
 800e7f6:	f005 fb57 	bl	8013ea8 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800e7fa:	4b85      	ldr	r3, [pc, #532]	; (800ea10 <tcp_output+0x248>)
 800e7fc:	681b      	ldr	r3, [r3, #0]
 800e7fe:	687a      	ldr	r2, [r7, #4]
 800e800:	429a      	cmp	r2, r3
 800e802:	d101      	bne.n	800e808 <tcp_output+0x40>
    return ERR_OK;
 800e804:	2300      	movs	r3, #0
 800e806:	e1ce      	b.n	800eba6 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e814:	4293      	cmp	r3, r2
 800e816:	bf28      	it	cs
 800e818:	4613      	movcs	r3, r2
 800e81a:	b29b      	uxth	r3, r3
 800e81c:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e822:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800e824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e826:	2b00      	cmp	r3, #0
 800e828:	d10b      	bne.n	800e842 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	8b5b      	ldrh	r3, [r3, #26]
 800e82e:	f003 0302 	and.w	r3, r3, #2
 800e832:	2b00      	cmp	r3, #0
 800e834:	f000 81aa 	beq.w	800eb8c <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800e838:	6878      	ldr	r0, [r7, #4]
 800e83a:	f000 fdcb 	bl	800f3d4 <tcp_send_empty_ack>
 800e83e:	4603      	mov	r3, r0
 800e840:	e1b1      	b.n	800eba6 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800e842:	6879      	ldr	r1, [r7, #4]
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	3304      	adds	r3, #4
 800e848:	461a      	mov	r2, r3
 800e84a:	6878      	ldr	r0, [r7, #4]
 800e84c:	f7ff f824 	bl	800d898 <tcp_route>
 800e850:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800e852:	697b      	ldr	r3, [r7, #20]
 800e854:	2b00      	cmp	r3, #0
 800e856:	d102      	bne.n	800e85e <tcp_output+0x96>
    return ERR_RTE;
 800e858:	f06f 0303 	mvn.w	r3, #3
 800e85c:	e1a3      	b.n	800eba6 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	2b00      	cmp	r3, #0
 800e862:	d003      	beq.n	800e86c <tcp_output+0xa4>
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	681b      	ldr	r3, [r3, #0]
 800e868:	2b00      	cmp	r3, #0
 800e86a:	d111      	bne.n	800e890 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800e86c:	697b      	ldr	r3, [r7, #20]
 800e86e:	2b00      	cmp	r3, #0
 800e870:	d002      	beq.n	800e878 <tcp_output+0xb0>
 800e872:	697b      	ldr	r3, [r7, #20]
 800e874:	3304      	adds	r3, #4
 800e876:	e000      	b.n	800e87a <tcp_output+0xb2>
 800e878:	2300      	movs	r3, #0
 800e87a:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800e87c:	693b      	ldr	r3, [r7, #16]
 800e87e:	2b00      	cmp	r3, #0
 800e880:	d102      	bne.n	800e888 <tcp_output+0xc0>
      return ERR_RTE;
 800e882:	f06f 0303 	mvn.w	r3, #3
 800e886:	e18e      	b.n	800eba6 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800e888:	693b      	ldr	r3, [r7, #16]
 800e88a:	681a      	ldr	r2, [r3, #0]
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800e890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e892:	68db      	ldr	r3, [r3, #12]
 800e894:	685b      	ldr	r3, [r3, #4]
 800e896:	4618      	mov	r0, r3
 800e898:	f7f9 f877 	bl	800798a <lwip_htonl>
 800e89c:	4602      	mov	r2, r0
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e8a2:	1ad3      	subs	r3, r2, r3
 800e8a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e8a6:	8912      	ldrh	r2, [r2, #8]
 800e8a8:	4413      	add	r3, r2
 800e8aa:	69ba      	ldr	r2, [r7, #24]
 800e8ac:	429a      	cmp	r2, r3
 800e8ae:	d227      	bcs.n	800e900 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e8b6:	461a      	mov	r2, r3
 800e8b8:	69bb      	ldr	r3, [r7, #24]
 800e8ba:	4293      	cmp	r3, r2
 800e8bc:	d114      	bne.n	800e8e8 <tcp_output+0x120>
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	d110      	bne.n	800e8e8 <tcp_output+0x120>
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d10b      	bne.n	800e8e8 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	2200      	movs	r2, #0
 800e8d4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	2201      	movs	r2, #1
 800e8dc:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	2200      	movs	r2, #0
 800e8e4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	8b5b      	ldrh	r3, [r3, #26]
 800e8ec:	f003 0302 	and.w	r3, r3, #2
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	f000 814d 	beq.w	800eb90 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800e8f6:	6878      	ldr	r0, [r7, #4]
 800e8f8:	f000 fd6c 	bl	800f3d4 <tcp_send_empty_ack>
 800e8fc:	4603      	mov	r3, r0
 800e8fe:	e152      	b.n	800eba6 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	2200      	movs	r2, #0
 800e904:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e90c:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800e90e:	6a3b      	ldr	r3, [r7, #32]
 800e910:	2b00      	cmp	r3, #0
 800e912:	f000 811c 	beq.w	800eb4e <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800e916:	e002      	b.n	800e91e <tcp_output+0x156>
 800e918:	6a3b      	ldr	r3, [r7, #32]
 800e91a:	681b      	ldr	r3, [r3, #0]
 800e91c:	623b      	str	r3, [r7, #32]
 800e91e:	6a3b      	ldr	r3, [r7, #32]
 800e920:	681b      	ldr	r3, [r3, #0]
 800e922:	2b00      	cmp	r3, #0
 800e924:	d1f8      	bne.n	800e918 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800e926:	e112      	b.n	800eb4e <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800e928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e92a:	68db      	ldr	r3, [r3, #12]
 800e92c:	899b      	ldrh	r3, [r3, #12]
 800e92e:	b29b      	uxth	r3, r3
 800e930:	4618      	mov	r0, r3
 800e932:	f7f9 f815 	bl	8007960 <lwip_htons>
 800e936:	4603      	mov	r3, r0
 800e938:	b2db      	uxtb	r3, r3
 800e93a:	f003 0304 	and.w	r3, r3, #4
 800e93e:	2b00      	cmp	r3, #0
 800e940:	d006      	beq.n	800e950 <tcp_output+0x188>
 800e942:	4b2f      	ldr	r3, [pc, #188]	; (800ea00 <tcp_output+0x238>)
 800e944:	f240 5236 	movw	r2, #1334	; 0x536
 800e948:	4932      	ldr	r1, [pc, #200]	; (800ea14 <tcp_output+0x24c>)
 800e94a:	482f      	ldr	r0, [pc, #188]	; (800ea08 <tcp_output+0x240>)
 800e94c:	f005 faac 	bl	8013ea8 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e954:	2b00      	cmp	r3, #0
 800e956:	d01f      	beq.n	800e998 <tcp_output+0x1d0>
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	8b5b      	ldrh	r3, [r3, #26]
 800e95c:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800e960:	2b00      	cmp	r3, #0
 800e962:	d119      	bne.n	800e998 <tcp_output+0x1d0>
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e968:	2b00      	cmp	r3, #0
 800e96a:	d00b      	beq.n	800e984 <tcp_output+0x1bc>
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e970:	681b      	ldr	r3, [r3, #0]
 800e972:	2b00      	cmp	r3, #0
 800e974:	d110      	bne.n	800e998 <tcp_output+0x1d0>
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e97a:	891a      	ldrh	r2, [r3, #8]
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e980:	429a      	cmp	r2, r3
 800e982:	d209      	bcs.n	800e998 <tcp_output+0x1d0>
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d004      	beq.n	800e998 <tcp_output+0x1d0>
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e994:	2b08      	cmp	r3, #8
 800e996:	d901      	bls.n	800e99c <tcp_output+0x1d4>
 800e998:	2301      	movs	r3, #1
 800e99a:	e000      	b.n	800e99e <tcp_output+0x1d6>
 800e99c:	2300      	movs	r3, #0
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	d106      	bne.n	800e9b0 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	8b5b      	ldrh	r3, [r3, #26]
 800e9a6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	f000 80e4 	beq.w	800eb78 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	7d1b      	ldrb	r3, [r3, #20]
 800e9b4:	2b02      	cmp	r3, #2
 800e9b6:	d00d      	beq.n	800e9d4 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800e9b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9ba:	68db      	ldr	r3, [r3, #12]
 800e9bc:	899b      	ldrh	r3, [r3, #12]
 800e9be:	b29c      	uxth	r4, r3
 800e9c0:	2010      	movs	r0, #16
 800e9c2:	f7f8 ffcd 	bl	8007960 <lwip_htons>
 800e9c6:	4603      	mov	r3, r0
 800e9c8:	461a      	mov	r2, r3
 800e9ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9cc:	68db      	ldr	r3, [r3, #12]
 800e9ce:	4322      	orrs	r2, r4
 800e9d0:	b292      	uxth	r2, r2
 800e9d2:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800e9d4:	697a      	ldr	r2, [r7, #20]
 800e9d6:	6879      	ldr	r1, [r7, #4]
 800e9d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e9da:	f000 f909 	bl	800ebf0 <tcp_output_segment>
 800e9de:	4603      	mov	r3, r0
 800e9e0:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800e9e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	d016      	beq.n	800ea18 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	8b5b      	ldrh	r3, [r3, #26]
 800e9ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e9f2:	b29a      	uxth	r2, r3
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	835a      	strh	r2, [r3, #26]
      return err;
 800e9f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e9fc:	e0d3      	b.n	800eba6 <tcp_output+0x3de>
 800e9fe:	bf00      	nop
 800ea00:	080165e4 	.word	0x080165e4
 800ea04:	08016b28 	.word	0x08016b28
 800ea08:	08016638 	.word	0x08016638
 800ea0c:	08016b40 	.word	0x08016b40
 800ea10:	20008260 	.word	0x20008260
 800ea14:	08016b68 	.word	0x08016b68
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800ea18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea1a:	681a      	ldr	r2, [r3, #0]
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	7d1b      	ldrb	r3, [r3, #20]
 800ea24:	2b02      	cmp	r3, #2
 800ea26:	d006      	beq.n	800ea36 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	8b5b      	ldrh	r3, [r3, #26]
 800ea2c:	f023 0303 	bic.w	r3, r3, #3
 800ea30:	b29a      	uxth	r2, r3
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800ea36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea38:	68db      	ldr	r3, [r3, #12]
 800ea3a:	685b      	ldr	r3, [r3, #4]
 800ea3c:	4618      	mov	r0, r3
 800ea3e:	f7f8 ffa4 	bl	800798a <lwip_htonl>
 800ea42:	4604      	mov	r4, r0
 800ea44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea46:	891b      	ldrh	r3, [r3, #8]
 800ea48:	461d      	mov	r5, r3
 800ea4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea4c:	68db      	ldr	r3, [r3, #12]
 800ea4e:	899b      	ldrh	r3, [r3, #12]
 800ea50:	b29b      	uxth	r3, r3
 800ea52:	4618      	mov	r0, r3
 800ea54:	f7f8 ff84 	bl	8007960 <lwip_htons>
 800ea58:	4603      	mov	r3, r0
 800ea5a:	b2db      	uxtb	r3, r3
 800ea5c:	f003 0303 	and.w	r3, r3, #3
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	d001      	beq.n	800ea68 <tcp_output+0x2a0>
 800ea64:	2301      	movs	r3, #1
 800ea66:	e000      	b.n	800ea6a <tcp_output+0x2a2>
 800ea68:	2300      	movs	r3, #0
 800ea6a:	442b      	add	r3, r5
 800ea6c:	4423      	add	r3, r4
 800ea6e:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ea74:	68bb      	ldr	r3, [r7, #8]
 800ea76:	1ad3      	subs	r3, r2, r3
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	da02      	bge.n	800ea82 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	68ba      	ldr	r2, [r7, #8]
 800ea80:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800ea82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea84:	891b      	ldrh	r3, [r3, #8]
 800ea86:	461c      	mov	r4, r3
 800ea88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea8a:	68db      	ldr	r3, [r3, #12]
 800ea8c:	899b      	ldrh	r3, [r3, #12]
 800ea8e:	b29b      	uxth	r3, r3
 800ea90:	4618      	mov	r0, r3
 800ea92:	f7f8 ff65 	bl	8007960 <lwip_htons>
 800ea96:	4603      	mov	r3, r0
 800ea98:	b2db      	uxtb	r3, r3
 800ea9a:	f003 0303 	and.w	r3, r3, #3
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	d001      	beq.n	800eaa6 <tcp_output+0x2de>
 800eaa2:	2301      	movs	r3, #1
 800eaa4:	e000      	b.n	800eaa8 <tcp_output+0x2e0>
 800eaa6:	2300      	movs	r3, #0
 800eaa8:	4423      	add	r3, r4
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	d049      	beq.n	800eb42 <tcp_output+0x37a>
      seg->next = NULL;
 800eaae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eab0:	2200      	movs	r2, #0
 800eab2:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	d105      	bne.n	800eac8 <tcp_output+0x300>
        pcb->unacked = seg;
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eac0:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800eac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eac4:	623b      	str	r3, [r7, #32]
 800eac6:	e03f      	b.n	800eb48 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800eac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eaca:	68db      	ldr	r3, [r3, #12]
 800eacc:	685b      	ldr	r3, [r3, #4]
 800eace:	4618      	mov	r0, r3
 800ead0:	f7f8 ff5b 	bl	800798a <lwip_htonl>
 800ead4:	4604      	mov	r4, r0
 800ead6:	6a3b      	ldr	r3, [r7, #32]
 800ead8:	68db      	ldr	r3, [r3, #12]
 800eada:	685b      	ldr	r3, [r3, #4]
 800eadc:	4618      	mov	r0, r3
 800eade:	f7f8 ff54 	bl	800798a <lwip_htonl>
 800eae2:	4603      	mov	r3, r0
 800eae4:	1ae3      	subs	r3, r4, r3
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	da24      	bge.n	800eb34 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	3370      	adds	r3, #112	; 0x70
 800eaee:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800eaf0:	e002      	b.n	800eaf8 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800eaf2:	69fb      	ldr	r3, [r7, #28]
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800eaf8:	69fb      	ldr	r3, [r7, #28]
 800eafa:	681b      	ldr	r3, [r3, #0]
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	d011      	beq.n	800eb24 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800eb00:	69fb      	ldr	r3, [r7, #28]
 800eb02:	681b      	ldr	r3, [r3, #0]
 800eb04:	68db      	ldr	r3, [r3, #12]
 800eb06:	685b      	ldr	r3, [r3, #4]
 800eb08:	4618      	mov	r0, r3
 800eb0a:	f7f8 ff3e 	bl	800798a <lwip_htonl>
 800eb0e:	4604      	mov	r4, r0
 800eb10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb12:	68db      	ldr	r3, [r3, #12]
 800eb14:	685b      	ldr	r3, [r3, #4]
 800eb16:	4618      	mov	r0, r3
 800eb18:	f7f8 ff37 	bl	800798a <lwip_htonl>
 800eb1c:	4603      	mov	r3, r0
 800eb1e:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	dbe6      	blt.n	800eaf2 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800eb24:	69fb      	ldr	r3, [r7, #28]
 800eb26:	681a      	ldr	r2, [r3, #0]
 800eb28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb2a:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800eb2c:	69fb      	ldr	r3, [r7, #28]
 800eb2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eb30:	601a      	str	r2, [r3, #0]
 800eb32:	e009      	b.n	800eb48 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800eb34:	6a3b      	ldr	r3, [r7, #32]
 800eb36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eb38:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800eb3a:	6a3b      	ldr	r3, [r7, #32]
 800eb3c:	681b      	ldr	r3, [r3, #0]
 800eb3e:	623b      	str	r3, [r7, #32]
 800eb40:	e002      	b.n	800eb48 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800eb42:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800eb44:	f7fb ff01 	bl	800a94a <tcp_seg_free>
    }
    seg = pcb->unsent;
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eb4c:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800eb4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	d012      	beq.n	800eb7a <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800eb54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb56:	68db      	ldr	r3, [r3, #12]
 800eb58:	685b      	ldr	r3, [r3, #4]
 800eb5a:	4618      	mov	r0, r3
 800eb5c:	f7f8 ff15 	bl	800798a <lwip_htonl>
 800eb60:	4602      	mov	r2, r0
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eb66:	1ad3      	subs	r3, r2, r3
 800eb68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eb6a:	8912      	ldrh	r2, [r2, #8]
 800eb6c:	4413      	add	r3, r2
  while (seg != NULL &&
 800eb6e:	69ba      	ldr	r2, [r7, #24]
 800eb70:	429a      	cmp	r2, r3
 800eb72:	f4bf aed9 	bcs.w	800e928 <tcp_output+0x160>
 800eb76:	e000      	b.n	800eb7a <tcp_output+0x3b2>
      break;
 800eb78:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d108      	bne.n	800eb94 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	2200      	movs	r2, #0
 800eb86:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800eb8a:	e004      	b.n	800eb96 <tcp_output+0x3ce>
    goto output_done;
 800eb8c:	bf00      	nop
 800eb8e:	e002      	b.n	800eb96 <tcp_output+0x3ce>
    goto output_done;
 800eb90:	bf00      	nop
 800eb92:	e000      	b.n	800eb96 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800eb94:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	8b5b      	ldrh	r3, [r3, #26]
 800eb9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800eb9e:	b29a      	uxth	r2, r3
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800eba4:	2300      	movs	r3, #0
}
 800eba6:	4618      	mov	r0, r3
 800eba8:	3728      	adds	r7, #40	; 0x28
 800ebaa:	46bd      	mov	sp, r7
 800ebac:	bdb0      	pop	{r4, r5, r7, pc}
 800ebae:	bf00      	nop

0800ebb0 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800ebb0:	b580      	push	{r7, lr}
 800ebb2:	b082      	sub	sp, #8
 800ebb4:	af00      	add	r7, sp, #0
 800ebb6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d106      	bne.n	800ebcc <tcp_output_segment_busy+0x1c>
 800ebbe:	4b09      	ldr	r3, [pc, #36]	; (800ebe4 <tcp_output_segment_busy+0x34>)
 800ebc0:	f240 529a 	movw	r2, #1434	; 0x59a
 800ebc4:	4908      	ldr	r1, [pc, #32]	; (800ebe8 <tcp_output_segment_busy+0x38>)
 800ebc6:	4809      	ldr	r0, [pc, #36]	; (800ebec <tcp_output_segment_busy+0x3c>)
 800ebc8:	f005 f96e 	bl	8013ea8 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	685b      	ldr	r3, [r3, #4]
 800ebd0:	7b9b      	ldrb	r3, [r3, #14]
 800ebd2:	2b01      	cmp	r3, #1
 800ebd4:	d001      	beq.n	800ebda <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800ebd6:	2301      	movs	r3, #1
 800ebd8:	e000      	b.n	800ebdc <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800ebda:	2300      	movs	r3, #0
}
 800ebdc:	4618      	mov	r0, r3
 800ebde:	3708      	adds	r7, #8
 800ebe0:	46bd      	mov	sp, r7
 800ebe2:	bd80      	pop	{r7, pc}
 800ebe4:	080165e4 	.word	0x080165e4
 800ebe8:	08016b80 	.word	0x08016b80
 800ebec:	08016638 	.word	0x08016638

0800ebf0 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800ebf0:	b5b0      	push	{r4, r5, r7, lr}
 800ebf2:	b08c      	sub	sp, #48	; 0x30
 800ebf4:	af04      	add	r7, sp, #16
 800ebf6:	60f8      	str	r0, [r7, #12]
 800ebf8:	60b9      	str	r1, [r7, #8]
 800ebfa:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800ebfc:	68fb      	ldr	r3, [r7, #12]
 800ebfe:	2b00      	cmp	r3, #0
 800ec00:	d106      	bne.n	800ec10 <tcp_output_segment+0x20>
 800ec02:	4b63      	ldr	r3, [pc, #396]	; (800ed90 <tcp_output_segment+0x1a0>)
 800ec04:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800ec08:	4962      	ldr	r1, [pc, #392]	; (800ed94 <tcp_output_segment+0x1a4>)
 800ec0a:	4863      	ldr	r0, [pc, #396]	; (800ed98 <tcp_output_segment+0x1a8>)
 800ec0c:	f005 f94c 	bl	8013ea8 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800ec10:	68bb      	ldr	r3, [r7, #8]
 800ec12:	2b00      	cmp	r3, #0
 800ec14:	d106      	bne.n	800ec24 <tcp_output_segment+0x34>
 800ec16:	4b5e      	ldr	r3, [pc, #376]	; (800ed90 <tcp_output_segment+0x1a0>)
 800ec18:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800ec1c:	495f      	ldr	r1, [pc, #380]	; (800ed9c <tcp_output_segment+0x1ac>)
 800ec1e:	485e      	ldr	r0, [pc, #376]	; (800ed98 <tcp_output_segment+0x1a8>)
 800ec20:	f005 f942 	bl	8013ea8 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	d106      	bne.n	800ec38 <tcp_output_segment+0x48>
 800ec2a:	4b59      	ldr	r3, [pc, #356]	; (800ed90 <tcp_output_segment+0x1a0>)
 800ec2c:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800ec30:	495b      	ldr	r1, [pc, #364]	; (800eda0 <tcp_output_segment+0x1b0>)
 800ec32:	4859      	ldr	r0, [pc, #356]	; (800ed98 <tcp_output_segment+0x1a8>)
 800ec34:	f005 f938 	bl	8013ea8 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800ec38:	68f8      	ldr	r0, [r7, #12]
 800ec3a:	f7ff ffb9 	bl	800ebb0 <tcp_output_segment_busy>
 800ec3e:	4603      	mov	r3, r0
 800ec40:	2b00      	cmp	r3, #0
 800ec42:	d001      	beq.n	800ec48 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800ec44:	2300      	movs	r3, #0
 800ec46:	e09f      	b.n	800ed88 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800ec48:	68bb      	ldr	r3, [r7, #8]
 800ec4a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ec4c:	68fb      	ldr	r3, [r7, #12]
 800ec4e:	68dc      	ldr	r4, [r3, #12]
 800ec50:	4610      	mov	r0, r2
 800ec52:	f7f8 fe9a 	bl	800798a <lwip_htonl>
 800ec56:	4603      	mov	r3, r0
 800ec58:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800ec5a:	68bb      	ldr	r3, [r7, #8]
 800ec5c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800ec5e:	68fb      	ldr	r3, [r7, #12]
 800ec60:	68dc      	ldr	r4, [r3, #12]
 800ec62:	4610      	mov	r0, r2
 800ec64:	f7f8 fe7c 	bl	8007960 <lwip_htons>
 800ec68:	4603      	mov	r3, r0
 800ec6a:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800ec6c:	68bb      	ldr	r3, [r7, #8]
 800ec6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec70:	68ba      	ldr	r2, [r7, #8]
 800ec72:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800ec74:	441a      	add	r2, r3
 800ec76:	68bb      	ldr	r3, [r7, #8]
 800ec78:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800ec7a:	68fb      	ldr	r3, [r7, #12]
 800ec7c:	68db      	ldr	r3, [r3, #12]
 800ec7e:	3314      	adds	r3, #20
 800ec80:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800ec82:	68fb      	ldr	r3, [r7, #12]
 800ec84:	7a9b      	ldrb	r3, [r3, #10]
 800ec86:	f003 0301 	and.w	r3, r3, #1
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	d015      	beq.n	800ecba <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800ec8e:	68bb      	ldr	r3, [r7, #8]
 800ec90:	3304      	adds	r3, #4
 800ec92:	461a      	mov	r2, r3
 800ec94:	6879      	ldr	r1, [r7, #4]
 800ec96:	f44f 7006 	mov.w	r0, #536	; 0x218
 800ec9a:	f7fc fa33 	bl	800b104 <tcp_eff_send_mss_netif>
 800ec9e:	4603      	mov	r3, r0
 800eca0:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800eca2:	8b7b      	ldrh	r3, [r7, #26]
 800eca4:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800eca8:	4618      	mov	r0, r3
 800ecaa:	f7f8 fe6e 	bl	800798a <lwip_htonl>
 800ecae:	4602      	mov	r2, r0
 800ecb0:	69fb      	ldr	r3, [r7, #28]
 800ecb2:	601a      	str	r2, [r3, #0]
    opts += 1;
 800ecb4:	69fb      	ldr	r3, [r7, #28]
 800ecb6:	3304      	adds	r3, #4
 800ecb8:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800ecba:	68bb      	ldr	r3, [r7, #8]
 800ecbc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	da02      	bge.n	800ecca <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800ecc4:	68bb      	ldr	r3, [r7, #8]
 800ecc6:	2200      	movs	r2, #0
 800ecc8:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800ecca:	68bb      	ldr	r3, [r7, #8]
 800eccc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ecce:	2b00      	cmp	r3, #0
 800ecd0:	d10c      	bne.n	800ecec <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800ecd2:	4b34      	ldr	r3, [pc, #208]	; (800eda4 <tcp_output_segment+0x1b4>)
 800ecd4:	681a      	ldr	r2, [r3, #0]
 800ecd6:	68bb      	ldr	r3, [r7, #8]
 800ecd8:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800ecda:	68fb      	ldr	r3, [r7, #12]
 800ecdc:	68db      	ldr	r3, [r3, #12]
 800ecde:	685b      	ldr	r3, [r3, #4]
 800ece0:	4618      	mov	r0, r3
 800ece2:	f7f8 fe52 	bl	800798a <lwip_htonl>
 800ece6:	4602      	mov	r2, r0
 800ece8:	68bb      	ldr	r3, [r7, #8]
 800ecea:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800ecec:	68fb      	ldr	r3, [r7, #12]
 800ecee:	68da      	ldr	r2, [r3, #12]
 800ecf0:	68fb      	ldr	r3, [r7, #12]
 800ecf2:	685b      	ldr	r3, [r3, #4]
 800ecf4:	685b      	ldr	r3, [r3, #4]
 800ecf6:	1ad3      	subs	r3, r2, r3
 800ecf8:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800ecfa:	68fb      	ldr	r3, [r7, #12]
 800ecfc:	685b      	ldr	r3, [r3, #4]
 800ecfe:	8959      	ldrh	r1, [r3, #10]
 800ed00:	68fb      	ldr	r3, [r7, #12]
 800ed02:	685b      	ldr	r3, [r3, #4]
 800ed04:	8b3a      	ldrh	r2, [r7, #24]
 800ed06:	1a8a      	subs	r2, r1, r2
 800ed08:	b292      	uxth	r2, r2
 800ed0a:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800ed0c:	68fb      	ldr	r3, [r7, #12]
 800ed0e:	685b      	ldr	r3, [r3, #4]
 800ed10:	8919      	ldrh	r1, [r3, #8]
 800ed12:	68fb      	ldr	r3, [r7, #12]
 800ed14:	685b      	ldr	r3, [r3, #4]
 800ed16:	8b3a      	ldrh	r2, [r7, #24]
 800ed18:	1a8a      	subs	r2, r1, r2
 800ed1a:	b292      	uxth	r2, r2
 800ed1c:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800ed1e:	68fb      	ldr	r3, [r7, #12]
 800ed20:	685b      	ldr	r3, [r3, #4]
 800ed22:	68fa      	ldr	r2, [r7, #12]
 800ed24:	68d2      	ldr	r2, [r2, #12]
 800ed26:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800ed28:	68fb      	ldr	r3, [r7, #12]
 800ed2a:	68db      	ldr	r3, [r3, #12]
 800ed2c:	2200      	movs	r2, #0
 800ed2e:	741a      	strb	r2, [r3, #16]
 800ed30:	2200      	movs	r2, #0
 800ed32:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800ed34:	68fb      	ldr	r3, [r7, #12]
 800ed36:	68db      	ldr	r3, [r3, #12]
 800ed38:	f103 0214 	add.w	r2, r3, #20
 800ed3c:	68fb      	ldr	r3, [r7, #12]
 800ed3e:	7a9b      	ldrb	r3, [r3, #10]
 800ed40:	009b      	lsls	r3, r3, #2
 800ed42:	f003 0304 	and.w	r3, r3, #4
 800ed46:	4413      	add	r3, r2
 800ed48:	69fa      	ldr	r2, [r7, #28]
 800ed4a:	429a      	cmp	r2, r3
 800ed4c:	d006      	beq.n	800ed5c <tcp_output_segment+0x16c>
 800ed4e:	4b10      	ldr	r3, [pc, #64]	; (800ed90 <tcp_output_segment+0x1a0>)
 800ed50:	f240 621c 	movw	r2, #1564	; 0x61c
 800ed54:	4914      	ldr	r1, [pc, #80]	; (800eda8 <tcp_output_segment+0x1b8>)
 800ed56:	4810      	ldr	r0, [pc, #64]	; (800ed98 <tcp_output_segment+0x1a8>)
 800ed58:	f005 f8a6 	bl	8013ea8 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800ed5c:	68fb      	ldr	r3, [r7, #12]
 800ed5e:	6858      	ldr	r0, [r3, #4]
 800ed60:	68b9      	ldr	r1, [r7, #8]
 800ed62:	68bb      	ldr	r3, [r7, #8]
 800ed64:	1d1c      	adds	r4, r3, #4
 800ed66:	68bb      	ldr	r3, [r7, #8]
 800ed68:	7add      	ldrb	r5, [r3, #11]
 800ed6a:	68bb      	ldr	r3, [r7, #8]
 800ed6c:	7a9b      	ldrb	r3, [r3, #10]
 800ed6e:	687a      	ldr	r2, [r7, #4]
 800ed70:	9202      	str	r2, [sp, #8]
 800ed72:	2206      	movs	r2, #6
 800ed74:	9201      	str	r2, [sp, #4]
 800ed76:	9300      	str	r3, [sp, #0]
 800ed78:	462b      	mov	r3, r5
 800ed7a:	4622      	mov	r2, r4
 800ed7c:	f002 fa66 	bl	801124c <ip4_output_if>
 800ed80:	4603      	mov	r3, r0
 800ed82:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800ed84:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ed88:	4618      	mov	r0, r3
 800ed8a:	3720      	adds	r7, #32
 800ed8c:	46bd      	mov	sp, r7
 800ed8e:	bdb0      	pop	{r4, r5, r7, pc}
 800ed90:	080165e4 	.word	0x080165e4
 800ed94:	08016ba8 	.word	0x08016ba8
 800ed98:	08016638 	.word	0x08016638
 800ed9c:	08016bc8 	.word	0x08016bc8
 800eda0:	08016be8 	.word	0x08016be8
 800eda4:	20008214 	.word	0x20008214
 800eda8:	08016c0c 	.word	0x08016c0c

0800edac <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800edac:	b5b0      	push	{r4, r5, r7, lr}
 800edae:	b084      	sub	sp, #16
 800edb0:	af00      	add	r7, sp, #0
 800edb2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	2b00      	cmp	r3, #0
 800edb8:	d106      	bne.n	800edc8 <tcp_rexmit_rto_prepare+0x1c>
 800edba:	4b31      	ldr	r3, [pc, #196]	; (800ee80 <tcp_rexmit_rto_prepare+0xd4>)
 800edbc:	f240 6263 	movw	r2, #1635	; 0x663
 800edc0:	4930      	ldr	r1, [pc, #192]	; (800ee84 <tcp_rexmit_rto_prepare+0xd8>)
 800edc2:	4831      	ldr	r0, [pc, #196]	; (800ee88 <tcp_rexmit_rto_prepare+0xdc>)
 800edc4:	f005 f870 	bl	8013ea8 <iprintf>

  if (pcb->unacked == NULL) {
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800edcc:	2b00      	cmp	r3, #0
 800edce:	d102      	bne.n	800edd6 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800edd0:	f06f 0305 	mvn.w	r3, #5
 800edd4:	e050      	b.n	800ee78 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800edda:	60fb      	str	r3, [r7, #12]
 800eddc:	e00b      	b.n	800edf6 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800edde:	68f8      	ldr	r0, [r7, #12]
 800ede0:	f7ff fee6 	bl	800ebb0 <tcp_output_segment_busy>
 800ede4:	4603      	mov	r3, r0
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	d002      	beq.n	800edf0 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800edea:	f06f 0305 	mvn.w	r3, #5
 800edee:	e043      	b.n	800ee78 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800edf0:	68fb      	ldr	r3, [r7, #12]
 800edf2:	681b      	ldr	r3, [r3, #0]
 800edf4:	60fb      	str	r3, [r7, #12]
 800edf6:	68fb      	ldr	r3, [r7, #12]
 800edf8:	681b      	ldr	r3, [r3, #0]
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	d1ef      	bne.n	800edde <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800edfe:	68f8      	ldr	r0, [r7, #12]
 800ee00:	f7ff fed6 	bl	800ebb0 <tcp_output_segment_busy>
 800ee04:	4603      	mov	r3, r0
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	d002      	beq.n	800ee10 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800ee0a:	f06f 0305 	mvn.w	r3, #5
 800ee0e:	e033      	b.n	800ee78 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800ee14:	68fb      	ldr	r3, [r7, #12]
 800ee16:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	2200      	movs	r2, #0
 800ee24:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	8b5b      	ldrh	r3, [r3, #26]
 800ee2a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800ee2e:	b29a      	uxth	r2, r3
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800ee34:	68fb      	ldr	r3, [r7, #12]
 800ee36:	68db      	ldr	r3, [r3, #12]
 800ee38:	685b      	ldr	r3, [r3, #4]
 800ee3a:	4618      	mov	r0, r3
 800ee3c:	f7f8 fda5 	bl	800798a <lwip_htonl>
 800ee40:	4604      	mov	r4, r0
 800ee42:	68fb      	ldr	r3, [r7, #12]
 800ee44:	891b      	ldrh	r3, [r3, #8]
 800ee46:	461d      	mov	r5, r3
 800ee48:	68fb      	ldr	r3, [r7, #12]
 800ee4a:	68db      	ldr	r3, [r3, #12]
 800ee4c:	899b      	ldrh	r3, [r3, #12]
 800ee4e:	b29b      	uxth	r3, r3
 800ee50:	4618      	mov	r0, r3
 800ee52:	f7f8 fd85 	bl	8007960 <lwip_htons>
 800ee56:	4603      	mov	r3, r0
 800ee58:	b2db      	uxtb	r3, r3
 800ee5a:	f003 0303 	and.w	r3, r3, #3
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	d001      	beq.n	800ee66 <tcp_rexmit_rto_prepare+0xba>
 800ee62:	2301      	movs	r3, #1
 800ee64:	e000      	b.n	800ee68 <tcp_rexmit_rto_prepare+0xbc>
 800ee66:	2300      	movs	r3, #0
 800ee68:	442b      	add	r3, r5
 800ee6a:	18e2      	adds	r2, r4, r3
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	2200      	movs	r2, #0
 800ee74:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800ee76:	2300      	movs	r3, #0
}
 800ee78:	4618      	mov	r0, r3
 800ee7a:	3710      	adds	r7, #16
 800ee7c:	46bd      	mov	sp, r7
 800ee7e:	bdb0      	pop	{r4, r5, r7, pc}
 800ee80:	080165e4 	.word	0x080165e4
 800ee84:	08016c20 	.word	0x08016c20
 800ee88:	08016638 	.word	0x08016638

0800ee8c <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800ee8c:	b580      	push	{r7, lr}
 800ee8e:	b082      	sub	sp, #8
 800ee90:	af00      	add	r7, sp, #0
 800ee92:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	d106      	bne.n	800eea8 <tcp_rexmit_rto_commit+0x1c>
 800ee9a:	4b0d      	ldr	r3, [pc, #52]	; (800eed0 <tcp_rexmit_rto_commit+0x44>)
 800ee9c:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800eea0:	490c      	ldr	r1, [pc, #48]	; (800eed4 <tcp_rexmit_rto_commit+0x48>)
 800eea2:	480d      	ldr	r0, [pc, #52]	; (800eed8 <tcp_rexmit_rto_commit+0x4c>)
 800eea4:	f005 f800 	bl	8013ea8 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800eeae:	2bff      	cmp	r3, #255	; 0xff
 800eeb0:	d007      	beq.n	800eec2 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800eeb8:	3301      	adds	r3, #1
 800eeba:	b2da      	uxtb	r2, r3
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800eec2:	6878      	ldr	r0, [r7, #4]
 800eec4:	f7ff fc80 	bl	800e7c8 <tcp_output>
}
 800eec8:	bf00      	nop
 800eeca:	3708      	adds	r7, #8
 800eecc:	46bd      	mov	sp, r7
 800eece:	bd80      	pop	{r7, pc}
 800eed0:	080165e4 	.word	0x080165e4
 800eed4:	08016c44 	.word	0x08016c44
 800eed8:	08016638 	.word	0x08016638

0800eedc <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800eedc:	b580      	push	{r7, lr}
 800eede:	b082      	sub	sp, #8
 800eee0:	af00      	add	r7, sp, #0
 800eee2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	2b00      	cmp	r3, #0
 800eee8:	d106      	bne.n	800eef8 <tcp_rexmit_rto+0x1c>
 800eeea:	4b0a      	ldr	r3, [pc, #40]	; (800ef14 <tcp_rexmit_rto+0x38>)
 800eeec:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800eef0:	4909      	ldr	r1, [pc, #36]	; (800ef18 <tcp_rexmit_rto+0x3c>)
 800eef2:	480a      	ldr	r0, [pc, #40]	; (800ef1c <tcp_rexmit_rto+0x40>)
 800eef4:	f004 ffd8 	bl	8013ea8 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800eef8:	6878      	ldr	r0, [r7, #4]
 800eefa:	f7ff ff57 	bl	800edac <tcp_rexmit_rto_prepare>
 800eefe:	4603      	mov	r3, r0
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	d102      	bne.n	800ef0a <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800ef04:	6878      	ldr	r0, [r7, #4]
 800ef06:	f7ff ffc1 	bl	800ee8c <tcp_rexmit_rto_commit>
  }
}
 800ef0a:	bf00      	nop
 800ef0c:	3708      	adds	r7, #8
 800ef0e:	46bd      	mov	sp, r7
 800ef10:	bd80      	pop	{r7, pc}
 800ef12:	bf00      	nop
 800ef14:	080165e4 	.word	0x080165e4
 800ef18:	08016c68 	.word	0x08016c68
 800ef1c:	08016638 	.word	0x08016638

0800ef20 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800ef20:	b590      	push	{r4, r7, lr}
 800ef22:	b085      	sub	sp, #20
 800ef24:	af00      	add	r7, sp, #0
 800ef26:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	d106      	bne.n	800ef3c <tcp_rexmit+0x1c>
 800ef2e:	4b2f      	ldr	r3, [pc, #188]	; (800efec <tcp_rexmit+0xcc>)
 800ef30:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800ef34:	492e      	ldr	r1, [pc, #184]	; (800eff0 <tcp_rexmit+0xd0>)
 800ef36:	482f      	ldr	r0, [pc, #188]	; (800eff4 <tcp_rexmit+0xd4>)
 800ef38:	f004 ffb6 	bl	8013ea8 <iprintf>

  if (pcb->unacked == NULL) {
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	d102      	bne.n	800ef4a <tcp_rexmit+0x2a>
    return ERR_VAL;
 800ef44:	f06f 0305 	mvn.w	r3, #5
 800ef48:	e04c      	b.n	800efe4 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ef4e:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800ef50:	68b8      	ldr	r0, [r7, #8]
 800ef52:	f7ff fe2d 	bl	800ebb0 <tcp_output_segment_busy>
 800ef56:	4603      	mov	r3, r0
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	d002      	beq.n	800ef62 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800ef5c:	f06f 0305 	mvn.w	r3, #5
 800ef60:	e040      	b.n	800efe4 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800ef62:	68bb      	ldr	r3, [r7, #8]
 800ef64:	681a      	ldr	r2, [r3, #0]
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	336c      	adds	r3, #108	; 0x6c
 800ef6e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800ef70:	e002      	b.n	800ef78 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800ef72:	68fb      	ldr	r3, [r7, #12]
 800ef74:	681b      	ldr	r3, [r3, #0]
 800ef76:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800ef78:	68fb      	ldr	r3, [r7, #12]
 800ef7a:	681b      	ldr	r3, [r3, #0]
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	d011      	beq.n	800efa4 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800ef80:	68fb      	ldr	r3, [r7, #12]
 800ef82:	681b      	ldr	r3, [r3, #0]
 800ef84:	68db      	ldr	r3, [r3, #12]
 800ef86:	685b      	ldr	r3, [r3, #4]
 800ef88:	4618      	mov	r0, r3
 800ef8a:	f7f8 fcfe 	bl	800798a <lwip_htonl>
 800ef8e:	4604      	mov	r4, r0
 800ef90:	68bb      	ldr	r3, [r7, #8]
 800ef92:	68db      	ldr	r3, [r3, #12]
 800ef94:	685b      	ldr	r3, [r3, #4]
 800ef96:	4618      	mov	r0, r3
 800ef98:	f7f8 fcf7 	bl	800798a <lwip_htonl>
 800ef9c:	4603      	mov	r3, r0
 800ef9e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	dbe6      	blt.n	800ef72 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800efa4:	68fb      	ldr	r3, [r7, #12]
 800efa6:	681a      	ldr	r2, [r3, #0]
 800efa8:	68bb      	ldr	r3, [r7, #8]
 800efaa:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800efac:	68fb      	ldr	r3, [r7, #12]
 800efae:	68ba      	ldr	r2, [r7, #8]
 800efb0:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800efb2:	68bb      	ldr	r3, [r7, #8]
 800efb4:	681b      	ldr	r3, [r3, #0]
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	d103      	bne.n	800efc2 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	2200      	movs	r2, #0
 800efbe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800efc8:	2bff      	cmp	r3, #255	; 0xff
 800efca:	d007      	beq.n	800efdc <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800efd2:	3301      	adds	r3, #1
 800efd4:	b2da      	uxtb	r2, r3
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	2200      	movs	r2, #0
 800efe0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800efe2:	2300      	movs	r3, #0
}
 800efe4:	4618      	mov	r0, r3
 800efe6:	3714      	adds	r7, #20
 800efe8:	46bd      	mov	sp, r7
 800efea:	bd90      	pop	{r4, r7, pc}
 800efec:	080165e4 	.word	0x080165e4
 800eff0:	08016c84 	.word	0x08016c84
 800eff4:	08016638 	.word	0x08016638

0800eff8 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800eff8:	b580      	push	{r7, lr}
 800effa:	b082      	sub	sp, #8
 800effc:	af00      	add	r7, sp, #0
 800effe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	2b00      	cmp	r3, #0
 800f004:	d106      	bne.n	800f014 <tcp_rexmit_fast+0x1c>
 800f006:	4b2a      	ldr	r3, [pc, #168]	; (800f0b0 <tcp_rexmit_fast+0xb8>)
 800f008:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800f00c:	4929      	ldr	r1, [pc, #164]	; (800f0b4 <tcp_rexmit_fast+0xbc>)
 800f00e:	482a      	ldr	r0, [pc, #168]	; (800f0b8 <tcp_rexmit_fast+0xc0>)
 800f010:	f004 ff4a 	bl	8013ea8 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f018:	2b00      	cmp	r3, #0
 800f01a:	d044      	beq.n	800f0a6 <tcp_rexmit_fast+0xae>
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	8b5b      	ldrh	r3, [r3, #26]
 800f020:	f003 0304 	and.w	r3, r3, #4
 800f024:	2b00      	cmp	r3, #0
 800f026:	d13e      	bne.n	800f0a6 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800f028:	6878      	ldr	r0, [r7, #4]
 800f02a:	f7ff ff79 	bl	800ef20 <tcp_rexmit>
 800f02e:	4603      	mov	r3, r0
 800f030:	2b00      	cmp	r3, #0
 800f032:	d138      	bne.n	800f0a6 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f040:	4293      	cmp	r3, r2
 800f042:	bf28      	it	cs
 800f044:	4613      	movcs	r3, r2
 800f046:	b29b      	uxth	r3, r3
 800f048:	0fda      	lsrs	r2, r3, #31
 800f04a:	4413      	add	r3, r2
 800f04c:	105b      	asrs	r3, r3, #1
 800f04e:	b29a      	uxth	r2, r3
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800f05c:	461a      	mov	r2, r3
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f062:	005b      	lsls	r3, r3, #1
 800f064:	429a      	cmp	r2, r3
 800f066:	d206      	bcs.n	800f076 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f06c:	005b      	lsls	r3, r3, #1
 800f06e:	b29a      	uxth	r2, r3
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f080:	4619      	mov	r1, r3
 800f082:	0049      	lsls	r1, r1, #1
 800f084:	440b      	add	r3, r1
 800f086:	b29b      	uxth	r3, r3
 800f088:	4413      	add	r3, r2
 800f08a:	b29a      	uxth	r2, r3
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	8b5b      	ldrh	r3, [r3, #26]
 800f096:	f043 0304 	orr.w	r3, r3, #4
 800f09a:	b29a      	uxth	r2, r3
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	2200      	movs	r2, #0
 800f0a4:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800f0a6:	bf00      	nop
 800f0a8:	3708      	adds	r7, #8
 800f0aa:	46bd      	mov	sp, r7
 800f0ac:	bd80      	pop	{r7, pc}
 800f0ae:	bf00      	nop
 800f0b0:	080165e4 	.word	0x080165e4
 800f0b4:	08016c9c 	.word	0x08016c9c
 800f0b8:	08016638 	.word	0x08016638

0800f0bc <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800f0bc:	b580      	push	{r7, lr}
 800f0be:	b086      	sub	sp, #24
 800f0c0:	af00      	add	r7, sp, #0
 800f0c2:	60f8      	str	r0, [r7, #12]
 800f0c4:	607b      	str	r3, [r7, #4]
 800f0c6:	460b      	mov	r3, r1
 800f0c8:	817b      	strh	r3, [r7, #10]
 800f0ca:	4613      	mov	r3, r2
 800f0cc:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800f0ce:	897a      	ldrh	r2, [r7, #10]
 800f0d0:	893b      	ldrh	r3, [r7, #8]
 800f0d2:	4413      	add	r3, r2
 800f0d4:	b29b      	uxth	r3, r3
 800f0d6:	3314      	adds	r3, #20
 800f0d8:	b29b      	uxth	r3, r3
 800f0da:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f0de:	4619      	mov	r1, r3
 800f0e0:	2022      	movs	r0, #34	; 0x22
 800f0e2:	f7f9 fd05 	bl	8008af0 <pbuf_alloc>
 800f0e6:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800f0e8:	697b      	ldr	r3, [r7, #20]
 800f0ea:	2b00      	cmp	r3, #0
 800f0ec:	d04d      	beq.n	800f18a <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800f0ee:	897b      	ldrh	r3, [r7, #10]
 800f0f0:	3313      	adds	r3, #19
 800f0f2:	697a      	ldr	r2, [r7, #20]
 800f0f4:	8952      	ldrh	r2, [r2, #10]
 800f0f6:	4293      	cmp	r3, r2
 800f0f8:	db06      	blt.n	800f108 <tcp_output_alloc_header_common+0x4c>
 800f0fa:	4b26      	ldr	r3, [pc, #152]	; (800f194 <tcp_output_alloc_header_common+0xd8>)
 800f0fc:	f240 7223 	movw	r2, #1827	; 0x723
 800f100:	4925      	ldr	r1, [pc, #148]	; (800f198 <tcp_output_alloc_header_common+0xdc>)
 800f102:	4826      	ldr	r0, [pc, #152]	; (800f19c <tcp_output_alloc_header_common+0xe0>)
 800f104:	f004 fed0 	bl	8013ea8 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800f108:	697b      	ldr	r3, [r7, #20]
 800f10a:	685b      	ldr	r3, [r3, #4]
 800f10c:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800f10e:	8c3b      	ldrh	r3, [r7, #32]
 800f110:	4618      	mov	r0, r3
 800f112:	f7f8 fc25 	bl	8007960 <lwip_htons>
 800f116:	4603      	mov	r3, r0
 800f118:	461a      	mov	r2, r3
 800f11a:	693b      	ldr	r3, [r7, #16]
 800f11c:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800f11e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f120:	4618      	mov	r0, r3
 800f122:	f7f8 fc1d 	bl	8007960 <lwip_htons>
 800f126:	4603      	mov	r3, r0
 800f128:	461a      	mov	r2, r3
 800f12a:	693b      	ldr	r3, [r7, #16]
 800f12c:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800f12e:	693b      	ldr	r3, [r7, #16]
 800f130:	687a      	ldr	r2, [r7, #4]
 800f132:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800f134:	68f8      	ldr	r0, [r7, #12]
 800f136:	f7f8 fc28 	bl	800798a <lwip_htonl>
 800f13a:	4602      	mov	r2, r0
 800f13c:	693b      	ldr	r3, [r7, #16]
 800f13e:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800f140:	897b      	ldrh	r3, [r7, #10]
 800f142:	089b      	lsrs	r3, r3, #2
 800f144:	b29b      	uxth	r3, r3
 800f146:	3305      	adds	r3, #5
 800f148:	b29b      	uxth	r3, r3
 800f14a:	031b      	lsls	r3, r3, #12
 800f14c:	b29a      	uxth	r2, r3
 800f14e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f152:	b29b      	uxth	r3, r3
 800f154:	4313      	orrs	r3, r2
 800f156:	b29b      	uxth	r3, r3
 800f158:	4618      	mov	r0, r3
 800f15a:	f7f8 fc01 	bl	8007960 <lwip_htons>
 800f15e:	4603      	mov	r3, r0
 800f160:	461a      	mov	r2, r3
 800f162:	693b      	ldr	r3, [r7, #16]
 800f164:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800f166:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800f168:	4618      	mov	r0, r3
 800f16a:	f7f8 fbf9 	bl	8007960 <lwip_htons>
 800f16e:	4603      	mov	r3, r0
 800f170:	461a      	mov	r2, r3
 800f172:	693b      	ldr	r3, [r7, #16]
 800f174:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800f176:	693b      	ldr	r3, [r7, #16]
 800f178:	2200      	movs	r2, #0
 800f17a:	741a      	strb	r2, [r3, #16]
 800f17c:	2200      	movs	r2, #0
 800f17e:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800f180:	693b      	ldr	r3, [r7, #16]
 800f182:	2200      	movs	r2, #0
 800f184:	749a      	strb	r2, [r3, #18]
 800f186:	2200      	movs	r2, #0
 800f188:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800f18a:	697b      	ldr	r3, [r7, #20]
}
 800f18c:	4618      	mov	r0, r3
 800f18e:	3718      	adds	r7, #24
 800f190:	46bd      	mov	sp, r7
 800f192:	bd80      	pop	{r7, pc}
 800f194:	080165e4 	.word	0x080165e4
 800f198:	08016cbc 	.word	0x08016cbc
 800f19c:	08016638 	.word	0x08016638

0800f1a0 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800f1a0:	b5b0      	push	{r4, r5, r7, lr}
 800f1a2:	b08a      	sub	sp, #40	; 0x28
 800f1a4:	af04      	add	r7, sp, #16
 800f1a6:	60f8      	str	r0, [r7, #12]
 800f1a8:	607b      	str	r3, [r7, #4]
 800f1aa:	460b      	mov	r3, r1
 800f1ac:	817b      	strh	r3, [r7, #10]
 800f1ae:	4613      	mov	r3, r2
 800f1b0:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800f1b2:	68fb      	ldr	r3, [r7, #12]
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	d106      	bne.n	800f1c6 <tcp_output_alloc_header+0x26>
 800f1b8:	4b15      	ldr	r3, [pc, #84]	; (800f210 <tcp_output_alloc_header+0x70>)
 800f1ba:	f240 7242 	movw	r2, #1858	; 0x742
 800f1be:	4915      	ldr	r1, [pc, #84]	; (800f214 <tcp_output_alloc_header+0x74>)
 800f1c0:	4815      	ldr	r0, [pc, #84]	; (800f218 <tcp_output_alloc_header+0x78>)
 800f1c2:	f004 fe71 	bl	8013ea8 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800f1c6:	68fb      	ldr	r3, [r7, #12]
 800f1c8:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800f1ca:	68fb      	ldr	r3, [r7, #12]
 800f1cc:	8adb      	ldrh	r3, [r3, #22]
 800f1ce:	68fa      	ldr	r2, [r7, #12]
 800f1d0:	8b12      	ldrh	r2, [r2, #24]
 800f1d2:	68f9      	ldr	r1, [r7, #12]
 800f1d4:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800f1d6:	893d      	ldrh	r5, [r7, #8]
 800f1d8:	897c      	ldrh	r4, [r7, #10]
 800f1da:	9103      	str	r1, [sp, #12]
 800f1dc:	2110      	movs	r1, #16
 800f1de:	9102      	str	r1, [sp, #8]
 800f1e0:	9201      	str	r2, [sp, #4]
 800f1e2:	9300      	str	r3, [sp, #0]
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	462a      	mov	r2, r5
 800f1e8:	4621      	mov	r1, r4
 800f1ea:	f7ff ff67 	bl	800f0bc <tcp_output_alloc_header_common>
 800f1ee:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800f1f0:	697b      	ldr	r3, [r7, #20]
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	d006      	beq.n	800f204 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800f1f6:	68fb      	ldr	r3, [r7, #12]
 800f1f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1fa:	68fa      	ldr	r2, [r7, #12]
 800f1fc:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800f1fe:	441a      	add	r2, r3
 800f200:	68fb      	ldr	r3, [r7, #12]
 800f202:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800f204:	697b      	ldr	r3, [r7, #20]
}
 800f206:	4618      	mov	r0, r3
 800f208:	3718      	adds	r7, #24
 800f20a:	46bd      	mov	sp, r7
 800f20c:	bdb0      	pop	{r4, r5, r7, pc}
 800f20e:	bf00      	nop
 800f210:	080165e4 	.word	0x080165e4
 800f214:	08016cec 	.word	0x08016cec
 800f218:	08016638 	.word	0x08016638

0800f21c <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800f21c:	b580      	push	{r7, lr}
 800f21e:	b088      	sub	sp, #32
 800f220:	af00      	add	r7, sp, #0
 800f222:	60f8      	str	r0, [r7, #12]
 800f224:	60b9      	str	r1, [r7, #8]
 800f226:	4611      	mov	r1, r2
 800f228:	461a      	mov	r2, r3
 800f22a:	460b      	mov	r3, r1
 800f22c:	71fb      	strb	r3, [r7, #7]
 800f22e:	4613      	mov	r3, r2
 800f230:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800f232:	2300      	movs	r3, #0
 800f234:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800f236:	68bb      	ldr	r3, [r7, #8]
 800f238:	2b00      	cmp	r3, #0
 800f23a:	d106      	bne.n	800f24a <tcp_output_fill_options+0x2e>
 800f23c:	4b13      	ldr	r3, [pc, #76]	; (800f28c <tcp_output_fill_options+0x70>)
 800f23e:	f240 7256 	movw	r2, #1878	; 0x756
 800f242:	4913      	ldr	r1, [pc, #76]	; (800f290 <tcp_output_fill_options+0x74>)
 800f244:	4813      	ldr	r0, [pc, #76]	; (800f294 <tcp_output_fill_options+0x78>)
 800f246:	f004 fe2f 	bl	8013ea8 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800f24a:	68bb      	ldr	r3, [r7, #8]
 800f24c:	685b      	ldr	r3, [r3, #4]
 800f24e:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800f250:	69bb      	ldr	r3, [r7, #24]
 800f252:	3314      	adds	r3, #20
 800f254:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800f256:	69bb      	ldr	r3, [r7, #24]
 800f258:	f103 0214 	add.w	r2, r3, #20
 800f25c:	8bfb      	ldrh	r3, [r7, #30]
 800f25e:	009b      	lsls	r3, r3, #2
 800f260:	4619      	mov	r1, r3
 800f262:	79fb      	ldrb	r3, [r7, #7]
 800f264:	009b      	lsls	r3, r3, #2
 800f266:	f003 0304 	and.w	r3, r3, #4
 800f26a:	440b      	add	r3, r1
 800f26c:	4413      	add	r3, r2
 800f26e:	697a      	ldr	r2, [r7, #20]
 800f270:	429a      	cmp	r2, r3
 800f272:	d006      	beq.n	800f282 <tcp_output_fill_options+0x66>
 800f274:	4b05      	ldr	r3, [pc, #20]	; (800f28c <tcp_output_fill_options+0x70>)
 800f276:	f240 7275 	movw	r2, #1909	; 0x775
 800f27a:	4907      	ldr	r1, [pc, #28]	; (800f298 <tcp_output_fill_options+0x7c>)
 800f27c:	4805      	ldr	r0, [pc, #20]	; (800f294 <tcp_output_fill_options+0x78>)
 800f27e:	f004 fe13 	bl	8013ea8 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800f282:	bf00      	nop
 800f284:	3720      	adds	r7, #32
 800f286:	46bd      	mov	sp, r7
 800f288:	bd80      	pop	{r7, pc}
 800f28a:	bf00      	nop
 800f28c:	080165e4 	.word	0x080165e4
 800f290:	08016d14 	.word	0x08016d14
 800f294:	08016638 	.word	0x08016638
 800f298:	08016c0c 	.word	0x08016c0c

0800f29c <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800f29c:	b580      	push	{r7, lr}
 800f29e:	b08a      	sub	sp, #40	; 0x28
 800f2a0:	af04      	add	r7, sp, #16
 800f2a2:	60f8      	str	r0, [r7, #12]
 800f2a4:	60b9      	str	r1, [r7, #8]
 800f2a6:	607a      	str	r2, [r7, #4]
 800f2a8:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800f2aa:	68bb      	ldr	r3, [r7, #8]
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	d106      	bne.n	800f2be <tcp_output_control_segment+0x22>
 800f2b0:	4b1c      	ldr	r3, [pc, #112]	; (800f324 <tcp_output_control_segment+0x88>)
 800f2b2:	f240 7287 	movw	r2, #1927	; 0x787
 800f2b6:	491c      	ldr	r1, [pc, #112]	; (800f328 <tcp_output_control_segment+0x8c>)
 800f2b8:	481c      	ldr	r0, [pc, #112]	; (800f32c <tcp_output_control_segment+0x90>)
 800f2ba:	f004 fdf5 	bl	8013ea8 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800f2be:	683a      	ldr	r2, [r7, #0]
 800f2c0:	6879      	ldr	r1, [r7, #4]
 800f2c2:	68f8      	ldr	r0, [r7, #12]
 800f2c4:	f7fe fae8 	bl	800d898 <tcp_route>
 800f2c8:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800f2ca:	693b      	ldr	r3, [r7, #16]
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	d102      	bne.n	800f2d6 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800f2d0:	23fc      	movs	r3, #252	; 0xfc
 800f2d2:	75fb      	strb	r3, [r7, #23]
 800f2d4:	e01c      	b.n	800f310 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800f2d6:	68fb      	ldr	r3, [r7, #12]
 800f2d8:	2b00      	cmp	r3, #0
 800f2da:	d006      	beq.n	800f2ea <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800f2dc:	68fb      	ldr	r3, [r7, #12]
 800f2de:	7adb      	ldrb	r3, [r3, #11]
 800f2e0:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800f2e2:	68fb      	ldr	r3, [r7, #12]
 800f2e4:	7a9b      	ldrb	r3, [r3, #10]
 800f2e6:	757b      	strb	r3, [r7, #21]
 800f2e8:	e003      	b.n	800f2f2 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800f2ea:	23ff      	movs	r3, #255	; 0xff
 800f2ec:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800f2ee:	2300      	movs	r3, #0
 800f2f0:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800f2f2:	7dba      	ldrb	r2, [r7, #22]
 800f2f4:	693b      	ldr	r3, [r7, #16]
 800f2f6:	9302      	str	r3, [sp, #8]
 800f2f8:	2306      	movs	r3, #6
 800f2fa:	9301      	str	r3, [sp, #4]
 800f2fc:	7d7b      	ldrb	r3, [r7, #21]
 800f2fe:	9300      	str	r3, [sp, #0]
 800f300:	4613      	mov	r3, r2
 800f302:	683a      	ldr	r2, [r7, #0]
 800f304:	6879      	ldr	r1, [r7, #4]
 800f306:	68b8      	ldr	r0, [r7, #8]
 800f308:	f001 ffa0 	bl	801124c <ip4_output_if>
 800f30c:	4603      	mov	r3, r0
 800f30e:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800f310:	68b8      	ldr	r0, [r7, #8]
 800f312:	f7f9 fed1 	bl	80090b8 <pbuf_free>
  return err;
 800f316:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f31a:	4618      	mov	r0, r3
 800f31c:	3718      	adds	r7, #24
 800f31e:	46bd      	mov	sp, r7
 800f320:	bd80      	pop	{r7, pc}
 800f322:	bf00      	nop
 800f324:	080165e4 	.word	0x080165e4
 800f328:	08016d3c 	.word	0x08016d3c
 800f32c:	08016638 	.word	0x08016638

0800f330 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800f330:	b590      	push	{r4, r7, lr}
 800f332:	b08b      	sub	sp, #44	; 0x2c
 800f334:	af04      	add	r7, sp, #16
 800f336:	60f8      	str	r0, [r7, #12]
 800f338:	60b9      	str	r1, [r7, #8]
 800f33a:	607a      	str	r2, [r7, #4]
 800f33c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800f33e:	683b      	ldr	r3, [r7, #0]
 800f340:	2b00      	cmp	r3, #0
 800f342:	d106      	bne.n	800f352 <tcp_rst+0x22>
 800f344:	4b1f      	ldr	r3, [pc, #124]	; (800f3c4 <tcp_rst+0x94>)
 800f346:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800f34a:	491f      	ldr	r1, [pc, #124]	; (800f3c8 <tcp_rst+0x98>)
 800f34c:	481f      	ldr	r0, [pc, #124]	; (800f3cc <tcp_rst+0x9c>)
 800f34e:	f004 fdab 	bl	8013ea8 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800f352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f354:	2b00      	cmp	r3, #0
 800f356:	d106      	bne.n	800f366 <tcp_rst+0x36>
 800f358:	4b1a      	ldr	r3, [pc, #104]	; (800f3c4 <tcp_rst+0x94>)
 800f35a:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800f35e:	491c      	ldr	r1, [pc, #112]	; (800f3d0 <tcp_rst+0xa0>)
 800f360:	481a      	ldr	r0, [pc, #104]	; (800f3cc <tcp_rst+0x9c>)
 800f362:	f004 fda1 	bl	8013ea8 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800f366:	2300      	movs	r3, #0
 800f368:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800f36a:	f246 0308 	movw	r3, #24584	; 0x6008
 800f36e:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800f370:	7dfb      	ldrb	r3, [r7, #23]
 800f372:	b29c      	uxth	r4, r3
 800f374:	68b8      	ldr	r0, [r7, #8]
 800f376:	f7f8 fb08 	bl	800798a <lwip_htonl>
 800f37a:	4602      	mov	r2, r0
 800f37c:	8abb      	ldrh	r3, [r7, #20]
 800f37e:	9303      	str	r3, [sp, #12]
 800f380:	2314      	movs	r3, #20
 800f382:	9302      	str	r3, [sp, #8]
 800f384:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800f386:	9301      	str	r3, [sp, #4]
 800f388:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800f38a:	9300      	str	r3, [sp, #0]
 800f38c:	4613      	mov	r3, r2
 800f38e:	2200      	movs	r2, #0
 800f390:	4621      	mov	r1, r4
 800f392:	6878      	ldr	r0, [r7, #4]
 800f394:	f7ff fe92 	bl	800f0bc <tcp_output_alloc_header_common>
 800f398:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800f39a:	693b      	ldr	r3, [r7, #16]
 800f39c:	2b00      	cmp	r3, #0
 800f39e:	d00c      	beq.n	800f3ba <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800f3a0:	7dfb      	ldrb	r3, [r7, #23]
 800f3a2:	2200      	movs	r2, #0
 800f3a4:	6939      	ldr	r1, [r7, #16]
 800f3a6:	68f8      	ldr	r0, [r7, #12]
 800f3a8:	f7ff ff38 	bl	800f21c <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800f3ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3ae:	683a      	ldr	r2, [r7, #0]
 800f3b0:	6939      	ldr	r1, [r7, #16]
 800f3b2:	68f8      	ldr	r0, [r7, #12]
 800f3b4:	f7ff ff72 	bl	800f29c <tcp_output_control_segment>
 800f3b8:	e000      	b.n	800f3bc <tcp_rst+0x8c>
    return;
 800f3ba:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800f3bc:	371c      	adds	r7, #28
 800f3be:	46bd      	mov	sp, r7
 800f3c0:	bd90      	pop	{r4, r7, pc}
 800f3c2:	bf00      	nop
 800f3c4:	080165e4 	.word	0x080165e4
 800f3c8:	08016d68 	.word	0x08016d68
 800f3cc:	08016638 	.word	0x08016638
 800f3d0:	08016d84 	.word	0x08016d84

0800f3d4 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800f3d4:	b590      	push	{r4, r7, lr}
 800f3d6:	b087      	sub	sp, #28
 800f3d8:	af00      	add	r7, sp, #0
 800f3da:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800f3dc:	2300      	movs	r3, #0
 800f3de:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800f3e0:	2300      	movs	r3, #0
 800f3e2:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	d106      	bne.n	800f3f8 <tcp_send_empty_ack+0x24>
 800f3ea:	4b28      	ldr	r3, [pc, #160]	; (800f48c <tcp_send_empty_ack+0xb8>)
 800f3ec:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800f3f0:	4927      	ldr	r1, [pc, #156]	; (800f490 <tcp_send_empty_ack+0xbc>)
 800f3f2:	4828      	ldr	r0, [pc, #160]	; (800f494 <tcp_send_empty_ack+0xc0>)
 800f3f4:	f004 fd58 	bl	8013ea8 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800f3f8:	7dfb      	ldrb	r3, [r7, #23]
 800f3fa:	009b      	lsls	r3, r3, #2
 800f3fc:	b2db      	uxtb	r3, r3
 800f3fe:	f003 0304 	and.w	r3, r3, #4
 800f402:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800f404:	7d7b      	ldrb	r3, [r7, #21]
 800f406:	b29c      	uxth	r4, r3
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f40c:	4618      	mov	r0, r3
 800f40e:	f7f8 fabc 	bl	800798a <lwip_htonl>
 800f412:	4603      	mov	r3, r0
 800f414:	2200      	movs	r2, #0
 800f416:	4621      	mov	r1, r4
 800f418:	6878      	ldr	r0, [r7, #4]
 800f41a:	f7ff fec1 	bl	800f1a0 <tcp_output_alloc_header>
 800f41e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800f420:	693b      	ldr	r3, [r7, #16]
 800f422:	2b00      	cmp	r3, #0
 800f424:	d109      	bne.n	800f43a <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	8b5b      	ldrh	r3, [r3, #26]
 800f42a:	f043 0303 	orr.w	r3, r3, #3
 800f42e:	b29a      	uxth	r2, r3
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800f434:	f06f 0301 	mvn.w	r3, #1
 800f438:	e023      	b.n	800f482 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800f43a:	7dbb      	ldrb	r3, [r7, #22]
 800f43c:	7dfa      	ldrb	r2, [r7, #23]
 800f43e:	6939      	ldr	r1, [r7, #16]
 800f440:	6878      	ldr	r0, [r7, #4]
 800f442:	f7ff feeb 	bl	800f21c <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800f446:	687a      	ldr	r2, [r7, #4]
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	3304      	adds	r3, #4
 800f44c:	6939      	ldr	r1, [r7, #16]
 800f44e:	6878      	ldr	r0, [r7, #4]
 800f450:	f7ff ff24 	bl	800f29c <tcp_output_control_segment>
 800f454:	4603      	mov	r3, r0
 800f456:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800f458:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f45c:	2b00      	cmp	r3, #0
 800f45e:	d007      	beq.n	800f470 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	8b5b      	ldrh	r3, [r3, #26]
 800f464:	f043 0303 	orr.w	r3, r3, #3
 800f468:	b29a      	uxth	r2, r3
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	835a      	strh	r2, [r3, #26]
 800f46e:	e006      	b.n	800f47e <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	8b5b      	ldrh	r3, [r3, #26]
 800f474:	f023 0303 	bic.w	r3, r3, #3
 800f478:	b29a      	uxth	r2, r3
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800f47e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f482:	4618      	mov	r0, r3
 800f484:	371c      	adds	r7, #28
 800f486:	46bd      	mov	sp, r7
 800f488:	bd90      	pop	{r4, r7, pc}
 800f48a:	bf00      	nop
 800f48c:	080165e4 	.word	0x080165e4
 800f490:	08016da0 	.word	0x08016da0
 800f494:	08016638 	.word	0x08016638

0800f498 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800f498:	b590      	push	{r4, r7, lr}
 800f49a:	b087      	sub	sp, #28
 800f49c:	af00      	add	r7, sp, #0
 800f49e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800f4a0:	2300      	movs	r3, #0
 800f4a2:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	d106      	bne.n	800f4b8 <tcp_keepalive+0x20>
 800f4aa:	4b18      	ldr	r3, [pc, #96]	; (800f50c <tcp_keepalive+0x74>)
 800f4ac:	f640 0224 	movw	r2, #2084	; 0x824
 800f4b0:	4917      	ldr	r1, [pc, #92]	; (800f510 <tcp_keepalive+0x78>)
 800f4b2:	4818      	ldr	r0, [pc, #96]	; (800f514 <tcp_keepalive+0x7c>)
 800f4b4:	f004 fcf8 	bl	8013ea8 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800f4b8:	7dfb      	ldrb	r3, [r7, #23]
 800f4ba:	b29c      	uxth	r4, r3
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f4c0:	3b01      	subs	r3, #1
 800f4c2:	4618      	mov	r0, r3
 800f4c4:	f7f8 fa61 	bl	800798a <lwip_htonl>
 800f4c8:	4603      	mov	r3, r0
 800f4ca:	2200      	movs	r2, #0
 800f4cc:	4621      	mov	r1, r4
 800f4ce:	6878      	ldr	r0, [r7, #4]
 800f4d0:	f7ff fe66 	bl	800f1a0 <tcp_output_alloc_header>
 800f4d4:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800f4d6:	693b      	ldr	r3, [r7, #16]
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	d102      	bne.n	800f4e2 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800f4dc:	f04f 33ff 	mov.w	r3, #4294967295
 800f4e0:	e010      	b.n	800f504 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800f4e2:	7dfb      	ldrb	r3, [r7, #23]
 800f4e4:	2200      	movs	r2, #0
 800f4e6:	6939      	ldr	r1, [r7, #16]
 800f4e8:	6878      	ldr	r0, [r7, #4]
 800f4ea:	f7ff fe97 	bl	800f21c <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800f4ee:	687a      	ldr	r2, [r7, #4]
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	3304      	adds	r3, #4
 800f4f4:	6939      	ldr	r1, [r7, #16]
 800f4f6:	6878      	ldr	r0, [r7, #4]
 800f4f8:	f7ff fed0 	bl	800f29c <tcp_output_control_segment>
 800f4fc:	4603      	mov	r3, r0
 800f4fe:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800f500:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f504:	4618      	mov	r0, r3
 800f506:	371c      	adds	r7, #28
 800f508:	46bd      	mov	sp, r7
 800f50a:	bd90      	pop	{r4, r7, pc}
 800f50c:	080165e4 	.word	0x080165e4
 800f510:	08016dc0 	.word	0x08016dc0
 800f514:	08016638 	.word	0x08016638

0800f518 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800f518:	b590      	push	{r4, r7, lr}
 800f51a:	b08b      	sub	sp, #44	; 0x2c
 800f51c:	af00      	add	r7, sp, #0
 800f51e:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800f520:	2300      	movs	r3, #0
 800f522:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	2b00      	cmp	r3, #0
 800f52a:	d106      	bne.n	800f53a <tcp_zero_window_probe+0x22>
 800f52c:	4b4c      	ldr	r3, [pc, #304]	; (800f660 <tcp_zero_window_probe+0x148>)
 800f52e:	f640 024f 	movw	r2, #2127	; 0x84f
 800f532:	494c      	ldr	r1, [pc, #304]	; (800f664 <tcp_zero_window_probe+0x14c>)
 800f534:	484c      	ldr	r0, [pc, #304]	; (800f668 <tcp_zero_window_probe+0x150>)
 800f536:	f004 fcb7 	bl	8013ea8 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f53e:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800f540:	6a3b      	ldr	r3, [r7, #32]
 800f542:	2b00      	cmp	r3, #0
 800f544:	d101      	bne.n	800f54a <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800f546:	2300      	movs	r3, #0
 800f548:	e086      	b.n	800f658 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800f550:	2bff      	cmp	r3, #255	; 0xff
 800f552:	d007      	beq.n	800f564 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800f55a:	3301      	adds	r3, #1
 800f55c:	b2da      	uxtb	r2, r3
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800f564:	6a3b      	ldr	r3, [r7, #32]
 800f566:	68db      	ldr	r3, [r3, #12]
 800f568:	899b      	ldrh	r3, [r3, #12]
 800f56a:	b29b      	uxth	r3, r3
 800f56c:	4618      	mov	r0, r3
 800f56e:	f7f8 f9f7 	bl	8007960 <lwip_htons>
 800f572:	4603      	mov	r3, r0
 800f574:	b2db      	uxtb	r3, r3
 800f576:	f003 0301 	and.w	r3, r3, #1
 800f57a:	2b00      	cmp	r3, #0
 800f57c:	d005      	beq.n	800f58a <tcp_zero_window_probe+0x72>
 800f57e:	6a3b      	ldr	r3, [r7, #32]
 800f580:	891b      	ldrh	r3, [r3, #8]
 800f582:	2b00      	cmp	r3, #0
 800f584:	d101      	bne.n	800f58a <tcp_zero_window_probe+0x72>
 800f586:	2301      	movs	r3, #1
 800f588:	e000      	b.n	800f58c <tcp_zero_window_probe+0x74>
 800f58a:	2300      	movs	r3, #0
 800f58c:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800f58e:	7ffb      	ldrb	r3, [r7, #31]
 800f590:	2b00      	cmp	r3, #0
 800f592:	bf0c      	ite	eq
 800f594:	2301      	moveq	r3, #1
 800f596:	2300      	movne	r3, #0
 800f598:	b2db      	uxtb	r3, r3
 800f59a:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800f59c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f5a0:	b299      	uxth	r1, r3
 800f5a2:	6a3b      	ldr	r3, [r7, #32]
 800f5a4:	68db      	ldr	r3, [r3, #12]
 800f5a6:	685b      	ldr	r3, [r3, #4]
 800f5a8:	8bba      	ldrh	r2, [r7, #28]
 800f5aa:	6878      	ldr	r0, [r7, #4]
 800f5ac:	f7ff fdf8 	bl	800f1a0 <tcp_output_alloc_header>
 800f5b0:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800f5b2:	69bb      	ldr	r3, [r7, #24]
 800f5b4:	2b00      	cmp	r3, #0
 800f5b6:	d102      	bne.n	800f5be <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800f5b8:	f04f 33ff 	mov.w	r3, #4294967295
 800f5bc:	e04c      	b.n	800f658 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800f5be:	69bb      	ldr	r3, [r7, #24]
 800f5c0:	685b      	ldr	r3, [r3, #4]
 800f5c2:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800f5c4:	7ffb      	ldrb	r3, [r7, #31]
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	d011      	beq.n	800f5ee <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800f5ca:	697b      	ldr	r3, [r7, #20]
 800f5cc:	899b      	ldrh	r3, [r3, #12]
 800f5ce:	b29b      	uxth	r3, r3
 800f5d0:	b21b      	sxth	r3, r3
 800f5d2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800f5d6:	b21c      	sxth	r4, r3
 800f5d8:	2011      	movs	r0, #17
 800f5da:	f7f8 f9c1 	bl	8007960 <lwip_htons>
 800f5de:	4603      	mov	r3, r0
 800f5e0:	b21b      	sxth	r3, r3
 800f5e2:	4323      	orrs	r3, r4
 800f5e4:	b21b      	sxth	r3, r3
 800f5e6:	b29a      	uxth	r2, r3
 800f5e8:	697b      	ldr	r3, [r7, #20]
 800f5ea:	819a      	strh	r2, [r3, #12]
 800f5ec:	e010      	b.n	800f610 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800f5ee:	69bb      	ldr	r3, [r7, #24]
 800f5f0:	685b      	ldr	r3, [r3, #4]
 800f5f2:	3314      	adds	r3, #20
 800f5f4:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800f5f6:	6a3b      	ldr	r3, [r7, #32]
 800f5f8:	6858      	ldr	r0, [r3, #4]
 800f5fa:	6a3b      	ldr	r3, [r7, #32]
 800f5fc:	685b      	ldr	r3, [r3, #4]
 800f5fe:	891a      	ldrh	r2, [r3, #8]
 800f600:	6a3b      	ldr	r3, [r7, #32]
 800f602:	891b      	ldrh	r3, [r3, #8]
 800f604:	1ad3      	subs	r3, r2, r3
 800f606:	b29b      	uxth	r3, r3
 800f608:	2201      	movs	r2, #1
 800f60a:	6939      	ldr	r1, [r7, #16]
 800f60c:	f7f9 ff5a 	bl	80094c4 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800f610:	6a3b      	ldr	r3, [r7, #32]
 800f612:	68db      	ldr	r3, [r3, #12]
 800f614:	685b      	ldr	r3, [r3, #4]
 800f616:	4618      	mov	r0, r3
 800f618:	f7f8 f9b7 	bl	800798a <lwip_htonl>
 800f61c:	4603      	mov	r3, r0
 800f61e:	3301      	adds	r3, #1
 800f620:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f626:	68fb      	ldr	r3, [r7, #12]
 800f628:	1ad3      	subs	r3, r2, r3
 800f62a:	2b00      	cmp	r3, #0
 800f62c:	da02      	bge.n	800f634 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	68fa      	ldr	r2, [r7, #12]
 800f632:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800f634:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f638:	2200      	movs	r2, #0
 800f63a:	69b9      	ldr	r1, [r7, #24]
 800f63c:	6878      	ldr	r0, [r7, #4]
 800f63e:	f7ff fded 	bl	800f21c <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800f642:	687a      	ldr	r2, [r7, #4]
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	3304      	adds	r3, #4
 800f648:	69b9      	ldr	r1, [r7, #24]
 800f64a:	6878      	ldr	r0, [r7, #4]
 800f64c:	f7ff fe26 	bl	800f29c <tcp_output_control_segment>
 800f650:	4603      	mov	r3, r0
 800f652:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800f654:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800f658:	4618      	mov	r0, r3
 800f65a:	372c      	adds	r7, #44	; 0x2c
 800f65c:	46bd      	mov	sp, r7
 800f65e:	bd90      	pop	{r4, r7, pc}
 800f660:	080165e4 	.word	0x080165e4
 800f664:	08016ddc 	.word	0x08016ddc
 800f668:	08016638 	.word	0x08016638

0800f66c <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800f66c:	b580      	push	{r7, lr}
 800f66e:	b082      	sub	sp, #8
 800f670:	af00      	add	r7, sp, #0
 800f672:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800f674:	f7fa f814 	bl	80096a0 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800f678:	4b0a      	ldr	r3, [pc, #40]	; (800f6a4 <tcpip_tcp_timer+0x38>)
 800f67a:	681b      	ldr	r3, [r3, #0]
 800f67c:	2b00      	cmp	r3, #0
 800f67e:	d103      	bne.n	800f688 <tcpip_tcp_timer+0x1c>
 800f680:	4b09      	ldr	r3, [pc, #36]	; (800f6a8 <tcpip_tcp_timer+0x3c>)
 800f682:	681b      	ldr	r3, [r3, #0]
 800f684:	2b00      	cmp	r3, #0
 800f686:	d005      	beq.n	800f694 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800f688:	2200      	movs	r2, #0
 800f68a:	4908      	ldr	r1, [pc, #32]	; (800f6ac <tcpip_tcp_timer+0x40>)
 800f68c:	20fa      	movs	r0, #250	; 0xfa
 800f68e:	f000 f8f3 	bl	800f878 <sys_timeout>
 800f692:	e003      	b.n	800f69c <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800f694:	4b06      	ldr	r3, [pc, #24]	; (800f6b0 <tcpip_tcp_timer+0x44>)
 800f696:	2200      	movs	r2, #0
 800f698:	601a      	str	r2, [r3, #0]
  }
}
 800f69a:	bf00      	nop
 800f69c:	bf00      	nop
 800f69e:	3708      	adds	r7, #8
 800f6a0:	46bd      	mov	sp, r7
 800f6a2:	bd80      	pop	{r7, pc}
 800f6a4:	20008220 	.word	0x20008220
 800f6a8:	20008224 	.word	0x20008224
 800f6ac:	0800f66d 	.word	0x0800f66d
 800f6b0:	2000826c 	.word	0x2000826c

0800f6b4 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800f6b4:	b580      	push	{r7, lr}
 800f6b6:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800f6b8:	4b0a      	ldr	r3, [pc, #40]	; (800f6e4 <tcp_timer_needed+0x30>)
 800f6ba:	681b      	ldr	r3, [r3, #0]
 800f6bc:	2b00      	cmp	r3, #0
 800f6be:	d10f      	bne.n	800f6e0 <tcp_timer_needed+0x2c>
 800f6c0:	4b09      	ldr	r3, [pc, #36]	; (800f6e8 <tcp_timer_needed+0x34>)
 800f6c2:	681b      	ldr	r3, [r3, #0]
 800f6c4:	2b00      	cmp	r3, #0
 800f6c6:	d103      	bne.n	800f6d0 <tcp_timer_needed+0x1c>
 800f6c8:	4b08      	ldr	r3, [pc, #32]	; (800f6ec <tcp_timer_needed+0x38>)
 800f6ca:	681b      	ldr	r3, [r3, #0]
 800f6cc:	2b00      	cmp	r3, #0
 800f6ce:	d007      	beq.n	800f6e0 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800f6d0:	4b04      	ldr	r3, [pc, #16]	; (800f6e4 <tcp_timer_needed+0x30>)
 800f6d2:	2201      	movs	r2, #1
 800f6d4:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800f6d6:	2200      	movs	r2, #0
 800f6d8:	4905      	ldr	r1, [pc, #20]	; (800f6f0 <tcp_timer_needed+0x3c>)
 800f6da:	20fa      	movs	r0, #250	; 0xfa
 800f6dc:	f000 f8cc 	bl	800f878 <sys_timeout>
  }
}
 800f6e0:	bf00      	nop
 800f6e2:	bd80      	pop	{r7, pc}
 800f6e4:	2000826c 	.word	0x2000826c
 800f6e8:	20008220 	.word	0x20008220
 800f6ec:	20008224 	.word	0x20008224
 800f6f0:	0800f66d 	.word	0x0800f66d

0800f6f4 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800f6f4:	b580      	push	{r7, lr}
 800f6f6:	b086      	sub	sp, #24
 800f6f8:	af00      	add	r7, sp, #0
 800f6fa:	60f8      	str	r0, [r7, #12]
 800f6fc:	60b9      	str	r1, [r7, #8]
 800f6fe:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800f700:	200a      	movs	r0, #10
 800f702:	f7f8 fde3 	bl	80082cc <memp_malloc>
 800f706:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800f708:	693b      	ldr	r3, [r7, #16]
 800f70a:	2b00      	cmp	r3, #0
 800f70c:	d109      	bne.n	800f722 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800f70e:	693b      	ldr	r3, [r7, #16]
 800f710:	2b00      	cmp	r3, #0
 800f712:	d151      	bne.n	800f7b8 <sys_timeout_abs+0xc4>
 800f714:	4b2a      	ldr	r3, [pc, #168]	; (800f7c0 <sys_timeout_abs+0xcc>)
 800f716:	22be      	movs	r2, #190	; 0xbe
 800f718:	492a      	ldr	r1, [pc, #168]	; (800f7c4 <sys_timeout_abs+0xd0>)
 800f71a:	482b      	ldr	r0, [pc, #172]	; (800f7c8 <sys_timeout_abs+0xd4>)
 800f71c:	f004 fbc4 	bl	8013ea8 <iprintf>
    return;
 800f720:	e04a      	b.n	800f7b8 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800f722:	693b      	ldr	r3, [r7, #16]
 800f724:	2200      	movs	r2, #0
 800f726:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800f728:	693b      	ldr	r3, [r7, #16]
 800f72a:	68ba      	ldr	r2, [r7, #8]
 800f72c:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800f72e:	693b      	ldr	r3, [r7, #16]
 800f730:	687a      	ldr	r2, [r7, #4]
 800f732:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800f734:	693b      	ldr	r3, [r7, #16]
 800f736:	68fa      	ldr	r2, [r7, #12]
 800f738:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800f73a:	4b24      	ldr	r3, [pc, #144]	; (800f7cc <sys_timeout_abs+0xd8>)
 800f73c:	681b      	ldr	r3, [r3, #0]
 800f73e:	2b00      	cmp	r3, #0
 800f740:	d103      	bne.n	800f74a <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800f742:	4a22      	ldr	r2, [pc, #136]	; (800f7cc <sys_timeout_abs+0xd8>)
 800f744:	693b      	ldr	r3, [r7, #16]
 800f746:	6013      	str	r3, [r2, #0]
    return;
 800f748:	e037      	b.n	800f7ba <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800f74a:	693b      	ldr	r3, [r7, #16]
 800f74c:	685a      	ldr	r2, [r3, #4]
 800f74e:	4b1f      	ldr	r3, [pc, #124]	; (800f7cc <sys_timeout_abs+0xd8>)
 800f750:	681b      	ldr	r3, [r3, #0]
 800f752:	685b      	ldr	r3, [r3, #4]
 800f754:	1ad3      	subs	r3, r2, r3
 800f756:	0fdb      	lsrs	r3, r3, #31
 800f758:	f003 0301 	and.w	r3, r3, #1
 800f75c:	b2db      	uxtb	r3, r3
 800f75e:	2b00      	cmp	r3, #0
 800f760:	d007      	beq.n	800f772 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800f762:	4b1a      	ldr	r3, [pc, #104]	; (800f7cc <sys_timeout_abs+0xd8>)
 800f764:	681a      	ldr	r2, [r3, #0]
 800f766:	693b      	ldr	r3, [r7, #16]
 800f768:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800f76a:	4a18      	ldr	r2, [pc, #96]	; (800f7cc <sys_timeout_abs+0xd8>)
 800f76c:	693b      	ldr	r3, [r7, #16]
 800f76e:	6013      	str	r3, [r2, #0]
 800f770:	e023      	b.n	800f7ba <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800f772:	4b16      	ldr	r3, [pc, #88]	; (800f7cc <sys_timeout_abs+0xd8>)
 800f774:	681b      	ldr	r3, [r3, #0]
 800f776:	617b      	str	r3, [r7, #20]
 800f778:	e01a      	b.n	800f7b0 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800f77a:	697b      	ldr	r3, [r7, #20]
 800f77c:	681b      	ldr	r3, [r3, #0]
 800f77e:	2b00      	cmp	r3, #0
 800f780:	d00b      	beq.n	800f79a <sys_timeout_abs+0xa6>
 800f782:	693b      	ldr	r3, [r7, #16]
 800f784:	685a      	ldr	r2, [r3, #4]
 800f786:	697b      	ldr	r3, [r7, #20]
 800f788:	681b      	ldr	r3, [r3, #0]
 800f78a:	685b      	ldr	r3, [r3, #4]
 800f78c:	1ad3      	subs	r3, r2, r3
 800f78e:	0fdb      	lsrs	r3, r3, #31
 800f790:	f003 0301 	and.w	r3, r3, #1
 800f794:	b2db      	uxtb	r3, r3
 800f796:	2b00      	cmp	r3, #0
 800f798:	d007      	beq.n	800f7aa <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800f79a:	697b      	ldr	r3, [r7, #20]
 800f79c:	681a      	ldr	r2, [r3, #0]
 800f79e:	693b      	ldr	r3, [r7, #16]
 800f7a0:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800f7a2:	697b      	ldr	r3, [r7, #20]
 800f7a4:	693a      	ldr	r2, [r7, #16]
 800f7a6:	601a      	str	r2, [r3, #0]
        break;
 800f7a8:	e007      	b.n	800f7ba <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800f7aa:	697b      	ldr	r3, [r7, #20]
 800f7ac:	681b      	ldr	r3, [r3, #0]
 800f7ae:	617b      	str	r3, [r7, #20]
 800f7b0:	697b      	ldr	r3, [r7, #20]
 800f7b2:	2b00      	cmp	r3, #0
 800f7b4:	d1e1      	bne.n	800f77a <sys_timeout_abs+0x86>
 800f7b6:	e000      	b.n	800f7ba <sys_timeout_abs+0xc6>
    return;
 800f7b8:	bf00      	nop
      }
    }
  }
}
 800f7ba:	3718      	adds	r7, #24
 800f7bc:	46bd      	mov	sp, r7
 800f7be:	bd80      	pop	{r7, pc}
 800f7c0:	08016e00 	.word	0x08016e00
 800f7c4:	08016e34 	.word	0x08016e34
 800f7c8:	08016e74 	.word	0x08016e74
 800f7cc:	20008264 	.word	0x20008264

0800f7d0 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800f7d0:	b580      	push	{r7, lr}
 800f7d2:	b086      	sub	sp, #24
 800f7d4:	af00      	add	r7, sp, #0
 800f7d6:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800f7dc:	697b      	ldr	r3, [r7, #20]
 800f7de:	685b      	ldr	r3, [r3, #4]
 800f7e0:	4798      	blx	r3

  now = sys_now();
 800f7e2:	f003 f9af 	bl	8012b44 <sys_now>
 800f7e6:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800f7e8:	697b      	ldr	r3, [r7, #20]
 800f7ea:	681a      	ldr	r2, [r3, #0]
 800f7ec:	4b0f      	ldr	r3, [pc, #60]	; (800f82c <lwip_cyclic_timer+0x5c>)
 800f7ee:	681b      	ldr	r3, [r3, #0]
 800f7f0:	4413      	add	r3, r2
 800f7f2:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800f7f4:	68fa      	ldr	r2, [r7, #12]
 800f7f6:	693b      	ldr	r3, [r7, #16]
 800f7f8:	1ad3      	subs	r3, r2, r3
 800f7fa:	0fdb      	lsrs	r3, r3, #31
 800f7fc:	f003 0301 	and.w	r3, r3, #1
 800f800:	b2db      	uxtb	r3, r3
 800f802:	2b00      	cmp	r3, #0
 800f804:	d009      	beq.n	800f81a <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800f806:	697b      	ldr	r3, [r7, #20]
 800f808:	681a      	ldr	r2, [r3, #0]
 800f80a:	693b      	ldr	r3, [r7, #16]
 800f80c:	4413      	add	r3, r2
 800f80e:	687a      	ldr	r2, [r7, #4]
 800f810:	4907      	ldr	r1, [pc, #28]	; (800f830 <lwip_cyclic_timer+0x60>)
 800f812:	4618      	mov	r0, r3
 800f814:	f7ff ff6e 	bl	800f6f4 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800f818:	e004      	b.n	800f824 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800f81a:	687a      	ldr	r2, [r7, #4]
 800f81c:	4904      	ldr	r1, [pc, #16]	; (800f830 <lwip_cyclic_timer+0x60>)
 800f81e:	68f8      	ldr	r0, [r7, #12]
 800f820:	f7ff ff68 	bl	800f6f4 <sys_timeout_abs>
}
 800f824:	bf00      	nop
 800f826:	3718      	adds	r7, #24
 800f828:	46bd      	mov	sp, r7
 800f82a:	bd80      	pop	{r7, pc}
 800f82c:	20008268 	.word	0x20008268
 800f830:	0800f7d1 	.word	0x0800f7d1

0800f834 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800f834:	b580      	push	{r7, lr}
 800f836:	b082      	sub	sp, #8
 800f838:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800f83a:	2301      	movs	r3, #1
 800f83c:	607b      	str	r3, [r7, #4]
 800f83e:	e00e      	b.n	800f85e <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800f840:	4a0b      	ldr	r2, [pc, #44]	; (800f870 <sys_timeouts_init+0x3c>)
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	00db      	lsls	r3, r3, #3
 800f84c:	4a08      	ldr	r2, [pc, #32]	; (800f870 <sys_timeouts_init+0x3c>)
 800f84e:	4413      	add	r3, r2
 800f850:	461a      	mov	r2, r3
 800f852:	4908      	ldr	r1, [pc, #32]	; (800f874 <sys_timeouts_init+0x40>)
 800f854:	f000 f810 	bl	800f878 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	3301      	adds	r3, #1
 800f85c:	607b      	str	r3, [r7, #4]
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	2b02      	cmp	r3, #2
 800f862:	d9ed      	bls.n	800f840 <sys_timeouts_init+0xc>
  }
}
 800f864:	bf00      	nop
 800f866:	bf00      	nop
 800f868:	3708      	adds	r7, #8
 800f86a:	46bd      	mov	sp, r7
 800f86c:	bd80      	pop	{r7, pc}
 800f86e:	bf00      	nop
 800f870:	08017ab8 	.word	0x08017ab8
 800f874:	0800f7d1 	.word	0x0800f7d1

0800f878 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800f878:	b580      	push	{r7, lr}
 800f87a:	b086      	sub	sp, #24
 800f87c:	af00      	add	r7, sp, #0
 800f87e:	60f8      	str	r0, [r7, #12]
 800f880:	60b9      	str	r1, [r7, #8]
 800f882:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800f884:	68fb      	ldr	r3, [r7, #12]
 800f886:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f88a:	d306      	bcc.n	800f89a <sys_timeout+0x22>
 800f88c:	4b0a      	ldr	r3, [pc, #40]	; (800f8b8 <sys_timeout+0x40>)
 800f88e:	f240 1229 	movw	r2, #297	; 0x129
 800f892:	490a      	ldr	r1, [pc, #40]	; (800f8bc <sys_timeout+0x44>)
 800f894:	480a      	ldr	r0, [pc, #40]	; (800f8c0 <sys_timeout+0x48>)
 800f896:	f004 fb07 	bl	8013ea8 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800f89a:	f003 f953 	bl	8012b44 <sys_now>
 800f89e:	4602      	mov	r2, r0
 800f8a0:	68fb      	ldr	r3, [r7, #12]
 800f8a2:	4413      	add	r3, r2
 800f8a4:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800f8a6:	687a      	ldr	r2, [r7, #4]
 800f8a8:	68b9      	ldr	r1, [r7, #8]
 800f8aa:	6978      	ldr	r0, [r7, #20]
 800f8ac:	f7ff ff22 	bl	800f6f4 <sys_timeout_abs>
#endif
}
 800f8b0:	bf00      	nop
 800f8b2:	3718      	adds	r7, #24
 800f8b4:	46bd      	mov	sp, r7
 800f8b6:	bd80      	pop	{r7, pc}
 800f8b8:	08016e00 	.word	0x08016e00
 800f8bc:	08016e9c 	.word	0x08016e9c
 800f8c0:	08016e74 	.word	0x08016e74

0800f8c4 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800f8c4:	b580      	push	{r7, lr}
 800f8c6:	b084      	sub	sp, #16
 800f8c8:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800f8ca:	f003 f93b 	bl	8012b44 <sys_now>
 800f8ce:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 800f8d0:	4b17      	ldr	r3, [pc, #92]	; (800f930 <sys_check_timeouts+0x6c>)
 800f8d2:	681b      	ldr	r3, [r3, #0]
 800f8d4:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800f8d6:	68bb      	ldr	r3, [r7, #8]
 800f8d8:	2b00      	cmp	r3, #0
 800f8da:	d022      	beq.n	800f922 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800f8dc:	68bb      	ldr	r3, [r7, #8]
 800f8de:	685b      	ldr	r3, [r3, #4]
 800f8e0:	68fa      	ldr	r2, [r7, #12]
 800f8e2:	1ad3      	subs	r3, r2, r3
 800f8e4:	0fdb      	lsrs	r3, r3, #31
 800f8e6:	f003 0301 	and.w	r3, r3, #1
 800f8ea:	b2db      	uxtb	r3, r3
 800f8ec:	2b00      	cmp	r3, #0
 800f8ee:	d11a      	bne.n	800f926 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800f8f0:	68bb      	ldr	r3, [r7, #8]
 800f8f2:	681b      	ldr	r3, [r3, #0]
 800f8f4:	4a0e      	ldr	r2, [pc, #56]	; (800f930 <sys_check_timeouts+0x6c>)
 800f8f6:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800f8f8:	68bb      	ldr	r3, [r7, #8]
 800f8fa:	689b      	ldr	r3, [r3, #8]
 800f8fc:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800f8fe:	68bb      	ldr	r3, [r7, #8]
 800f900:	68db      	ldr	r3, [r3, #12]
 800f902:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800f904:	68bb      	ldr	r3, [r7, #8]
 800f906:	685b      	ldr	r3, [r3, #4]
 800f908:	4a0a      	ldr	r2, [pc, #40]	; (800f934 <sys_check_timeouts+0x70>)
 800f90a:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800f90c:	68b9      	ldr	r1, [r7, #8]
 800f90e:	200a      	movs	r0, #10
 800f910:	f7f8 fd2e 	bl	8008370 <memp_free>
    if (handler != NULL) {
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	2b00      	cmp	r3, #0
 800f918:	d0da      	beq.n	800f8d0 <sys_check_timeouts+0xc>
      handler(arg);
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	6838      	ldr	r0, [r7, #0]
 800f91e:	4798      	blx	r3
  do {
 800f920:	e7d6      	b.n	800f8d0 <sys_check_timeouts+0xc>
      return;
 800f922:	bf00      	nop
 800f924:	e000      	b.n	800f928 <sys_check_timeouts+0x64>
      return;
 800f926:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800f928:	3710      	adds	r7, #16
 800f92a:	46bd      	mov	sp, r7
 800f92c:	bd80      	pop	{r7, pc}
 800f92e:	bf00      	nop
 800f930:	20008264 	.word	0x20008264
 800f934:	20008268 	.word	0x20008268

0800f938 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 800f938:	b580      	push	{r7, lr}
 800f93a:	b082      	sub	sp, #8
 800f93c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 800f93e:	4b16      	ldr	r3, [pc, #88]	; (800f998 <sys_timeouts_sleeptime+0x60>)
 800f940:	681b      	ldr	r3, [r3, #0]
 800f942:	2b00      	cmp	r3, #0
 800f944:	d102      	bne.n	800f94c <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 800f946:	f04f 33ff 	mov.w	r3, #4294967295
 800f94a:	e020      	b.n	800f98e <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 800f94c:	f003 f8fa 	bl	8012b44 <sys_now>
 800f950:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 800f952:	4b11      	ldr	r3, [pc, #68]	; (800f998 <sys_timeouts_sleeptime+0x60>)
 800f954:	681b      	ldr	r3, [r3, #0]
 800f956:	685a      	ldr	r2, [r3, #4]
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	1ad3      	subs	r3, r2, r3
 800f95c:	0fdb      	lsrs	r3, r3, #31
 800f95e:	f003 0301 	and.w	r3, r3, #1
 800f962:	b2db      	uxtb	r3, r3
 800f964:	2b00      	cmp	r3, #0
 800f966:	d001      	beq.n	800f96c <sys_timeouts_sleeptime+0x34>
    return 0;
 800f968:	2300      	movs	r3, #0
 800f96a:	e010      	b.n	800f98e <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 800f96c:	4b0a      	ldr	r3, [pc, #40]	; (800f998 <sys_timeouts_sleeptime+0x60>)
 800f96e:	681b      	ldr	r3, [r3, #0]
 800f970:	685a      	ldr	r2, [r3, #4]
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	1ad3      	subs	r3, r2, r3
 800f976:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 800f978:	683b      	ldr	r3, [r7, #0]
 800f97a:	2b00      	cmp	r3, #0
 800f97c:	da06      	bge.n	800f98c <sys_timeouts_sleeptime+0x54>
 800f97e:	4b07      	ldr	r3, [pc, #28]	; (800f99c <sys_timeouts_sleeptime+0x64>)
 800f980:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800f984:	4906      	ldr	r1, [pc, #24]	; (800f9a0 <sys_timeouts_sleeptime+0x68>)
 800f986:	4807      	ldr	r0, [pc, #28]	; (800f9a4 <sys_timeouts_sleeptime+0x6c>)
 800f988:	f004 fa8e 	bl	8013ea8 <iprintf>
    return ret;
 800f98c:	683b      	ldr	r3, [r7, #0]
  }
}
 800f98e:	4618      	mov	r0, r3
 800f990:	3708      	adds	r7, #8
 800f992:	46bd      	mov	sp, r7
 800f994:	bd80      	pop	{r7, pc}
 800f996:	bf00      	nop
 800f998:	20008264 	.word	0x20008264
 800f99c:	08016e00 	.word	0x08016e00
 800f9a0:	08016ed4 	.word	0x08016ed4
 800f9a4:	08016e74 	.word	0x08016e74

0800f9a8 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800f9a8:	b580      	push	{r7, lr}
 800f9aa:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800f9ac:	f004 fa94 	bl	8013ed8 <rand>
 800f9b0:	4603      	mov	r3, r0
 800f9b2:	b29b      	uxth	r3, r3
 800f9b4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800f9b8:	b29b      	uxth	r3, r3
 800f9ba:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800f9be:	b29a      	uxth	r2, r3
 800f9c0:	4b01      	ldr	r3, [pc, #4]	; (800f9c8 <udp_init+0x20>)
 800f9c2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800f9c4:	bf00      	nop
 800f9c6:	bd80      	pop	{r7, pc}
 800f9c8:	20000014 	.word	0x20000014

0800f9cc <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800f9cc:	b580      	push	{r7, lr}
 800f9ce:	b084      	sub	sp, #16
 800f9d0:	af00      	add	r7, sp, #0
 800f9d2:	60f8      	str	r0, [r7, #12]
 800f9d4:	60b9      	str	r1, [r7, #8]
 800f9d6:	4613      	mov	r3, r2
 800f9d8:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800f9da:	68fb      	ldr	r3, [r7, #12]
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	d105      	bne.n	800f9ec <udp_input_local_match+0x20>
 800f9e0:	4b27      	ldr	r3, [pc, #156]	; (800fa80 <udp_input_local_match+0xb4>)
 800f9e2:	2287      	movs	r2, #135	; 0x87
 800f9e4:	4927      	ldr	r1, [pc, #156]	; (800fa84 <udp_input_local_match+0xb8>)
 800f9e6:	4828      	ldr	r0, [pc, #160]	; (800fa88 <udp_input_local_match+0xbc>)
 800f9e8:	f004 fa5e 	bl	8013ea8 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800f9ec:	68bb      	ldr	r3, [r7, #8]
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	d105      	bne.n	800f9fe <udp_input_local_match+0x32>
 800f9f2:	4b23      	ldr	r3, [pc, #140]	; (800fa80 <udp_input_local_match+0xb4>)
 800f9f4:	2288      	movs	r2, #136	; 0x88
 800f9f6:	4925      	ldr	r1, [pc, #148]	; (800fa8c <udp_input_local_match+0xc0>)
 800f9f8:	4823      	ldr	r0, [pc, #140]	; (800fa88 <udp_input_local_match+0xbc>)
 800f9fa:	f004 fa55 	bl	8013ea8 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f9fe:	68fb      	ldr	r3, [r7, #12]
 800fa00:	7a1b      	ldrb	r3, [r3, #8]
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	d00b      	beq.n	800fa1e <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800fa06:	68fb      	ldr	r3, [r7, #12]
 800fa08:	7a1a      	ldrb	r2, [r3, #8]
 800fa0a:	4b21      	ldr	r3, [pc, #132]	; (800fa90 <udp_input_local_match+0xc4>)
 800fa0c:	685b      	ldr	r3, [r3, #4]
 800fa0e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fa12:	3301      	adds	r3, #1
 800fa14:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800fa16:	429a      	cmp	r2, r3
 800fa18:	d001      	beq.n	800fa1e <udp_input_local_match+0x52>
    return 0;
 800fa1a:	2300      	movs	r3, #0
 800fa1c:	e02b      	b.n	800fa76 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800fa1e:	79fb      	ldrb	r3, [r7, #7]
 800fa20:	2b00      	cmp	r3, #0
 800fa22:	d018      	beq.n	800fa56 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800fa24:	68fb      	ldr	r3, [r7, #12]
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	d013      	beq.n	800fa52 <udp_input_local_match+0x86>
 800fa2a:	68fb      	ldr	r3, [r7, #12]
 800fa2c:	681b      	ldr	r3, [r3, #0]
 800fa2e:	2b00      	cmp	r3, #0
 800fa30:	d00f      	beq.n	800fa52 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800fa32:	4b17      	ldr	r3, [pc, #92]	; (800fa90 <udp_input_local_match+0xc4>)
 800fa34:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800fa36:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa3a:	d00a      	beq.n	800fa52 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800fa3c:	68fb      	ldr	r3, [r7, #12]
 800fa3e:	681a      	ldr	r2, [r3, #0]
 800fa40:	4b13      	ldr	r3, [pc, #76]	; (800fa90 <udp_input_local_match+0xc4>)
 800fa42:	695b      	ldr	r3, [r3, #20]
 800fa44:	405a      	eors	r2, r3
 800fa46:	68bb      	ldr	r3, [r7, #8]
 800fa48:	3308      	adds	r3, #8
 800fa4a:	681b      	ldr	r3, [r3, #0]
 800fa4c:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800fa4e:	2b00      	cmp	r3, #0
 800fa50:	d110      	bne.n	800fa74 <udp_input_local_match+0xa8>
          return 1;
 800fa52:	2301      	movs	r3, #1
 800fa54:	e00f      	b.n	800fa76 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800fa56:	68fb      	ldr	r3, [r7, #12]
 800fa58:	2b00      	cmp	r3, #0
 800fa5a:	d009      	beq.n	800fa70 <udp_input_local_match+0xa4>
 800fa5c:	68fb      	ldr	r3, [r7, #12]
 800fa5e:	681b      	ldr	r3, [r3, #0]
 800fa60:	2b00      	cmp	r3, #0
 800fa62:	d005      	beq.n	800fa70 <udp_input_local_match+0xa4>
 800fa64:	68fb      	ldr	r3, [r7, #12]
 800fa66:	681a      	ldr	r2, [r3, #0]
 800fa68:	4b09      	ldr	r3, [pc, #36]	; (800fa90 <udp_input_local_match+0xc4>)
 800fa6a:	695b      	ldr	r3, [r3, #20]
 800fa6c:	429a      	cmp	r2, r3
 800fa6e:	d101      	bne.n	800fa74 <udp_input_local_match+0xa8>
        return 1;
 800fa70:	2301      	movs	r3, #1
 800fa72:	e000      	b.n	800fa76 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800fa74:	2300      	movs	r3, #0
}
 800fa76:	4618      	mov	r0, r3
 800fa78:	3710      	adds	r7, #16
 800fa7a:	46bd      	mov	sp, r7
 800fa7c:	bd80      	pop	{r7, pc}
 800fa7e:	bf00      	nop
 800fa80:	08016ee8 	.word	0x08016ee8
 800fa84:	08016f18 	.word	0x08016f18
 800fa88:	08016f3c 	.word	0x08016f3c
 800fa8c:	08016f64 	.word	0x08016f64
 800fa90:	20004ac0 	.word	0x20004ac0

0800fa94 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800fa94:	b590      	push	{r4, r7, lr}
 800fa96:	b08d      	sub	sp, #52	; 0x34
 800fa98:	af02      	add	r7, sp, #8
 800fa9a:	6078      	str	r0, [r7, #4]
 800fa9c:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800fa9e:	2300      	movs	r3, #0
 800faa0:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	2b00      	cmp	r3, #0
 800faa6:	d105      	bne.n	800fab4 <udp_input+0x20>
 800faa8:	4b7c      	ldr	r3, [pc, #496]	; (800fc9c <udp_input+0x208>)
 800faaa:	22cf      	movs	r2, #207	; 0xcf
 800faac:	497c      	ldr	r1, [pc, #496]	; (800fca0 <udp_input+0x20c>)
 800faae:	487d      	ldr	r0, [pc, #500]	; (800fca4 <udp_input+0x210>)
 800fab0:	f004 f9fa 	bl	8013ea8 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800fab4:	683b      	ldr	r3, [r7, #0]
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	d105      	bne.n	800fac6 <udp_input+0x32>
 800faba:	4b78      	ldr	r3, [pc, #480]	; (800fc9c <udp_input+0x208>)
 800fabc:	22d0      	movs	r2, #208	; 0xd0
 800fabe:	497a      	ldr	r1, [pc, #488]	; (800fca8 <udp_input+0x214>)
 800fac0:	4878      	ldr	r0, [pc, #480]	; (800fca4 <udp_input+0x210>)
 800fac2:	f004 f9f1 	bl	8013ea8 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	895b      	ldrh	r3, [r3, #10]
 800faca:	2b07      	cmp	r3, #7
 800facc:	d803      	bhi.n	800fad6 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800face:	6878      	ldr	r0, [r7, #4]
 800fad0:	f7f9 faf2 	bl	80090b8 <pbuf_free>
    goto end;
 800fad4:	e0de      	b.n	800fc94 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	685b      	ldr	r3, [r3, #4]
 800fada:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800fadc:	4b73      	ldr	r3, [pc, #460]	; (800fcac <udp_input+0x218>)
 800fade:	695b      	ldr	r3, [r3, #20]
 800fae0:	4a72      	ldr	r2, [pc, #456]	; (800fcac <udp_input+0x218>)
 800fae2:	6812      	ldr	r2, [r2, #0]
 800fae4:	4611      	mov	r1, r2
 800fae6:	4618      	mov	r0, r3
 800fae8:	f001 fc88 	bl	80113fc <ip4_addr_isbroadcast_u32>
 800faec:	4603      	mov	r3, r0
 800faee:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800faf0:	697b      	ldr	r3, [r7, #20]
 800faf2:	881b      	ldrh	r3, [r3, #0]
 800faf4:	b29b      	uxth	r3, r3
 800faf6:	4618      	mov	r0, r3
 800faf8:	f7f7 ff32 	bl	8007960 <lwip_htons>
 800fafc:	4603      	mov	r3, r0
 800fafe:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800fb00:	697b      	ldr	r3, [r7, #20]
 800fb02:	885b      	ldrh	r3, [r3, #2]
 800fb04:	b29b      	uxth	r3, r3
 800fb06:	4618      	mov	r0, r3
 800fb08:	f7f7 ff2a 	bl	8007960 <lwip_htons>
 800fb0c:	4603      	mov	r3, r0
 800fb0e:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800fb10:	2300      	movs	r3, #0
 800fb12:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800fb14:	2300      	movs	r3, #0
 800fb16:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800fb18:	2300      	movs	r3, #0
 800fb1a:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800fb1c:	4b64      	ldr	r3, [pc, #400]	; (800fcb0 <udp_input+0x21c>)
 800fb1e:	681b      	ldr	r3, [r3, #0]
 800fb20:	627b      	str	r3, [r7, #36]	; 0x24
 800fb22:	e054      	b.n	800fbce <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800fb24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb26:	8a5b      	ldrh	r3, [r3, #18]
 800fb28:	89fa      	ldrh	r2, [r7, #14]
 800fb2a:	429a      	cmp	r2, r3
 800fb2c:	d14a      	bne.n	800fbc4 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800fb2e:	7cfb      	ldrb	r3, [r7, #19]
 800fb30:	461a      	mov	r2, r3
 800fb32:	6839      	ldr	r1, [r7, #0]
 800fb34:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fb36:	f7ff ff49 	bl	800f9cc <udp_input_local_match>
 800fb3a:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	d041      	beq.n	800fbc4 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800fb40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb42:	7c1b      	ldrb	r3, [r3, #16]
 800fb44:	f003 0304 	and.w	r3, r3, #4
 800fb48:	2b00      	cmp	r3, #0
 800fb4a:	d11d      	bne.n	800fb88 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800fb4c:	69fb      	ldr	r3, [r7, #28]
 800fb4e:	2b00      	cmp	r3, #0
 800fb50:	d102      	bne.n	800fb58 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800fb52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb54:	61fb      	str	r3, [r7, #28]
 800fb56:	e017      	b.n	800fb88 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800fb58:	7cfb      	ldrb	r3, [r7, #19]
 800fb5a:	2b00      	cmp	r3, #0
 800fb5c:	d014      	beq.n	800fb88 <udp_input+0xf4>
 800fb5e:	4b53      	ldr	r3, [pc, #332]	; (800fcac <udp_input+0x218>)
 800fb60:	695b      	ldr	r3, [r3, #20]
 800fb62:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb66:	d10f      	bne.n	800fb88 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800fb68:	69fb      	ldr	r3, [r7, #28]
 800fb6a:	681a      	ldr	r2, [r3, #0]
 800fb6c:	683b      	ldr	r3, [r7, #0]
 800fb6e:	3304      	adds	r3, #4
 800fb70:	681b      	ldr	r3, [r3, #0]
 800fb72:	429a      	cmp	r2, r3
 800fb74:	d008      	beq.n	800fb88 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800fb76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb78:	681a      	ldr	r2, [r3, #0]
 800fb7a:	683b      	ldr	r3, [r7, #0]
 800fb7c:	3304      	adds	r3, #4
 800fb7e:	681b      	ldr	r3, [r3, #0]
 800fb80:	429a      	cmp	r2, r3
 800fb82:	d101      	bne.n	800fb88 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800fb84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb86:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800fb88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb8a:	8a9b      	ldrh	r3, [r3, #20]
 800fb8c:	8a3a      	ldrh	r2, [r7, #16]
 800fb8e:	429a      	cmp	r2, r3
 800fb90:	d118      	bne.n	800fbc4 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800fb92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb94:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800fb96:	2b00      	cmp	r3, #0
 800fb98:	d005      	beq.n	800fba6 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800fb9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb9c:	685a      	ldr	r2, [r3, #4]
 800fb9e:	4b43      	ldr	r3, [pc, #268]	; (800fcac <udp_input+0x218>)
 800fba0:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800fba2:	429a      	cmp	r2, r3
 800fba4:	d10e      	bne.n	800fbc4 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800fba6:	6a3b      	ldr	r3, [r7, #32]
 800fba8:	2b00      	cmp	r3, #0
 800fbaa:	d014      	beq.n	800fbd6 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800fbac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbae:	68da      	ldr	r2, [r3, #12]
 800fbb0:	6a3b      	ldr	r3, [r7, #32]
 800fbb2:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800fbb4:	4b3e      	ldr	r3, [pc, #248]	; (800fcb0 <udp_input+0x21c>)
 800fbb6:	681a      	ldr	r2, [r3, #0]
 800fbb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbba:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800fbbc:	4a3c      	ldr	r2, [pc, #240]	; (800fcb0 <udp_input+0x21c>)
 800fbbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbc0:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800fbc2:	e008      	b.n	800fbd6 <udp_input+0x142>
      }
    }

    prev = pcb;
 800fbc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbc6:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800fbc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbca:	68db      	ldr	r3, [r3, #12]
 800fbcc:	627b      	str	r3, [r7, #36]	; 0x24
 800fbce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbd0:	2b00      	cmp	r3, #0
 800fbd2:	d1a7      	bne.n	800fb24 <udp_input+0x90>
 800fbd4:	e000      	b.n	800fbd8 <udp_input+0x144>
        break;
 800fbd6:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800fbd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbda:	2b00      	cmp	r3, #0
 800fbdc:	d101      	bne.n	800fbe2 <udp_input+0x14e>
    pcb = uncon_pcb;
 800fbde:	69fb      	ldr	r3, [r7, #28]
 800fbe0:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800fbe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbe4:	2b00      	cmp	r3, #0
 800fbe6:	d002      	beq.n	800fbee <udp_input+0x15a>
    for_us = 1;
 800fbe8:	2301      	movs	r3, #1
 800fbea:	76fb      	strb	r3, [r7, #27]
 800fbec:	e00a      	b.n	800fc04 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800fbee:	683b      	ldr	r3, [r7, #0]
 800fbf0:	3304      	adds	r3, #4
 800fbf2:	681a      	ldr	r2, [r3, #0]
 800fbf4:	4b2d      	ldr	r3, [pc, #180]	; (800fcac <udp_input+0x218>)
 800fbf6:	695b      	ldr	r3, [r3, #20]
 800fbf8:	429a      	cmp	r2, r3
 800fbfa:	bf0c      	ite	eq
 800fbfc:	2301      	moveq	r3, #1
 800fbfe:	2300      	movne	r3, #0
 800fc00:	b2db      	uxtb	r3, r3
 800fc02:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800fc04:	7efb      	ldrb	r3, [r7, #27]
 800fc06:	2b00      	cmp	r3, #0
 800fc08:	d041      	beq.n	800fc8e <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800fc0a:	2108      	movs	r1, #8
 800fc0c:	6878      	ldr	r0, [r7, #4]
 800fc0e:	f7f9 f9cd 	bl	8008fac <pbuf_remove_header>
 800fc12:	4603      	mov	r3, r0
 800fc14:	2b00      	cmp	r3, #0
 800fc16:	d00a      	beq.n	800fc2e <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800fc18:	4b20      	ldr	r3, [pc, #128]	; (800fc9c <udp_input+0x208>)
 800fc1a:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800fc1e:	4925      	ldr	r1, [pc, #148]	; (800fcb4 <udp_input+0x220>)
 800fc20:	4820      	ldr	r0, [pc, #128]	; (800fca4 <udp_input+0x210>)
 800fc22:	f004 f941 	bl	8013ea8 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800fc26:	6878      	ldr	r0, [r7, #4]
 800fc28:	f7f9 fa46 	bl	80090b8 <pbuf_free>
      goto end;
 800fc2c:	e032      	b.n	800fc94 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800fc2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc30:	2b00      	cmp	r3, #0
 800fc32:	d012      	beq.n	800fc5a <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800fc34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc36:	699b      	ldr	r3, [r3, #24]
 800fc38:	2b00      	cmp	r3, #0
 800fc3a:	d00a      	beq.n	800fc52 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800fc3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc3e:	699c      	ldr	r4, [r3, #24]
 800fc40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc42:	69d8      	ldr	r0, [r3, #28]
 800fc44:	8a3b      	ldrh	r3, [r7, #16]
 800fc46:	9300      	str	r3, [sp, #0]
 800fc48:	4b1b      	ldr	r3, [pc, #108]	; (800fcb8 <udp_input+0x224>)
 800fc4a:	687a      	ldr	r2, [r7, #4]
 800fc4c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fc4e:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800fc50:	e021      	b.n	800fc96 <udp_input+0x202>
        pbuf_free(p);
 800fc52:	6878      	ldr	r0, [r7, #4]
 800fc54:	f7f9 fa30 	bl	80090b8 <pbuf_free>
        goto end;
 800fc58:	e01c      	b.n	800fc94 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800fc5a:	7cfb      	ldrb	r3, [r7, #19]
 800fc5c:	2b00      	cmp	r3, #0
 800fc5e:	d112      	bne.n	800fc86 <udp_input+0x1f2>
 800fc60:	4b12      	ldr	r3, [pc, #72]	; (800fcac <udp_input+0x218>)
 800fc62:	695b      	ldr	r3, [r3, #20]
 800fc64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fc68:	2be0      	cmp	r3, #224	; 0xe0
 800fc6a:	d00c      	beq.n	800fc86 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800fc6c:	4b0f      	ldr	r3, [pc, #60]	; (800fcac <udp_input+0x218>)
 800fc6e:	899b      	ldrh	r3, [r3, #12]
 800fc70:	3308      	adds	r3, #8
 800fc72:	b29b      	uxth	r3, r3
 800fc74:	b21b      	sxth	r3, r3
 800fc76:	4619      	mov	r1, r3
 800fc78:	6878      	ldr	r0, [r7, #4]
 800fc7a:	f7f9 fa0a 	bl	8009092 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800fc7e:	2103      	movs	r1, #3
 800fc80:	6878      	ldr	r0, [r7, #4]
 800fc82:	f001 f89b 	bl	8010dbc <icmp_dest_unreach>
      pbuf_free(p);
 800fc86:	6878      	ldr	r0, [r7, #4]
 800fc88:	f7f9 fa16 	bl	80090b8 <pbuf_free>
  return;
 800fc8c:	e003      	b.n	800fc96 <udp_input+0x202>
    pbuf_free(p);
 800fc8e:	6878      	ldr	r0, [r7, #4]
 800fc90:	f7f9 fa12 	bl	80090b8 <pbuf_free>
  return;
 800fc94:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800fc96:	372c      	adds	r7, #44	; 0x2c
 800fc98:	46bd      	mov	sp, r7
 800fc9a:	bd90      	pop	{r4, r7, pc}
 800fc9c:	08016ee8 	.word	0x08016ee8
 800fca0:	08016f8c 	.word	0x08016f8c
 800fca4:	08016f3c 	.word	0x08016f3c
 800fca8:	08016fa4 	.word	0x08016fa4
 800fcac:	20004ac0 	.word	0x20004ac0
 800fcb0:	20008270 	.word	0x20008270
 800fcb4:	08016fc0 	.word	0x08016fc0
 800fcb8:	20004ad0 	.word	0x20004ad0

0800fcbc <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800fcbc:	b480      	push	{r7}
 800fcbe:	b085      	sub	sp, #20
 800fcc0:	af00      	add	r7, sp, #0
 800fcc2:	6078      	str	r0, [r7, #4]
 800fcc4:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	2b00      	cmp	r3, #0
 800fcca:	d01e      	beq.n	800fd0a <udp_netif_ip_addr_changed+0x4e>
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	681b      	ldr	r3, [r3, #0]
 800fcd0:	2b00      	cmp	r3, #0
 800fcd2:	d01a      	beq.n	800fd0a <udp_netif_ip_addr_changed+0x4e>
 800fcd4:	683b      	ldr	r3, [r7, #0]
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	d017      	beq.n	800fd0a <udp_netif_ip_addr_changed+0x4e>
 800fcda:	683b      	ldr	r3, [r7, #0]
 800fcdc:	681b      	ldr	r3, [r3, #0]
 800fcde:	2b00      	cmp	r3, #0
 800fce0:	d013      	beq.n	800fd0a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800fce2:	4b0d      	ldr	r3, [pc, #52]	; (800fd18 <udp_netif_ip_addr_changed+0x5c>)
 800fce4:	681b      	ldr	r3, [r3, #0]
 800fce6:	60fb      	str	r3, [r7, #12]
 800fce8:	e00c      	b.n	800fd04 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800fcea:	68fb      	ldr	r3, [r7, #12]
 800fcec:	681a      	ldr	r2, [r3, #0]
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	681b      	ldr	r3, [r3, #0]
 800fcf2:	429a      	cmp	r2, r3
 800fcf4:	d103      	bne.n	800fcfe <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800fcf6:	683b      	ldr	r3, [r7, #0]
 800fcf8:	681a      	ldr	r2, [r3, #0]
 800fcfa:	68fb      	ldr	r3, [r7, #12]
 800fcfc:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800fcfe:	68fb      	ldr	r3, [r7, #12]
 800fd00:	68db      	ldr	r3, [r3, #12]
 800fd02:	60fb      	str	r3, [r7, #12]
 800fd04:	68fb      	ldr	r3, [r7, #12]
 800fd06:	2b00      	cmp	r3, #0
 800fd08:	d1ef      	bne.n	800fcea <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800fd0a:	bf00      	nop
 800fd0c:	3714      	adds	r7, #20
 800fd0e:	46bd      	mov	sp, r7
 800fd10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd14:	4770      	bx	lr
 800fd16:	bf00      	nop
 800fd18:	20008270 	.word	0x20008270

0800fd1c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800fd1c:	b580      	push	{r7, lr}
 800fd1e:	b082      	sub	sp, #8
 800fd20:	af00      	add	r7, sp, #0
 800fd22:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800fd24:	4915      	ldr	r1, [pc, #84]	; (800fd7c <etharp_free_entry+0x60>)
 800fd26:	687a      	ldr	r2, [r7, #4]
 800fd28:	4613      	mov	r3, r2
 800fd2a:	005b      	lsls	r3, r3, #1
 800fd2c:	4413      	add	r3, r2
 800fd2e:	00db      	lsls	r3, r3, #3
 800fd30:	440b      	add	r3, r1
 800fd32:	681b      	ldr	r3, [r3, #0]
 800fd34:	2b00      	cmp	r3, #0
 800fd36:	d013      	beq.n	800fd60 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800fd38:	4910      	ldr	r1, [pc, #64]	; (800fd7c <etharp_free_entry+0x60>)
 800fd3a:	687a      	ldr	r2, [r7, #4]
 800fd3c:	4613      	mov	r3, r2
 800fd3e:	005b      	lsls	r3, r3, #1
 800fd40:	4413      	add	r3, r2
 800fd42:	00db      	lsls	r3, r3, #3
 800fd44:	440b      	add	r3, r1
 800fd46:	681b      	ldr	r3, [r3, #0]
 800fd48:	4618      	mov	r0, r3
 800fd4a:	f7f9 f9b5 	bl	80090b8 <pbuf_free>
    arp_table[i].q = NULL;
 800fd4e:	490b      	ldr	r1, [pc, #44]	; (800fd7c <etharp_free_entry+0x60>)
 800fd50:	687a      	ldr	r2, [r7, #4]
 800fd52:	4613      	mov	r3, r2
 800fd54:	005b      	lsls	r3, r3, #1
 800fd56:	4413      	add	r3, r2
 800fd58:	00db      	lsls	r3, r3, #3
 800fd5a:	440b      	add	r3, r1
 800fd5c:	2200      	movs	r2, #0
 800fd5e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800fd60:	4906      	ldr	r1, [pc, #24]	; (800fd7c <etharp_free_entry+0x60>)
 800fd62:	687a      	ldr	r2, [r7, #4]
 800fd64:	4613      	mov	r3, r2
 800fd66:	005b      	lsls	r3, r3, #1
 800fd68:	4413      	add	r3, r2
 800fd6a:	00db      	lsls	r3, r3, #3
 800fd6c:	440b      	add	r3, r1
 800fd6e:	3314      	adds	r3, #20
 800fd70:	2200      	movs	r2, #0
 800fd72:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800fd74:	bf00      	nop
 800fd76:	3708      	adds	r7, #8
 800fd78:	46bd      	mov	sp, r7
 800fd7a:	bd80      	pop	{r7, pc}
 800fd7c:	20008274 	.word	0x20008274

0800fd80 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800fd80:	b580      	push	{r7, lr}
 800fd82:	b082      	sub	sp, #8
 800fd84:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800fd86:	2300      	movs	r3, #0
 800fd88:	607b      	str	r3, [r7, #4]
 800fd8a:	e096      	b.n	800feba <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800fd8c:	494f      	ldr	r1, [pc, #316]	; (800fecc <etharp_tmr+0x14c>)
 800fd8e:	687a      	ldr	r2, [r7, #4]
 800fd90:	4613      	mov	r3, r2
 800fd92:	005b      	lsls	r3, r3, #1
 800fd94:	4413      	add	r3, r2
 800fd96:	00db      	lsls	r3, r3, #3
 800fd98:	440b      	add	r3, r1
 800fd9a:	3314      	adds	r3, #20
 800fd9c:	781b      	ldrb	r3, [r3, #0]
 800fd9e:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800fda0:	78fb      	ldrb	r3, [r7, #3]
 800fda2:	2b00      	cmp	r3, #0
 800fda4:	f000 8086 	beq.w	800feb4 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800fda8:	4948      	ldr	r1, [pc, #288]	; (800fecc <etharp_tmr+0x14c>)
 800fdaa:	687a      	ldr	r2, [r7, #4]
 800fdac:	4613      	mov	r3, r2
 800fdae:	005b      	lsls	r3, r3, #1
 800fdb0:	4413      	add	r3, r2
 800fdb2:	00db      	lsls	r3, r3, #3
 800fdb4:	440b      	add	r3, r1
 800fdb6:	3312      	adds	r3, #18
 800fdb8:	881b      	ldrh	r3, [r3, #0]
 800fdba:	3301      	adds	r3, #1
 800fdbc:	b298      	uxth	r0, r3
 800fdbe:	4943      	ldr	r1, [pc, #268]	; (800fecc <etharp_tmr+0x14c>)
 800fdc0:	687a      	ldr	r2, [r7, #4]
 800fdc2:	4613      	mov	r3, r2
 800fdc4:	005b      	lsls	r3, r3, #1
 800fdc6:	4413      	add	r3, r2
 800fdc8:	00db      	lsls	r3, r3, #3
 800fdca:	440b      	add	r3, r1
 800fdcc:	3312      	adds	r3, #18
 800fdce:	4602      	mov	r2, r0
 800fdd0:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800fdd2:	493e      	ldr	r1, [pc, #248]	; (800fecc <etharp_tmr+0x14c>)
 800fdd4:	687a      	ldr	r2, [r7, #4]
 800fdd6:	4613      	mov	r3, r2
 800fdd8:	005b      	lsls	r3, r3, #1
 800fdda:	4413      	add	r3, r2
 800fddc:	00db      	lsls	r3, r3, #3
 800fdde:	440b      	add	r3, r1
 800fde0:	3312      	adds	r3, #18
 800fde2:	881b      	ldrh	r3, [r3, #0]
 800fde4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800fde8:	d215      	bcs.n	800fe16 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800fdea:	4938      	ldr	r1, [pc, #224]	; (800fecc <etharp_tmr+0x14c>)
 800fdec:	687a      	ldr	r2, [r7, #4]
 800fdee:	4613      	mov	r3, r2
 800fdf0:	005b      	lsls	r3, r3, #1
 800fdf2:	4413      	add	r3, r2
 800fdf4:	00db      	lsls	r3, r3, #3
 800fdf6:	440b      	add	r3, r1
 800fdf8:	3314      	adds	r3, #20
 800fdfa:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800fdfc:	2b01      	cmp	r3, #1
 800fdfe:	d10e      	bne.n	800fe1e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800fe00:	4932      	ldr	r1, [pc, #200]	; (800fecc <etharp_tmr+0x14c>)
 800fe02:	687a      	ldr	r2, [r7, #4]
 800fe04:	4613      	mov	r3, r2
 800fe06:	005b      	lsls	r3, r3, #1
 800fe08:	4413      	add	r3, r2
 800fe0a:	00db      	lsls	r3, r3, #3
 800fe0c:	440b      	add	r3, r1
 800fe0e:	3312      	adds	r3, #18
 800fe10:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800fe12:	2b04      	cmp	r3, #4
 800fe14:	d903      	bls.n	800fe1e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800fe16:	6878      	ldr	r0, [r7, #4]
 800fe18:	f7ff ff80 	bl	800fd1c <etharp_free_entry>
 800fe1c:	e04a      	b.n	800feb4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800fe1e:	492b      	ldr	r1, [pc, #172]	; (800fecc <etharp_tmr+0x14c>)
 800fe20:	687a      	ldr	r2, [r7, #4]
 800fe22:	4613      	mov	r3, r2
 800fe24:	005b      	lsls	r3, r3, #1
 800fe26:	4413      	add	r3, r2
 800fe28:	00db      	lsls	r3, r3, #3
 800fe2a:	440b      	add	r3, r1
 800fe2c:	3314      	adds	r3, #20
 800fe2e:	781b      	ldrb	r3, [r3, #0]
 800fe30:	2b03      	cmp	r3, #3
 800fe32:	d10a      	bne.n	800fe4a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800fe34:	4925      	ldr	r1, [pc, #148]	; (800fecc <etharp_tmr+0x14c>)
 800fe36:	687a      	ldr	r2, [r7, #4]
 800fe38:	4613      	mov	r3, r2
 800fe3a:	005b      	lsls	r3, r3, #1
 800fe3c:	4413      	add	r3, r2
 800fe3e:	00db      	lsls	r3, r3, #3
 800fe40:	440b      	add	r3, r1
 800fe42:	3314      	adds	r3, #20
 800fe44:	2204      	movs	r2, #4
 800fe46:	701a      	strb	r2, [r3, #0]
 800fe48:	e034      	b.n	800feb4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800fe4a:	4920      	ldr	r1, [pc, #128]	; (800fecc <etharp_tmr+0x14c>)
 800fe4c:	687a      	ldr	r2, [r7, #4]
 800fe4e:	4613      	mov	r3, r2
 800fe50:	005b      	lsls	r3, r3, #1
 800fe52:	4413      	add	r3, r2
 800fe54:	00db      	lsls	r3, r3, #3
 800fe56:	440b      	add	r3, r1
 800fe58:	3314      	adds	r3, #20
 800fe5a:	781b      	ldrb	r3, [r3, #0]
 800fe5c:	2b04      	cmp	r3, #4
 800fe5e:	d10a      	bne.n	800fe76 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800fe60:	491a      	ldr	r1, [pc, #104]	; (800fecc <etharp_tmr+0x14c>)
 800fe62:	687a      	ldr	r2, [r7, #4]
 800fe64:	4613      	mov	r3, r2
 800fe66:	005b      	lsls	r3, r3, #1
 800fe68:	4413      	add	r3, r2
 800fe6a:	00db      	lsls	r3, r3, #3
 800fe6c:	440b      	add	r3, r1
 800fe6e:	3314      	adds	r3, #20
 800fe70:	2202      	movs	r2, #2
 800fe72:	701a      	strb	r2, [r3, #0]
 800fe74:	e01e      	b.n	800feb4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800fe76:	4915      	ldr	r1, [pc, #84]	; (800fecc <etharp_tmr+0x14c>)
 800fe78:	687a      	ldr	r2, [r7, #4]
 800fe7a:	4613      	mov	r3, r2
 800fe7c:	005b      	lsls	r3, r3, #1
 800fe7e:	4413      	add	r3, r2
 800fe80:	00db      	lsls	r3, r3, #3
 800fe82:	440b      	add	r3, r1
 800fe84:	3314      	adds	r3, #20
 800fe86:	781b      	ldrb	r3, [r3, #0]
 800fe88:	2b01      	cmp	r3, #1
 800fe8a:	d113      	bne.n	800feb4 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800fe8c:	490f      	ldr	r1, [pc, #60]	; (800fecc <etharp_tmr+0x14c>)
 800fe8e:	687a      	ldr	r2, [r7, #4]
 800fe90:	4613      	mov	r3, r2
 800fe92:	005b      	lsls	r3, r3, #1
 800fe94:	4413      	add	r3, r2
 800fe96:	00db      	lsls	r3, r3, #3
 800fe98:	440b      	add	r3, r1
 800fe9a:	3308      	adds	r3, #8
 800fe9c:	6818      	ldr	r0, [r3, #0]
 800fe9e:	687a      	ldr	r2, [r7, #4]
 800fea0:	4613      	mov	r3, r2
 800fea2:	005b      	lsls	r3, r3, #1
 800fea4:	4413      	add	r3, r2
 800fea6:	00db      	lsls	r3, r3, #3
 800fea8:	4a08      	ldr	r2, [pc, #32]	; (800fecc <etharp_tmr+0x14c>)
 800feaa:	4413      	add	r3, r2
 800feac:	3304      	adds	r3, #4
 800feae:	4619      	mov	r1, r3
 800feb0:	f000 fe6e 	bl	8010b90 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	3301      	adds	r3, #1
 800feb8:	607b      	str	r3, [r7, #4]
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	2b09      	cmp	r3, #9
 800febe:	f77f af65 	ble.w	800fd8c <etharp_tmr+0xc>
      }
    }
  }
}
 800fec2:	bf00      	nop
 800fec4:	bf00      	nop
 800fec6:	3708      	adds	r7, #8
 800fec8:	46bd      	mov	sp, r7
 800feca:	bd80      	pop	{r7, pc}
 800fecc:	20008274 	.word	0x20008274

0800fed0 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800fed0:	b580      	push	{r7, lr}
 800fed2:	b08a      	sub	sp, #40	; 0x28
 800fed4:	af00      	add	r7, sp, #0
 800fed6:	60f8      	str	r0, [r7, #12]
 800fed8:	460b      	mov	r3, r1
 800feda:	607a      	str	r2, [r7, #4]
 800fedc:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800fede:	230a      	movs	r3, #10
 800fee0:	84fb      	strh	r3, [r7, #38]	; 0x26
 800fee2:	230a      	movs	r3, #10
 800fee4:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800fee6:	230a      	movs	r3, #10
 800fee8:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800feea:	2300      	movs	r3, #0
 800feec:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800feee:	230a      	movs	r3, #10
 800fef0:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800fef2:	2300      	movs	r3, #0
 800fef4:	83bb      	strh	r3, [r7, #28]
 800fef6:	2300      	movs	r3, #0
 800fef8:	837b      	strh	r3, [r7, #26]
 800fefa:	2300      	movs	r3, #0
 800fefc:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800fefe:	2300      	movs	r3, #0
 800ff00:	843b      	strh	r3, [r7, #32]
 800ff02:	e0ae      	b.n	8010062 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800ff04:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ff08:	49a6      	ldr	r1, [pc, #664]	; (80101a4 <etharp_find_entry+0x2d4>)
 800ff0a:	4613      	mov	r3, r2
 800ff0c:	005b      	lsls	r3, r3, #1
 800ff0e:	4413      	add	r3, r2
 800ff10:	00db      	lsls	r3, r3, #3
 800ff12:	440b      	add	r3, r1
 800ff14:	3314      	adds	r3, #20
 800ff16:	781b      	ldrb	r3, [r3, #0]
 800ff18:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800ff1a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800ff1e:	2b0a      	cmp	r3, #10
 800ff20:	d105      	bne.n	800ff2e <etharp_find_entry+0x5e>
 800ff22:	7dfb      	ldrb	r3, [r7, #23]
 800ff24:	2b00      	cmp	r3, #0
 800ff26:	d102      	bne.n	800ff2e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800ff28:	8c3b      	ldrh	r3, [r7, #32]
 800ff2a:	847b      	strh	r3, [r7, #34]	; 0x22
 800ff2c:	e095      	b.n	801005a <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800ff2e:	7dfb      	ldrb	r3, [r7, #23]
 800ff30:	2b00      	cmp	r3, #0
 800ff32:	f000 8092 	beq.w	801005a <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800ff36:	7dfb      	ldrb	r3, [r7, #23]
 800ff38:	2b01      	cmp	r3, #1
 800ff3a:	d009      	beq.n	800ff50 <etharp_find_entry+0x80>
 800ff3c:	7dfb      	ldrb	r3, [r7, #23]
 800ff3e:	2b01      	cmp	r3, #1
 800ff40:	d806      	bhi.n	800ff50 <etharp_find_entry+0x80>
 800ff42:	4b99      	ldr	r3, [pc, #612]	; (80101a8 <etharp_find_entry+0x2d8>)
 800ff44:	f240 1223 	movw	r2, #291	; 0x123
 800ff48:	4998      	ldr	r1, [pc, #608]	; (80101ac <etharp_find_entry+0x2dc>)
 800ff4a:	4899      	ldr	r0, [pc, #612]	; (80101b0 <etharp_find_entry+0x2e0>)
 800ff4c:	f003 ffac 	bl	8013ea8 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800ff50:	68fb      	ldr	r3, [r7, #12]
 800ff52:	2b00      	cmp	r3, #0
 800ff54:	d020      	beq.n	800ff98 <etharp_find_entry+0xc8>
 800ff56:	68fb      	ldr	r3, [r7, #12]
 800ff58:	6819      	ldr	r1, [r3, #0]
 800ff5a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ff5e:	4891      	ldr	r0, [pc, #580]	; (80101a4 <etharp_find_entry+0x2d4>)
 800ff60:	4613      	mov	r3, r2
 800ff62:	005b      	lsls	r3, r3, #1
 800ff64:	4413      	add	r3, r2
 800ff66:	00db      	lsls	r3, r3, #3
 800ff68:	4403      	add	r3, r0
 800ff6a:	3304      	adds	r3, #4
 800ff6c:	681b      	ldr	r3, [r3, #0]
 800ff6e:	4299      	cmp	r1, r3
 800ff70:	d112      	bne.n	800ff98 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	2b00      	cmp	r3, #0
 800ff76:	d00c      	beq.n	800ff92 <etharp_find_entry+0xc2>
 800ff78:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ff7c:	4989      	ldr	r1, [pc, #548]	; (80101a4 <etharp_find_entry+0x2d4>)
 800ff7e:	4613      	mov	r3, r2
 800ff80:	005b      	lsls	r3, r3, #1
 800ff82:	4413      	add	r3, r2
 800ff84:	00db      	lsls	r3, r3, #3
 800ff86:	440b      	add	r3, r1
 800ff88:	3308      	adds	r3, #8
 800ff8a:	681b      	ldr	r3, [r3, #0]
 800ff8c:	687a      	ldr	r2, [r7, #4]
 800ff8e:	429a      	cmp	r2, r3
 800ff90:	d102      	bne.n	800ff98 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800ff92:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800ff96:	e100      	b.n	801019a <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800ff98:	7dfb      	ldrb	r3, [r7, #23]
 800ff9a:	2b01      	cmp	r3, #1
 800ff9c:	d140      	bne.n	8010020 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800ff9e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ffa2:	4980      	ldr	r1, [pc, #512]	; (80101a4 <etharp_find_entry+0x2d4>)
 800ffa4:	4613      	mov	r3, r2
 800ffa6:	005b      	lsls	r3, r3, #1
 800ffa8:	4413      	add	r3, r2
 800ffaa:	00db      	lsls	r3, r3, #3
 800ffac:	440b      	add	r3, r1
 800ffae:	681b      	ldr	r3, [r3, #0]
 800ffb0:	2b00      	cmp	r3, #0
 800ffb2:	d01a      	beq.n	800ffea <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800ffb4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ffb8:	497a      	ldr	r1, [pc, #488]	; (80101a4 <etharp_find_entry+0x2d4>)
 800ffba:	4613      	mov	r3, r2
 800ffbc:	005b      	lsls	r3, r3, #1
 800ffbe:	4413      	add	r3, r2
 800ffc0:	00db      	lsls	r3, r3, #3
 800ffc2:	440b      	add	r3, r1
 800ffc4:	3312      	adds	r3, #18
 800ffc6:	881b      	ldrh	r3, [r3, #0]
 800ffc8:	8bba      	ldrh	r2, [r7, #28]
 800ffca:	429a      	cmp	r2, r3
 800ffcc:	d845      	bhi.n	801005a <etharp_find_entry+0x18a>
            old_queue = i;
 800ffce:	8c3b      	ldrh	r3, [r7, #32]
 800ffd0:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800ffd2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ffd6:	4973      	ldr	r1, [pc, #460]	; (80101a4 <etharp_find_entry+0x2d4>)
 800ffd8:	4613      	mov	r3, r2
 800ffda:	005b      	lsls	r3, r3, #1
 800ffdc:	4413      	add	r3, r2
 800ffde:	00db      	lsls	r3, r3, #3
 800ffe0:	440b      	add	r3, r1
 800ffe2:	3312      	adds	r3, #18
 800ffe4:	881b      	ldrh	r3, [r3, #0]
 800ffe6:	83bb      	strh	r3, [r7, #28]
 800ffe8:	e037      	b.n	801005a <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800ffea:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ffee:	496d      	ldr	r1, [pc, #436]	; (80101a4 <etharp_find_entry+0x2d4>)
 800fff0:	4613      	mov	r3, r2
 800fff2:	005b      	lsls	r3, r3, #1
 800fff4:	4413      	add	r3, r2
 800fff6:	00db      	lsls	r3, r3, #3
 800fff8:	440b      	add	r3, r1
 800fffa:	3312      	adds	r3, #18
 800fffc:	881b      	ldrh	r3, [r3, #0]
 800fffe:	8b7a      	ldrh	r2, [r7, #26]
 8010000:	429a      	cmp	r2, r3
 8010002:	d82a      	bhi.n	801005a <etharp_find_entry+0x18a>
            old_pending = i;
 8010004:	8c3b      	ldrh	r3, [r7, #32]
 8010006:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8010008:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801000c:	4965      	ldr	r1, [pc, #404]	; (80101a4 <etharp_find_entry+0x2d4>)
 801000e:	4613      	mov	r3, r2
 8010010:	005b      	lsls	r3, r3, #1
 8010012:	4413      	add	r3, r2
 8010014:	00db      	lsls	r3, r3, #3
 8010016:	440b      	add	r3, r1
 8010018:	3312      	adds	r3, #18
 801001a:	881b      	ldrh	r3, [r3, #0]
 801001c:	837b      	strh	r3, [r7, #26]
 801001e:	e01c      	b.n	801005a <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8010020:	7dfb      	ldrb	r3, [r7, #23]
 8010022:	2b01      	cmp	r3, #1
 8010024:	d919      	bls.n	801005a <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8010026:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801002a:	495e      	ldr	r1, [pc, #376]	; (80101a4 <etharp_find_entry+0x2d4>)
 801002c:	4613      	mov	r3, r2
 801002e:	005b      	lsls	r3, r3, #1
 8010030:	4413      	add	r3, r2
 8010032:	00db      	lsls	r3, r3, #3
 8010034:	440b      	add	r3, r1
 8010036:	3312      	adds	r3, #18
 8010038:	881b      	ldrh	r3, [r3, #0]
 801003a:	8b3a      	ldrh	r2, [r7, #24]
 801003c:	429a      	cmp	r2, r3
 801003e:	d80c      	bhi.n	801005a <etharp_find_entry+0x18a>
            old_stable = i;
 8010040:	8c3b      	ldrh	r3, [r7, #32]
 8010042:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8010044:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010048:	4956      	ldr	r1, [pc, #344]	; (80101a4 <etharp_find_entry+0x2d4>)
 801004a:	4613      	mov	r3, r2
 801004c:	005b      	lsls	r3, r3, #1
 801004e:	4413      	add	r3, r2
 8010050:	00db      	lsls	r3, r3, #3
 8010052:	440b      	add	r3, r1
 8010054:	3312      	adds	r3, #18
 8010056:	881b      	ldrh	r3, [r3, #0]
 8010058:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801005a:	8c3b      	ldrh	r3, [r7, #32]
 801005c:	3301      	adds	r3, #1
 801005e:	b29b      	uxth	r3, r3
 8010060:	843b      	strh	r3, [r7, #32]
 8010062:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010066:	2b09      	cmp	r3, #9
 8010068:	f77f af4c 	ble.w	800ff04 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801006c:	7afb      	ldrb	r3, [r7, #11]
 801006e:	f003 0302 	and.w	r3, r3, #2
 8010072:	2b00      	cmp	r3, #0
 8010074:	d108      	bne.n	8010088 <etharp_find_entry+0x1b8>
 8010076:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801007a:	2b0a      	cmp	r3, #10
 801007c:	d107      	bne.n	801008e <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801007e:	7afb      	ldrb	r3, [r7, #11]
 8010080:	f003 0301 	and.w	r3, r3, #1
 8010084:	2b00      	cmp	r3, #0
 8010086:	d102      	bne.n	801008e <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8010088:	f04f 33ff 	mov.w	r3, #4294967295
 801008c:	e085      	b.n	801019a <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801008e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8010092:	2b09      	cmp	r3, #9
 8010094:	dc02      	bgt.n	801009c <etharp_find_entry+0x1cc>
    i = empty;
 8010096:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010098:	843b      	strh	r3, [r7, #32]
 801009a:	e039      	b.n	8010110 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 801009c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80100a0:	2b09      	cmp	r3, #9
 80100a2:	dc14      	bgt.n	80100ce <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 80100a4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80100a6:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80100a8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80100ac:	493d      	ldr	r1, [pc, #244]	; (80101a4 <etharp_find_entry+0x2d4>)
 80100ae:	4613      	mov	r3, r2
 80100b0:	005b      	lsls	r3, r3, #1
 80100b2:	4413      	add	r3, r2
 80100b4:	00db      	lsls	r3, r3, #3
 80100b6:	440b      	add	r3, r1
 80100b8:	681b      	ldr	r3, [r3, #0]
 80100ba:	2b00      	cmp	r3, #0
 80100bc:	d018      	beq.n	80100f0 <etharp_find_entry+0x220>
 80100be:	4b3a      	ldr	r3, [pc, #232]	; (80101a8 <etharp_find_entry+0x2d8>)
 80100c0:	f240 126d 	movw	r2, #365	; 0x16d
 80100c4:	493b      	ldr	r1, [pc, #236]	; (80101b4 <etharp_find_entry+0x2e4>)
 80100c6:	483a      	ldr	r0, [pc, #232]	; (80101b0 <etharp_find_entry+0x2e0>)
 80100c8:	f003 feee 	bl	8013ea8 <iprintf>
 80100cc:	e010      	b.n	80100f0 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80100ce:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80100d2:	2b09      	cmp	r3, #9
 80100d4:	dc02      	bgt.n	80100dc <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 80100d6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80100d8:	843b      	strh	r3, [r7, #32]
 80100da:	e009      	b.n	80100f0 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80100dc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80100e0:	2b09      	cmp	r3, #9
 80100e2:	dc02      	bgt.n	80100ea <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 80100e4:	8bfb      	ldrh	r3, [r7, #30]
 80100e6:	843b      	strh	r3, [r7, #32]
 80100e8:	e002      	b.n	80100f0 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 80100ea:	f04f 33ff 	mov.w	r3, #4294967295
 80100ee:	e054      	b.n	801019a <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80100f0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80100f4:	2b09      	cmp	r3, #9
 80100f6:	dd06      	ble.n	8010106 <etharp_find_entry+0x236>
 80100f8:	4b2b      	ldr	r3, [pc, #172]	; (80101a8 <etharp_find_entry+0x2d8>)
 80100fa:	f240 127f 	movw	r2, #383	; 0x17f
 80100fe:	492e      	ldr	r1, [pc, #184]	; (80101b8 <etharp_find_entry+0x2e8>)
 8010100:	482b      	ldr	r0, [pc, #172]	; (80101b0 <etharp_find_entry+0x2e0>)
 8010102:	f003 fed1 	bl	8013ea8 <iprintf>
    etharp_free_entry(i);
 8010106:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801010a:	4618      	mov	r0, r3
 801010c:	f7ff fe06 	bl	800fd1c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8010110:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010114:	2b09      	cmp	r3, #9
 8010116:	dd06      	ble.n	8010126 <etharp_find_entry+0x256>
 8010118:	4b23      	ldr	r3, [pc, #140]	; (80101a8 <etharp_find_entry+0x2d8>)
 801011a:	f240 1283 	movw	r2, #387	; 0x183
 801011e:	4926      	ldr	r1, [pc, #152]	; (80101b8 <etharp_find_entry+0x2e8>)
 8010120:	4823      	ldr	r0, [pc, #140]	; (80101b0 <etharp_find_entry+0x2e0>)
 8010122:	f003 fec1 	bl	8013ea8 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8010126:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801012a:	491e      	ldr	r1, [pc, #120]	; (80101a4 <etharp_find_entry+0x2d4>)
 801012c:	4613      	mov	r3, r2
 801012e:	005b      	lsls	r3, r3, #1
 8010130:	4413      	add	r3, r2
 8010132:	00db      	lsls	r3, r3, #3
 8010134:	440b      	add	r3, r1
 8010136:	3314      	adds	r3, #20
 8010138:	781b      	ldrb	r3, [r3, #0]
 801013a:	2b00      	cmp	r3, #0
 801013c:	d006      	beq.n	801014c <etharp_find_entry+0x27c>
 801013e:	4b1a      	ldr	r3, [pc, #104]	; (80101a8 <etharp_find_entry+0x2d8>)
 8010140:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8010144:	491d      	ldr	r1, [pc, #116]	; (80101bc <etharp_find_entry+0x2ec>)
 8010146:	481a      	ldr	r0, [pc, #104]	; (80101b0 <etharp_find_entry+0x2e0>)
 8010148:	f003 feae 	bl	8013ea8 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801014c:	68fb      	ldr	r3, [r7, #12]
 801014e:	2b00      	cmp	r3, #0
 8010150:	d00b      	beq.n	801016a <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8010152:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010156:	68fb      	ldr	r3, [r7, #12]
 8010158:	6819      	ldr	r1, [r3, #0]
 801015a:	4812      	ldr	r0, [pc, #72]	; (80101a4 <etharp_find_entry+0x2d4>)
 801015c:	4613      	mov	r3, r2
 801015e:	005b      	lsls	r3, r3, #1
 8010160:	4413      	add	r3, r2
 8010162:	00db      	lsls	r3, r3, #3
 8010164:	4403      	add	r3, r0
 8010166:	3304      	adds	r3, #4
 8010168:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801016a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801016e:	490d      	ldr	r1, [pc, #52]	; (80101a4 <etharp_find_entry+0x2d4>)
 8010170:	4613      	mov	r3, r2
 8010172:	005b      	lsls	r3, r3, #1
 8010174:	4413      	add	r3, r2
 8010176:	00db      	lsls	r3, r3, #3
 8010178:	440b      	add	r3, r1
 801017a:	3312      	adds	r3, #18
 801017c:	2200      	movs	r2, #0
 801017e:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8010180:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010184:	4907      	ldr	r1, [pc, #28]	; (80101a4 <etharp_find_entry+0x2d4>)
 8010186:	4613      	mov	r3, r2
 8010188:	005b      	lsls	r3, r3, #1
 801018a:	4413      	add	r3, r2
 801018c:	00db      	lsls	r3, r3, #3
 801018e:	440b      	add	r3, r1
 8010190:	3308      	adds	r3, #8
 8010192:	687a      	ldr	r2, [r7, #4]
 8010194:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8010196:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801019a:	4618      	mov	r0, r3
 801019c:	3728      	adds	r7, #40	; 0x28
 801019e:	46bd      	mov	sp, r7
 80101a0:	bd80      	pop	{r7, pc}
 80101a2:	bf00      	nop
 80101a4:	20008274 	.word	0x20008274
 80101a8:	0801724c 	.word	0x0801724c
 80101ac:	08017284 	.word	0x08017284
 80101b0:	080172c4 	.word	0x080172c4
 80101b4:	080172ec 	.word	0x080172ec
 80101b8:	08017304 	.word	0x08017304
 80101bc:	08017318 	.word	0x08017318

080101c0 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80101c0:	b580      	push	{r7, lr}
 80101c2:	b088      	sub	sp, #32
 80101c4:	af02      	add	r7, sp, #8
 80101c6:	60f8      	str	r0, [r7, #12]
 80101c8:	60b9      	str	r1, [r7, #8]
 80101ca:	607a      	str	r2, [r7, #4]
 80101cc:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80101ce:	68fb      	ldr	r3, [r7, #12]
 80101d0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80101d4:	2b06      	cmp	r3, #6
 80101d6:	d006      	beq.n	80101e6 <etharp_update_arp_entry+0x26>
 80101d8:	4b48      	ldr	r3, [pc, #288]	; (80102fc <etharp_update_arp_entry+0x13c>)
 80101da:	f240 12a9 	movw	r2, #425	; 0x1a9
 80101de:	4948      	ldr	r1, [pc, #288]	; (8010300 <etharp_update_arp_entry+0x140>)
 80101e0:	4848      	ldr	r0, [pc, #288]	; (8010304 <etharp_update_arp_entry+0x144>)
 80101e2:	f003 fe61 	bl	8013ea8 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 80101e6:	68bb      	ldr	r3, [r7, #8]
 80101e8:	2b00      	cmp	r3, #0
 80101ea:	d012      	beq.n	8010212 <etharp_update_arp_entry+0x52>
 80101ec:	68bb      	ldr	r3, [r7, #8]
 80101ee:	681b      	ldr	r3, [r3, #0]
 80101f0:	2b00      	cmp	r3, #0
 80101f2:	d00e      	beq.n	8010212 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80101f4:	68bb      	ldr	r3, [r7, #8]
 80101f6:	681b      	ldr	r3, [r3, #0]
 80101f8:	68f9      	ldr	r1, [r7, #12]
 80101fa:	4618      	mov	r0, r3
 80101fc:	f001 f8fe 	bl	80113fc <ip4_addr_isbroadcast_u32>
 8010200:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8010202:	2b00      	cmp	r3, #0
 8010204:	d105      	bne.n	8010212 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8010206:	68bb      	ldr	r3, [r7, #8]
 8010208:	681b      	ldr	r3, [r3, #0]
 801020a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801020e:	2be0      	cmp	r3, #224	; 0xe0
 8010210:	d102      	bne.n	8010218 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8010212:	f06f 030f 	mvn.w	r3, #15
 8010216:	e06c      	b.n	80102f2 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8010218:	78fb      	ldrb	r3, [r7, #3]
 801021a:	68fa      	ldr	r2, [r7, #12]
 801021c:	4619      	mov	r1, r3
 801021e:	68b8      	ldr	r0, [r7, #8]
 8010220:	f7ff fe56 	bl	800fed0 <etharp_find_entry>
 8010224:	4603      	mov	r3, r0
 8010226:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8010228:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801022c:	2b00      	cmp	r3, #0
 801022e:	da02      	bge.n	8010236 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8010230:	8afb      	ldrh	r3, [r7, #22]
 8010232:	b25b      	sxtb	r3, r3
 8010234:	e05d      	b.n	80102f2 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8010236:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801023a:	4933      	ldr	r1, [pc, #204]	; (8010308 <etharp_update_arp_entry+0x148>)
 801023c:	4613      	mov	r3, r2
 801023e:	005b      	lsls	r3, r3, #1
 8010240:	4413      	add	r3, r2
 8010242:	00db      	lsls	r3, r3, #3
 8010244:	440b      	add	r3, r1
 8010246:	3314      	adds	r3, #20
 8010248:	2202      	movs	r2, #2
 801024a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801024c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010250:	492d      	ldr	r1, [pc, #180]	; (8010308 <etharp_update_arp_entry+0x148>)
 8010252:	4613      	mov	r3, r2
 8010254:	005b      	lsls	r3, r3, #1
 8010256:	4413      	add	r3, r2
 8010258:	00db      	lsls	r3, r3, #3
 801025a:	440b      	add	r3, r1
 801025c:	3308      	adds	r3, #8
 801025e:	68fa      	ldr	r2, [r7, #12]
 8010260:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8010262:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010266:	4613      	mov	r3, r2
 8010268:	005b      	lsls	r3, r3, #1
 801026a:	4413      	add	r3, r2
 801026c:	00db      	lsls	r3, r3, #3
 801026e:	3308      	adds	r3, #8
 8010270:	4a25      	ldr	r2, [pc, #148]	; (8010308 <etharp_update_arp_entry+0x148>)
 8010272:	4413      	add	r3, r2
 8010274:	3304      	adds	r3, #4
 8010276:	2206      	movs	r2, #6
 8010278:	6879      	ldr	r1, [r7, #4]
 801027a:	4618      	mov	r0, r3
 801027c:	f003 fd69 	bl	8013d52 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8010280:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010284:	4920      	ldr	r1, [pc, #128]	; (8010308 <etharp_update_arp_entry+0x148>)
 8010286:	4613      	mov	r3, r2
 8010288:	005b      	lsls	r3, r3, #1
 801028a:	4413      	add	r3, r2
 801028c:	00db      	lsls	r3, r3, #3
 801028e:	440b      	add	r3, r1
 8010290:	3312      	adds	r3, #18
 8010292:	2200      	movs	r2, #0
 8010294:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8010296:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801029a:	491b      	ldr	r1, [pc, #108]	; (8010308 <etharp_update_arp_entry+0x148>)
 801029c:	4613      	mov	r3, r2
 801029e:	005b      	lsls	r3, r3, #1
 80102a0:	4413      	add	r3, r2
 80102a2:	00db      	lsls	r3, r3, #3
 80102a4:	440b      	add	r3, r1
 80102a6:	681b      	ldr	r3, [r3, #0]
 80102a8:	2b00      	cmp	r3, #0
 80102aa:	d021      	beq.n	80102f0 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80102ac:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80102b0:	4915      	ldr	r1, [pc, #84]	; (8010308 <etharp_update_arp_entry+0x148>)
 80102b2:	4613      	mov	r3, r2
 80102b4:	005b      	lsls	r3, r3, #1
 80102b6:	4413      	add	r3, r2
 80102b8:	00db      	lsls	r3, r3, #3
 80102ba:	440b      	add	r3, r1
 80102bc:	681b      	ldr	r3, [r3, #0]
 80102be:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80102c0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80102c4:	4910      	ldr	r1, [pc, #64]	; (8010308 <etharp_update_arp_entry+0x148>)
 80102c6:	4613      	mov	r3, r2
 80102c8:	005b      	lsls	r3, r3, #1
 80102ca:	4413      	add	r3, r2
 80102cc:	00db      	lsls	r3, r3, #3
 80102ce:	440b      	add	r3, r1
 80102d0:	2200      	movs	r2, #0
 80102d2:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80102d4:	68fb      	ldr	r3, [r7, #12]
 80102d6:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80102da:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80102de:	9300      	str	r3, [sp, #0]
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	6939      	ldr	r1, [r7, #16]
 80102e4:	68f8      	ldr	r0, [r7, #12]
 80102e6:	f001 ff97 	bl	8012218 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 80102ea:	6938      	ldr	r0, [r7, #16]
 80102ec:	f7f8 fee4 	bl	80090b8 <pbuf_free>
  }
  return ERR_OK;
 80102f0:	2300      	movs	r3, #0
}
 80102f2:	4618      	mov	r0, r3
 80102f4:	3718      	adds	r7, #24
 80102f6:	46bd      	mov	sp, r7
 80102f8:	bd80      	pop	{r7, pc}
 80102fa:	bf00      	nop
 80102fc:	0801724c 	.word	0x0801724c
 8010300:	08017344 	.word	0x08017344
 8010304:	080172c4 	.word	0x080172c4
 8010308:	20008274 	.word	0x20008274

0801030c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801030c:	b580      	push	{r7, lr}
 801030e:	b084      	sub	sp, #16
 8010310:	af00      	add	r7, sp, #0
 8010312:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010314:	2300      	movs	r3, #0
 8010316:	60fb      	str	r3, [r7, #12]
 8010318:	e01e      	b.n	8010358 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801031a:	4913      	ldr	r1, [pc, #76]	; (8010368 <etharp_cleanup_netif+0x5c>)
 801031c:	68fa      	ldr	r2, [r7, #12]
 801031e:	4613      	mov	r3, r2
 8010320:	005b      	lsls	r3, r3, #1
 8010322:	4413      	add	r3, r2
 8010324:	00db      	lsls	r3, r3, #3
 8010326:	440b      	add	r3, r1
 8010328:	3314      	adds	r3, #20
 801032a:	781b      	ldrb	r3, [r3, #0]
 801032c:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801032e:	7afb      	ldrb	r3, [r7, #11]
 8010330:	2b00      	cmp	r3, #0
 8010332:	d00e      	beq.n	8010352 <etharp_cleanup_netif+0x46>
 8010334:	490c      	ldr	r1, [pc, #48]	; (8010368 <etharp_cleanup_netif+0x5c>)
 8010336:	68fa      	ldr	r2, [r7, #12]
 8010338:	4613      	mov	r3, r2
 801033a:	005b      	lsls	r3, r3, #1
 801033c:	4413      	add	r3, r2
 801033e:	00db      	lsls	r3, r3, #3
 8010340:	440b      	add	r3, r1
 8010342:	3308      	adds	r3, #8
 8010344:	681b      	ldr	r3, [r3, #0]
 8010346:	687a      	ldr	r2, [r7, #4]
 8010348:	429a      	cmp	r2, r3
 801034a:	d102      	bne.n	8010352 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 801034c:	68f8      	ldr	r0, [r7, #12]
 801034e:	f7ff fce5 	bl	800fd1c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010352:	68fb      	ldr	r3, [r7, #12]
 8010354:	3301      	adds	r3, #1
 8010356:	60fb      	str	r3, [r7, #12]
 8010358:	68fb      	ldr	r3, [r7, #12]
 801035a:	2b09      	cmp	r3, #9
 801035c:	dddd      	ble.n	801031a <etharp_cleanup_netif+0xe>
    }
  }
}
 801035e:	bf00      	nop
 8010360:	bf00      	nop
 8010362:	3710      	adds	r7, #16
 8010364:	46bd      	mov	sp, r7
 8010366:	bd80      	pop	{r7, pc}
 8010368:	20008274 	.word	0x20008274

0801036c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801036c:	b5b0      	push	{r4, r5, r7, lr}
 801036e:	b08a      	sub	sp, #40	; 0x28
 8010370:	af04      	add	r7, sp, #16
 8010372:	6078      	str	r0, [r7, #4]
 8010374:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8010376:	683b      	ldr	r3, [r7, #0]
 8010378:	2b00      	cmp	r3, #0
 801037a:	d107      	bne.n	801038c <etharp_input+0x20>
 801037c:	4b3d      	ldr	r3, [pc, #244]	; (8010474 <etharp_input+0x108>)
 801037e:	f240 228a 	movw	r2, #650	; 0x28a
 8010382:	493d      	ldr	r1, [pc, #244]	; (8010478 <etharp_input+0x10c>)
 8010384:	483d      	ldr	r0, [pc, #244]	; (801047c <etharp_input+0x110>)
 8010386:	f003 fd8f 	bl	8013ea8 <iprintf>
 801038a:	e06f      	b.n	801046c <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	685b      	ldr	r3, [r3, #4]
 8010390:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8010392:	693b      	ldr	r3, [r7, #16]
 8010394:	881b      	ldrh	r3, [r3, #0]
 8010396:	b29b      	uxth	r3, r3
 8010398:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801039c:	d10c      	bne.n	80103b8 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801039e:	693b      	ldr	r3, [r7, #16]
 80103a0:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80103a2:	2b06      	cmp	r3, #6
 80103a4:	d108      	bne.n	80103b8 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80103a6:	693b      	ldr	r3, [r7, #16]
 80103a8:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80103aa:	2b04      	cmp	r3, #4
 80103ac:	d104      	bne.n	80103b8 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80103ae:	693b      	ldr	r3, [r7, #16]
 80103b0:	885b      	ldrh	r3, [r3, #2]
 80103b2:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80103b4:	2b08      	cmp	r3, #8
 80103b6:	d003      	beq.n	80103c0 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80103b8:	6878      	ldr	r0, [r7, #4]
 80103ba:	f7f8 fe7d 	bl	80090b8 <pbuf_free>
    return;
 80103be:	e055      	b.n	801046c <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80103c0:	693b      	ldr	r3, [r7, #16]
 80103c2:	330e      	adds	r3, #14
 80103c4:	681b      	ldr	r3, [r3, #0]
 80103c6:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80103c8:	693b      	ldr	r3, [r7, #16]
 80103ca:	3318      	adds	r3, #24
 80103cc:	681b      	ldr	r3, [r3, #0]
 80103ce:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80103d0:	683b      	ldr	r3, [r7, #0]
 80103d2:	3304      	adds	r3, #4
 80103d4:	681b      	ldr	r3, [r3, #0]
 80103d6:	2b00      	cmp	r3, #0
 80103d8:	d102      	bne.n	80103e0 <etharp_input+0x74>
    for_us = 0;
 80103da:	2300      	movs	r3, #0
 80103dc:	75fb      	strb	r3, [r7, #23]
 80103de:	e009      	b.n	80103f4 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80103e0:	68ba      	ldr	r2, [r7, #8]
 80103e2:	683b      	ldr	r3, [r7, #0]
 80103e4:	3304      	adds	r3, #4
 80103e6:	681b      	ldr	r3, [r3, #0]
 80103e8:	429a      	cmp	r2, r3
 80103ea:	bf0c      	ite	eq
 80103ec:	2301      	moveq	r3, #1
 80103ee:	2300      	movne	r3, #0
 80103f0:	b2db      	uxtb	r3, r3
 80103f2:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80103f4:	693b      	ldr	r3, [r7, #16]
 80103f6:	f103 0208 	add.w	r2, r3, #8
 80103fa:	7dfb      	ldrb	r3, [r7, #23]
 80103fc:	2b00      	cmp	r3, #0
 80103fe:	d001      	beq.n	8010404 <etharp_input+0x98>
 8010400:	2301      	movs	r3, #1
 8010402:	e000      	b.n	8010406 <etharp_input+0x9a>
 8010404:	2302      	movs	r3, #2
 8010406:	f107 010c 	add.w	r1, r7, #12
 801040a:	6838      	ldr	r0, [r7, #0]
 801040c:	f7ff fed8 	bl	80101c0 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8010410:	693b      	ldr	r3, [r7, #16]
 8010412:	88db      	ldrh	r3, [r3, #6]
 8010414:	b29b      	uxth	r3, r3
 8010416:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801041a:	d003      	beq.n	8010424 <etharp_input+0xb8>
 801041c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010420:	d01e      	beq.n	8010460 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8010422:	e020      	b.n	8010466 <etharp_input+0xfa>
      if (for_us) {
 8010424:	7dfb      	ldrb	r3, [r7, #23]
 8010426:	2b00      	cmp	r3, #0
 8010428:	d01c      	beq.n	8010464 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801042a:	683b      	ldr	r3, [r7, #0]
 801042c:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8010430:	693b      	ldr	r3, [r7, #16]
 8010432:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8010436:	683b      	ldr	r3, [r7, #0]
 8010438:	f103 0526 	add.w	r5, r3, #38	; 0x26
 801043c:	683b      	ldr	r3, [r7, #0]
 801043e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8010440:	693a      	ldr	r2, [r7, #16]
 8010442:	3208      	adds	r2, #8
        etharp_raw(netif,
 8010444:	2102      	movs	r1, #2
 8010446:	9103      	str	r1, [sp, #12]
 8010448:	f107 010c 	add.w	r1, r7, #12
 801044c:	9102      	str	r1, [sp, #8]
 801044e:	9201      	str	r2, [sp, #4]
 8010450:	9300      	str	r3, [sp, #0]
 8010452:	462b      	mov	r3, r5
 8010454:	4622      	mov	r2, r4
 8010456:	4601      	mov	r1, r0
 8010458:	6838      	ldr	r0, [r7, #0]
 801045a:	f000 faeb 	bl	8010a34 <etharp_raw>
      break;
 801045e:	e001      	b.n	8010464 <etharp_input+0xf8>
      break;
 8010460:	bf00      	nop
 8010462:	e000      	b.n	8010466 <etharp_input+0xfa>
      break;
 8010464:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8010466:	6878      	ldr	r0, [r7, #4]
 8010468:	f7f8 fe26 	bl	80090b8 <pbuf_free>
}
 801046c:	3718      	adds	r7, #24
 801046e:	46bd      	mov	sp, r7
 8010470:	bdb0      	pop	{r4, r5, r7, pc}
 8010472:	bf00      	nop
 8010474:	0801724c 	.word	0x0801724c
 8010478:	0801739c 	.word	0x0801739c
 801047c:	080172c4 	.word	0x080172c4

08010480 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8010480:	b580      	push	{r7, lr}
 8010482:	b086      	sub	sp, #24
 8010484:	af02      	add	r7, sp, #8
 8010486:	60f8      	str	r0, [r7, #12]
 8010488:	60b9      	str	r1, [r7, #8]
 801048a:	4613      	mov	r3, r2
 801048c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801048e:	79fa      	ldrb	r2, [r7, #7]
 8010490:	4944      	ldr	r1, [pc, #272]	; (80105a4 <etharp_output_to_arp_index+0x124>)
 8010492:	4613      	mov	r3, r2
 8010494:	005b      	lsls	r3, r3, #1
 8010496:	4413      	add	r3, r2
 8010498:	00db      	lsls	r3, r3, #3
 801049a:	440b      	add	r3, r1
 801049c:	3314      	adds	r3, #20
 801049e:	781b      	ldrb	r3, [r3, #0]
 80104a0:	2b01      	cmp	r3, #1
 80104a2:	d806      	bhi.n	80104b2 <etharp_output_to_arp_index+0x32>
 80104a4:	4b40      	ldr	r3, [pc, #256]	; (80105a8 <etharp_output_to_arp_index+0x128>)
 80104a6:	f240 22ee 	movw	r2, #750	; 0x2ee
 80104aa:	4940      	ldr	r1, [pc, #256]	; (80105ac <etharp_output_to_arp_index+0x12c>)
 80104ac:	4840      	ldr	r0, [pc, #256]	; (80105b0 <etharp_output_to_arp_index+0x130>)
 80104ae:	f003 fcfb 	bl	8013ea8 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80104b2:	79fa      	ldrb	r2, [r7, #7]
 80104b4:	493b      	ldr	r1, [pc, #236]	; (80105a4 <etharp_output_to_arp_index+0x124>)
 80104b6:	4613      	mov	r3, r2
 80104b8:	005b      	lsls	r3, r3, #1
 80104ba:	4413      	add	r3, r2
 80104bc:	00db      	lsls	r3, r3, #3
 80104be:	440b      	add	r3, r1
 80104c0:	3314      	adds	r3, #20
 80104c2:	781b      	ldrb	r3, [r3, #0]
 80104c4:	2b02      	cmp	r3, #2
 80104c6:	d153      	bne.n	8010570 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80104c8:	79fa      	ldrb	r2, [r7, #7]
 80104ca:	4936      	ldr	r1, [pc, #216]	; (80105a4 <etharp_output_to_arp_index+0x124>)
 80104cc:	4613      	mov	r3, r2
 80104ce:	005b      	lsls	r3, r3, #1
 80104d0:	4413      	add	r3, r2
 80104d2:	00db      	lsls	r3, r3, #3
 80104d4:	440b      	add	r3, r1
 80104d6:	3312      	adds	r3, #18
 80104d8:	881b      	ldrh	r3, [r3, #0]
 80104da:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 80104de:	d919      	bls.n	8010514 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80104e0:	79fa      	ldrb	r2, [r7, #7]
 80104e2:	4613      	mov	r3, r2
 80104e4:	005b      	lsls	r3, r3, #1
 80104e6:	4413      	add	r3, r2
 80104e8:	00db      	lsls	r3, r3, #3
 80104ea:	4a2e      	ldr	r2, [pc, #184]	; (80105a4 <etharp_output_to_arp_index+0x124>)
 80104ec:	4413      	add	r3, r2
 80104ee:	3304      	adds	r3, #4
 80104f0:	4619      	mov	r1, r3
 80104f2:	68f8      	ldr	r0, [r7, #12]
 80104f4:	f000 fb4c 	bl	8010b90 <etharp_request>
 80104f8:	4603      	mov	r3, r0
 80104fa:	2b00      	cmp	r3, #0
 80104fc:	d138      	bne.n	8010570 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80104fe:	79fa      	ldrb	r2, [r7, #7]
 8010500:	4928      	ldr	r1, [pc, #160]	; (80105a4 <etharp_output_to_arp_index+0x124>)
 8010502:	4613      	mov	r3, r2
 8010504:	005b      	lsls	r3, r3, #1
 8010506:	4413      	add	r3, r2
 8010508:	00db      	lsls	r3, r3, #3
 801050a:	440b      	add	r3, r1
 801050c:	3314      	adds	r3, #20
 801050e:	2203      	movs	r2, #3
 8010510:	701a      	strb	r2, [r3, #0]
 8010512:	e02d      	b.n	8010570 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8010514:	79fa      	ldrb	r2, [r7, #7]
 8010516:	4923      	ldr	r1, [pc, #140]	; (80105a4 <etharp_output_to_arp_index+0x124>)
 8010518:	4613      	mov	r3, r2
 801051a:	005b      	lsls	r3, r3, #1
 801051c:	4413      	add	r3, r2
 801051e:	00db      	lsls	r3, r3, #3
 8010520:	440b      	add	r3, r1
 8010522:	3312      	adds	r3, #18
 8010524:	881b      	ldrh	r3, [r3, #0]
 8010526:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801052a:	d321      	bcc.n	8010570 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801052c:	79fa      	ldrb	r2, [r7, #7]
 801052e:	4613      	mov	r3, r2
 8010530:	005b      	lsls	r3, r3, #1
 8010532:	4413      	add	r3, r2
 8010534:	00db      	lsls	r3, r3, #3
 8010536:	4a1b      	ldr	r2, [pc, #108]	; (80105a4 <etharp_output_to_arp_index+0x124>)
 8010538:	4413      	add	r3, r2
 801053a:	1d19      	adds	r1, r3, #4
 801053c:	79fa      	ldrb	r2, [r7, #7]
 801053e:	4613      	mov	r3, r2
 8010540:	005b      	lsls	r3, r3, #1
 8010542:	4413      	add	r3, r2
 8010544:	00db      	lsls	r3, r3, #3
 8010546:	3308      	adds	r3, #8
 8010548:	4a16      	ldr	r2, [pc, #88]	; (80105a4 <etharp_output_to_arp_index+0x124>)
 801054a:	4413      	add	r3, r2
 801054c:	3304      	adds	r3, #4
 801054e:	461a      	mov	r2, r3
 8010550:	68f8      	ldr	r0, [r7, #12]
 8010552:	f000 fafb 	bl	8010b4c <etharp_request_dst>
 8010556:	4603      	mov	r3, r0
 8010558:	2b00      	cmp	r3, #0
 801055a:	d109      	bne.n	8010570 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801055c:	79fa      	ldrb	r2, [r7, #7]
 801055e:	4911      	ldr	r1, [pc, #68]	; (80105a4 <etharp_output_to_arp_index+0x124>)
 8010560:	4613      	mov	r3, r2
 8010562:	005b      	lsls	r3, r3, #1
 8010564:	4413      	add	r3, r2
 8010566:	00db      	lsls	r3, r3, #3
 8010568:	440b      	add	r3, r1
 801056a:	3314      	adds	r3, #20
 801056c:	2203      	movs	r2, #3
 801056e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8010570:	68fb      	ldr	r3, [r7, #12]
 8010572:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8010576:	79fa      	ldrb	r2, [r7, #7]
 8010578:	4613      	mov	r3, r2
 801057a:	005b      	lsls	r3, r3, #1
 801057c:	4413      	add	r3, r2
 801057e:	00db      	lsls	r3, r3, #3
 8010580:	3308      	adds	r3, #8
 8010582:	4a08      	ldr	r2, [pc, #32]	; (80105a4 <etharp_output_to_arp_index+0x124>)
 8010584:	4413      	add	r3, r2
 8010586:	3304      	adds	r3, #4
 8010588:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801058c:	9200      	str	r2, [sp, #0]
 801058e:	460a      	mov	r2, r1
 8010590:	68b9      	ldr	r1, [r7, #8]
 8010592:	68f8      	ldr	r0, [r7, #12]
 8010594:	f001 fe40 	bl	8012218 <ethernet_output>
 8010598:	4603      	mov	r3, r0
}
 801059a:	4618      	mov	r0, r3
 801059c:	3710      	adds	r7, #16
 801059e:	46bd      	mov	sp, r7
 80105a0:	bd80      	pop	{r7, pc}
 80105a2:	bf00      	nop
 80105a4:	20008274 	.word	0x20008274
 80105a8:	0801724c 	.word	0x0801724c
 80105ac:	080173bc 	.word	0x080173bc
 80105b0:	080172c4 	.word	0x080172c4

080105b4 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80105b4:	b580      	push	{r7, lr}
 80105b6:	b08a      	sub	sp, #40	; 0x28
 80105b8:	af02      	add	r7, sp, #8
 80105ba:	60f8      	str	r0, [r7, #12]
 80105bc:	60b9      	str	r1, [r7, #8]
 80105be:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80105c4:	68fb      	ldr	r3, [r7, #12]
 80105c6:	2b00      	cmp	r3, #0
 80105c8:	d106      	bne.n	80105d8 <etharp_output+0x24>
 80105ca:	4b73      	ldr	r3, [pc, #460]	; (8010798 <etharp_output+0x1e4>)
 80105cc:	f240 321e 	movw	r2, #798	; 0x31e
 80105d0:	4972      	ldr	r1, [pc, #456]	; (801079c <etharp_output+0x1e8>)
 80105d2:	4873      	ldr	r0, [pc, #460]	; (80107a0 <etharp_output+0x1ec>)
 80105d4:	f003 fc68 	bl	8013ea8 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80105d8:	68bb      	ldr	r3, [r7, #8]
 80105da:	2b00      	cmp	r3, #0
 80105dc:	d106      	bne.n	80105ec <etharp_output+0x38>
 80105de:	4b6e      	ldr	r3, [pc, #440]	; (8010798 <etharp_output+0x1e4>)
 80105e0:	f240 321f 	movw	r2, #799	; 0x31f
 80105e4:	496f      	ldr	r1, [pc, #444]	; (80107a4 <etharp_output+0x1f0>)
 80105e6:	486e      	ldr	r0, [pc, #440]	; (80107a0 <etharp_output+0x1ec>)
 80105e8:	f003 fc5e 	bl	8013ea8 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	2b00      	cmp	r3, #0
 80105f0:	d106      	bne.n	8010600 <etharp_output+0x4c>
 80105f2:	4b69      	ldr	r3, [pc, #420]	; (8010798 <etharp_output+0x1e4>)
 80105f4:	f44f 7248 	mov.w	r2, #800	; 0x320
 80105f8:	496b      	ldr	r1, [pc, #428]	; (80107a8 <etharp_output+0x1f4>)
 80105fa:	4869      	ldr	r0, [pc, #420]	; (80107a0 <etharp_output+0x1ec>)
 80105fc:	f003 fc54 	bl	8013ea8 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	681b      	ldr	r3, [r3, #0]
 8010604:	68f9      	ldr	r1, [r7, #12]
 8010606:	4618      	mov	r0, r3
 8010608:	f000 fef8 	bl	80113fc <ip4_addr_isbroadcast_u32>
 801060c:	4603      	mov	r3, r0
 801060e:	2b00      	cmp	r3, #0
 8010610:	d002      	beq.n	8010618 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8010612:	4b66      	ldr	r3, [pc, #408]	; (80107ac <etharp_output+0x1f8>)
 8010614:	61fb      	str	r3, [r7, #28]
 8010616:	e0af      	b.n	8010778 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	681b      	ldr	r3, [r3, #0]
 801061c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010620:	2be0      	cmp	r3, #224	; 0xe0
 8010622:	d118      	bne.n	8010656 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8010624:	2301      	movs	r3, #1
 8010626:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8010628:	2300      	movs	r3, #0
 801062a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801062c:	235e      	movs	r3, #94	; 0x5e
 801062e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	3301      	adds	r3, #1
 8010634:	781b      	ldrb	r3, [r3, #0]
 8010636:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801063a:	b2db      	uxtb	r3, r3
 801063c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	3302      	adds	r3, #2
 8010642:	781b      	ldrb	r3, [r3, #0]
 8010644:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	3303      	adds	r3, #3
 801064a:	781b      	ldrb	r3, [r3, #0]
 801064c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801064e:	f107 0310 	add.w	r3, r7, #16
 8010652:	61fb      	str	r3, [r7, #28]
 8010654:	e090      	b.n	8010778 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	681a      	ldr	r2, [r3, #0]
 801065a:	68fb      	ldr	r3, [r7, #12]
 801065c:	3304      	adds	r3, #4
 801065e:	681b      	ldr	r3, [r3, #0]
 8010660:	405a      	eors	r2, r3
 8010662:	68fb      	ldr	r3, [r7, #12]
 8010664:	3308      	adds	r3, #8
 8010666:	681b      	ldr	r3, [r3, #0]
 8010668:	4013      	ands	r3, r2
 801066a:	2b00      	cmp	r3, #0
 801066c:	d012      	beq.n	8010694 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	681b      	ldr	r3, [r3, #0]
 8010672:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8010674:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8010678:	4293      	cmp	r3, r2
 801067a:	d00b      	beq.n	8010694 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801067c:	68fb      	ldr	r3, [r7, #12]
 801067e:	330c      	adds	r3, #12
 8010680:	681b      	ldr	r3, [r3, #0]
 8010682:	2b00      	cmp	r3, #0
 8010684:	d003      	beq.n	801068e <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8010686:	68fb      	ldr	r3, [r7, #12]
 8010688:	330c      	adds	r3, #12
 801068a:	61bb      	str	r3, [r7, #24]
 801068c:	e002      	b.n	8010694 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801068e:	f06f 0303 	mvn.w	r3, #3
 8010692:	e07d      	b.n	8010790 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8010694:	4b46      	ldr	r3, [pc, #280]	; (80107b0 <etharp_output+0x1fc>)
 8010696:	781b      	ldrb	r3, [r3, #0]
 8010698:	4619      	mov	r1, r3
 801069a:	4a46      	ldr	r2, [pc, #280]	; (80107b4 <etharp_output+0x200>)
 801069c:	460b      	mov	r3, r1
 801069e:	005b      	lsls	r3, r3, #1
 80106a0:	440b      	add	r3, r1
 80106a2:	00db      	lsls	r3, r3, #3
 80106a4:	4413      	add	r3, r2
 80106a6:	3314      	adds	r3, #20
 80106a8:	781b      	ldrb	r3, [r3, #0]
 80106aa:	2b01      	cmp	r3, #1
 80106ac:	d925      	bls.n	80106fa <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80106ae:	4b40      	ldr	r3, [pc, #256]	; (80107b0 <etharp_output+0x1fc>)
 80106b0:	781b      	ldrb	r3, [r3, #0]
 80106b2:	4619      	mov	r1, r3
 80106b4:	4a3f      	ldr	r2, [pc, #252]	; (80107b4 <etharp_output+0x200>)
 80106b6:	460b      	mov	r3, r1
 80106b8:	005b      	lsls	r3, r3, #1
 80106ba:	440b      	add	r3, r1
 80106bc:	00db      	lsls	r3, r3, #3
 80106be:	4413      	add	r3, r2
 80106c0:	3308      	adds	r3, #8
 80106c2:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80106c4:	68fa      	ldr	r2, [r7, #12]
 80106c6:	429a      	cmp	r2, r3
 80106c8:	d117      	bne.n	80106fa <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80106ca:	69bb      	ldr	r3, [r7, #24]
 80106cc:	681a      	ldr	r2, [r3, #0]
 80106ce:	4b38      	ldr	r3, [pc, #224]	; (80107b0 <etharp_output+0x1fc>)
 80106d0:	781b      	ldrb	r3, [r3, #0]
 80106d2:	4618      	mov	r0, r3
 80106d4:	4937      	ldr	r1, [pc, #220]	; (80107b4 <etharp_output+0x200>)
 80106d6:	4603      	mov	r3, r0
 80106d8:	005b      	lsls	r3, r3, #1
 80106da:	4403      	add	r3, r0
 80106dc:	00db      	lsls	r3, r3, #3
 80106de:	440b      	add	r3, r1
 80106e0:	3304      	adds	r3, #4
 80106e2:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 80106e4:	429a      	cmp	r2, r3
 80106e6:	d108      	bne.n	80106fa <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80106e8:	4b31      	ldr	r3, [pc, #196]	; (80107b0 <etharp_output+0x1fc>)
 80106ea:	781b      	ldrb	r3, [r3, #0]
 80106ec:	461a      	mov	r2, r3
 80106ee:	68b9      	ldr	r1, [r7, #8]
 80106f0:	68f8      	ldr	r0, [r7, #12]
 80106f2:	f7ff fec5 	bl	8010480 <etharp_output_to_arp_index>
 80106f6:	4603      	mov	r3, r0
 80106f8:	e04a      	b.n	8010790 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80106fa:	2300      	movs	r3, #0
 80106fc:	75fb      	strb	r3, [r7, #23]
 80106fe:	e031      	b.n	8010764 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8010700:	7dfa      	ldrb	r2, [r7, #23]
 8010702:	492c      	ldr	r1, [pc, #176]	; (80107b4 <etharp_output+0x200>)
 8010704:	4613      	mov	r3, r2
 8010706:	005b      	lsls	r3, r3, #1
 8010708:	4413      	add	r3, r2
 801070a:	00db      	lsls	r3, r3, #3
 801070c:	440b      	add	r3, r1
 801070e:	3314      	adds	r3, #20
 8010710:	781b      	ldrb	r3, [r3, #0]
 8010712:	2b01      	cmp	r3, #1
 8010714:	d923      	bls.n	801075e <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8010716:	7dfa      	ldrb	r2, [r7, #23]
 8010718:	4926      	ldr	r1, [pc, #152]	; (80107b4 <etharp_output+0x200>)
 801071a:	4613      	mov	r3, r2
 801071c:	005b      	lsls	r3, r3, #1
 801071e:	4413      	add	r3, r2
 8010720:	00db      	lsls	r3, r3, #3
 8010722:	440b      	add	r3, r1
 8010724:	3308      	adds	r3, #8
 8010726:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8010728:	68fa      	ldr	r2, [r7, #12]
 801072a:	429a      	cmp	r2, r3
 801072c:	d117      	bne.n	801075e <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801072e:	69bb      	ldr	r3, [r7, #24]
 8010730:	6819      	ldr	r1, [r3, #0]
 8010732:	7dfa      	ldrb	r2, [r7, #23]
 8010734:	481f      	ldr	r0, [pc, #124]	; (80107b4 <etharp_output+0x200>)
 8010736:	4613      	mov	r3, r2
 8010738:	005b      	lsls	r3, r3, #1
 801073a:	4413      	add	r3, r2
 801073c:	00db      	lsls	r3, r3, #3
 801073e:	4403      	add	r3, r0
 8010740:	3304      	adds	r3, #4
 8010742:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8010744:	4299      	cmp	r1, r3
 8010746:	d10a      	bne.n	801075e <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8010748:	4a19      	ldr	r2, [pc, #100]	; (80107b0 <etharp_output+0x1fc>)
 801074a:	7dfb      	ldrb	r3, [r7, #23]
 801074c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801074e:	7dfb      	ldrb	r3, [r7, #23]
 8010750:	461a      	mov	r2, r3
 8010752:	68b9      	ldr	r1, [r7, #8]
 8010754:	68f8      	ldr	r0, [r7, #12]
 8010756:	f7ff fe93 	bl	8010480 <etharp_output_to_arp_index>
 801075a:	4603      	mov	r3, r0
 801075c:	e018      	b.n	8010790 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801075e:	7dfb      	ldrb	r3, [r7, #23]
 8010760:	3301      	adds	r3, #1
 8010762:	75fb      	strb	r3, [r7, #23]
 8010764:	7dfb      	ldrb	r3, [r7, #23]
 8010766:	2b09      	cmp	r3, #9
 8010768:	d9ca      	bls.n	8010700 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801076a:	68ba      	ldr	r2, [r7, #8]
 801076c:	69b9      	ldr	r1, [r7, #24]
 801076e:	68f8      	ldr	r0, [r7, #12]
 8010770:	f000 f822 	bl	80107b8 <etharp_query>
 8010774:	4603      	mov	r3, r0
 8010776:	e00b      	b.n	8010790 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8010778:	68fb      	ldr	r3, [r7, #12]
 801077a:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801077e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010782:	9300      	str	r3, [sp, #0]
 8010784:	69fb      	ldr	r3, [r7, #28]
 8010786:	68b9      	ldr	r1, [r7, #8]
 8010788:	68f8      	ldr	r0, [r7, #12]
 801078a:	f001 fd45 	bl	8012218 <ethernet_output>
 801078e:	4603      	mov	r3, r0
}
 8010790:	4618      	mov	r0, r3
 8010792:	3720      	adds	r7, #32
 8010794:	46bd      	mov	sp, r7
 8010796:	bd80      	pop	{r7, pc}
 8010798:	0801724c 	.word	0x0801724c
 801079c:	0801739c 	.word	0x0801739c
 80107a0:	080172c4 	.word	0x080172c4
 80107a4:	080173ec 	.word	0x080173ec
 80107a8:	0801738c 	.word	0x0801738c
 80107ac:	08017ad4 	.word	0x08017ad4
 80107b0:	20008364 	.word	0x20008364
 80107b4:	20008274 	.word	0x20008274

080107b8 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80107b8:	b580      	push	{r7, lr}
 80107ba:	b08c      	sub	sp, #48	; 0x30
 80107bc:	af02      	add	r7, sp, #8
 80107be:	60f8      	str	r0, [r7, #12]
 80107c0:	60b9      	str	r1, [r7, #8]
 80107c2:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80107c4:	68fb      	ldr	r3, [r7, #12]
 80107c6:	3326      	adds	r3, #38	; 0x26
 80107c8:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80107ca:	23ff      	movs	r3, #255	; 0xff
 80107cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 80107d0:	2300      	movs	r3, #0
 80107d2:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80107d4:	68bb      	ldr	r3, [r7, #8]
 80107d6:	681b      	ldr	r3, [r3, #0]
 80107d8:	68f9      	ldr	r1, [r7, #12]
 80107da:	4618      	mov	r0, r3
 80107dc:	f000 fe0e 	bl	80113fc <ip4_addr_isbroadcast_u32>
 80107e0:	4603      	mov	r3, r0
 80107e2:	2b00      	cmp	r3, #0
 80107e4:	d10c      	bne.n	8010800 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80107e6:	68bb      	ldr	r3, [r7, #8]
 80107e8:	681b      	ldr	r3, [r3, #0]
 80107ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80107ee:	2be0      	cmp	r3, #224	; 0xe0
 80107f0:	d006      	beq.n	8010800 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80107f2:	68bb      	ldr	r3, [r7, #8]
 80107f4:	2b00      	cmp	r3, #0
 80107f6:	d003      	beq.n	8010800 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 80107f8:	68bb      	ldr	r3, [r7, #8]
 80107fa:	681b      	ldr	r3, [r3, #0]
 80107fc:	2b00      	cmp	r3, #0
 80107fe:	d102      	bne.n	8010806 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8010800:	f06f 030f 	mvn.w	r3, #15
 8010804:	e101      	b.n	8010a0a <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8010806:	68fa      	ldr	r2, [r7, #12]
 8010808:	2101      	movs	r1, #1
 801080a:	68b8      	ldr	r0, [r7, #8]
 801080c:	f7ff fb60 	bl	800fed0 <etharp_find_entry>
 8010810:	4603      	mov	r3, r0
 8010812:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8010814:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8010818:	2b00      	cmp	r3, #0
 801081a:	da02      	bge.n	8010822 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 801081c:	8a7b      	ldrh	r3, [r7, #18]
 801081e:	b25b      	sxtb	r3, r3
 8010820:	e0f3      	b.n	8010a0a <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8010822:	8a7b      	ldrh	r3, [r7, #18]
 8010824:	2b7e      	cmp	r3, #126	; 0x7e
 8010826:	d906      	bls.n	8010836 <etharp_query+0x7e>
 8010828:	4b7a      	ldr	r3, [pc, #488]	; (8010a14 <etharp_query+0x25c>)
 801082a:	f240 32c1 	movw	r2, #961	; 0x3c1
 801082e:	497a      	ldr	r1, [pc, #488]	; (8010a18 <etharp_query+0x260>)
 8010830:	487a      	ldr	r0, [pc, #488]	; (8010a1c <etharp_query+0x264>)
 8010832:	f003 fb39 	bl	8013ea8 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8010836:	8a7b      	ldrh	r3, [r7, #18]
 8010838:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801083a:	7c7a      	ldrb	r2, [r7, #17]
 801083c:	4978      	ldr	r1, [pc, #480]	; (8010a20 <etharp_query+0x268>)
 801083e:	4613      	mov	r3, r2
 8010840:	005b      	lsls	r3, r3, #1
 8010842:	4413      	add	r3, r2
 8010844:	00db      	lsls	r3, r3, #3
 8010846:	440b      	add	r3, r1
 8010848:	3314      	adds	r3, #20
 801084a:	781b      	ldrb	r3, [r3, #0]
 801084c:	2b00      	cmp	r3, #0
 801084e:	d115      	bne.n	801087c <etharp_query+0xc4>
    is_new_entry = 1;
 8010850:	2301      	movs	r3, #1
 8010852:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8010854:	7c7a      	ldrb	r2, [r7, #17]
 8010856:	4972      	ldr	r1, [pc, #456]	; (8010a20 <etharp_query+0x268>)
 8010858:	4613      	mov	r3, r2
 801085a:	005b      	lsls	r3, r3, #1
 801085c:	4413      	add	r3, r2
 801085e:	00db      	lsls	r3, r3, #3
 8010860:	440b      	add	r3, r1
 8010862:	3314      	adds	r3, #20
 8010864:	2201      	movs	r2, #1
 8010866:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8010868:	7c7a      	ldrb	r2, [r7, #17]
 801086a:	496d      	ldr	r1, [pc, #436]	; (8010a20 <etharp_query+0x268>)
 801086c:	4613      	mov	r3, r2
 801086e:	005b      	lsls	r3, r3, #1
 8010870:	4413      	add	r3, r2
 8010872:	00db      	lsls	r3, r3, #3
 8010874:	440b      	add	r3, r1
 8010876:	3308      	adds	r3, #8
 8010878:	68fa      	ldr	r2, [r7, #12]
 801087a:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801087c:	7c7a      	ldrb	r2, [r7, #17]
 801087e:	4968      	ldr	r1, [pc, #416]	; (8010a20 <etharp_query+0x268>)
 8010880:	4613      	mov	r3, r2
 8010882:	005b      	lsls	r3, r3, #1
 8010884:	4413      	add	r3, r2
 8010886:	00db      	lsls	r3, r3, #3
 8010888:	440b      	add	r3, r1
 801088a:	3314      	adds	r3, #20
 801088c:	781b      	ldrb	r3, [r3, #0]
 801088e:	2b01      	cmp	r3, #1
 8010890:	d011      	beq.n	80108b6 <etharp_query+0xfe>
 8010892:	7c7a      	ldrb	r2, [r7, #17]
 8010894:	4962      	ldr	r1, [pc, #392]	; (8010a20 <etharp_query+0x268>)
 8010896:	4613      	mov	r3, r2
 8010898:	005b      	lsls	r3, r3, #1
 801089a:	4413      	add	r3, r2
 801089c:	00db      	lsls	r3, r3, #3
 801089e:	440b      	add	r3, r1
 80108a0:	3314      	adds	r3, #20
 80108a2:	781b      	ldrb	r3, [r3, #0]
 80108a4:	2b01      	cmp	r3, #1
 80108a6:	d806      	bhi.n	80108b6 <etharp_query+0xfe>
 80108a8:	4b5a      	ldr	r3, [pc, #360]	; (8010a14 <etharp_query+0x25c>)
 80108aa:	f240 32cd 	movw	r2, #973	; 0x3cd
 80108ae:	495d      	ldr	r1, [pc, #372]	; (8010a24 <etharp_query+0x26c>)
 80108b0:	485a      	ldr	r0, [pc, #360]	; (8010a1c <etharp_query+0x264>)
 80108b2:	f003 faf9 	bl	8013ea8 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80108b6:	6a3b      	ldr	r3, [r7, #32]
 80108b8:	2b00      	cmp	r3, #0
 80108ba:	d102      	bne.n	80108c2 <etharp_query+0x10a>
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	2b00      	cmp	r3, #0
 80108c0:	d10c      	bne.n	80108dc <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80108c2:	68b9      	ldr	r1, [r7, #8]
 80108c4:	68f8      	ldr	r0, [r7, #12]
 80108c6:	f000 f963 	bl	8010b90 <etharp_request>
 80108ca:	4603      	mov	r3, r0
 80108cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	2b00      	cmp	r3, #0
 80108d4:	d102      	bne.n	80108dc <etharp_query+0x124>
      return result;
 80108d6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80108da:	e096      	b.n	8010a0a <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	2b00      	cmp	r3, #0
 80108e0:	d106      	bne.n	80108f0 <etharp_query+0x138>
 80108e2:	4b4c      	ldr	r3, [pc, #304]	; (8010a14 <etharp_query+0x25c>)
 80108e4:	f240 32e1 	movw	r2, #993	; 0x3e1
 80108e8:	494f      	ldr	r1, [pc, #316]	; (8010a28 <etharp_query+0x270>)
 80108ea:	484c      	ldr	r0, [pc, #304]	; (8010a1c <etharp_query+0x264>)
 80108ec:	f003 fadc 	bl	8013ea8 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80108f0:	7c7a      	ldrb	r2, [r7, #17]
 80108f2:	494b      	ldr	r1, [pc, #300]	; (8010a20 <etharp_query+0x268>)
 80108f4:	4613      	mov	r3, r2
 80108f6:	005b      	lsls	r3, r3, #1
 80108f8:	4413      	add	r3, r2
 80108fa:	00db      	lsls	r3, r3, #3
 80108fc:	440b      	add	r3, r1
 80108fe:	3314      	adds	r3, #20
 8010900:	781b      	ldrb	r3, [r3, #0]
 8010902:	2b01      	cmp	r3, #1
 8010904:	d917      	bls.n	8010936 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8010906:	4a49      	ldr	r2, [pc, #292]	; (8010a2c <etharp_query+0x274>)
 8010908:	7c7b      	ldrb	r3, [r7, #17]
 801090a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801090c:	7c7a      	ldrb	r2, [r7, #17]
 801090e:	4613      	mov	r3, r2
 8010910:	005b      	lsls	r3, r3, #1
 8010912:	4413      	add	r3, r2
 8010914:	00db      	lsls	r3, r3, #3
 8010916:	3308      	adds	r3, #8
 8010918:	4a41      	ldr	r2, [pc, #260]	; (8010a20 <etharp_query+0x268>)
 801091a:	4413      	add	r3, r2
 801091c:	3304      	adds	r3, #4
 801091e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010922:	9200      	str	r2, [sp, #0]
 8010924:	697a      	ldr	r2, [r7, #20]
 8010926:	6879      	ldr	r1, [r7, #4]
 8010928:	68f8      	ldr	r0, [r7, #12]
 801092a:	f001 fc75 	bl	8012218 <ethernet_output>
 801092e:	4603      	mov	r3, r0
 8010930:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010934:	e067      	b.n	8010a06 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8010936:	7c7a      	ldrb	r2, [r7, #17]
 8010938:	4939      	ldr	r1, [pc, #228]	; (8010a20 <etharp_query+0x268>)
 801093a:	4613      	mov	r3, r2
 801093c:	005b      	lsls	r3, r3, #1
 801093e:	4413      	add	r3, r2
 8010940:	00db      	lsls	r3, r3, #3
 8010942:	440b      	add	r3, r1
 8010944:	3314      	adds	r3, #20
 8010946:	781b      	ldrb	r3, [r3, #0]
 8010948:	2b01      	cmp	r3, #1
 801094a:	d15c      	bne.n	8010a06 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801094c:	2300      	movs	r3, #0
 801094e:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	61fb      	str	r3, [r7, #28]
    while (p) {
 8010954:	e01c      	b.n	8010990 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8010956:	69fb      	ldr	r3, [r7, #28]
 8010958:	895a      	ldrh	r2, [r3, #10]
 801095a:	69fb      	ldr	r3, [r7, #28]
 801095c:	891b      	ldrh	r3, [r3, #8]
 801095e:	429a      	cmp	r2, r3
 8010960:	d10a      	bne.n	8010978 <etharp_query+0x1c0>
 8010962:	69fb      	ldr	r3, [r7, #28]
 8010964:	681b      	ldr	r3, [r3, #0]
 8010966:	2b00      	cmp	r3, #0
 8010968:	d006      	beq.n	8010978 <etharp_query+0x1c0>
 801096a:	4b2a      	ldr	r3, [pc, #168]	; (8010a14 <etharp_query+0x25c>)
 801096c:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8010970:	492f      	ldr	r1, [pc, #188]	; (8010a30 <etharp_query+0x278>)
 8010972:	482a      	ldr	r0, [pc, #168]	; (8010a1c <etharp_query+0x264>)
 8010974:	f003 fa98 	bl	8013ea8 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8010978:	69fb      	ldr	r3, [r7, #28]
 801097a:	7b1b      	ldrb	r3, [r3, #12]
 801097c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010980:	2b00      	cmp	r3, #0
 8010982:	d002      	beq.n	801098a <etharp_query+0x1d2>
        copy_needed = 1;
 8010984:	2301      	movs	r3, #1
 8010986:	61bb      	str	r3, [r7, #24]
        break;
 8010988:	e005      	b.n	8010996 <etharp_query+0x1de>
      }
      p = p->next;
 801098a:	69fb      	ldr	r3, [r7, #28]
 801098c:	681b      	ldr	r3, [r3, #0]
 801098e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8010990:	69fb      	ldr	r3, [r7, #28]
 8010992:	2b00      	cmp	r3, #0
 8010994:	d1df      	bne.n	8010956 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8010996:	69bb      	ldr	r3, [r7, #24]
 8010998:	2b00      	cmp	r3, #0
 801099a:	d007      	beq.n	80109ac <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801099c:	687a      	ldr	r2, [r7, #4]
 801099e:	f44f 7120 	mov.w	r1, #640	; 0x280
 80109a2:	200e      	movs	r0, #14
 80109a4:	f7f8 fe00 	bl	80095a8 <pbuf_clone>
 80109a8:	61f8      	str	r0, [r7, #28]
 80109aa:	e004      	b.n	80109b6 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80109ac:	687b      	ldr	r3, [r7, #4]
 80109ae:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80109b0:	69f8      	ldr	r0, [r7, #28]
 80109b2:	f7f8 fc27 	bl	8009204 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 80109b6:	69fb      	ldr	r3, [r7, #28]
 80109b8:	2b00      	cmp	r3, #0
 80109ba:	d021      	beq.n	8010a00 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80109bc:	7c7a      	ldrb	r2, [r7, #17]
 80109be:	4918      	ldr	r1, [pc, #96]	; (8010a20 <etharp_query+0x268>)
 80109c0:	4613      	mov	r3, r2
 80109c2:	005b      	lsls	r3, r3, #1
 80109c4:	4413      	add	r3, r2
 80109c6:	00db      	lsls	r3, r3, #3
 80109c8:	440b      	add	r3, r1
 80109ca:	681b      	ldr	r3, [r3, #0]
 80109cc:	2b00      	cmp	r3, #0
 80109ce:	d00a      	beq.n	80109e6 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 80109d0:	7c7a      	ldrb	r2, [r7, #17]
 80109d2:	4913      	ldr	r1, [pc, #76]	; (8010a20 <etharp_query+0x268>)
 80109d4:	4613      	mov	r3, r2
 80109d6:	005b      	lsls	r3, r3, #1
 80109d8:	4413      	add	r3, r2
 80109da:	00db      	lsls	r3, r3, #3
 80109dc:	440b      	add	r3, r1
 80109de:	681b      	ldr	r3, [r3, #0]
 80109e0:	4618      	mov	r0, r3
 80109e2:	f7f8 fb69 	bl	80090b8 <pbuf_free>
      }
      arp_table[i].q = p;
 80109e6:	7c7a      	ldrb	r2, [r7, #17]
 80109e8:	490d      	ldr	r1, [pc, #52]	; (8010a20 <etharp_query+0x268>)
 80109ea:	4613      	mov	r3, r2
 80109ec:	005b      	lsls	r3, r3, #1
 80109ee:	4413      	add	r3, r2
 80109f0:	00db      	lsls	r3, r3, #3
 80109f2:	440b      	add	r3, r1
 80109f4:	69fa      	ldr	r2, [r7, #28]
 80109f6:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 80109f8:	2300      	movs	r3, #0
 80109fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80109fe:	e002      	b.n	8010a06 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8010a00:	23ff      	movs	r3, #255	; 0xff
 8010a02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8010a06:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8010a0a:	4618      	mov	r0, r3
 8010a0c:	3728      	adds	r7, #40	; 0x28
 8010a0e:	46bd      	mov	sp, r7
 8010a10:	bd80      	pop	{r7, pc}
 8010a12:	bf00      	nop
 8010a14:	0801724c 	.word	0x0801724c
 8010a18:	080173f8 	.word	0x080173f8
 8010a1c:	080172c4 	.word	0x080172c4
 8010a20:	20008274 	.word	0x20008274
 8010a24:	08017408 	.word	0x08017408
 8010a28:	080173ec 	.word	0x080173ec
 8010a2c:	20008364 	.word	0x20008364
 8010a30:	08017430 	.word	0x08017430

08010a34 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8010a34:	b580      	push	{r7, lr}
 8010a36:	b08a      	sub	sp, #40	; 0x28
 8010a38:	af02      	add	r7, sp, #8
 8010a3a:	60f8      	str	r0, [r7, #12]
 8010a3c:	60b9      	str	r1, [r7, #8]
 8010a3e:	607a      	str	r2, [r7, #4]
 8010a40:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8010a42:	2300      	movs	r3, #0
 8010a44:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8010a46:	68fb      	ldr	r3, [r7, #12]
 8010a48:	2b00      	cmp	r3, #0
 8010a4a:	d106      	bne.n	8010a5a <etharp_raw+0x26>
 8010a4c:	4b3a      	ldr	r3, [pc, #232]	; (8010b38 <etharp_raw+0x104>)
 8010a4e:	f240 4257 	movw	r2, #1111	; 0x457
 8010a52:	493a      	ldr	r1, [pc, #232]	; (8010b3c <etharp_raw+0x108>)
 8010a54:	483a      	ldr	r0, [pc, #232]	; (8010b40 <etharp_raw+0x10c>)
 8010a56:	f003 fa27 	bl	8013ea8 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8010a5a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010a5e:	211c      	movs	r1, #28
 8010a60:	200e      	movs	r0, #14
 8010a62:	f7f8 f845 	bl	8008af0 <pbuf_alloc>
 8010a66:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8010a68:	69bb      	ldr	r3, [r7, #24]
 8010a6a:	2b00      	cmp	r3, #0
 8010a6c:	d102      	bne.n	8010a74 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8010a6e:	f04f 33ff 	mov.w	r3, #4294967295
 8010a72:	e05d      	b.n	8010b30 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8010a74:	69bb      	ldr	r3, [r7, #24]
 8010a76:	895b      	ldrh	r3, [r3, #10]
 8010a78:	2b1b      	cmp	r3, #27
 8010a7a:	d806      	bhi.n	8010a8a <etharp_raw+0x56>
 8010a7c:	4b2e      	ldr	r3, [pc, #184]	; (8010b38 <etharp_raw+0x104>)
 8010a7e:	f240 4262 	movw	r2, #1122	; 0x462
 8010a82:	4930      	ldr	r1, [pc, #192]	; (8010b44 <etharp_raw+0x110>)
 8010a84:	482e      	ldr	r0, [pc, #184]	; (8010b40 <etharp_raw+0x10c>)
 8010a86:	f003 fa0f 	bl	8013ea8 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8010a8a:	69bb      	ldr	r3, [r7, #24]
 8010a8c:	685b      	ldr	r3, [r3, #4]
 8010a8e:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8010a90:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8010a92:	4618      	mov	r0, r3
 8010a94:	f7f6 ff64 	bl	8007960 <lwip_htons>
 8010a98:	4603      	mov	r3, r0
 8010a9a:	461a      	mov	r2, r3
 8010a9c:	697b      	ldr	r3, [r7, #20]
 8010a9e:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8010aa0:	68fb      	ldr	r3, [r7, #12]
 8010aa2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010aa6:	2b06      	cmp	r3, #6
 8010aa8:	d006      	beq.n	8010ab8 <etharp_raw+0x84>
 8010aaa:	4b23      	ldr	r3, [pc, #140]	; (8010b38 <etharp_raw+0x104>)
 8010aac:	f240 4269 	movw	r2, #1129	; 0x469
 8010ab0:	4925      	ldr	r1, [pc, #148]	; (8010b48 <etharp_raw+0x114>)
 8010ab2:	4823      	ldr	r0, [pc, #140]	; (8010b40 <etharp_raw+0x10c>)
 8010ab4:	f003 f9f8 	bl	8013ea8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8010ab8:	697b      	ldr	r3, [r7, #20]
 8010aba:	3308      	adds	r3, #8
 8010abc:	2206      	movs	r2, #6
 8010abe:	6839      	ldr	r1, [r7, #0]
 8010ac0:	4618      	mov	r0, r3
 8010ac2:	f003 f946 	bl	8013d52 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8010ac6:	697b      	ldr	r3, [r7, #20]
 8010ac8:	3312      	adds	r3, #18
 8010aca:	2206      	movs	r2, #6
 8010acc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010ace:	4618      	mov	r0, r3
 8010ad0:	f003 f93f 	bl	8013d52 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8010ad4:	697b      	ldr	r3, [r7, #20]
 8010ad6:	330e      	adds	r3, #14
 8010ad8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010ada:	6812      	ldr	r2, [r2, #0]
 8010adc:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8010ade:	697b      	ldr	r3, [r7, #20]
 8010ae0:	3318      	adds	r3, #24
 8010ae2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010ae4:	6812      	ldr	r2, [r2, #0]
 8010ae6:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8010ae8:	697b      	ldr	r3, [r7, #20]
 8010aea:	2200      	movs	r2, #0
 8010aec:	701a      	strb	r2, [r3, #0]
 8010aee:	2200      	movs	r2, #0
 8010af0:	f042 0201 	orr.w	r2, r2, #1
 8010af4:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8010af6:	697b      	ldr	r3, [r7, #20]
 8010af8:	2200      	movs	r2, #0
 8010afa:	f042 0208 	orr.w	r2, r2, #8
 8010afe:	709a      	strb	r2, [r3, #2]
 8010b00:	2200      	movs	r2, #0
 8010b02:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8010b04:	697b      	ldr	r3, [r7, #20]
 8010b06:	2206      	movs	r2, #6
 8010b08:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8010b0a:	697b      	ldr	r3, [r7, #20]
 8010b0c:	2204      	movs	r2, #4
 8010b0e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8010b10:	f640 0306 	movw	r3, #2054	; 0x806
 8010b14:	9300      	str	r3, [sp, #0]
 8010b16:	687b      	ldr	r3, [r7, #4]
 8010b18:	68ba      	ldr	r2, [r7, #8]
 8010b1a:	69b9      	ldr	r1, [r7, #24]
 8010b1c:	68f8      	ldr	r0, [r7, #12]
 8010b1e:	f001 fb7b 	bl	8012218 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8010b22:	69b8      	ldr	r0, [r7, #24]
 8010b24:	f7f8 fac8 	bl	80090b8 <pbuf_free>
  p = NULL;
 8010b28:	2300      	movs	r3, #0
 8010b2a:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8010b2c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8010b30:	4618      	mov	r0, r3
 8010b32:	3720      	adds	r7, #32
 8010b34:	46bd      	mov	sp, r7
 8010b36:	bd80      	pop	{r7, pc}
 8010b38:	0801724c 	.word	0x0801724c
 8010b3c:	0801739c 	.word	0x0801739c
 8010b40:	080172c4 	.word	0x080172c4
 8010b44:	0801744c 	.word	0x0801744c
 8010b48:	08017480 	.word	0x08017480

08010b4c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8010b4c:	b580      	push	{r7, lr}
 8010b4e:	b088      	sub	sp, #32
 8010b50:	af04      	add	r7, sp, #16
 8010b52:	60f8      	str	r0, [r7, #12]
 8010b54:	60b9      	str	r1, [r7, #8]
 8010b56:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8010b58:	68fb      	ldr	r3, [r7, #12]
 8010b5a:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8010b5e:	68fb      	ldr	r3, [r7, #12]
 8010b60:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8010b64:	68fb      	ldr	r3, [r7, #12]
 8010b66:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8010b68:	2201      	movs	r2, #1
 8010b6a:	9203      	str	r2, [sp, #12]
 8010b6c:	68ba      	ldr	r2, [r7, #8]
 8010b6e:	9202      	str	r2, [sp, #8]
 8010b70:	4a06      	ldr	r2, [pc, #24]	; (8010b8c <etharp_request_dst+0x40>)
 8010b72:	9201      	str	r2, [sp, #4]
 8010b74:	9300      	str	r3, [sp, #0]
 8010b76:	4603      	mov	r3, r0
 8010b78:	687a      	ldr	r2, [r7, #4]
 8010b7a:	68f8      	ldr	r0, [r7, #12]
 8010b7c:	f7ff ff5a 	bl	8010a34 <etharp_raw>
 8010b80:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8010b82:	4618      	mov	r0, r3
 8010b84:	3710      	adds	r7, #16
 8010b86:	46bd      	mov	sp, r7
 8010b88:	bd80      	pop	{r7, pc}
 8010b8a:	bf00      	nop
 8010b8c:	08017adc 	.word	0x08017adc

08010b90 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8010b90:	b580      	push	{r7, lr}
 8010b92:	b082      	sub	sp, #8
 8010b94:	af00      	add	r7, sp, #0
 8010b96:	6078      	str	r0, [r7, #4]
 8010b98:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8010b9a:	4a05      	ldr	r2, [pc, #20]	; (8010bb0 <etharp_request+0x20>)
 8010b9c:	6839      	ldr	r1, [r7, #0]
 8010b9e:	6878      	ldr	r0, [r7, #4]
 8010ba0:	f7ff ffd4 	bl	8010b4c <etharp_request_dst>
 8010ba4:	4603      	mov	r3, r0
}
 8010ba6:	4618      	mov	r0, r3
 8010ba8:	3708      	adds	r7, #8
 8010baa:	46bd      	mov	sp, r7
 8010bac:	bd80      	pop	{r7, pc}
 8010bae:	bf00      	nop
 8010bb0:	08017ad4 	.word	0x08017ad4

08010bb4 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8010bb4:	b580      	push	{r7, lr}
 8010bb6:	b08e      	sub	sp, #56	; 0x38
 8010bb8:	af04      	add	r7, sp, #16
 8010bba:	6078      	str	r0, [r7, #4]
 8010bbc:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8010bbe:	4b79      	ldr	r3, [pc, #484]	; (8010da4 <icmp_input+0x1f0>)
 8010bc0:	689b      	ldr	r3, [r3, #8]
 8010bc2:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8010bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bc6:	781b      	ldrb	r3, [r3, #0]
 8010bc8:	f003 030f 	and.w	r3, r3, #15
 8010bcc:	b2db      	uxtb	r3, r3
 8010bce:	009b      	lsls	r3, r3, #2
 8010bd0:	b2db      	uxtb	r3, r3
 8010bd2:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8010bd4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010bd6:	2b13      	cmp	r3, #19
 8010bd8:	f240 80cd 	bls.w	8010d76 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	895b      	ldrh	r3, [r3, #10]
 8010be0:	2b03      	cmp	r3, #3
 8010be2:	f240 80ca 	bls.w	8010d7a <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	685b      	ldr	r3, [r3, #4]
 8010bea:	781b      	ldrb	r3, [r3, #0]
 8010bec:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8010bf0:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8010bf4:	2b00      	cmp	r3, #0
 8010bf6:	f000 80b7 	beq.w	8010d68 <icmp_input+0x1b4>
 8010bfa:	2b08      	cmp	r3, #8
 8010bfc:	f040 80b7 	bne.w	8010d6e <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8010c00:	4b69      	ldr	r3, [pc, #420]	; (8010da8 <icmp_input+0x1f4>)
 8010c02:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8010c04:	4b67      	ldr	r3, [pc, #412]	; (8010da4 <icmp_input+0x1f0>)
 8010c06:	695b      	ldr	r3, [r3, #20]
 8010c08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010c0c:	2be0      	cmp	r3, #224	; 0xe0
 8010c0e:	f000 80bb 	beq.w	8010d88 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8010c12:	4b64      	ldr	r3, [pc, #400]	; (8010da4 <icmp_input+0x1f0>)
 8010c14:	695b      	ldr	r3, [r3, #20]
 8010c16:	4a63      	ldr	r2, [pc, #396]	; (8010da4 <icmp_input+0x1f0>)
 8010c18:	6812      	ldr	r2, [r2, #0]
 8010c1a:	4611      	mov	r1, r2
 8010c1c:	4618      	mov	r0, r3
 8010c1e:	f000 fbed 	bl	80113fc <ip4_addr_isbroadcast_u32>
 8010c22:	4603      	mov	r3, r0
 8010c24:	2b00      	cmp	r3, #0
 8010c26:	f040 80b1 	bne.w	8010d8c <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	891b      	ldrh	r3, [r3, #8]
 8010c2e:	2b07      	cmp	r3, #7
 8010c30:	f240 80a5 	bls.w	8010d7e <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8010c34:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010c36:	330e      	adds	r3, #14
 8010c38:	4619      	mov	r1, r3
 8010c3a:	6878      	ldr	r0, [r7, #4]
 8010c3c:	f7f8 f9a6 	bl	8008f8c <pbuf_add_header>
 8010c40:	4603      	mov	r3, r0
 8010c42:	2b00      	cmp	r3, #0
 8010c44:	d04b      	beq.n	8010cde <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	891a      	ldrh	r2, [r3, #8]
 8010c4a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010c4c:	4413      	add	r3, r2
 8010c4e:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	891b      	ldrh	r3, [r3, #8]
 8010c54:	8b7a      	ldrh	r2, [r7, #26]
 8010c56:	429a      	cmp	r2, r3
 8010c58:	f0c0 809a 	bcc.w	8010d90 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8010c5c:	8b7b      	ldrh	r3, [r7, #26]
 8010c5e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010c62:	4619      	mov	r1, r3
 8010c64:	200e      	movs	r0, #14
 8010c66:	f7f7 ff43 	bl	8008af0 <pbuf_alloc>
 8010c6a:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8010c6c:	697b      	ldr	r3, [r7, #20]
 8010c6e:	2b00      	cmp	r3, #0
 8010c70:	f000 8090 	beq.w	8010d94 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8010c74:	697b      	ldr	r3, [r7, #20]
 8010c76:	895b      	ldrh	r3, [r3, #10]
 8010c78:	461a      	mov	r2, r3
 8010c7a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010c7c:	3308      	adds	r3, #8
 8010c7e:	429a      	cmp	r2, r3
 8010c80:	d203      	bcs.n	8010c8a <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8010c82:	6978      	ldr	r0, [r7, #20]
 8010c84:	f7f8 fa18 	bl	80090b8 <pbuf_free>
          goto icmperr;
 8010c88:	e085      	b.n	8010d96 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8010c8a:	697b      	ldr	r3, [r7, #20]
 8010c8c:	685b      	ldr	r3, [r3, #4]
 8010c8e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8010c90:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010c92:	4618      	mov	r0, r3
 8010c94:	f003 f85d 	bl	8013d52 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8010c98:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010c9a:	4619      	mov	r1, r3
 8010c9c:	6978      	ldr	r0, [r7, #20]
 8010c9e:	f7f8 f985 	bl	8008fac <pbuf_remove_header>
 8010ca2:	4603      	mov	r3, r0
 8010ca4:	2b00      	cmp	r3, #0
 8010ca6:	d009      	beq.n	8010cbc <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8010ca8:	4b40      	ldr	r3, [pc, #256]	; (8010dac <icmp_input+0x1f8>)
 8010caa:	22b6      	movs	r2, #182	; 0xb6
 8010cac:	4940      	ldr	r1, [pc, #256]	; (8010db0 <icmp_input+0x1fc>)
 8010cae:	4841      	ldr	r0, [pc, #260]	; (8010db4 <icmp_input+0x200>)
 8010cb0:	f003 f8fa 	bl	8013ea8 <iprintf>
          pbuf_free(r);
 8010cb4:	6978      	ldr	r0, [r7, #20]
 8010cb6:	f7f8 f9ff 	bl	80090b8 <pbuf_free>
          goto icmperr;
 8010cba:	e06c      	b.n	8010d96 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8010cbc:	6879      	ldr	r1, [r7, #4]
 8010cbe:	6978      	ldr	r0, [r7, #20]
 8010cc0:	f7f8 fb2e 	bl	8009320 <pbuf_copy>
 8010cc4:	4603      	mov	r3, r0
 8010cc6:	2b00      	cmp	r3, #0
 8010cc8:	d003      	beq.n	8010cd2 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8010cca:	6978      	ldr	r0, [r7, #20]
 8010ccc:	f7f8 f9f4 	bl	80090b8 <pbuf_free>
          goto icmperr;
 8010cd0:	e061      	b.n	8010d96 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8010cd2:	6878      	ldr	r0, [r7, #4]
 8010cd4:	f7f8 f9f0 	bl	80090b8 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8010cd8:	697b      	ldr	r3, [r7, #20]
 8010cda:	607b      	str	r3, [r7, #4]
 8010cdc:	e00f      	b.n	8010cfe <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8010cde:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010ce0:	330e      	adds	r3, #14
 8010ce2:	4619      	mov	r1, r3
 8010ce4:	6878      	ldr	r0, [r7, #4]
 8010ce6:	f7f8 f961 	bl	8008fac <pbuf_remove_header>
 8010cea:	4603      	mov	r3, r0
 8010cec:	2b00      	cmp	r3, #0
 8010cee:	d006      	beq.n	8010cfe <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8010cf0:	4b2e      	ldr	r3, [pc, #184]	; (8010dac <icmp_input+0x1f8>)
 8010cf2:	22c7      	movs	r2, #199	; 0xc7
 8010cf4:	4930      	ldr	r1, [pc, #192]	; (8010db8 <icmp_input+0x204>)
 8010cf6:	482f      	ldr	r0, [pc, #188]	; (8010db4 <icmp_input+0x200>)
 8010cf8:	f003 f8d6 	bl	8013ea8 <iprintf>
          goto icmperr;
 8010cfc:	e04b      	b.n	8010d96 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8010cfe:	687b      	ldr	r3, [r7, #4]
 8010d00:	685b      	ldr	r3, [r3, #4]
 8010d02:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8010d04:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010d06:	4619      	mov	r1, r3
 8010d08:	6878      	ldr	r0, [r7, #4]
 8010d0a:	f7f8 f93f 	bl	8008f8c <pbuf_add_header>
 8010d0e:	4603      	mov	r3, r0
 8010d10:	2b00      	cmp	r3, #0
 8010d12:	d12b      	bne.n	8010d6c <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	685b      	ldr	r3, [r3, #4]
 8010d18:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8010d1a:	69fb      	ldr	r3, [r7, #28]
 8010d1c:	681a      	ldr	r2, [r3, #0]
 8010d1e:	68fb      	ldr	r3, [r7, #12]
 8010d20:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8010d22:	4b20      	ldr	r3, [pc, #128]	; (8010da4 <icmp_input+0x1f0>)
 8010d24:	691a      	ldr	r2, [r3, #16]
 8010d26:	68fb      	ldr	r3, [r7, #12]
 8010d28:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8010d2a:	693b      	ldr	r3, [r7, #16]
 8010d2c:	2200      	movs	r2, #0
 8010d2e:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8010d30:	693b      	ldr	r3, [r7, #16]
 8010d32:	2200      	movs	r2, #0
 8010d34:	709a      	strb	r2, [r3, #2]
 8010d36:	2200      	movs	r2, #0
 8010d38:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8010d3a:	68fb      	ldr	r3, [r7, #12]
 8010d3c:	22ff      	movs	r2, #255	; 0xff
 8010d3e:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8010d40:	68fb      	ldr	r3, [r7, #12]
 8010d42:	2200      	movs	r2, #0
 8010d44:	729a      	strb	r2, [r3, #10]
 8010d46:	2200      	movs	r2, #0
 8010d48:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8010d4a:	683b      	ldr	r3, [r7, #0]
 8010d4c:	9302      	str	r3, [sp, #8]
 8010d4e:	2301      	movs	r3, #1
 8010d50:	9301      	str	r3, [sp, #4]
 8010d52:	2300      	movs	r3, #0
 8010d54:	9300      	str	r3, [sp, #0]
 8010d56:	23ff      	movs	r3, #255	; 0xff
 8010d58:	2200      	movs	r2, #0
 8010d5a:	69f9      	ldr	r1, [r7, #28]
 8010d5c:	6878      	ldr	r0, [r7, #4]
 8010d5e:	f000 fa75 	bl	801124c <ip4_output_if>
 8010d62:	4603      	mov	r3, r0
 8010d64:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8010d66:	e001      	b.n	8010d6c <icmp_input+0x1b8>
      break;
 8010d68:	bf00      	nop
 8010d6a:	e000      	b.n	8010d6e <icmp_input+0x1ba>
      break;
 8010d6c:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8010d6e:	6878      	ldr	r0, [r7, #4]
 8010d70:	f7f8 f9a2 	bl	80090b8 <pbuf_free>
  return;
 8010d74:	e013      	b.n	8010d9e <icmp_input+0x1ea>
    goto lenerr;
 8010d76:	bf00      	nop
 8010d78:	e002      	b.n	8010d80 <icmp_input+0x1cc>
    goto lenerr;
 8010d7a:	bf00      	nop
 8010d7c:	e000      	b.n	8010d80 <icmp_input+0x1cc>
        goto lenerr;
 8010d7e:	bf00      	nop
lenerr:
  pbuf_free(p);
 8010d80:	6878      	ldr	r0, [r7, #4]
 8010d82:	f7f8 f999 	bl	80090b8 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8010d86:	e00a      	b.n	8010d9e <icmp_input+0x1ea>
        goto icmperr;
 8010d88:	bf00      	nop
 8010d8a:	e004      	b.n	8010d96 <icmp_input+0x1e2>
        goto icmperr;
 8010d8c:	bf00      	nop
 8010d8e:	e002      	b.n	8010d96 <icmp_input+0x1e2>
          goto icmperr;
 8010d90:	bf00      	nop
 8010d92:	e000      	b.n	8010d96 <icmp_input+0x1e2>
          goto icmperr;
 8010d94:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8010d96:	6878      	ldr	r0, [r7, #4]
 8010d98:	f7f8 f98e 	bl	80090b8 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8010d9c:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8010d9e:	3728      	adds	r7, #40	; 0x28
 8010da0:	46bd      	mov	sp, r7
 8010da2:	bd80      	pop	{r7, pc}
 8010da4:	20004ac0 	.word	0x20004ac0
 8010da8:	20004ad4 	.word	0x20004ad4
 8010dac:	080174c4 	.word	0x080174c4
 8010db0:	080174fc 	.word	0x080174fc
 8010db4:	08017534 	.word	0x08017534
 8010db8:	0801755c 	.word	0x0801755c

08010dbc <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8010dbc:	b580      	push	{r7, lr}
 8010dbe:	b082      	sub	sp, #8
 8010dc0:	af00      	add	r7, sp, #0
 8010dc2:	6078      	str	r0, [r7, #4]
 8010dc4:	460b      	mov	r3, r1
 8010dc6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8010dc8:	78fb      	ldrb	r3, [r7, #3]
 8010dca:	461a      	mov	r2, r3
 8010dcc:	2103      	movs	r1, #3
 8010dce:	6878      	ldr	r0, [r7, #4]
 8010dd0:	f000 f814 	bl	8010dfc <icmp_send_response>
}
 8010dd4:	bf00      	nop
 8010dd6:	3708      	adds	r7, #8
 8010dd8:	46bd      	mov	sp, r7
 8010dda:	bd80      	pop	{r7, pc}

08010ddc <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8010ddc:	b580      	push	{r7, lr}
 8010dde:	b082      	sub	sp, #8
 8010de0:	af00      	add	r7, sp, #0
 8010de2:	6078      	str	r0, [r7, #4]
 8010de4:	460b      	mov	r3, r1
 8010de6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8010de8:	78fb      	ldrb	r3, [r7, #3]
 8010dea:	461a      	mov	r2, r3
 8010dec:	210b      	movs	r1, #11
 8010dee:	6878      	ldr	r0, [r7, #4]
 8010df0:	f000 f804 	bl	8010dfc <icmp_send_response>
}
 8010df4:	bf00      	nop
 8010df6:	3708      	adds	r7, #8
 8010df8:	46bd      	mov	sp, r7
 8010dfa:	bd80      	pop	{r7, pc}

08010dfc <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8010dfc:	b580      	push	{r7, lr}
 8010dfe:	b08c      	sub	sp, #48	; 0x30
 8010e00:	af04      	add	r7, sp, #16
 8010e02:	6078      	str	r0, [r7, #4]
 8010e04:	460b      	mov	r3, r1
 8010e06:	70fb      	strb	r3, [r7, #3]
 8010e08:	4613      	mov	r3, r2
 8010e0a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8010e0c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010e10:	2124      	movs	r1, #36	; 0x24
 8010e12:	2022      	movs	r0, #34	; 0x22
 8010e14:	f7f7 fe6c 	bl	8008af0 <pbuf_alloc>
 8010e18:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8010e1a:	69fb      	ldr	r3, [r7, #28]
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	d04c      	beq.n	8010eba <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8010e20:	69fb      	ldr	r3, [r7, #28]
 8010e22:	895b      	ldrh	r3, [r3, #10]
 8010e24:	2b23      	cmp	r3, #35	; 0x23
 8010e26:	d806      	bhi.n	8010e36 <icmp_send_response+0x3a>
 8010e28:	4b26      	ldr	r3, [pc, #152]	; (8010ec4 <icmp_send_response+0xc8>)
 8010e2a:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8010e2e:	4926      	ldr	r1, [pc, #152]	; (8010ec8 <icmp_send_response+0xcc>)
 8010e30:	4826      	ldr	r0, [pc, #152]	; (8010ecc <icmp_send_response+0xd0>)
 8010e32:	f003 f839 	bl	8013ea8 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8010e36:	687b      	ldr	r3, [r7, #4]
 8010e38:	685b      	ldr	r3, [r3, #4]
 8010e3a:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8010e3c:	69fb      	ldr	r3, [r7, #28]
 8010e3e:	685b      	ldr	r3, [r3, #4]
 8010e40:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8010e42:	697b      	ldr	r3, [r7, #20]
 8010e44:	78fa      	ldrb	r2, [r7, #3]
 8010e46:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8010e48:	697b      	ldr	r3, [r7, #20]
 8010e4a:	78ba      	ldrb	r2, [r7, #2]
 8010e4c:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8010e4e:	697b      	ldr	r3, [r7, #20]
 8010e50:	2200      	movs	r2, #0
 8010e52:	711a      	strb	r2, [r3, #4]
 8010e54:	2200      	movs	r2, #0
 8010e56:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8010e58:	697b      	ldr	r3, [r7, #20]
 8010e5a:	2200      	movs	r2, #0
 8010e5c:	719a      	strb	r2, [r3, #6]
 8010e5e:	2200      	movs	r2, #0
 8010e60:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8010e62:	69fb      	ldr	r3, [r7, #28]
 8010e64:	685b      	ldr	r3, [r3, #4]
 8010e66:	f103 0008 	add.w	r0, r3, #8
 8010e6a:	687b      	ldr	r3, [r7, #4]
 8010e6c:	685b      	ldr	r3, [r3, #4]
 8010e6e:	221c      	movs	r2, #28
 8010e70:	4619      	mov	r1, r3
 8010e72:	f002 ff6e 	bl	8013d52 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8010e76:	69bb      	ldr	r3, [r7, #24]
 8010e78:	68db      	ldr	r3, [r3, #12]
 8010e7a:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8010e7c:	f107 030c 	add.w	r3, r7, #12
 8010e80:	4618      	mov	r0, r3
 8010e82:	f000 f825 	bl	8010ed0 <ip4_route>
 8010e86:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8010e88:	693b      	ldr	r3, [r7, #16]
 8010e8a:	2b00      	cmp	r3, #0
 8010e8c:	d011      	beq.n	8010eb2 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8010e8e:	697b      	ldr	r3, [r7, #20]
 8010e90:	2200      	movs	r2, #0
 8010e92:	709a      	strb	r2, [r3, #2]
 8010e94:	2200      	movs	r2, #0
 8010e96:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8010e98:	f107 020c 	add.w	r2, r7, #12
 8010e9c:	693b      	ldr	r3, [r7, #16]
 8010e9e:	9302      	str	r3, [sp, #8]
 8010ea0:	2301      	movs	r3, #1
 8010ea2:	9301      	str	r3, [sp, #4]
 8010ea4:	2300      	movs	r3, #0
 8010ea6:	9300      	str	r3, [sp, #0]
 8010ea8:	23ff      	movs	r3, #255	; 0xff
 8010eaa:	2100      	movs	r1, #0
 8010eac:	69f8      	ldr	r0, [r7, #28]
 8010eae:	f000 f9cd 	bl	801124c <ip4_output_if>
  }
  pbuf_free(q);
 8010eb2:	69f8      	ldr	r0, [r7, #28]
 8010eb4:	f7f8 f900 	bl	80090b8 <pbuf_free>
 8010eb8:	e000      	b.n	8010ebc <icmp_send_response+0xc0>
    return;
 8010eba:	bf00      	nop
}
 8010ebc:	3720      	adds	r7, #32
 8010ebe:	46bd      	mov	sp, r7
 8010ec0:	bd80      	pop	{r7, pc}
 8010ec2:	bf00      	nop
 8010ec4:	080174c4 	.word	0x080174c4
 8010ec8:	08017590 	.word	0x08017590
 8010ecc:	08017534 	.word	0x08017534

08010ed0 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8010ed0:	b480      	push	{r7}
 8010ed2:	b085      	sub	sp, #20
 8010ed4:	af00      	add	r7, sp, #0
 8010ed6:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8010ed8:	4b33      	ldr	r3, [pc, #204]	; (8010fa8 <ip4_route+0xd8>)
 8010eda:	681b      	ldr	r3, [r3, #0]
 8010edc:	60fb      	str	r3, [r7, #12]
 8010ede:	e036      	b.n	8010f4e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8010ee0:	68fb      	ldr	r3, [r7, #12]
 8010ee2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010ee6:	f003 0301 	and.w	r3, r3, #1
 8010eea:	b2db      	uxtb	r3, r3
 8010eec:	2b00      	cmp	r3, #0
 8010eee:	d02b      	beq.n	8010f48 <ip4_route+0x78>
 8010ef0:	68fb      	ldr	r3, [r7, #12]
 8010ef2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010ef6:	089b      	lsrs	r3, r3, #2
 8010ef8:	f003 0301 	and.w	r3, r3, #1
 8010efc:	b2db      	uxtb	r3, r3
 8010efe:	2b00      	cmp	r3, #0
 8010f00:	d022      	beq.n	8010f48 <ip4_route+0x78>
 8010f02:	68fb      	ldr	r3, [r7, #12]
 8010f04:	3304      	adds	r3, #4
 8010f06:	681b      	ldr	r3, [r3, #0]
 8010f08:	2b00      	cmp	r3, #0
 8010f0a:	d01d      	beq.n	8010f48 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8010f0c:	687b      	ldr	r3, [r7, #4]
 8010f0e:	681a      	ldr	r2, [r3, #0]
 8010f10:	68fb      	ldr	r3, [r7, #12]
 8010f12:	3304      	adds	r3, #4
 8010f14:	681b      	ldr	r3, [r3, #0]
 8010f16:	405a      	eors	r2, r3
 8010f18:	68fb      	ldr	r3, [r7, #12]
 8010f1a:	3308      	adds	r3, #8
 8010f1c:	681b      	ldr	r3, [r3, #0]
 8010f1e:	4013      	ands	r3, r2
 8010f20:	2b00      	cmp	r3, #0
 8010f22:	d101      	bne.n	8010f28 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8010f24:	68fb      	ldr	r3, [r7, #12]
 8010f26:	e038      	b.n	8010f9a <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8010f28:	68fb      	ldr	r3, [r7, #12]
 8010f2a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010f2e:	f003 0302 	and.w	r3, r3, #2
 8010f32:	2b00      	cmp	r3, #0
 8010f34:	d108      	bne.n	8010f48 <ip4_route+0x78>
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	681a      	ldr	r2, [r3, #0]
 8010f3a:	68fb      	ldr	r3, [r7, #12]
 8010f3c:	330c      	adds	r3, #12
 8010f3e:	681b      	ldr	r3, [r3, #0]
 8010f40:	429a      	cmp	r2, r3
 8010f42:	d101      	bne.n	8010f48 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8010f44:	68fb      	ldr	r3, [r7, #12]
 8010f46:	e028      	b.n	8010f9a <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8010f48:	68fb      	ldr	r3, [r7, #12]
 8010f4a:	681b      	ldr	r3, [r3, #0]
 8010f4c:	60fb      	str	r3, [r7, #12]
 8010f4e:	68fb      	ldr	r3, [r7, #12]
 8010f50:	2b00      	cmp	r3, #0
 8010f52:	d1c5      	bne.n	8010ee0 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8010f54:	4b15      	ldr	r3, [pc, #84]	; (8010fac <ip4_route+0xdc>)
 8010f56:	681b      	ldr	r3, [r3, #0]
 8010f58:	2b00      	cmp	r3, #0
 8010f5a:	d01a      	beq.n	8010f92 <ip4_route+0xc2>
 8010f5c:	4b13      	ldr	r3, [pc, #76]	; (8010fac <ip4_route+0xdc>)
 8010f5e:	681b      	ldr	r3, [r3, #0]
 8010f60:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010f64:	f003 0301 	and.w	r3, r3, #1
 8010f68:	2b00      	cmp	r3, #0
 8010f6a:	d012      	beq.n	8010f92 <ip4_route+0xc2>
 8010f6c:	4b0f      	ldr	r3, [pc, #60]	; (8010fac <ip4_route+0xdc>)
 8010f6e:	681b      	ldr	r3, [r3, #0]
 8010f70:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010f74:	f003 0304 	and.w	r3, r3, #4
 8010f78:	2b00      	cmp	r3, #0
 8010f7a:	d00a      	beq.n	8010f92 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8010f7c:	4b0b      	ldr	r3, [pc, #44]	; (8010fac <ip4_route+0xdc>)
 8010f7e:	681b      	ldr	r3, [r3, #0]
 8010f80:	3304      	adds	r3, #4
 8010f82:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8010f84:	2b00      	cmp	r3, #0
 8010f86:	d004      	beq.n	8010f92 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	681b      	ldr	r3, [r3, #0]
 8010f8c:	b2db      	uxtb	r3, r3
 8010f8e:	2b7f      	cmp	r3, #127	; 0x7f
 8010f90:	d101      	bne.n	8010f96 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8010f92:	2300      	movs	r3, #0
 8010f94:	e001      	b.n	8010f9a <ip4_route+0xca>
  }

  return netif_default;
 8010f96:	4b05      	ldr	r3, [pc, #20]	; (8010fac <ip4_route+0xdc>)
 8010f98:	681b      	ldr	r3, [r3, #0]
}
 8010f9a:	4618      	mov	r0, r3
 8010f9c:	3714      	adds	r7, #20
 8010f9e:	46bd      	mov	sp, r7
 8010fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fa4:	4770      	bx	lr
 8010fa6:	bf00      	nop
 8010fa8:	20008208 	.word	0x20008208
 8010fac:	2000820c 	.word	0x2000820c

08010fb0 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8010fb0:	b580      	push	{r7, lr}
 8010fb2:	b082      	sub	sp, #8
 8010fb4:	af00      	add	r7, sp, #0
 8010fb6:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010fbe:	f003 0301 	and.w	r3, r3, #1
 8010fc2:	b2db      	uxtb	r3, r3
 8010fc4:	2b00      	cmp	r3, #0
 8010fc6:	d016      	beq.n	8010ff6 <ip4_input_accept+0x46>
 8010fc8:	687b      	ldr	r3, [r7, #4]
 8010fca:	3304      	adds	r3, #4
 8010fcc:	681b      	ldr	r3, [r3, #0]
 8010fce:	2b00      	cmp	r3, #0
 8010fd0:	d011      	beq.n	8010ff6 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8010fd2:	4b0b      	ldr	r3, [pc, #44]	; (8011000 <ip4_input_accept+0x50>)
 8010fd4:	695a      	ldr	r2, [r3, #20]
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	3304      	adds	r3, #4
 8010fda:	681b      	ldr	r3, [r3, #0]
 8010fdc:	429a      	cmp	r2, r3
 8010fde:	d008      	beq.n	8010ff2 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8010fe0:	4b07      	ldr	r3, [pc, #28]	; (8011000 <ip4_input_accept+0x50>)
 8010fe2:	695b      	ldr	r3, [r3, #20]
 8010fe4:	6879      	ldr	r1, [r7, #4]
 8010fe6:	4618      	mov	r0, r3
 8010fe8:	f000 fa08 	bl	80113fc <ip4_addr_isbroadcast_u32>
 8010fec:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8010fee:	2b00      	cmp	r3, #0
 8010ff0:	d001      	beq.n	8010ff6 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8010ff2:	2301      	movs	r3, #1
 8010ff4:	e000      	b.n	8010ff8 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8010ff6:	2300      	movs	r3, #0
}
 8010ff8:	4618      	mov	r0, r3
 8010ffa:	3708      	adds	r7, #8
 8010ffc:	46bd      	mov	sp, r7
 8010ffe:	bd80      	pop	{r7, pc}
 8011000:	20004ac0 	.word	0x20004ac0

08011004 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8011004:	b580      	push	{r7, lr}
 8011006:	b086      	sub	sp, #24
 8011008:	af00      	add	r7, sp, #0
 801100a:	6078      	str	r0, [r7, #4]
 801100c:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801100e:	687b      	ldr	r3, [r7, #4]
 8011010:	685b      	ldr	r3, [r3, #4]
 8011012:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8011014:	697b      	ldr	r3, [r7, #20]
 8011016:	781b      	ldrb	r3, [r3, #0]
 8011018:	091b      	lsrs	r3, r3, #4
 801101a:	b2db      	uxtb	r3, r3
 801101c:	2b04      	cmp	r3, #4
 801101e:	d004      	beq.n	801102a <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8011020:	6878      	ldr	r0, [r7, #4]
 8011022:	f7f8 f849 	bl	80090b8 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8011026:	2300      	movs	r3, #0
 8011028:	e107      	b.n	801123a <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801102a:	697b      	ldr	r3, [r7, #20]
 801102c:	781b      	ldrb	r3, [r3, #0]
 801102e:	f003 030f 	and.w	r3, r3, #15
 8011032:	b2db      	uxtb	r3, r3
 8011034:	009b      	lsls	r3, r3, #2
 8011036:	b2db      	uxtb	r3, r3
 8011038:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801103a:	697b      	ldr	r3, [r7, #20]
 801103c:	885b      	ldrh	r3, [r3, #2]
 801103e:	b29b      	uxth	r3, r3
 8011040:	4618      	mov	r0, r3
 8011042:	f7f6 fc8d 	bl	8007960 <lwip_htons>
 8011046:	4603      	mov	r3, r0
 8011048:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	891b      	ldrh	r3, [r3, #8]
 801104e:	89ba      	ldrh	r2, [r7, #12]
 8011050:	429a      	cmp	r2, r3
 8011052:	d204      	bcs.n	801105e <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8011054:	89bb      	ldrh	r3, [r7, #12]
 8011056:	4619      	mov	r1, r3
 8011058:	6878      	ldr	r0, [r7, #4]
 801105a:	f7f7 fea7 	bl	8008dac <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	895b      	ldrh	r3, [r3, #10]
 8011062:	89fa      	ldrh	r2, [r7, #14]
 8011064:	429a      	cmp	r2, r3
 8011066:	d807      	bhi.n	8011078 <ip4_input+0x74>
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	891b      	ldrh	r3, [r3, #8]
 801106c:	89ba      	ldrh	r2, [r7, #12]
 801106e:	429a      	cmp	r2, r3
 8011070:	d802      	bhi.n	8011078 <ip4_input+0x74>
 8011072:	89fb      	ldrh	r3, [r7, #14]
 8011074:	2b13      	cmp	r3, #19
 8011076:	d804      	bhi.n	8011082 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8011078:	6878      	ldr	r0, [r7, #4]
 801107a:	f7f8 f81d 	bl	80090b8 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801107e:	2300      	movs	r3, #0
 8011080:	e0db      	b.n	801123a <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8011082:	697b      	ldr	r3, [r7, #20]
 8011084:	691b      	ldr	r3, [r3, #16]
 8011086:	4a6f      	ldr	r2, [pc, #444]	; (8011244 <ip4_input+0x240>)
 8011088:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801108a:	697b      	ldr	r3, [r7, #20]
 801108c:	68db      	ldr	r3, [r3, #12]
 801108e:	4a6d      	ldr	r2, [pc, #436]	; (8011244 <ip4_input+0x240>)
 8011090:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8011092:	4b6c      	ldr	r3, [pc, #432]	; (8011244 <ip4_input+0x240>)
 8011094:	695b      	ldr	r3, [r3, #20]
 8011096:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801109a:	2be0      	cmp	r3, #224	; 0xe0
 801109c:	d112      	bne.n	80110c4 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801109e:	683b      	ldr	r3, [r7, #0]
 80110a0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80110a4:	f003 0301 	and.w	r3, r3, #1
 80110a8:	b2db      	uxtb	r3, r3
 80110aa:	2b00      	cmp	r3, #0
 80110ac:	d007      	beq.n	80110be <ip4_input+0xba>
 80110ae:	683b      	ldr	r3, [r7, #0]
 80110b0:	3304      	adds	r3, #4
 80110b2:	681b      	ldr	r3, [r3, #0]
 80110b4:	2b00      	cmp	r3, #0
 80110b6:	d002      	beq.n	80110be <ip4_input+0xba>
      netif = inp;
 80110b8:	683b      	ldr	r3, [r7, #0]
 80110ba:	613b      	str	r3, [r7, #16]
 80110bc:	e02a      	b.n	8011114 <ip4_input+0x110>
    } else {
      netif = NULL;
 80110be:	2300      	movs	r3, #0
 80110c0:	613b      	str	r3, [r7, #16]
 80110c2:	e027      	b.n	8011114 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 80110c4:	6838      	ldr	r0, [r7, #0]
 80110c6:	f7ff ff73 	bl	8010fb0 <ip4_input_accept>
 80110ca:	4603      	mov	r3, r0
 80110cc:	2b00      	cmp	r3, #0
 80110ce:	d002      	beq.n	80110d6 <ip4_input+0xd2>
      netif = inp;
 80110d0:	683b      	ldr	r3, [r7, #0]
 80110d2:	613b      	str	r3, [r7, #16]
 80110d4:	e01e      	b.n	8011114 <ip4_input+0x110>
    } else {
      netif = NULL;
 80110d6:	2300      	movs	r3, #0
 80110d8:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 80110da:	4b5a      	ldr	r3, [pc, #360]	; (8011244 <ip4_input+0x240>)
 80110dc:	695b      	ldr	r3, [r3, #20]
 80110de:	b2db      	uxtb	r3, r3
 80110e0:	2b7f      	cmp	r3, #127	; 0x7f
 80110e2:	d017      	beq.n	8011114 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 80110e4:	4b58      	ldr	r3, [pc, #352]	; (8011248 <ip4_input+0x244>)
 80110e6:	681b      	ldr	r3, [r3, #0]
 80110e8:	613b      	str	r3, [r7, #16]
 80110ea:	e00e      	b.n	801110a <ip4_input+0x106>
          if (netif == inp) {
 80110ec:	693a      	ldr	r2, [r7, #16]
 80110ee:	683b      	ldr	r3, [r7, #0]
 80110f0:	429a      	cmp	r2, r3
 80110f2:	d006      	beq.n	8011102 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 80110f4:	6938      	ldr	r0, [r7, #16]
 80110f6:	f7ff ff5b 	bl	8010fb0 <ip4_input_accept>
 80110fa:	4603      	mov	r3, r0
 80110fc:	2b00      	cmp	r3, #0
 80110fe:	d108      	bne.n	8011112 <ip4_input+0x10e>
 8011100:	e000      	b.n	8011104 <ip4_input+0x100>
            continue;
 8011102:	bf00      	nop
        NETIF_FOREACH(netif) {
 8011104:	693b      	ldr	r3, [r7, #16]
 8011106:	681b      	ldr	r3, [r3, #0]
 8011108:	613b      	str	r3, [r7, #16]
 801110a:	693b      	ldr	r3, [r7, #16]
 801110c:	2b00      	cmp	r3, #0
 801110e:	d1ed      	bne.n	80110ec <ip4_input+0xe8>
 8011110:	e000      	b.n	8011114 <ip4_input+0x110>
            break;
 8011112:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8011114:	4b4b      	ldr	r3, [pc, #300]	; (8011244 <ip4_input+0x240>)
 8011116:	691b      	ldr	r3, [r3, #16]
 8011118:	6839      	ldr	r1, [r7, #0]
 801111a:	4618      	mov	r0, r3
 801111c:	f000 f96e 	bl	80113fc <ip4_addr_isbroadcast_u32>
 8011120:	4603      	mov	r3, r0
 8011122:	2b00      	cmp	r3, #0
 8011124:	d105      	bne.n	8011132 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8011126:	4b47      	ldr	r3, [pc, #284]	; (8011244 <ip4_input+0x240>)
 8011128:	691b      	ldr	r3, [r3, #16]
 801112a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801112e:	2be0      	cmp	r3, #224	; 0xe0
 8011130:	d104      	bne.n	801113c <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8011132:	6878      	ldr	r0, [r7, #4]
 8011134:	f7f7 ffc0 	bl	80090b8 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8011138:	2300      	movs	r3, #0
 801113a:	e07e      	b.n	801123a <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801113c:	693b      	ldr	r3, [r7, #16]
 801113e:	2b00      	cmp	r3, #0
 8011140:	d104      	bne.n	801114c <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8011142:	6878      	ldr	r0, [r7, #4]
 8011144:	f7f7 ffb8 	bl	80090b8 <pbuf_free>
    return ERR_OK;
 8011148:	2300      	movs	r3, #0
 801114a:	e076      	b.n	801123a <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801114c:	697b      	ldr	r3, [r7, #20]
 801114e:	88db      	ldrh	r3, [r3, #6]
 8011150:	b29b      	uxth	r3, r3
 8011152:	461a      	mov	r2, r3
 8011154:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8011158:	4013      	ands	r3, r2
 801115a:	2b00      	cmp	r3, #0
 801115c:	d00b      	beq.n	8011176 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801115e:	6878      	ldr	r0, [r7, #4]
 8011160:	f000 fc92 	bl	8011a88 <ip4_reass>
 8011164:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8011166:	687b      	ldr	r3, [r7, #4]
 8011168:	2b00      	cmp	r3, #0
 801116a:	d101      	bne.n	8011170 <ip4_input+0x16c>
      return ERR_OK;
 801116c:	2300      	movs	r3, #0
 801116e:	e064      	b.n	801123a <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	685b      	ldr	r3, [r3, #4]
 8011174:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8011176:	4a33      	ldr	r2, [pc, #204]	; (8011244 <ip4_input+0x240>)
 8011178:	693b      	ldr	r3, [r7, #16]
 801117a:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801117c:	4a31      	ldr	r2, [pc, #196]	; (8011244 <ip4_input+0x240>)
 801117e:	683b      	ldr	r3, [r7, #0]
 8011180:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8011182:	4a30      	ldr	r2, [pc, #192]	; (8011244 <ip4_input+0x240>)
 8011184:	697b      	ldr	r3, [r7, #20]
 8011186:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8011188:	697b      	ldr	r3, [r7, #20]
 801118a:	781b      	ldrb	r3, [r3, #0]
 801118c:	f003 030f 	and.w	r3, r3, #15
 8011190:	b2db      	uxtb	r3, r3
 8011192:	009b      	lsls	r3, r3, #2
 8011194:	b2db      	uxtb	r3, r3
 8011196:	b29a      	uxth	r2, r3
 8011198:	4b2a      	ldr	r3, [pc, #168]	; (8011244 <ip4_input+0x240>)
 801119a:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801119c:	89fb      	ldrh	r3, [r7, #14]
 801119e:	4619      	mov	r1, r3
 80111a0:	6878      	ldr	r0, [r7, #4]
 80111a2:	f7f7 ff03 	bl	8008fac <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 80111a6:	697b      	ldr	r3, [r7, #20]
 80111a8:	7a5b      	ldrb	r3, [r3, #9]
 80111aa:	2b11      	cmp	r3, #17
 80111ac:	d006      	beq.n	80111bc <ip4_input+0x1b8>
 80111ae:	2b11      	cmp	r3, #17
 80111b0:	dc13      	bgt.n	80111da <ip4_input+0x1d6>
 80111b2:	2b01      	cmp	r3, #1
 80111b4:	d00c      	beq.n	80111d0 <ip4_input+0x1cc>
 80111b6:	2b06      	cmp	r3, #6
 80111b8:	d005      	beq.n	80111c6 <ip4_input+0x1c2>
 80111ba:	e00e      	b.n	80111da <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 80111bc:	6839      	ldr	r1, [r7, #0]
 80111be:	6878      	ldr	r0, [r7, #4]
 80111c0:	f7fe fc68 	bl	800fa94 <udp_input>
        break;
 80111c4:	e026      	b.n	8011214 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 80111c6:	6839      	ldr	r1, [r7, #0]
 80111c8:	6878      	ldr	r0, [r7, #4]
 80111ca:	f7fa f859 	bl	800b280 <tcp_input>
        break;
 80111ce:	e021      	b.n	8011214 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 80111d0:	6839      	ldr	r1, [r7, #0]
 80111d2:	6878      	ldr	r0, [r7, #4]
 80111d4:	f7ff fcee 	bl	8010bb4 <icmp_input>
        break;
 80111d8:	e01c      	b.n	8011214 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80111da:	4b1a      	ldr	r3, [pc, #104]	; (8011244 <ip4_input+0x240>)
 80111dc:	695b      	ldr	r3, [r3, #20]
 80111de:	6939      	ldr	r1, [r7, #16]
 80111e0:	4618      	mov	r0, r3
 80111e2:	f000 f90b 	bl	80113fc <ip4_addr_isbroadcast_u32>
 80111e6:	4603      	mov	r3, r0
 80111e8:	2b00      	cmp	r3, #0
 80111ea:	d10f      	bne.n	801120c <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80111ec:	4b15      	ldr	r3, [pc, #84]	; (8011244 <ip4_input+0x240>)
 80111ee:	695b      	ldr	r3, [r3, #20]
 80111f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80111f4:	2be0      	cmp	r3, #224	; 0xe0
 80111f6:	d009      	beq.n	801120c <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 80111f8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80111fc:	4619      	mov	r1, r3
 80111fe:	6878      	ldr	r0, [r7, #4]
 8011200:	f7f7 ff47 	bl	8009092 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8011204:	2102      	movs	r1, #2
 8011206:	6878      	ldr	r0, [r7, #4]
 8011208:	f7ff fdd8 	bl	8010dbc <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801120c:	6878      	ldr	r0, [r7, #4]
 801120e:	f7f7 ff53 	bl	80090b8 <pbuf_free>
        break;
 8011212:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8011214:	4b0b      	ldr	r3, [pc, #44]	; (8011244 <ip4_input+0x240>)
 8011216:	2200      	movs	r2, #0
 8011218:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801121a:	4b0a      	ldr	r3, [pc, #40]	; (8011244 <ip4_input+0x240>)
 801121c:	2200      	movs	r2, #0
 801121e:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8011220:	4b08      	ldr	r3, [pc, #32]	; (8011244 <ip4_input+0x240>)
 8011222:	2200      	movs	r2, #0
 8011224:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8011226:	4b07      	ldr	r3, [pc, #28]	; (8011244 <ip4_input+0x240>)
 8011228:	2200      	movs	r2, #0
 801122a:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801122c:	4b05      	ldr	r3, [pc, #20]	; (8011244 <ip4_input+0x240>)
 801122e:	2200      	movs	r2, #0
 8011230:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8011232:	4b04      	ldr	r3, [pc, #16]	; (8011244 <ip4_input+0x240>)
 8011234:	2200      	movs	r2, #0
 8011236:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8011238:	2300      	movs	r3, #0
}
 801123a:	4618      	mov	r0, r3
 801123c:	3718      	adds	r7, #24
 801123e:	46bd      	mov	sp, r7
 8011240:	bd80      	pop	{r7, pc}
 8011242:	bf00      	nop
 8011244:	20004ac0 	.word	0x20004ac0
 8011248:	20008208 	.word	0x20008208

0801124c <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801124c:	b580      	push	{r7, lr}
 801124e:	b08a      	sub	sp, #40	; 0x28
 8011250:	af04      	add	r7, sp, #16
 8011252:	60f8      	str	r0, [r7, #12]
 8011254:	60b9      	str	r1, [r7, #8]
 8011256:	607a      	str	r2, [r7, #4]
 8011258:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801125a:	68bb      	ldr	r3, [r7, #8]
 801125c:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	2b00      	cmp	r3, #0
 8011262:	d009      	beq.n	8011278 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8011264:	68bb      	ldr	r3, [r7, #8]
 8011266:	2b00      	cmp	r3, #0
 8011268:	d003      	beq.n	8011272 <ip4_output_if+0x26>
 801126a:	68bb      	ldr	r3, [r7, #8]
 801126c:	681b      	ldr	r3, [r3, #0]
 801126e:	2b00      	cmp	r3, #0
 8011270:	d102      	bne.n	8011278 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8011272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011274:	3304      	adds	r3, #4
 8011276:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8011278:	78fa      	ldrb	r2, [r7, #3]
 801127a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801127c:	9302      	str	r3, [sp, #8]
 801127e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8011282:	9301      	str	r3, [sp, #4]
 8011284:	f897 3020 	ldrb.w	r3, [r7, #32]
 8011288:	9300      	str	r3, [sp, #0]
 801128a:	4613      	mov	r3, r2
 801128c:	687a      	ldr	r2, [r7, #4]
 801128e:	6979      	ldr	r1, [r7, #20]
 8011290:	68f8      	ldr	r0, [r7, #12]
 8011292:	f000 f805 	bl	80112a0 <ip4_output_if_src>
 8011296:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8011298:	4618      	mov	r0, r3
 801129a:	3718      	adds	r7, #24
 801129c:	46bd      	mov	sp, r7
 801129e:	bd80      	pop	{r7, pc}

080112a0 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80112a0:	b580      	push	{r7, lr}
 80112a2:	b088      	sub	sp, #32
 80112a4:	af00      	add	r7, sp, #0
 80112a6:	60f8      	str	r0, [r7, #12]
 80112a8:	60b9      	str	r1, [r7, #8]
 80112aa:	607a      	str	r2, [r7, #4]
 80112ac:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80112ae:	68fb      	ldr	r3, [r7, #12]
 80112b0:	7b9b      	ldrb	r3, [r3, #14]
 80112b2:	2b01      	cmp	r3, #1
 80112b4:	d006      	beq.n	80112c4 <ip4_output_if_src+0x24>
 80112b6:	4b4b      	ldr	r3, [pc, #300]	; (80113e4 <ip4_output_if_src+0x144>)
 80112b8:	f44f 7255 	mov.w	r2, #852	; 0x354
 80112bc:	494a      	ldr	r1, [pc, #296]	; (80113e8 <ip4_output_if_src+0x148>)
 80112be:	484b      	ldr	r0, [pc, #300]	; (80113ec <ip4_output_if_src+0x14c>)
 80112c0:	f002 fdf2 	bl	8013ea8 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	2b00      	cmp	r3, #0
 80112c8:	d060      	beq.n	801138c <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 80112ca:	2314      	movs	r3, #20
 80112cc:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80112ce:	2114      	movs	r1, #20
 80112d0:	68f8      	ldr	r0, [r7, #12]
 80112d2:	f7f7 fe5b 	bl	8008f8c <pbuf_add_header>
 80112d6:	4603      	mov	r3, r0
 80112d8:	2b00      	cmp	r3, #0
 80112da:	d002      	beq.n	80112e2 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80112dc:	f06f 0301 	mvn.w	r3, #1
 80112e0:	e07c      	b.n	80113dc <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 80112e2:	68fb      	ldr	r3, [r7, #12]
 80112e4:	685b      	ldr	r3, [r3, #4]
 80112e6:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80112e8:	68fb      	ldr	r3, [r7, #12]
 80112ea:	895b      	ldrh	r3, [r3, #10]
 80112ec:	2b13      	cmp	r3, #19
 80112ee:	d806      	bhi.n	80112fe <ip4_output_if_src+0x5e>
 80112f0:	4b3c      	ldr	r3, [pc, #240]	; (80113e4 <ip4_output_if_src+0x144>)
 80112f2:	f44f 7262 	mov.w	r2, #904	; 0x388
 80112f6:	493e      	ldr	r1, [pc, #248]	; (80113f0 <ip4_output_if_src+0x150>)
 80112f8:	483c      	ldr	r0, [pc, #240]	; (80113ec <ip4_output_if_src+0x14c>)
 80112fa:	f002 fdd5 	bl	8013ea8 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 80112fe:	69fb      	ldr	r3, [r7, #28]
 8011300:	78fa      	ldrb	r2, [r7, #3]
 8011302:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8011304:	69fb      	ldr	r3, [r7, #28]
 8011306:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801130a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	681a      	ldr	r2, [r3, #0]
 8011310:	69fb      	ldr	r3, [r7, #28]
 8011312:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8011314:	8b7b      	ldrh	r3, [r7, #26]
 8011316:	089b      	lsrs	r3, r3, #2
 8011318:	b29b      	uxth	r3, r3
 801131a:	b2db      	uxtb	r3, r3
 801131c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011320:	b2da      	uxtb	r2, r3
 8011322:	69fb      	ldr	r3, [r7, #28]
 8011324:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8011326:	69fb      	ldr	r3, [r7, #28]
 8011328:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801132c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801132e:	68fb      	ldr	r3, [r7, #12]
 8011330:	891b      	ldrh	r3, [r3, #8]
 8011332:	4618      	mov	r0, r3
 8011334:	f7f6 fb14 	bl	8007960 <lwip_htons>
 8011338:	4603      	mov	r3, r0
 801133a:	461a      	mov	r2, r3
 801133c:	69fb      	ldr	r3, [r7, #28]
 801133e:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8011340:	69fb      	ldr	r3, [r7, #28]
 8011342:	2200      	movs	r2, #0
 8011344:	719a      	strb	r2, [r3, #6]
 8011346:	2200      	movs	r2, #0
 8011348:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801134a:	4b2a      	ldr	r3, [pc, #168]	; (80113f4 <ip4_output_if_src+0x154>)
 801134c:	881b      	ldrh	r3, [r3, #0]
 801134e:	4618      	mov	r0, r3
 8011350:	f7f6 fb06 	bl	8007960 <lwip_htons>
 8011354:	4603      	mov	r3, r0
 8011356:	461a      	mov	r2, r3
 8011358:	69fb      	ldr	r3, [r7, #28]
 801135a:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801135c:	4b25      	ldr	r3, [pc, #148]	; (80113f4 <ip4_output_if_src+0x154>)
 801135e:	881b      	ldrh	r3, [r3, #0]
 8011360:	3301      	adds	r3, #1
 8011362:	b29a      	uxth	r2, r3
 8011364:	4b23      	ldr	r3, [pc, #140]	; (80113f4 <ip4_output_if_src+0x154>)
 8011366:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8011368:	68bb      	ldr	r3, [r7, #8]
 801136a:	2b00      	cmp	r3, #0
 801136c:	d104      	bne.n	8011378 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801136e:	4b22      	ldr	r3, [pc, #136]	; (80113f8 <ip4_output_if_src+0x158>)
 8011370:	681a      	ldr	r2, [r3, #0]
 8011372:	69fb      	ldr	r3, [r7, #28]
 8011374:	60da      	str	r2, [r3, #12]
 8011376:	e003      	b.n	8011380 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8011378:	68bb      	ldr	r3, [r7, #8]
 801137a:	681a      	ldr	r2, [r3, #0]
 801137c:	69fb      	ldr	r3, [r7, #28]
 801137e:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8011380:	69fb      	ldr	r3, [r7, #28]
 8011382:	2200      	movs	r2, #0
 8011384:	729a      	strb	r2, [r3, #10]
 8011386:	2200      	movs	r2, #0
 8011388:	72da      	strb	r2, [r3, #11]
 801138a:	e00f      	b.n	80113ac <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801138c:	68fb      	ldr	r3, [r7, #12]
 801138e:	895b      	ldrh	r3, [r3, #10]
 8011390:	2b13      	cmp	r3, #19
 8011392:	d802      	bhi.n	801139a <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8011394:	f06f 0301 	mvn.w	r3, #1
 8011398:	e020      	b.n	80113dc <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801139a:	68fb      	ldr	r3, [r7, #12]
 801139c:	685b      	ldr	r3, [r3, #4]
 801139e:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80113a0:	69fb      	ldr	r3, [r7, #28]
 80113a2:	691b      	ldr	r3, [r3, #16]
 80113a4:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80113a6:	f107 0314 	add.w	r3, r7, #20
 80113aa:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80113ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113ae:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80113b0:	2b00      	cmp	r3, #0
 80113b2:	d00c      	beq.n	80113ce <ip4_output_if_src+0x12e>
 80113b4:	68fb      	ldr	r3, [r7, #12]
 80113b6:	891a      	ldrh	r2, [r3, #8]
 80113b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113ba:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80113bc:	429a      	cmp	r2, r3
 80113be:	d906      	bls.n	80113ce <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 80113c0:	687a      	ldr	r2, [r7, #4]
 80113c2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80113c4:	68f8      	ldr	r0, [r7, #12]
 80113c6:	f000 fd53 	bl	8011e70 <ip4_frag>
 80113ca:	4603      	mov	r3, r0
 80113cc:	e006      	b.n	80113dc <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80113ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113d0:	695b      	ldr	r3, [r3, #20]
 80113d2:	687a      	ldr	r2, [r7, #4]
 80113d4:	68f9      	ldr	r1, [r7, #12]
 80113d6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80113d8:	4798      	blx	r3
 80113da:	4603      	mov	r3, r0
}
 80113dc:	4618      	mov	r0, r3
 80113de:	3720      	adds	r7, #32
 80113e0:	46bd      	mov	sp, r7
 80113e2:	bd80      	pop	{r7, pc}
 80113e4:	080175bc 	.word	0x080175bc
 80113e8:	080175f0 	.word	0x080175f0
 80113ec:	080175fc 	.word	0x080175fc
 80113f0:	08017624 	.word	0x08017624
 80113f4:	20008366 	.word	0x20008366
 80113f8:	08017ad0 	.word	0x08017ad0

080113fc <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 80113fc:	b480      	push	{r7}
 80113fe:	b085      	sub	sp, #20
 8011400:	af00      	add	r7, sp, #0
 8011402:	6078      	str	r0, [r7, #4]
 8011404:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8011406:	687b      	ldr	r3, [r7, #4]
 8011408:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011410:	d002      	beq.n	8011418 <ip4_addr_isbroadcast_u32+0x1c>
 8011412:	687b      	ldr	r3, [r7, #4]
 8011414:	2b00      	cmp	r3, #0
 8011416:	d101      	bne.n	801141c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8011418:	2301      	movs	r3, #1
 801141a:	e02a      	b.n	8011472 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801141c:	683b      	ldr	r3, [r7, #0]
 801141e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011422:	f003 0302 	and.w	r3, r3, #2
 8011426:	2b00      	cmp	r3, #0
 8011428:	d101      	bne.n	801142e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801142a:	2300      	movs	r3, #0
 801142c:	e021      	b.n	8011472 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801142e:	683b      	ldr	r3, [r7, #0]
 8011430:	3304      	adds	r3, #4
 8011432:	681b      	ldr	r3, [r3, #0]
 8011434:	687a      	ldr	r2, [r7, #4]
 8011436:	429a      	cmp	r2, r3
 8011438:	d101      	bne.n	801143e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801143a:	2300      	movs	r3, #0
 801143c:	e019      	b.n	8011472 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801143e:	68fa      	ldr	r2, [r7, #12]
 8011440:	683b      	ldr	r3, [r7, #0]
 8011442:	3304      	adds	r3, #4
 8011444:	681b      	ldr	r3, [r3, #0]
 8011446:	405a      	eors	r2, r3
 8011448:	683b      	ldr	r3, [r7, #0]
 801144a:	3308      	adds	r3, #8
 801144c:	681b      	ldr	r3, [r3, #0]
 801144e:	4013      	ands	r3, r2
 8011450:	2b00      	cmp	r3, #0
 8011452:	d10d      	bne.n	8011470 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8011454:	683b      	ldr	r3, [r7, #0]
 8011456:	3308      	adds	r3, #8
 8011458:	681b      	ldr	r3, [r3, #0]
 801145a:	43da      	mvns	r2, r3
 801145c:	687b      	ldr	r3, [r7, #4]
 801145e:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8011460:	683b      	ldr	r3, [r7, #0]
 8011462:	3308      	adds	r3, #8
 8011464:	681b      	ldr	r3, [r3, #0]
 8011466:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8011468:	429a      	cmp	r2, r3
 801146a:	d101      	bne.n	8011470 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801146c:	2301      	movs	r3, #1
 801146e:	e000      	b.n	8011472 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8011470:	2300      	movs	r3, #0
  }
}
 8011472:	4618      	mov	r0, r3
 8011474:	3714      	adds	r7, #20
 8011476:	46bd      	mov	sp, r7
 8011478:	f85d 7b04 	ldr.w	r7, [sp], #4
 801147c:	4770      	bx	lr
	...

08011480 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8011480:	b580      	push	{r7, lr}
 8011482:	b084      	sub	sp, #16
 8011484:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8011486:	2300      	movs	r3, #0
 8011488:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801148a:	4b12      	ldr	r3, [pc, #72]	; (80114d4 <ip_reass_tmr+0x54>)
 801148c:	681b      	ldr	r3, [r3, #0]
 801148e:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8011490:	e018      	b.n	80114c4 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8011492:	68fb      	ldr	r3, [r7, #12]
 8011494:	7fdb      	ldrb	r3, [r3, #31]
 8011496:	2b00      	cmp	r3, #0
 8011498:	d00b      	beq.n	80114b2 <ip_reass_tmr+0x32>
      r->timer--;
 801149a:	68fb      	ldr	r3, [r7, #12]
 801149c:	7fdb      	ldrb	r3, [r3, #31]
 801149e:	3b01      	subs	r3, #1
 80114a0:	b2da      	uxtb	r2, r3
 80114a2:	68fb      	ldr	r3, [r7, #12]
 80114a4:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80114a6:	68fb      	ldr	r3, [r7, #12]
 80114a8:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80114aa:	68fb      	ldr	r3, [r7, #12]
 80114ac:	681b      	ldr	r3, [r3, #0]
 80114ae:	60fb      	str	r3, [r7, #12]
 80114b0:	e008      	b.n	80114c4 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80114b2:	68fb      	ldr	r3, [r7, #12]
 80114b4:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80114b6:	68fb      	ldr	r3, [r7, #12]
 80114b8:	681b      	ldr	r3, [r3, #0]
 80114ba:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80114bc:	68b9      	ldr	r1, [r7, #8]
 80114be:	6878      	ldr	r0, [r7, #4]
 80114c0:	f000 f80a 	bl	80114d8 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80114c4:	68fb      	ldr	r3, [r7, #12]
 80114c6:	2b00      	cmp	r3, #0
 80114c8:	d1e3      	bne.n	8011492 <ip_reass_tmr+0x12>
    }
  }
}
 80114ca:	bf00      	nop
 80114cc:	bf00      	nop
 80114ce:	3710      	adds	r7, #16
 80114d0:	46bd      	mov	sp, r7
 80114d2:	bd80      	pop	{r7, pc}
 80114d4:	20008368 	.word	0x20008368

080114d8 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80114d8:	b580      	push	{r7, lr}
 80114da:	b088      	sub	sp, #32
 80114dc:	af00      	add	r7, sp, #0
 80114de:	6078      	str	r0, [r7, #4]
 80114e0:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 80114e2:	2300      	movs	r3, #0
 80114e4:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 80114e6:	683a      	ldr	r2, [r7, #0]
 80114e8:	687b      	ldr	r3, [r7, #4]
 80114ea:	429a      	cmp	r2, r3
 80114ec:	d105      	bne.n	80114fa <ip_reass_free_complete_datagram+0x22>
 80114ee:	4b45      	ldr	r3, [pc, #276]	; (8011604 <ip_reass_free_complete_datagram+0x12c>)
 80114f0:	22ab      	movs	r2, #171	; 0xab
 80114f2:	4945      	ldr	r1, [pc, #276]	; (8011608 <ip_reass_free_complete_datagram+0x130>)
 80114f4:	4845      	ldr	r0, [pc, #276]	; (801160c <ip_reass_free_complete_datagram+0x134>)
 80114f6:	f002 fcd7 	bl	8013ea8 <iprintf>
  if (prev != NULL) {
 80114fa:	683b      	ldr	r3, [r7, #0]
 80114fc:	2b00      	cmp	r3, #0
 80114fe:	d00a      	beq.n	8011516 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8011500:	683b      	ldr	r3, [r7, #0]
 8011502:	681b      	ldr	r3, [r3, #0]
 8011504:	687a      	ldr	r2, [r7, #4]
 8011506:	429a      	cmp	r2, r3
 8011508:	d005      	beq.n	8011516 <ip_reass_free_complete_datagram+0x3e>
 801150a:	4b3e      	ldr	r3, [pc, #248]	; (8011604 <ip_reass_free_complete_datagram+0x12c>)
 801150c:	22ad      	movs	r2, #173	; 0xad
 801150e:	4940      	ldr	r1, [pc, #256]	; (8011610 <ip_reass_free_complete_datagram+0x138>)
 8011510:	483e      	ldr	r0, [pc, #248]	; (801160c <ip_reass_free_complete_datagram+0x134>)
 8011512:	f002 fcc9 	bl	8013ea8 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8011516:	687b      	ldr	r3, [r7, #4]
 8011518:	685b      	ldr	r3, [r3, #4]
 801151a:	685b      	ldr	r3, [r3, #4]
 801151c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801151e:	697b      	ldr	r3, [r7, #20]
 8011520:	889b      	ldrh	r3, [r3, #4]
 8011522:	b29b      	uxth	r3, r3
 8011524:	2b00      	cmp	r3, #0
 8011526:	d12a      	bne.n	801157e <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8011528:	687b      	ldr	r3, [r7, #4]
 801152a:	685b      	ldr	r3, [r3, #4]
 801152c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801152e:	697b      	ldr	r3, [r7, #20]
 8011530:	681a      	ldr	r2, [r3, #0]
 8011532:	687b      	ldr	r3, [r7, #4]
 8011534:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8011536:	69bb      	ldr	r3, [r7, #24]
 8011538:	6858      	ldr	r0, [r3, #4]
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	3308      	adds	r3, #8
 801153e:	2214      	movs	r2, #20
 8011540:	4619      	mov	r1, r3
 8011542:	f002 fc06 	bl	8013d52 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8011546:	2101      	movs	r1, #1
 8011548:	69b8      	ldr	r0, [r7, #24]
 801154a:	f7ff fc47 	bl	8010ddc <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801154e:	69b8      	ldr	r0, [r7, #24]
 8011550:	f7f7 fe40 	bl	80091d4 <pbuf_clen>
 8011554:	4603      	mov	r3, r0
 8011556:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8011558:	8bfa      	ldrh	r2, [r7, #30]
 801155a:	8a7b      	ldrh	r3, [r7, #18]
 801155c:	4413      	add	r3, r2
 801155e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011562:	db05      	blt.n	8011570 <ip_reass_free_complete_datagram+0x98>
 8011564:	4b27      	ldr	r3, [pc, #156]	; (8011604 <ip_reass_free_complete_datagram+0x12c>)
 8011566:	22bc      	movs	r2, #188	; 0xbc
 8011568:	492a      	ldr	r1, [pc, #168]	; (8011614 <ip_reass_free_complete_datagram+0x13c>)
 801156a:	4828      	ldr	r0, [pc, #160]	; (801160c <ip_reass_free_complete_datagram+0x134>)
 801156c:	f002 fc9c 	bl	8013ea8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8011570:	8bfa      	ldrh	r2, [r7, #30]
 8011572:	8a7b      	ldrh	r3, [r7, #18]
 8011574:	4413      	add	r3, r2
 8011576:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8011578:	69b8      	ldr	r0, [r7, #24]
 801157a:	f7f7 fd9d 	bl	80090b8 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	685b      	ldr	r3, [r3, #4]
 8011582:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8011584:	e01f      	b.n	80115c6 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8011586:	69bb      	ldr	r3, [r7, #24]
 8011588:	685b      	ldr	r3, [r3, #4]
 801158a:	617b      	str	r3, [r7, #20]
    pcur = p;
 801158c:	69bb      	ldr	r3, [r7, #24]
 801158e:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8011590:	697b      	ldr	r3, [r7, #20]
 8011592:	681b      	ldr	r3, [r3, #0]
 8011594:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8011596:	68f8      	ldr	r0, [r7, #12]
 8011598:	f7f7 fe1c 	bl	80091d4 <pbuf_clen>
 801159c:	4603      	mov	r3, r0
 801159e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80115a0:	8bfa      	ldrh	r2, [r7, #30]
 80115a2:	8a7b      	ldrh	r3, [r7, #18]
 80115a4:	4413      	add	r3, r2
 80115a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80115aa:	db05      	blt.n	80115b8 <ip_reass_free_complete_datagram+0xe0>
 80115ac:	4b15      	ldr	r3, [pc, #84]	; (8011604 <ip_reass_free_complete_datagram+0x12c>)
 80115ae:	22cc      	movs	r2, #204	; 0xcc
 80115b0:	4918      	ldr	r1, [pc, #96]	; (8011614 <ip_reass_free_complete_datagram+0x13c>)
 80115b2:	4816      	ldr	r0, [pc, #88]	; (801160c <ip_reass_free_complete_datagram+0x134>)
 80115b4:	f002 fc78 	bl	8013ea8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80115b8:	8bfa      	ldrh	r2, [r7, #30]
 80115ba:	8a7b      	ldrh	r3, [r7, #18]
 80115bc:	4413      	add	r3, r2
 80115be:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80115c0:	68f8      	ldr	r0, [r7, #12]
 80115c2:	f7f7 fd79 	bl	80090b8 <pbuf_free>
  while (p != NULL) {
 80115c6:	69bb      	ldr	r3, [r7, #24]
 80115c8:	2b00      	cmp	r3, #0
 80115ca:	d1dc      	bne.n	8011586 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80115cc:	6839      	ldr	r1, [r7, #0]
 80115ce:	6878      	ldr	r0, [r7, #4]
 80115d0:	f000 f8c2 	bl	8011758 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80115d4:	4b10      	ldr	r3, [pc, #64]	; (8011618 <ip_reass_free_complete_datagram+0x140>)
 80115d6:	881b      	ldrh	r3, [r3, #0]
 80115d8:	8bfa      	ldrh	r2, [r7, #30]
 80115da:	429a      	cmp	r2, r3
 80115dc:	d905      	bls.n	80115ea <ip_reass_free_complete_datagram+0x112>
 80115de:	4b09      	ldr	r3, [pc, #36]	; (8011604 <ip_reass_free_complete_datagram+0x12c>)
 80115e0:	22d2      	movs	r2, #210	; 0xd2
 80115e2:	490e      	ldr	r1, [pc, #56]	; (801161c <ip_reass_free_complete_datagram+0x144>)
 80115e4:	4809      	ldr	r0, [pc, #36]	; (801160c <ip_reass_free_complete_datagram+0x134>)
 80115e6:	f002 fc5f 	bl	8013ea8 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80115ea:	4b0b      	ldr	r3, [pc, #44]	; (8011618 <ip_reass_free_complete_datagram+0x140>)
 80115ec:	881a      	ldrh	r2, [r3, #0]
 80115ee:	8bfb      	ldrh	r3, [r7, #30]
 80115f0:	1ad3      	subs	r3, r2, r3
 80115f2:	b29a      	uxth	r2, r3
 80115f4:	4b08      	ldr	r3, [pc, #32]	; (8011618 <ip_reass_free_complete_datagram+0x140>)
 80115f6:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 80115f8:	8bfb      	ldrh	r3, [r7, #30]
}
 80115fa:	4618      	mov	r0, r3
 80115fc:	3720      	adds	r7, #32
 80115fe:	46bd      	mov	sp, r7
 8011600:	bd80      	pop	{r7, pc}
 8011602:	bf00      	nop
 8011604:	08017654 	.word	0x08017654
 8011608:	08017690 	.word	0x08017690
 801160c:	0801769c 	.word	0x0801769c
 8011610:	080176c4 	.word	0x080176c4
 8011614:	080176d8 	.word	0x080176d8
 8011618:	2000836c 	.word	0x2000836c
 801161c:	080176f8 	.word	0x080176f8

08011620 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8011620:	b580      	push	{r7, lr}
 8011622:	b08a      	sub	sp, #40	; 0x28
 8011624:	af00      	add	r7, sp, #0
 8011626:	6078      	str	r0, [r7, #4]
 8011628:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801162a:	2300      	movs	r3, #0
 801162c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801162e:	2300      	movs	r3, #0
 8011630:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8011632:	2300      	movs	r3, #0
 8011634:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8011636:	2300      	movs	r3, #0
 8011638:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801163a:	2300      	movs	r3, #0
 801163c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801163e:	4b28      	ldr	r3, [pc, #160]	; (80116e0 <ip_reass_remove_oldest_datagram+0xc0>)
 8011640:	681b      	ldr	r3, [r3, #0]
 8011642:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8011644:	e030      	b.n	80116a8 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8011646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011648:	695a      	ldr	r2, [r3, #20]
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	68db      	ldr	r3, [r3, #12]
 801164e:	429a      	cmp	r2, r3
 8011650:	d10c      	bne.n	801166c <ip_reass_remove_oldest_datagram+0x4c>
 8011652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011654:	699a      	ldr	r2, [r3, #24]
 8011656:	687b      	ldr	r3, [r7, #4]
 8011658:	691b      	ldr	r3, [r3, #16]
 801165a:	429a      	cmp	r2, r3
 801165c:	d106      	bne.n	801166c <ip_reass_remove_oldest_datagram+0x4c>
 801165e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011660:	899a      	ldrh	r2, [r3, #12]
 8011662:	687b      	ldr	r3, [r7, #4]
 8011664:	889b      	ldrh	r3, [r3, #4]
 8011666:	b29b      	uxth	r3, r3
 8011668:	429a      	cmp	r2, r3
 801166a:	d014      	beq.n	8011696 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801166c:	693b      	ldr	r3, [r7, #16]
 801166e:	3301      	adds	r3, #1
 8011670:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8011672:	6a3b      	ldr	r3, [r7, #32]
 8011674:	2b00      	cmp	r3, #0
 8011676:	d104      	bne.n	8011682 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8011678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801167a:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801167c:	69fb      	ldr	r3, [r7, #28]
 801167e:	61bb      	str	r3, [r7, #24]
 8011680:	e009      	b.n	8011696 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8011682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011684:	7fda      	ldrb	r2, [r3, #31]
 8011686:	6a3b      	ldr	r3, [r7, #32]
 8011688:	7fdb      	ldrb	r3, [r3, #31]
 801168a:	429a      	cmp	r2, r3
 801168c:	d803      	bhi.n	8011696 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801168e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011690:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8011692:	69fb      	ldr	r3, [r7, #28]
 8011694:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8011696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011698:	681b      	ldr	r3, [r3, #0]
 801169a:	2b00      	cmp	r3, #0
 801169c:	d001      	beq.n	80116a2 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801169e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116a0:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80116a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116a4:	681b      	ldr	r3, [r3, #0]
 80116a6:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80116a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116aa:	2b00      	cmp	r3, #0
 80116ac:	d1cb      	bne.n	8011646 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80116ae:	6a3b      	ldr	r3, [r7, #32]
 80116b0:	2b00      	cmp	r3, #0
 80116b2:	d008      	beq.n	80116c6 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80116b4:	69b9      	ldr	r1, [r7, #24]
 80116b6:	6a38      	ldr	r0, [r7, #32]
 80116b8:	f7ff ff0e 	bl	80114d8 <ip_reass_free_complete_datagram>
 80116bc:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80116be:	697a      	ldr	r2, [r7, #20]
 80116c0:	68fb      	ldr	r3, [r7, #12]
 80116c2:	4413      	add	r3, r2
 80116c4:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80116c6:	697a      	ldr	r2, [r7, #20]
 80116c8:	683b      	ldr	r3, [r7, #0]
 80116ca:	429a      	cmp	r2, r3
 80116cc:	da02      	bge.n	80116d4 <ip_reass_remove_oldest_datagram+0xb4>
 80116ce:	693b      	ldr	r3, [r7, #16]
 80116d0:	2b01      	cmp	r3, #1
 80116d2:	dcac      	bgt.n	801162e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80116d4:	697b      	ldr	r3, [r7, #20]
}
 80116d6:	4618      	mov	r0, r3
 80116d8:	3728      	adds	r7, #40	; 0x28
 80116da:	46bd      	mov	sp, r7
 80116dc:	bd80      	pop	{r7, pc}
 80116de:	bf00      	nop
 80116e0:	20008368 	.word	0x20008368

080116e4 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 80116e4:	b580      	push	{r7, lr}
 80116e6:	b084      	sub	sp, #16
 80116e8:	af00      	add	r7, sp, #0
 80116ea:	6078      	str	r0, [r7, #4]
 80116ec:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80116ee:	2004      	movs	r0, #4
 80116f0:	f7f6 fdec 	bl	80082cc <memp_malloc>
 80116f4:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 80116f6:	68fb      	ldr	r3, [r7, #12]
 80116f8:	2b00      	cmp	r3, #0
 80116fa:	d110      	bne.n	801171e <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80116fc:	6839      	ldr	r1, [r7, #0]
 80116fe:	6878      	ldr	r0, [r7, #4]
 8011700:	f7ff ff8e 	bl	8011620 <ip_reass_remove_oldest_datagram>
 8011704:	4602      	mov	r2, r0
 8011706:	683b      	ldr	r3, [r7, #0]
 8011708:	4293      	cmp	r3, r2
 801170a:	dc03      	bgt.n	8011714 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801170c:	2004      	movs	r0, #4
 801170e:	f7f6 fddd 	bl	80082cc <memp_malloc>
 8011712:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8011714:	68fb      	ldr	r3, [r7, #12]
 8011716:	2b00      	cmp	r3, #0
 8011718:	d101      	bne.n	801171e <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801171a:	2300      	movs	r3, #0
 801171c:	e016      	b.n	801174c <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801171e:	2220      	movs	r2, #32
 8011720:	2100      	movs	r1, #0
 8011722:	68f8      	ldr	r0, [r7, #12]
 8011724:	f002 fb23 	bl	8013d6e <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8011728:	68fb      	ldr	r3, [r7, #12]
 801172a:	220f      	movs	r2, #15
 801172c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801172e:	4b09      	ldr	r3, [pc, #36]	; (8011754 <ip_reass_enqueue_new_datagram+0x70>)
 8011730:	681a      	ldr	r2, [r3, #0]
 8011732:	68fb      	ldr	r3, [r7, #12]
 8011734:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8011736:	4a07      	ldr	r2, [pc, #28]	; (8011754 <ip_reass_enqueue_new_datagram+0x70>)
 8011738:	68fb      	ldr	r3, [r7, #12]
 801173a:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801173c:	68fb      	ldr	r3, [r7, #12]
 801173e:	3308      	adds	r3, #8
 8011740:	2214      	movs	r2, #20
 8011742:	6879      	ldr	r1, [r7, #4]
 8011744:	4618      	mov	r0, r3
 8011746:	f002 fb04 	bl	8013d52 <memcpy>
  return ipr;
 801174a:	68fb      	ldr	r3, [r7, #12]
}
 801174c:	4618      	mov	r0, r3
 801174e:	3710      	adds	r7, #16
 8011750:	46bd      	mov	sp, r7
 8011752:	bd80      	pop	{r7, pc}
 8011754:	20008368 	.word	0x20008368

08011758 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8011758:	b580      	push	{r7, lr}
 801175a:	b082      	sub	sp, #8
 801175c:	af00      	add	r7, sp, #0
 801175e:	6078      	str	r0, [r7, #4]
 8011760:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8011762:	4b10      	ldr	r3, [pc, #64]	; (80117a4 <ip_reass_dequeue_datagram+0x4c>)
 8011764:	681b      	ldr	r3, [r3, #0]
 8011766:	687a      	ldr	r2, [r7, #4]
 8011768:	429a      	cmp	r2, r3
 801176a:	d104      	bne.n	8011776 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801176c:	687b      	ldr	r3, [r7, #4]
 801176e:	681b      	ldr	r3, [r3, #0]
 8011770:	4a0c      	ldr	r2, [pc, #48]	; (80117a4 <ip_reass_dequeue_datagram+0x4c>)
 8011772:	6013      	str	r3, [r2, #0]
 8011774:	e00d      	b.n	8011792 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8011776:	683b      	ldr	r3, [r7, #0]
 8011778:	2b00      	cmp	r3, #0
 801177a:	d106      	bne.n	801178a <ip_reass_dequeue_datagram+0x32>
 801177c:	4b0a      	ldr	r3, [pc, #40]	; (80117a8 <ip_reass_dequeue_datagram+0x50>)
 801177e:	f240 1245 	movw	r2, #325	; 0x145
 8011782:	490a      	ldr	r1, [pc, #40]	; (80117ac <ip_reass_dequeue_datagram+0x54>)
 8011784:	480a      	ldr	r0, [pc, #40]	; (80117b0 <ip_reass_dequeue_datagram+0x58>)
 8011786:	f002 fb8f 	bl	8013ea8 <iprintf>
    prev->next = ipr->next;
 801178a:	687b      	ldr	r3, [r7, #4]
 801178c:	681a      	ldr	r2, [r3, #0]
 801178e:	683b      	ldr	r3, [r7, #0]
 8011790:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8011792:	6879      	ldr	r1, [r7, #4]
 8011794:	2004      	movs	r0, #4
 8011796:	f7f6 fdeb 	bl	8008370 <memp_free>
}
 801179a:	bf00      	nop
 801179c:	3708      	adds	r7, #8
 801179e:	46bd      	mov	sp, r7
 80117a0:	bd80      	pop	{r7, pc}
 80117a2:	bf00      	nop
 80117a4:	20008368 	.word	0x20008368
 80117a8:	08017654 	.word	0x08017654
 80117ac:	0801771c 	.word	0x0801771c
 80117b0:	0801769c 	.word	0x0801769c

080117b4 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80117b4:	b580      	push	{r7, lr}
 80117b6:	b08c      	sub	sp, #48	; 0x30
 80117b8:	af00      	add	r7, sp, #0
 80117ba:	60f8      	str	r0, [r7, #12]
 80117bc:	60b9      	str	r1, [r7, #8]
 80117be:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 80117c0:	2300      	movs	r3, #0
 80117c2:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80117c4:	2301      	movs	r3, #1
 80117c6:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 80117c8:	68bb      	ldr	r3, [r7, #8]
 80117ca:	685b      	ldr	r3, [r3, #4]
 80117cc:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80117ce:	69fb      	ldr	r3, [r7, #28]
 80117d0:	885b      	ldrh	r3, [r3, #2]
 80117d2:	b29b      	uxth	r3, r3
 80117d4:	4618      	mov	r0, r3
 80117d6:	f7f6 f8c3 	bl	8007960 <lwip_htons>
 80117da:	4603      	mov	r3, r0
 80117dc:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 80117de:	69fb      	ldr	r3, [r7, #28]
 80117e0:	781b      	ldrb	r3, [r3, #0]
 80117e2:	f003 030f 	and.w	r3, r3, #15
 80117e6:	b2db      	uxtb	r3, r3
 80117e8:	009b      	lsls	r3, r3, #2
 80117ea:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 80117ec:	7e7b      	ldrb	r3, [r7, #25]
 80117ee:	b29b      	uxth	r3, r3
 80117f0:	8b7a      	ldrh	r2, [r7, #26]
 80117f2:	429a      	cmp	r2, r3
 80117f4:	d202      	bcs.n	80117fc <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80117f6:	f04f 33ff 	mov.w	r3, #4294967295
 80117fa:	e135      	b.n	8011a68 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 80117fc:	7e7b      	ldrb	r3, [r7, #25]
 80117fe:	b29b      	uxth	r3, r3
 8011800:	8b7a      	ldrh	r2, [r7, #26]
 8011802:	1ad3      	subs	r3, r2, r3
 8011804:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8011806:	69fb      	ldr	r3, [r7, #28]
 8011808:	88db      	ldrh	r3, [r3, #6]
 801180a:	b29b      	uxth	r3, r3
 801180c:	4618      	mov	r0, r3
 801180e:	f7f6 f8a7 	bl	8007960 <lwip_htons>
 8011812:	4603      	mov	r3, r0
 8011814:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011818:	b29b      	uxth	r3, r3
 801181a:	00db      	lsls	r3, r3, #3
 801181c:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801181e:	68bb      	ldr	r3, [r7, #8]
 8011820:	685b      	ldr	r3, [r3, #4]
 8011822:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8011824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011826:	2200      	movs	r2, #0
 8011828:	701a      	strb	r2, [r3, #0]
 801182a:	2200      	movs	r2, #0
 801182c:	705a      	strb	r2, [r3, #1]
 801182e:	2200      	movs	r2, #0
 8011830:	709a      	strb	r2, [r3, #2]
 8011832:	2200      	movs	r2, #0
 8011834:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8011836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011838:	8afa      	ldrh	r2, [r7, #22]
 801183a:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801183c:	8afa      	ldrh	r2, [r7, #22]
 801183e:	8b7b      	ldrh	r3, [r7, #26]
 8011840:	4413      	add	r3, r2
 8011842:	b29a      	uxth	r2, r3
 8011844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011846:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8011848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801184a:	88db      	ldrh	r3, [r3, #6]
 801184c:	b29b      	uxth	r3, r3
 801184e:	8afa      	ldrh	r2, [r7, #22]
 8011850:	429a      	cmp	r2, r3
 8011852:	d902      	bls.n	801185a <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8011854:	f04f 33ff 	mov.w	r3, #4294967295
 8011858:	e106      	b.n	8011a68 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801185a:	68fb      	ldr	r3, [r7, #12]
 801185c:	685b      	ldr	r3, [r3, #4]
 801185e:	627b      	str	r3, [r7, #36]	; 0x24
 8011860:	e068      	b.n	8011934 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8011862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011864:	685b      	ldr	r3, [r3, #4]
 8011866:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8011868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801186a:	889b      	ldrh	r3, [r3, #4]
 801186c:	b29a      	uxth	r2, r3
 801186e:	693b      	ldr	r3, [r7, #16]
 8011870:	889b      	ldrh	r3, [r3, #4]
 8011872:	b29b      	uxth	r3, r3
 8011874:	429a      	cmp	r2, r3
 8011876:	d235      	bcs.n	80118e4 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8011878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801187a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801187c:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801187e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011880:	2b00      	cmp	r3, #0
 8011882:	d020      	beq.n	80118c6 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8011884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011886:	889b      	ldrh	r3, [r3, #4]
 8011888:	b29a      	uxth	r2, r3
 801188a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801188c:	88db      	ldrh	r3, [r3, #6]
 801188e:	b29b      	uxth	r3, r3
 8011890:	429a      	cmp	r2, r3
 8011892:	d307      	bcc.n	80118a4 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8011894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011896:	88db      	ldrh	r3, [r3, #6]
 8011898:	b29a      	uxth	r2, r3
 801189a:	693b      	ldr	r3, [r7, #16]
 801189c:	889b      	ldrh	r3, [r3, #4]
 801189e:	b29b      	uxth	r3, r3
 80118a0:	429a      	cmp	r2, r3
 80118a2:	d902      	bls.n	80118aa <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80118a4:	f04f 33ff 	mov.w	r3, #4294967295
 80118a8:	e0de      	b.n	8011a68 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80118aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80118ac:	68ba      	ldr	r2, [r7, #8]
 80118ae:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80118b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80118b2:	88db      	ldrh	r3, [r3, #6]
 80118b4:	b29a      	uxth	r2, r3
 80118b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118b8:	889b      	ldrh	r3, [r3, #4]
 80118ba:	b29b      	uxth	r3, r3
 80118bc:	429a      	cmp	r2, r3
 80118be:	d03d      	beq.n	801193c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80118c0:	2300      	movs	r3, #0
 80118c2:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80118c4:	e03a      	b.n	801193c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 80118c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118c8:	88db      	ldrh	r3, [r3, #6]
 80118ca:	b29a      	uxth	r2, r3
 80118cc:	693b      	ldr	r3, [r7, #16]
 80118ce:	889b      	ldrh	r3, [r3, #4]
 80118d0:	b29b      	uxth	r3, r3
 80118d2:	429a      	cmp	r2, r3
 80118d4:	d902      	bls.n	80118dc <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80118d6:	f04f 33ff 	mov.w	r3, #4294967295
 80118da:	e0c5      	b.n	8011a68 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 80118dc:	68fb      	ldr	r3, [r7, #12]
 80118de:	68ba      	ldr	r2, [r7, #8]
 80118e0:	605a      	str	r2, [r3, #4]
      break;
 80118e2:	e02b      	b.n	801193c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 80118e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118e6:	889b      	ldrh	r3, [r3, #4]
 80118e8:	b29a      	uxth	r2, r3
 80118ea:	693b      	ldr	r3, [r7, #16]
 80118ec:	889b      	ldrh	r3, [r3, #4]
 80118ee:	b29b      	uxth	r3, r3
 80118f0:	429a      	cmp	r2, r3
 80118f2:	d102      	bne.n	80118fa <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80118f4:	f04f 33ff 	mov.w	r3, #4294967295
 80118f8:	e0b6      	b.n	8011a68 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 80118fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118fc:	889b      	ldrh	r3, [r3, #4]
 80118fe:	b29a      	uxth	r2, r3
 8011900:	693b      	ldr	r3, [r7, #16]
 8011902:	88db      	ldrh	r3, [r3, #6]
 8011904:	b29b      	uxth	r3, r3
 8011906:	429a      	cmp	r2, r3
 8011908:	d202      	bcs.n	8011910 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801190a:	f04f 33ff 	mov.w	r3, #4294967295
 801190e:	e0ab      	b.n	8011a68 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8011910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011912:	2b00      	cmp	r3, #0
 8011914:	d009      	beq.n	801192a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8011916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011918:	88db      	ldrh	r3, [r3, #6]
 801191a:	b29a      	uxth	r2, r3
 801191c:	693b      	ldr	r3, [r7, #16]
 801191e:	889b      	ldrh	r3, [r3, #4]
 8011920:	b29b      	uxth	r3, r3
 8011922:	429a      	cmp	r2, r3
 8011924:	d001      	beq.n	801192a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8011926:	2300      	movs	r3, #0
 8011928:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801192a:	693b      	ldr	r3, [r7, #16]
 801192c:	681b      	ldr	r3, [r3, #0]
 801192e:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8011930:	693b      	ldr	r3, [r7, #16]
 8011932:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8011934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011936:	2b00      	cmp	r3, #0
 8011938:	d193      	bne.n	8011862 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801193a:	e000      	b.n	801193e <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801193c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801193e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011940:	2b00      	cmp	r3, #0
 8011942:	d12d      	bne.n	80119a0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8011944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011946:	2b00      	cmp	r3, #0
 8011948:	d01c      	beq.n	8011984 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801194a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801194c:	88db      	ldrh	r3, [r3, #6]
 801194e:	b29a      	uxth	r2, r3
 8011950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011952:	889b      	ldrh	r3, [r3, #4]
 8011954:	b29b      	uxth	r3, r3
 8011956:	429a      	cmp	r2, r3
 8011958:	d906      	bls.n	8011968 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801195a:	4b45      	ldr	r3, [pc, #276]	; (8011a70 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801195c:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8011960:	4944      	ldr	r1, [pc, #272]	; (8011a74 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8011962:	4845      	ldr	r0, [pc, #276]	; (8011a78 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8011964:	f002 faa0 	bl	8013ea8 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8011968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801196a:	68ba      	ldr	r2, [r7, #8]
 801196c:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801196e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011970:	88db      	ldrh	r3, [r3, #6]
 8011972:	b29a      	uxth	r2, r3
 8011974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011976:	889b      	ldrh	r3, [r3, #4]
 8011978:	b29b      	uxth	r3, r3
 801197a:	429a      	cmp	r2, r3
 801197c:	d010      	beq.n	80119a0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801197e:	2300      	movs	r3, #0
 8011980:	623b      	str	r3, [r7, #32]
 8011982:	e00d      	b.n	80119a0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8011984:	68fb      	ldr	r3, [r7, #12]
 8011986:	685b      	ldr	r3, [r3, #4]
 8011988:	2b00      	cmp	r3, #0
 801198a:	d006      	beq.n	801199a <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801198c:	4b38      	ldr	r3, [pc, #224]	; (8011a70 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801198e:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8011992:	493a      	ldr	r1, [pc, #232]	; (8011a7c <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8011994:	4838      	ldr	r0, [pc, #224]	; (8011a78 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8011996:	f002 fa87 	bl	8013ea8 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801199a:	68fb      	ldr	r3, [r7, #12]
 801199c:	68ba      	ldr	r2, [r7, #8]
 801199e:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	2b00      	cmp	r3, #0
 80119a4:	d105      	bne.n	80119b2 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80119a6:	68fb      	ldr	r3, [r7, #12]
 80119a8:	7f9b      	ldrb	r3, [r3, #30]
 80119aa:	f003 0301 	and.w	r3, r3, #1
 80119ae:	2b00      	cmp	r3, #0
 80119b0:	d059      	beq.n	8011a66 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 80119b2:	6a3b      	ldr	r3, [r7, #32]
 80119b4:	2b00      	cmp	r3, #0
 80119b6:	d04f      	beq.n	8011a58 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80119b8:	68fb      	ldr	r3, [r7, #12]
 80119ba:	685b      	ldr	r3, [r3, #4]
 80119bc:	2b00      	cmp	r3, #0
 80119be:	d006      	beq.n	80119ce <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 80119c0:	68fb      	ldr	r3, [r7, #12]
 80119c2:	685b      	ldr	r3, [r3, #4]
 80119c4:	685b      	ldr	r3, [r3, #4]
 80119c6:	889b      	ldrh	r3, [r3, #4]
 80119c8:	b29b      	uxth	r3, r3
 80119ca:	2b00      	cmp	r3, #0
 80119cc:	d002      	beq.n	80119d4 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 80119ce:	2300      	movs	r3, #0
 80119d0:	623b      	str	r3, [r7, #32]
 80119d2:	e041      	b.n	8011a58 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 80119d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119d6:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 80119d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119da:	681b      	ldr	r3, [r3, #0]
 80119dc:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80119de:	e012      	b.n	8011a06 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 80119e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119e2:	685b      	ldr	r3, [r3, #4]
 80119e4:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 80119e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119e8:	88db      	ldrh	r3, [r3, #6]
 80119ea:	b29a      	uxth	r2, r3
 80119ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119ee:	889b      	ldrh	r3, [r3, #4]
 80119f0:	b29b      	uxth	r3, r3
 80119f2:	429a      	cmp	r2, r3
 80119f4:	d002      	beq.n	80119fc <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 80119f6:	2300      	movs	r3, #0
 80119f8:	623b      	str	r3, [r7, #32]
            break;
 80119fa:	e007      	b.n	8011a0c <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 80119fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119fe:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8011a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a02:	681b      	ldr	r3, [r3, #0]
 8011a04:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8011a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a08:	2b00      	cmp	r3, #0
 8011a0a:	d1e9      	bne.n	80119e0 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8011a0c:	6a3b      	ldr	r3, [r7, #32]
 8011a0e:	2b00      	cmp	r3, #0
 8011a10:	d022      	beq.n	8011a58 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8011a12:	68fb      	ldr	r3, [r7, #12]
 8011a14:	685b      	ldr	r3, [r3, #4]
 8011a16:	2b00      	cmp	r3, #0
 8011a18:	d106      	bne.n	8011a28 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8011a1a:	4b15      	ldr	r3, [pc, #84]	; (8011a70 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8011a1c:	f240 12df 	movw	r2, #479	; 0x1df
 8011a20:	4917      	ldr	r1, [pc, #92]	; (8011a80 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8011a22:	4815      	ldr	r0, [pc, #84]	; (8011a78 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8011a24:	f002 fa40 	bl	8013ea8 <iprintf>
          LWIP_ASSERT("sanity check",
 8011a28:	68fb      	ldr	r3, [r7, #12]
 8011a2a:	685b      	ldr	r3, [r3, #4]
 8011a2c:	685b      	ldr	r3, [r3, #4]
 8011a2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011a30:	429a      	cmp	r2, r3
 8011a32:	d106      	bne.n	8011a42 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8011a34:	4b0e      	ldr	r3, [pc, #56]	; (8011a70 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8011a36:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8011a3a:	4911      	ldr	r1, [pc, #68]	; (8011a80 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8011a3c:	480e      	ldr	r0, [pc, #56]	; (8011a78 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8011a3e:	f002 fa33 	bl	8013ea8 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8011a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a44:	681b      	ldr	r3, [r3, #0]
 8011a46:	2b00      	cmp	r3, #0
 8011a48:	d006      	beq.n	8011a58 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8011a4a:	4b09      	ldr	r3, [pc, #36]	; (8011a70 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8011a4c:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8011a50:	490c      	ldr	r1, [pc, #48]	; (8011a84 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8011a52:	4809      	ldr	r0, [pc, #36]	; (8011a78 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8011a54:	f002 fa28 	bl	8013ea8 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8011a58:	6a3b      	ldr	r3, [r7, #32]
 8011a5a:	2b00      	cmp	r3, #0
 8011a5c:	bf14      	ite	ne
 8011a5e:	2301      	movne	r3, #1
 8011a60:	2300      	moveq	r3, #0
 8011a62:	b2db      	uxtb	r3, r3
 8011a64:	e000      	b.n	8011a68 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8011a66:	2300      	movs	r3, #0
}
 8011a68:	4618      	mov	r0, r3
 8011a6a:	3730      	adds	r7, #48	; 0x30
 8011a6c:	46bd      	mov	sp, r7
 8011a6e:	bd80      	pop	{r7, pc}
 8011a70:	08017654 	.word	0x08017654
 8011a74:	08017738 	.word	0x08017738
 8011a78:	0801769c 	.word	0x0801769c
 8011a7c:	08017758 	.word	0x08017758
 8011a80:	08017790 	.word	0x08017790
 8011a84:	080177a0 	.word	0x080177a0

08011a88 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8011a88:	b580      	push	{r7, lr}
 8011a8a:	b08e      	sub	sp, #56	; 0x38
 8011a8c:	af00      	add	r7, sp, #0
 8011a8e:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	685b      	ldr	r3, [r3, #4]
 8011a94:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8011a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a98:	781b      	ldrb	r3, [r3, #0]
 8011a9a:	f003 030f 	and.w	r3, r3, #15
 8011a9e:	b2db      	uxtb	r3, r3
 8011aa0:	009b      	lsls	r3, r3, #2
 8011aa2:	b2db      	uxtb	r3, r3
 8011aa4:	2b14      	cmp	r3, #20
 8011aa6:	f040 8171 	bne.w	8011d8c <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8011aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011aac:	88db      	ldrh	r3, [r3, #6]
 8011aae:	b29b      	uxth	r3, r3
 8011ab0:	4618      	mov	r0, r3
 8011ab2:	f7f5 ff55 	bl	8007960 <lwip_htons>
 8011ab6:	4603      	mov	r3, r0
 8011ab8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011abc:	b29b      	uxth	r3, r3
 8011abe:	00db      	lsls	r3, r3, #3
 8011ac0:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8011ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ac4:	885b      	ldrh	r3, [r3, #2]
 8011ac6:	b29b      	uxth	r3, r3
 8011ac8:	4618      	mov	r0, r3
 8011aca:	f7f5 ff49 	bl	8007960 <lwip_htons>
 8011ace:	4603      	mov	r3, r0
 8011ad0:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8011ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ad4:	781b      	ldrb	r3, [r3, #0]
 8011ad6:	f003 030f 	and.w	r3, r3, #15
 8011ada:	b2db      	uxtb	r3, r3
 8011adc:	009b      	lsls	r3, r3, #2
 8011ade:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8011ae2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8011ae6:	b29b      	uxth	r3, r3
 8011ae8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011aea:	429a      	cmp	r2, r3
 8011aec:	f0c0 8150 	bcc.w	8011d90 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8011af0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8011af4:	b29b      	uxth	r3, r3
 8011af6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011af8:	1ad3      	subs	r3, r2, r3
 8011afa:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8011afc:	6878      	ldr	r0, [r7, #4]
 8011afe:	f7f7 fb69 	bl	80091d4 <pbuf_clen>
 8011b02:	4603      	mov	r3, r0
 8011b04:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8011b06:	4b8c      	ldr	r3, [pc, #560]	; (8011d38 <ip4_reass+0x2b0>)
 8011b08:	881b      	ldrh	r3, [r3, #0]
 8011b0a:	461a      	mov	r2, r3
 8011b0c:	8c3b      	ldrh	r3, [r7, #32]
 8011b0e:	4413      	add	r3, r2
 8011b10:	2b0a      	cmp	r3, #10
 8011b12:	dd10      	ble.n	8011b36 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8011b14:	8c3b      	ldrh	r3, [r7, #32]
 8011b16:	4619      	mov	r1, r3
 8011b18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011b1a:	f7ff fd81 	bl	8011620 <ip_reass_remove_oldest_datagram>
 8011b1e:	4603      	mov	r3, r0
 8011b20:	2b00      	cmp	r3, #0
 8011b22:	f000 8137 	beq.w	8011d94 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8011b26:	4b84      	ldr	r3, [pc, #528]	; (8011d38 <ip4_reass+0x2b0>)
 8011b28:	881b      	ldrh	r3, [r3, #0]
 8011b2a:	461a      	mov	r2, r3
 8011b2c:	8c3b      	ldrh	r3, [r7, #32]
 8011b2e:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8011b30:	2b0a      	cmp	r3, #10
 8011b32:	f300 812f 	bgt.w	8011d94 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8011b36:	4b81      	ldr	r3, [pc, #516]	; (8011d3c <ip4_reass+0x2b4>)
 8011b38:	681b      	ldr	r3, [r3, #0]
 8011b3a:	633b      	str	r3, [r7, #48]	; 0x30
 8011b3c:	e015      	b.n	8011b6a <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8011b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b40:	695a      	ldr	r2, [r3, #20]
 8011b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b44:	68db      	ldr	r3, [r3, #12]
 8011b46:	429a      	cmp	r2, r3
 8011b48:	d10c      	bne.n	8011b64 <ip4_reass+0xdc>
 8011b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b4c:	699a      	ldr	r2, [r3, #24]
 8011b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b50:	691b      	ldr	r3, [r3, #16]
 8011b52:	429a      	cmp	r2, r3
 8011b54:	d106      	bne.n	8011b64 <ip4_reass+0xdc>
 8011b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b58:	899a      	ldrh	r2, [r3, #12]
 8011b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b5c:	889b      	ldrh	r3, [r3, #4]
 8011b5e:	b29b      	uxth	r3, r3
 8011b60:	429a      	cmp	r2, r3
 8011b62:	d006      	beq.n	8011b72 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8011b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b66:	681b      	ldr	r3, [r3, #0]
 8011b68:	633b      	str	r3, [r7, #48]	; 0x30
 8011b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b6c:	2b00      	cmp	r3, #0
 8011b6e:	d1e6      	bne.n	8011b3e <ip4_reass+0xb6>
 8011b70:	e000      	b.n	8011b74 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8011b72:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8011b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b76:	2b00      	cmp	r3, #0
 8011b78:	d109      	bne.n	8011b8e <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8011b7a:	8c3b      	ldrh	r3, [r7, #32]
 8011b7c:	4619      	mov	r1, r3
 8011b7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011b80:	f7ff fdb0 	bl	80116e4 <ip_reass_enqueue_new_datagram>
 8011b84:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8011b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b88:	2b00      	cmp	r3, #0
 8011b8a:	d11c      	bne.n	8011bc6 <ip4_reass+0x13e>
      goto nullreturn;
 8011b8c:	e105      	b.n	8011d9a <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8011b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b90:	88db      	ldrh	r3, [r3, #6]
 8011b92:	b29b      	uxth	r3, r3
 8011b94:	4618      	mov	r0, r3
 8011b96:	f7f5 fee3 	bl	8007960 <lwip_htons>
 8011b9a:	4603      	mov	r3, r0
 8011b9c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011ba0:	2b00      	cmp	r3, #0
 8011ba2:	d110      	bne.n	8011bc6 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8011ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ba6:	89db      	ldrh	r3, [r3, #14]
 8011ba8:	4618      	mov	r0, r3
 8011baa:	f7f5 fed9 	bl	8007960 <lwip_htons>
 8011bae:	4603      	mov	r3, r0
 8011bb0:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8011bb4:	2b00      	cmp	r3, #0
 8011bb6:	d006      	beq.n	8011bc6 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8011bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011bba:	3308      	adds	r3, #8
 8011bbc:	2214      	movs	r2, #20
 8011bbe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011bc0:	4618      	mov	r0, r3
 8011bc2:	f002 f8c6 	bl	8013d52 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8011bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011bc8:	88db      	ldrh	r3, [r3, #6]
 8011bca:	b29b      	uxth	r3, r3
 8011bcc:	f003 0320 	and.w	r3, r3, #32
 8011bd0:	2b00      	cmp	r3, #0
 8011bd2:	bf0c      	ite	eq
 8011bd4:	2301      	moveq	r3, #1
 8011bd6:	2300      	movne	r3, #0
 8011bd8:	b2db      	uxtb	r3, r3
 8011bda:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8011bdc:	69fb      	ldr	r3, [r7, #28]
 8011bde:	2b00      	cmp	r3, #0
 8011be0:	d00e      	beq.n	8011c00 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8011be2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8011be4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011be6:	4413      	add	r3, r2
 8011be8:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8011bea:	8b7a      	ldrh	r2, [r7, #26]
 8011bec:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011bee:	429a      	cmp	r2, r3
 8011bf0:	f0c0 80a0 	bcc.w	8011d34 <ip4_reass+0x2ac>
 8011bf4:	8b7b      	ldrh	r3, [r7, #26]
 8011bf6:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8011bfa:	4293      	cmp	r3, r2
 8011bfc:	f200 809a 	bhi.w	8011d34 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8011c00:	69fa      	ldr	r2, [r7, #28]
 8011c02:	6879      	ldr	r1, [r7, #4]
 8011c04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011c06:	f7ff fdd5 	bl	80117b4 <ip_reass_chain_frag_into_datagram_and_validate>
 8011c0a:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8011c0c:	697b      	ldr	r3, [r7, #20]
 8011c0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011c12:	f000 809b 	beq.w	8011d4c <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8011c16:	4b48      	ldr	r3, [pc, #288]	; (8011d38 <ip4_reass+0x2b0>)
 8011c18:	881a      	ldrh	r2, [r3, #0]
 8011c1a:	8c3b      	ldrh	r3, [r7, #32]
 8011c1c:	4413      	add	r3, r2
 8011c1e:	b29a      	uxth	r2, r3
 8011c20:	4b45      	ldr	r3, [pc, #276]	; (8011d38 <ip4_reass+0x2b0>)
 8011c22:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8011c24:	69fb      	ldr	r3, [r7, #28]
 8011c26:	2b00      	cmp	r3, #0
 8011c28:	d00d      	beq.n	8011c46 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8011c2a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8011c2c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011c2e:	4413      	add	r3, r2
 8011c30:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8011c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c34:	8a7a      	ldrh	r2, [r7, #18]
 8011c36:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8011c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c3a:	7f9b      	ldrb	r3, [r3, #30]
 8011c3c:	f043 0301 	orr.w	r3, r3, #1
 8011c40:	b2da      	uxtb	r2, r3
 8011c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c44:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8011c46:	697b      	ldr	r3, [r7, #20]
 8011c48:	2b01      	cmp	r3, #1
 8011c4a:	d171      	bne.n	8011d30 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8011c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c4e:	8b9b      	ldrh	r3, [r3, #28]
 8011c50:	3314      	adds	r3, #20
 8011c52:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8011c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c56:	685b      	ldr	r3, [r3, #4]
 8011c58:	685b      	ldr	r3, [r3, #4]
 8011c5a:	681b      	ldr	r3, [r3, #0]
 8011c5c:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8011c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c60:	685b      	ldr	r3, [r3, #4]
 8011c62:	685b      	ldr	r3, [r3, #4]
 8011c64:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8011c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c68:	3308      	adds	r3, #8
 8011c6a:	2214      	movs	r2, #20
 8011c6c:	4619      	mov	r1, r3
 8011c6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011c70:	f002 f86f 	bl	8013d52 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8011c74:	8a3b      	ldrh	r3, [r7, #16]
 8011c76:	4618      	mov	r0, r3
 8011c78:	f7f5 fe72 	bl	8007960 <lwip_htons>
 8011c7c:	4603      	mov	r3, r0
 8011c7e:	461a      	mov	r2, r3
 8011c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c82:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8011c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c86:	2200      	movs	r2, #0
 8011c88:	719a      	strb	r2, [r3, #6]
 8011c8a:	2200      	movs	r2, #0
 8011c8c:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8011c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c90:	2200      	movs	r2, #0
 8011c92:	729a      	strb	r2, [r3, #10]
 8011c94:	2200      	movs	r2, #0
 8011c96:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8011c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c9a:	685b      	ldr	r3, [r3, #4]
 8011c9c:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8011c9e:	e00d      	b.n	8011cbc <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8011ca0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011ca2:	685b      	ldr	r3, [r3, #4]
 8011ca4:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8011ca6:	2114      	movs	r1, #20
 8011ca8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8011caa:	f7f7 f97f 	bl	8008fac <pbuf_remove_header>
      pbuf_cat(p, r);
 8011cae:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8011cb0:	6878      	ldr	r0, [r7, #4]
 8011cb2:	f7f7 facf 	bl	8009254 <pbuf_cat>
      r = iprh->next_pbuf;
 8011cb6:	68fb      	ldr	r3, [r7, #12]
 8011cb8:	681b      	ldr	r3, [r3, #0]
 8011cba:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8011cbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011cbe:	2b00      	cmp	r3, #0
 8011cc0:	d1ee      	bne.n	8011ca0 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8011cc2:	4b1e      	ldr	r3, [pc, #120]	; (8011d3c <ip4_reass+0x2b4>)
 8011cc4:	681b      	ldr	r3, [r3, #0]
 8011cc6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011cc8:	429a      	cmp	r2, r3
 8011cca:	d102      	bne.n	8011cd2 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8011ccc:	2300      	movs	r3, #0
 8011cce:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011cd0:	e010      	b.n	8011cf4 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8011cd2:	4b1a      	ldr	r3, [pc, #104]	; (8011d3c <ip4_reass+0x2b4>)
 8011cd4:	681b      	ldr	r3, [r3, #0]
 8011cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011cd8:	e007      	b.n	8011cea <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8011cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011cdc:	681b      	ldr	r3, [r3, #0]
 8011cde:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011ce0:	429a      	cmp	r2, r3
 8011ce2:	d006      	beq.n	8011cf2 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8011ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ce6:	681b      	ldr	r3, [r3, #0]
 8011ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011cec:	2b00      	cmp	r3, #0
 8011cee:	d1f4      	bne.n	8011cda <ip4_reass+0x252>
 8011cf0:	e000      	b.n	8011cf4 <ip4_reass+0x26c>
          break;
 8011cf2:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8011cf4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011cf6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011cf8:	f7ff fd2e 	bl	8011758 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8011cfc:	6878      	ldr	r0, [r7, #4]
 8011cfe:	f7f7 fa69 	bl	80091d4 <pbuf_clen>
 8011d02:	4603      	mov	r3, r0
 8011d04:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8011d06:	4b0c      	ldr	r3, [pc, #48]	; (8011d38 <ip4_reass+0x2b0>)
 8011d08:	881b      	ldrh	r3, [r3, #0]
 8011d0a:	8c3a      	ldrh	r2, [r7, #32]
 8011d0c:	429a      	cmp	r2, r3
 8011d0e:	d906      	bls.n	8011d1e <ip4_reass+0x296>
 8011d10:	4b0b      	ldr	r3, [pc, #44]	; (8011d40 <ip4_reass+0x2b8>)
 8011d12:	f240 229b 	movw	r2, #667	; 0x29b
 8011d16:	490b      	ldr	r1, [pc, #44]	; (8011d44 <ip4_reass+0x2bc>)
 8011d18:	480b      	ldr	r0, [pc, #44]	; (8011d48 <ip4_reass+0x2c0>)
 8011d1a:	f002 f8c5 	bl	8013ea8 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8011d1e:	4b06      	ldr	r3, [pc, #24]	; (8011d38 <ip4_reass+0x2b0>)
 8011d20:	881a      	ldrh	r2, [r3, #0]
 8011d22:	8c3b      	ldrh	r3, [r7, #32]
 8011d24:	1ad3      	subs	r3, r2, r3
 8011d26:	b29a      	uxth	r2, r3
 8011d28:	4b03      	ldr	r3, [pc, #12]	; (8011d38 <ip4_reass+0x2b0>)
 8011d2a:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8011d2c:	687b      	ldr	r3, [r7, #4]
 8011d2e:	e038      	b.n	8011da2 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8011d30:	2300      	movs	r3, #0
 8011d32:	e036      	b.n	8011da2 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8011d34:	bf00      	nop
 8011d36:	e00a      	b.n	8011d4e <ip4_reass+0x2c6>
 8011d38:	2000836c 	.word	0x2000836c
 8011d3c:	20008368 	.word	0x20008368
 8011d40:	08017654 	.word	0x08017654
 8011d44:	080177c4 	.word	0x080177c4
 8011d48:	0801769c 	.word	0x0801769c
    goto nullreturn_ipr;
 8011d4c:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8011d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d50:	2b00      	cmp	r3, #0
 8011d52:	d106      	bne.n	8011d62 <ip4_reass+0x2da>
 8011d54:	4b15      	ldr	r3, [pc, #84]	; (8011dac <ip4_reass+0x324>)
 8011d56:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8011d5a:	4915      	ldr	r1, [pc, #84]	; (8011db0 <ip4_reass+0x328>)
 8011d5c:	4815      	ldr	r0, [pc, #84]	; (8011db4 <ip4_reass+0x32c>)
 8011d5e:	f002 f8a3 	bl	8013ea8 <iprintf>
  if (ipr->p == NULL) {
 8011d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d64:	685b      	ldr	r3, [r3, #4]
 8011d66:	2b00      	cmp	r3, #0
 8011d68:	d116      	bne.n	8011d98 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8011d6a:	4b13      	ldr	r3, [pc, #76]	; (8011db8 <ip4_reass+0x330>)
 8011d6c:	681b      	ldr	r3, [r3, #0]
 8011d6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011d70:	429a      	cmp	r2, r3
 8011d72:	d006      	beq.n	8011d82 <ip4_reass+0x2fa>
 8011d74:	4b0d      	ldr	r3, [pc, #52]	; (8011dac <ip4_reass+0x324>)
 8011d76:	f240 22ab 	movw	r2, #683	; 0x2ab
 8011d7a:	4910      	ldr	r1, [pc, #64]	; (8011dbc <ip4_reass+0x334>)
 8011d7c:	480d      	ldr	r0, [pc, #52]	; (8011db4 <ip4_reass+0x32c>)
 8011d7e:	f002 f893 	bl	8013ea8 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8011d82:	2100      	movs	r1, #0
 8011d84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011d86:	f7ff fce7 	bl	8011758 <ip_reass_dequeue_datagram>
 8011d8a:	e006      	b.n	8011d9a <ip4_reass+0x312>
    goto nullreturn;
 8011d8c:	bf00      	nop
 8011d8e:	e004      	b.n	8011d9a <ip4_reass+0x312>
    goto nullreturn;
 8011d90:	bf00      	nop
 8011d92:	e002      	b.n	8011d9a <ip4_reass+0x312>
      goto nullreturn;
 8011d94:	bf00      	nop
 8011d96:	e000      	b.n	8011d9a <ip4_reass+0x312>
  }

nullreturn:
 8011d98:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8011d9a:	6878      	ldr	r0, [r7, #4]
 8011d9c:	f7f7 f98c 	bl	80090b8 <pbuf_free>
  return NULL;
 8011da0:	2300      	movs	r3, #0
}
 8011da2:	4618      	mov	r0, r3
 8011da4:	3738      	adds	r7, #56	; 0x38
 8011da6:	46bd      	mov	sp, r7
 8011da8:	bd80      	pop	{r7, pc}
 8011daa:	bf00      	nop
 8011dac:	08017654 	.word	0x08017654
 8011db0:	080177e0 	.word	0x080177e0
 8011db4:	0801769c 	.word	0x0801769c
 8011db8:	20008368 	.word	0x20008368
 8011dbc:	080177ec 	.word	0x080177ec

08011dc0 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8011dc0:	b580      	push	{r7, lr}
 8011dc2:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8011dc4:	2005      	movs	r0, #5
 8011dc6:	f7f6 fa81 	bl	80082cc <memp_malloc>
 8011dca:	4603      	mov	r3, r0
}
 8011dcc:	4618      	mov	r0, r3
 8011dce:	bd80      	pop	{r7, pc}

08011dd0 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8011dd0:	b580      	push	{r7, lr}
 8011dd2:	b082      	sub	sp, #8
 8011dd4:	af00      	add	r7, sp, #0
 8011dd6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8011dd8:	687b      	ldr	r3, [r7, #4]
 8011dda:	2b00      	cmp	r3, #0
 8011ddc:	d106      	bne.n	8011dec <ip_frag_free_pbuf_custom_ref+0x1c>
 8011dde:	4b07      	ldr	r3, [pc, #28]	; (8011dfc <ip_frag_free_pbuf_custom_ref+0x2c>)
 8011de0:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8011de4:	4906      	ldr	r1, [pc, #24]	; (8011e00 <ip_frag_free_pbuf_custom_ref+0x30>)
 8011de6:	4807      	ldr	r0, [pc, #28]	; (8011e04 <ip_frag_free_pbuf_custom_ref+0x34>)
 8011de8:	f002 f85e 	bl	8013ea8 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8011dec:	6879      	ldr	r1, [r7, #4]
 8011dee:	2005      	movs	r0, #5
 8011df0:	f7f6 fabe 	bl	8008370 <memp_free>
}
 8011df4:	bf00      	nop
 8011df6:	3708      	adds	r7, #8
 8011df8:	46bd      	mov	sp, r7
 8011dfa:	bd80      	pop	{r7, pc}
 8011dfc:	08017654 	.word	0x08017654
 8011e00:	0801780c 	.word	0x0801780c
 8011e04:	0801769c 	.word	0x0801769c

08011e08 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8011e08:	b580      	push	{r7, lr}
 8011e0a:	b084      	sub	sp, #16
 8011e0c:	af00      	add	r7, sp, #0
 8011e0e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8011e10:	687b      	ldr	r3, [r7, #4]
 8011e12:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8011e14:	68fb      	ldr	r3, [r7, #12]
 8011e16:	2b00      	cmp	r3, #0
 8011e18:	d106      	bne.n	8011e28 <ipfrag_free_pbuf_custom+0x20>
 8011e1a:	4b11      	ldr	r3, [pc, #68]	; (8011e60 <ipfrag_free_pbuf_custom+0x58>)
 8011e1c:	f240 22ce 	movw	r2, #718	; 0x2ce
 8011e20:	4910      	ldr	r1, [pc, #64]	; (8011e64 <ipfrag_free_pbuf_custom+0x5c>)
 8011e22:	4811      	ldr	r0, [pc, #68]	; (8011e68 <ipfrag_free_pbuf_custom+0x60>)
 8011e24:	f002 f840 	bl	8013ea8 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8011e28:	68fa      	ldr	r2, [r7, #12]
 8011e2a:	687b      	ldr	r3, [r7, #4]
 8011e2c:	429a      	cmp	r2, r3
 8011e2e:	d006      	beq.n	8011e3e <ipfrag_free_pbuf_custom+0x36>
 8011e30:	4b0b      	ldr	r3, [pc, #44]	; (8011e60 <ipfrag_free_pbuf_custom+0x58>)
 8011e32:	f240 22cf 	movw	r2, #719	; 0x2cf
 8011e36:	490d      	ldr	r1, [pc, #52]	; (8011e6c <ipfrag_free_pbuf_custom+0x64>)
 8011e38:	480b      	ldr	r0, [pc, #44]	; (8011e68 <ipfrag_free_pbuf_custom+0x60>)
 8011e3a:	f002 f835 	bl	8013ea8 <iprintf>
  if (pcr->original != NULL) {
 8011e3e:	68fb      	ldr	r3, [r7, #12]
 8011e40:	695b      	ldr	r3, [r3, #20]
 8011e42:	2b00      	cmp	r3, #0
 8011e44:	d004      	beq.n	8011e50 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8011e46:	68fb      	ldr	r3, [r7, #12]
 8011e48:	695b      	ldr	r3, [r3, #20]
 8011e4a:	4618      	mov	r0, r3
 8011e4c:	f7f7 f934 	bl	80090b8 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8011e50:	68f8      	ldr	r0, [r7, #12]
 8011e52:	f7ff ffbd 	bl	8011dd0 <ip_frag_free_pbuf_custom_ref>
}
 8011e56:	bf00      	nop
 8011e58:	3710      	adds	r7, #16
 8011e5a:	46bd      	mov	sp, r7
 8011e5c:	bd80      	pop	{r7, pc}
 8011e5e:	bf00      	nop
 8011e60:	08017654 	.word	0x08017654
 8011e64:	08017818 	.word	0x08017818
 8011e68:	0801769c 	.word	0x0801769c
 8011e6c:	08017824 	.word	0x08017824

08011e70 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8011e70:	b580      	push	{r7, lr}
 8011e72:	b094      	sub	sp, #80	; 0x50
 8011e74:	af02      	add	r7, sp, #8
 8011e76:	60f8      	str	r0, [r7, #12]
 8011e78:	60b9      	str	r1, [r7, #8]
 8011e7a:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8011e7c:	2300      	movs	r3, #0
 8011e7e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8011e82:	68bb      	ldr	r3, [r7, #8]
 8011e84:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8011e86:	3b14      	subs	r3, #20
 8011e88:	2b00      	cmp	r3, #0
 8011e8a:	da00      	bge.n	8011e8e <ip4_frag+0x1e>
 8011e8c:	3307      	adds	r3, #7
 8011e8e:	10db      	asrs	r3, r3, #3
 8011e90:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8011e92:	2314      	movs	r3, #20
 8011e94:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8011e96:	68fb      	ldr	r3, [r7, #12]
 8011e98:	685b      	ldr	r3, [r3, #4]
 8011e9a:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8011e9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011e9e:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8011ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ea2:	781b      	ldrb	r3, [r3, #0]
 8011ea4:	f003 030f 	and.w	r3, r3, #15
 8011ea8:	b2db      	uxtb	r3, r3
 8011eaa:	009b      	lsls	r3, r3, #2
 8011eac:	b2db      	uxtb	r3, r3
 8011eae:	2b14      	cmp	r3, #20
 8011eb0:	d002      	beq.n	8011eb8 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8011eb2:	f06f 0305 	mvn.w	r3, #5
 8011eb6:	e110      	b.n	80120da <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8011eb8:	68fb      	ldr	r3, [r7, #12]
 8011eba:	895b      	ldrh	r3, [r3, #10]
 8011ebc:	2b13      	cmp	r3, #19
 8011ebe:	d809      	bhi.n	8011ed4 <ip4_frag+0x64>
 8011ec0:	4b88      	ldr	r3, [pc, #544]	; (80120e4 <ip4_frag+0x274>)
 8011ec2:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8011ec6:	4988      	ldr	r1, [pc, #544]	; (80120e8 <ip4_frag+0x278>)
 8011ec8:	4888      	ldr	r0, [pc, #544]	; (80120ec <ip4_frag+0x27c>)
 8011eca:	f001 ffed 	bl	8013ea8 <iprintf>
 8011ece:	f06f 0305 	mvn.w	r3, #5
 8011ed2:	e102      	b.n	80120da <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8011ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ed6:	88db      	ldrh	r3, [r3, #6]
 8011ed8:	b29b      	uxth	r3, r3
 8011eda:	4618      	mov	r0, r3
 8011edc:	f7f5 fd40 	bl	8007960 <lwip_htons>
 8011ee0:	4603      	mov	r3, r0
 8011ee2:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8011ee4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011ee6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011eea:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8011eee:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011ef0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8011ef4:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8011ef6:	68fb      	ldr	r3, [r7, #12]
 8011ef8:	891b      	ldrh	r3, [r3, #8]
 8011efa:	3b14      	subs	r3, #20
 8011efc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8011f00:	e0e1      	b.n	80120c6 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8011f02:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011f04:	00db      	lsls	r3, r3, #3
 8011f06:	b29b      	uxth	r3, r3
 8011f08:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011f0c:	4293      	cmp	r3, r2
 8011f0e:	bf28      	it	cs
 8011f10:	4613      	movcs	r3, r2
 8011f12:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8011f14:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011f18:	2114      	movs	r1, #20
 8011f1a:	200e      	movs	r0, #14
 8011f1c:	f7f6 fde8 	bl	8008af0 <pbuf_alloc>
 8011f20:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8011f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f24:	2b00      	cmp	r3, #0
 8011f26:	f000 80d5 	beq.w	80120d4 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8011f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f2c:	895b      	ldrh	r3, [r3, #10]
 8011f2e:	2b13      	cmp	r3, #19
 8011f30:	d806      	bhi.n	8011f40 <ip4_frag+0xd0>
 8011f32:	4b6c      	ldr	r3, [pc, #432]	; (80120e4 <ip4_frag+0x274>)
 8011f34:	f44f 7249 	mov.w	r2, #804	; 0x324
 8011f38:	496d      	ldr	r1, [pc, #436]	; (80120f0 <ip4_frag+0x280>)
 8011f3a:	486c      	ldr	r0, [pc, #432]	; (80120ec <ip4_frag+0x27c>)
 8011f3c:	f001 ffb4 	bl	8013ea8 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8011f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f42:	685b      	ldr	r3, [r3, #4]
 8011f44:	2214      	movs	r2, #20
 8011f46:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8011f48:	4618      	mov	r0, r3
 8011f4a:	f001 ff02 	bl	8013d52 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8011f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f50:	685b      	ldr	r3, [r3, #4]
 8011f52:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8011f54:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8011f56:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8011f5a:	e064      	b.n	8012026 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8011f5c:	68fb      	ldr	r3, [r7, #12]
 8011f5e:	895a      	ldrh	r2, [r3, #10]
 8011f60:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011f62:	1ad3      	subs	r3, r2, r3
 8011f64:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8011f66:	68fb      	ldr	r3, [r7, #12]
 8011f68:	895b      	ldrh	r3, [r3, #10]
 8011f6a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8011f6c:	429a      	cmp	r2, r3
 8011f6e:	d906      	bls.n	8011f7e <ip4_frag+0x10e>
 8011f70:	4b5c      	ldr	r3, [pc, #368]	; (80120e4 <ip4_frag+0x274>)
 8011f72:	f240 322d 	movw	r2, #813	; 0x32d
 8011f76:	495f      	ldr	r1, [pc, #380]	; (80120f4 <ip4_frag+0x284>)
 8011f78:	485c      	ldr	r0, [pc, #368]	; (80120ec <ip4_frag+0x27c>)
 8011f7a:	f001 ff95 	bl	8013ea8 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8011f7e:	8bfa      	ldrh	r2, [r7, #30]
 8011f80:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8011f84:	4293      	cmp	r3, r2
 8011f86:	bf28      	it	cs
 8011f88:	4613      	movcs	r3, r2
 8011f8a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8011f8e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8011f92:	2b00      	cmp	r3, #0
 8011f94:	d105      	bne.n	8011fa2 <ip4_frag+0x132>
        poff = 0;
 8011f96:	2300      	movs	r3, #0
 8011f98:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8011f9a:	68fb      	ldr	r3, [r7, #12]
 8011f9c:	681b      	ldr	r3, [r3, #0]
 8011f9e:	60fb      	str	r3, [r7, #12]
        continue;
 8011fa0:	e041      	b.n	8012026 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8011fa2:	f7ff ff0d 	bl	8011dc0 <ip_frag_alloc_pbuf_custom_ref>
 8011fa6:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8011fa8:	69bb      	ldr	r3, [r7, #24]
 8011faa:	2b00      	cmp	r3, #0
 8011fac:	d103      	bne.n	8011fb6 <ip4_frag+0x146>
        pbuf_free(rambuf);
 8011fae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011fb0:	f7f7 f882 	bl	80090b8 <pbuf_free>
        goto memerr;
 8011fb4:	e08f      	b.n	80120d6 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8011fb6:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8011fb8:	68fb      	ldr	r3, [r7, #12]
 8011fba:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8011fbc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011fbe:	4413      	add	r3, r2
 8011fc0:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8011fc4:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8011fc8:	9201      	str	r2, [sp, #4]
 8011fca:	9300      	str	r3, [sp, #0]
 8011fcc:	4603      	mov	r3, r0
 8011fce:	2241      	movs	r2, #65	; 0x41
 8011fd0:	2000      	movs	r0, #0
 8011fd2:	f7f6 feb7 	bl	8008d44 <pbuf_alloced_custom>
 8011fd6:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8011fd8:	697b      	ldr	r3, [r7, #20]
 8011fda:	2b00      	cmp	r3, #0
 8011fdc:	d106      	bne.n	8011fec <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8011fde:	69b8      	ldr	r0, [r7, #24]
 8011fe0:	f7ff fef6 	bl	8011dd0 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8011fe4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011fe6:	f7f7 f867 	bl	80090b8 <pbuf_free>
        goto memerr;
 8011fea:	e074      	b.n	80120d6 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8011fec:	68f8      	ldr	r0, [r7, #12]
 8011fee:	f7f7 f909 	bl	8009204 <pbuf_ref>
      pcr->original = p;
 8011ff2:	69bb      	ldr	r3, [r7, #24]
 8011ff4:	68fa      	ldr	r2, [r7, #12]
 8011ff6:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8011ff8:	69bb      	ldr	r3, [r7, #24]
 8011ffa:	4a3f      	ldr	r2, [pc, #252]	; (80120f8 <ip4_frag+0x288>)
 8011ffc:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8011ffe:	6979      	ldr	r1, [r7, #20]
 8012000:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012002:	f7f7 f927 	bl	8009254 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8012006:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801200a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801200e:	1ad3      	subs	r3, r2, r3
 8012010:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8012014:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8012018:	2b00      	cmp	r3, #0
 801201a:	d004      	beq.n	8012026 <ip4_frag+0x1b6>
        poff = 0;
 801201c:	2300      	movs	r3, #0
 801201e:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8012020:	68fb      	ldr	r3, [r7, #12]
 8012022:	681b      	ldr	r3, [r3, #0]
 8012024:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8012026:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801202a:	2b00      	cmp	r3, #0
 801202c:	d196      	bne.n	8011f5c <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801202e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8012030:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8012034:	4413      	add	r3, r2
 8012036:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8012038:	68bb      	ldr	r3, [r7, #8]
 801203a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801203c:	f1a3 0213 	sub.w	r2, r3, #19
 8012040:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012044:	429a      	cmp	r2, r3
 8012046:	bfcc      	ite	gt
 8012048:	2301      	movgt	r3, #1
 801204a:	2300      	movle	r3, #0
 801204c:	b2db      	uxtb	r3, r3
 801204e:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8012050:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012054:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012058:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 801205a:	6a3b      	ldr	r3, [r7, #32]
 801205c:	2b00      	cmp	r3, #0
 801205e:	d002      	beq.n	8012066 <ip4_frag+0x1f6>
 8012060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012062:	2b00      	cmp	r3, #0
 8012064:	d003      	beq.n	801206e <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8012066:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012068:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801206c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801206e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012070:	4618      	mov	r0, r3
 8012072:	f7f5 fc75 	bl	8007960 <lwip_htons>
 8012076:	4603      	mov	r3, r0
 8012078:	461a      	mov	r2, r3
 801207a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801207c:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801207e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8012080:	3314      	adds	r3, #20
 8012082:	b29b      	uxth	r3, r3
 8012084:	4618      	mov	r0, r3
 8012086:	f7f5 fc6b 	bl	8007960 <lwip_htons>
 801208a:	4603      	mov	r3, r0
 801208c:	461a      	mov	r2, r3
 801208e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012090:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8012092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012094:	2200      	movs	r2, #0
 8012096:	729a      	strb	r2, [r3, #10]
 8012098:	2200      	movs	r2, #0
 801209a:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801209c:	68bb      	ldr	r3, [r7, #8]
 801209e:	695b      	ldr	r3, [r3, #20]
 80120a0:	687a      	ldr	r2, [r7, #4]
 80120a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80120a4:	68b8      	ldr	r0, [r7, #8]
 80120a6:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80120a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80120aa:	f7f7 f805 	bl	80090b8 <pbuf_free>
    left = (u16_t)(left - fragsize);
 80120ae:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80120b2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80120b4:	1ad3      	subs	r3, r2, r3
 80120b6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 80120ba:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80120be:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80120c0:	4413      	add	r3, r2
 80120c2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 80120c6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80120ca:	2b00      	cmp	r3, #0
 80120cc:	f47f af19 	bne.w	8011f02 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80120d0:	2300      	movs	r3, #0
 80120d2:	e002      	b.n	80120da <ip4_frag+0x26a>
      goto memerr;
 80120d4:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80120d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80120da:	4618      	mov	r0, r3
 80120dc:	3748      	adds	r7, #72	; 0x48
 80120de:	46bd      	mov	sp, r7
 80120e0:	bd80      	pop	{r7, pc}
 80120e2:	bf00      	nop
 80120e4:	08017654 	.word	0x08017654
 80120e8:	08017830 	.word	0x08017830
 80120ec:	0801769c 	.word	0x0801769c
 80120f0:	0801784c 	.word	0x0801784c
 80120f4:	0801786c 	.word	0x0801786c
 80120f8:	08011e09 	.word	0x08011e09

080120fc <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 80120fc:	b580      	push	{r7, lr}
 80120fe:	b086      	sub	sp, #24
 8012100:	af00      	add	r7, sp, #0
 8012102:	6078      	str	r0, [r7, #4]
 8012104:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8012106:	230e      	movs	r3, #14
 8012108:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801210a:	687b      	ldr	r3, [r7, #4]
 801210c:	895b      	ldrh	r3, [r3, #10]
 801210e:	2b0e      	cmp	r3, #14
 8012110:	d96e      	bls.n	80121f0 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8012112:	687b      	ldr	r3, [r7, #4]
 8012114:	7bdb      	ldrb	r3, [r3, #15]
 8012116:	2b00      	cmp	r3, #0
 8012118:	d106      	bne.n	8012128 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801211a:	683b      	ldr	r3, [r7, #0]
 801211c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012120:	3301      	adds	r3, #1
 8012122:	b2da      	uxtb	r2, r3
 8012124:	687b      	ldr	r3, [r7, #4]
 8012126:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8012128:	687b      	ldr	r3, [r7, #4]
 801212a:	685b      	ldr	r3, [r3, #4]
 801212c:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801212e:	693b      	ldr	r3, [r7, #16]
 8012130:	7b1a      	ldrb	r2, [r3, #12]
 8012132:	7b5b      	ldrb	r3, [r3, #13]
 8012134:	021b      	lsls	r3, r3, #8
 8012136:	4313      	orrs	r3, r2
 8012138:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801213a:	693b      	ldr	r3, [r7, #16]
 801213c:	781b      	ldrb	r3, [r3, #0]
 801213e:	f003 0301 	and.w	r3, r3, #1
 8012142:	2b00      	cmp	r3, #0
 8012144:	d023      	beq.n	801218e <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8012146:	693b      	ldr	r3, [r7, #16]
 8012148:	781b      	ldrb	r3, [r3, #0]
 801214a:	2b01      	cmp	r3, #1
 801214c:	d10f      	bne.n	801216e <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801214e:	693b      	ldr	r3, [r7, #16]
 8012150:	785b      	ldrb	r3, [r3, #1]
 8012152:	2b00      	cmp	r3, #0
 8012154:	d11b      	bne.n	801218e <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8012156:	693b      	ldr	r3, [r7, #16]
 8012158:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801215a:	2b5e      	cmp	r3, #94	; 0x5e
 801215c:	d117      	bne.n	801218e <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801215e:	687b      	ldr	r3, [r7, #4]
 8012160:	7b5b      	ldrb	r3, [r3, #13]
 8012162:	f043 0310 	orr.w	r3, r3, #16
 8012166:	b2da      	uxtb	r2, r3
 8012168:	687b      	ldr	r3, [r7, #4]
 801216a:	735a      	strb	r2, [r3, #13]
 801216c:	e00f      	b.n	801218e <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801216e:	693b      	ldr	r3, [r7, #16]
 8012170:	2206      	movs	r2, #6
 8012172:	4928      	ldr	r1, [pc, #160]	; (8012214 <ethernet_input+0x118>)
 8012174:	4618      	mov	r0, r3
 8012176:	f001 fddc 	bl	8013d32 <memcmp>
 801217a:	4603      	mov	r3, r0
 801217c:	2b00      	cmp	r3, #0
 801217e:	d106      	bne.n	801218e <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8012180:	687b      	ldr	r3, [r7, #4]
 8012182:	7b5b      	ldrb	r3, [r3, #13]
 8012184:	f043 0308 	orr.w	r3, r3, #8
 8012188:	b2da      	uxtb	r2, r3
 801218a:	687b      	ldr	r3, [r7, #4]
 801218c:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801218e:	89fb      	ldrh	r3, [r7, #14]
 8012190:	2b08      	cmp	r3, #8
 8012192:	d003      	beq.n	801219c <ethernet_input+0xa0>
 8012194:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8012198:	d014      	beq.n	80121c4 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801219a:	e032      	b.n	8012202 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801219c:	683b      	ldr	r3, [r7, #0]
 801219e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80121a2:	f003 0308 	and.w	r3, r3, #8
 80121a6:	2b00      	cmp	r3, #0
 80121a8:	d024      	beq.n	80121f4 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80121aa:	8afb      	ldrh	r3, [r7, #22]
 80121ac:	4619      	mov	r1, r3
 80121ae:	6878      	ldr	r0, [r7, #4]
 80121b0:	f7f6 fefc 	bl	8008fac <pbuf_remove_header>
 80121b4:	4603      	mov	r3, r0
 80121b6:	2b00      	cmp	r3, #0
 80121b8:	d11e      	bne.n	80121f8 <ethernet_input+0xfc>
        ip4_input(p, netif);
 80121ba:	6839      	ldr	r1, [r7, #0]
 80121bc:	6878      	ldr	r0, [r7, #4]
 80121be:	f7fe ff21 	bl	8011004 <ip4_input>
      break;
 80121c2:	e013      	b.n	80121ec <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80121c4:	683b      	ldr	r3, [r7, #0]
 80121c6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80121ca:	f003 0308 	and.w	r3, r3, #8
 80121ce:	2b00      	cmp	r3, #0
 80121d0:	d014      	beq.n	80121fc <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80121d2:	8afb      	ldrh	r3, [r7, #22]
 80121d4:	4619      	mov	r1, r3
 80121d6:	6878      	ldr	r0, [r7, #4]
 80121d8:	f7f6 fee8 	bl	8008fac <pbuf_remove_header>
 80121dc:	4603      	mov	r3, r0
 80121de:	2b00      	cmp	r3, #0
 80121e0:	d10e      	bne.n	8012200 <ethernet_input+0x104>
        etharp_input(p, netif);
 80121e2:	6839      	ldr	r1, [r7, #0]
 80121e4:	6878      	ldr	r0, [r7, #4]
 80121e6:	f7fe f8c1 	bl	801036c <etharp_input>
      break;
 80121ea:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 80121ec:	2300      	movs	r3, #0
 80121ee:	e00c      	b.n	801220a <ethernet_input+0x10e>
    goto free_and_return;
 80121f0:	bf00      	nop
 80121f2:	e006      	b.n	8012202 <ethernet_input+0x106>
        goto free_and_return;
 80121f4:	bf00      	nop
 80121f6:	e004      	b.n	8012202 <ethernet_input+0x106>
        goto free_and_return;
 80121f8:	bf00      	nop
 80121fa:	e002      	b.n	8012202 <ethernet_input+0x106>
        goto free_and_return;
 80121fc:	bf00      	nop
 80121fe:	e000      	b.n	8012202 <ethernet_input+0x106>
        goto free_and_return;
 8012200:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8012202:	6878      	ldr	r0, [r7, #4]
 8012204:	f7f6 ff58 	bl	80090b8 <pbuf_free>
  return ERR_OK;
 8012208:	2300      	movs	r3, #0
}
 801220a:	4618      	mov	r0, r3
 801220c:	3718      	adds	r7, #24
 801220e:	46bd      	mov	sp, r7
 8012210:	bd80      	pop	{r7, pc}
 8012212:	bf00      	nop
 8012214:	08017ad4 	.word	0x08017ad4

08012218 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8012218:	b580      	push	{r7, lr}
 801221a:	b086      	sub	sp, #24
 801221c:	af00      	add	r7, sp, #0
 801221e:	60f8      	str	r0, [r7, #12]
 8012220:	60b9      	str	r1, [r7, #8]
 8012222:	607a      	str	r2, [r7, #4]
 8012224:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8012226:	8c3b      	ldrh	r3, [r7, #32]
 8012228:	4618      	mov	r0, r3
 801222a:	f7f5 fb99 	bl	8007960 <lwip_htons>
 801222e:	4603      	mov	r3, r0
 8012230:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8012232:	210e      	movs	r1, #14
 8012234:	68b8      	ldr	r0, [r7, #8]
 8012236:	f7f6 fea9 	bl	8008f8c <pbuf_add_header>
 801223a:	4603      	mov	r3, r0
 801223c:	2b00      	cmp	r3, #0
 801223e:	d125      	bne.n	801228c <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8012240:	68bb      	ldr	r3, [r7, #8]
 8012242:	685b      	ldr	r3, [r3, #4]
 8012244:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8012246:	693b      	ldr	r3, [r7, #16]
 8012248:	8afa      	ldrh	r2, [r7, #22]
 801224a:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801224c:	693b      	ldr	r3, [r7, #16]
 801224e:	2206      	movs	r2, #6
 8012250:	6839      	ldr	r1, [r7, #0]
 8012252:	4618      	mov	r0, r3
 8012254:	f001 fd7d 	bl	8013d52 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8012258:	693b      	ldr	r3, [r7, #16]
 801225a:	3306      	adds	r3, #6
 801225c:	2206      	movs	r2, #6
 801225e:	6879      	ldr	r1, [r7, #4]
 8012260:	4618      	mov	r0, r3
 8012262:	f001 fd76 	bl	8013d52 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8012266:	68fb      	ldr	r3, [r7, #12]
 8012268:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801226c:	2b06      	cmp	r3, #6
 801226e:	d006      	beq.n	801227e <ethernet_output+0x66>
 8012270:	4b0a      	ldr	r3, [pc, #40]	; (801229c <ethernet_output+0x84>)
 8012272:	f44f 7299 	mov.w	r2, #306	; 0x132
 8012276:	490a      	ldr	r1, [pc, #40]	; (80122a0 <ethernet_output+0x88>)
 8012278:	480a      	ldr	r0, [pc, #40]	; (80122a4 <ethernet_output+0x8c>)
 801227a:	f001 fe15 	bl	8013ea8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801227e:	68fb      	ldr	r3, [r7, #12]
 8012280:	699b      	ldr	r3, [r3, #24]
 8012282:	68b9      	ldr	r1, [r7, #8]
 8012284:	68f8      	ldr	r0, [r7, #12]
 8012286:	4798      	blx	r3
 8012288:	4603      	mov	r3, r0
 801228a:	e002      	b.n	8012292 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801228c:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801228e:	f06f 0301 	mvn.w	r3, #1
}
 8012292:	4618      	mov	r0, r3
 8012294:	3718      	adds	r7, #24
 8012296:	46bd      	mov	sp, r7
 8012298:	bd80      	pop	{r7, pc}
 801229a:	bf00      	nop
 801229c:	0801787c 	.word	0x0801787c
 80122a0:	080178b4 	.word	0x080178b4
 80122a4:	080178e8 	.word	0x080178e8

080122a8 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 80122a8:	b580      	push	{r7, lr}
 80122aa:	b082      	sub	sp, #8
 80122ac:	af00      	add	r7, sp, #0
 80122ae:	6078      	str	r0, [r7, #4]
 80122b0:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 80122b2:	683b      	ldr	r3, [r7, #0]
 80122b4:	2200      	movs	r2, #0
 80122b6:	2104      	movs	r1, #4
 80122b8:	4618      	mov	r0, r3
 80122ba:	f7f1 feff 	bl	80040bc <osMessageQueueNew>
 80122be:	4602      	mov	r2, r0
 80122c0:	687b      	ldr	r3, [r7, #4]
 80122c2:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 80122c4:	687b      	ldr	r3, [r7, #4]
 80122c6:	681b      	ldr	r3, [r3, #0]
 80122c8:	2b00      	cmp	r3, #0
 80122ca:	d102      	bne.n	80122d2 <sys_mbox_new+0x2a>
    return ERR_MEM;
 80122cc:	f04f 33ff 	mov.w	r3, #4294967295
 80122d0:	e000      	b.n	80122d4 <sys_mbox_new+0x2c>

  return ERR_OK;
 80122d2:	2300      	movs	r3, #0
}
 80122d4:	4618      	mov	r0, r3
 80122d6:	3708      	adds	r7, #8
 80122d8:	46bd      	mov	sp, r7
 80122da:	bd80      	pop	{r7, pc}

080122dc <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 80122dc:	b580      	push	{r7, lr}
 80122de:	b084      	sub	sp, #16
 80122e0:	af00      	add	r7, sp, #0
 80122e2:	6078      	str	r0, [r7, #4]
 80122e4:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 80122e6:	687b      	ldr	r3, [r7, #4]
 80122e8:	6818      	ldr	r0, [r3, #0]
 80122ea:	4639      	mov	r1, r7
 80122ec:	2300      	movs	r3, #0
 80122ee:	2200      	movs	r2, #0
 80122f0:	f7f1 ff58 	bl	80041a4 <osMessageQueuePut>
 80122f4:	4603      	mov	r3, r0
 80122f6:	2b00      	cmp	r3, #0
 80122f8:	d102      	bne.n	8012300 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 80122fa:	2300      	movs	r3, #0
 80122fc:	73fb      	strb	r3, [r7, #15]
 80122fe:	e001      	b.n	8012304 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8012300:	23ff      	movs	r3, #255	; 0xff
 8012302:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8012304:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012308:	4618      	mov	r0, r3
 801230a:	3710      	adds	r7, #16
 801230c:	46bd      	mov	sp, r7
 801230e:	bd80      	pop	{r7, pc}

08012310 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8012310:	b580      	push	{r7, lr}
 8012312:	b086      	sub	sp, #24
 8012314:	af00      	add	r7, sp, #0
 8012316:	60f8      	str	r0, [r7, #12]
 8012318:	60b9      	str	r1, [r7, #8]
 801231a:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 801231c:	f7f1 fbde 	bl	8003adc <osKernelGetTickCount>
 8012320:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	2b00      	cmp	r3, #0
 8012326:	d013      	beq.n	8012350 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 8012328:	68fb      	ldr	r3, [r7, #12]
 801232a:	6818      	ldr	r0, [r3, #0]
 801232c:	687b      	ldr	r3, [r7, #4]
 801232e:	2200      	movs	r2, #0
 8012330:	68b9      	ldr	r1, [r7, #8]
 8012332:	f7f1 ff97 	bl	8004264 <osMessageQueueGet>
 8012336:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 8012338:	693b      	ldr	r3, [r7, #16]
 801233a:	2b00      	cmp	r3, #0
 801233c:	d105      	bne.n	801234a <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 801233e:	f7f1 fbcd 	bl	8003adc <osKernelGetTickCount>
 8012342:	4602      	mov	r2, r0
 8012344:	697b      	ldr	r3, [r7, #20]
 8012346:	1ad3      	subs	r3, r2, r3
 8012348:	e00f      	b.n	801236a <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801234a:	f04f 33ff 	mov.w	r3, #4294967295
 801234e:	e00c      	b.n	801236a <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 8012350:	68fb      	ldr	r3, [r7, #12]
 8012352:	6818      	ldr	r0, [r3, #0]
 8012354:	f04f 33ff 	mov.w	r3, #4294967295
 8012358:	2200      	movs	r2, #0
 801235a:	68b9      	ldr	r1, [r7, #8]
 801235c:	f7f1 ff82 	bl	8004264 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 8012360:	f7f1 fbbc 	bl	8003adc <osKernelGetTickCount>
 8012364:	4602      	mov	r2, r0
 8012366:	697b      	ldr	r3, [r7, #20]
 8012368:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 801236a:	4618      	mov	r0, r3
 801236c:	3718      	adds	r7, #24
 801236e:	46bd      	mov	sp, r7
 8012370:	bd80      	pop	{r7, pc}

08012372 <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8012372:	b480      	push	{r7}
 8012374:	b083      	sub	sp, #12
 8012376:	af00      	add	r7, sp, #0
 8012378:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801237a:	687b      	ldr	r3, [r7, #4]
 801237c:	681b      	ldr	r3, [r3, #0]
 801237e:	2b00      	cmp	r3, #0
 8012380:	d101      	bne.n	8012386 <sys_mbox_valid+0x14>
    return 0;
 8012382:	2300      	movs	r3, #0
 8012384:	e000      	b.n	8012388 <sys_mbox_valid+0x16>
  else
    return 1;
 8012386:	2301      	movs	r3, #1
}
 8012388:	4618      	mov	r0, r3
 801238a:	370c      	adds	r7, #12
 801238c:	46bd      	mov	sp, r7
 801238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012392:	4770      	bx	lr

08012394 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8012394:	b580      	push	{r7, lr}
 8012396:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 8012398:	2000      	movs	r0, #0
 801239a:	f7f1 fc61 	bl	8003c60 <osMutexNew>
 801239e:	4603      	mov	r3, r0
 80123a0:	4a01      	ldr	r2, [pc, #4]	; (80123a8 <sys_init+0x14>)
 80123a2:	6013      	str	r3, [r2, #0]
#endif
}
 80123a4:	bf00      	nop
 80123a6:	bd80      	pop	{r7, pc}
 80123a8:	20008370 	.word	0x20008370

080123ac <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 80123ac:	b580      	push	{r7, lr}
 80123ae:	b082      	sub	sp, #8
 80123b0:	af00      	add	r7, sp, #0
 80123b2:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 80123b4:	2000      	movs	r0, #0
 80123b6:	f7f1 fc53 	bl	8003c60 <osMutexNew>
 80123ba:	4602      	mov	r2, r0
 80123bc:	687b      	ldr	r3, [r7, #4]
 80123be:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 80123c0:	687b      	ldr	r3, [r7, #4]
 80123c2:	681b      	ldr	r3, [r3, #0]
 80123c4:	2b00      	cmp	r3, #0
 80123c6:	d102      	bne.n	80123ce <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 80123c8:	f04f 33ff 	mov.w	r3, #4294967295
 80123cc:	e000      	b.n	80123d0 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 80123ce:	2300      	movs	r3, #0
}
 80123d0:	4618      	mov	r0, r3
 80123d2:	3708      	adds	r7, #8
 80123d4:	46bd      	mov	sp, r7
 80123d6:	bd80      	pop	{r7, pc}

080123d8 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 80123d8:	b580      	push	{r7, lr}
 80123da:	b082      	sub	sp, #8
 80123dc:	af00      	add	r7, sp, #0
 80123de:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 80123e0:	687b      	ldr	r3, [r7, #4]
 80123e2:	681b      	ldr	r3, [r3, #0]
 80123e4:	f04f 31ff 	mov.w	r1, #4294967295
 80123e8:	4618      	mov	r0, r3
 80123ea:	f7f1 fcbf 	bl	8003d6c <osMutexAcquire>
#endif
}
 80123ee:	bf00      	nop
 80123f0:	3708      	adds	r7, #8
 80123f2:	46bd      	mov	sp, r7
 80123f4:	bd80      	pop	{r7, pc}

080123f6 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 80123f6:	b580      	push	{r7, lr}
 80123f8:	b082      	sub	sp, #8
 80123fa:	af00      	add	r7, sp, #0
 80123fc:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 80123fe:	687b      	ldr	r3, [r7, #4]
 8012400:	681b      	ldr	r3, [r3, #0]
 8012402:	4618      	mov	r0, r3
 8012404:	f7f1 fcfd 	bl	8003e02 <osMutexRelease>
}
 8012408:	bf00      	nop
 801240a:	3708      	adds	r7, #8
 801240c:	46bd      	mov	sp, r7
 801240e:	bd80      	pop	{r7, pc}

08012410 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8012410:	b580      	push	{r7, lr}
 8012412:	b08e      	sub	sp, #56	; 0x38
 8012414:	af00      	add	r7, sp, #0
 8012416:	60f8      	str	r0, [r7, #12]
 8012418:	60b9      	str	r1, [r7, #8]
 801241a:	607a      	str	r2, [r7, #4]
 801241c:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 801241e:	f107 0314 	add.w	r3, r7, #20
 8012422:	2224      	movs	r2, #36	; 0x24
 8012424:	2100      	movs	r1, #0
 8012426:	4618      	mov	r0, r3
 8012428:	f001 fca1 	bl	8013d6e <memset>
 801242c:	68fb      	ldr	r3, [r7, #12]
 801242e:	617b      	str	r3, [r7, #20]
 8012430:	683b      	ldr	r3, [r7, #0]
 8012432:	62bb      	str	r3, [r7, #40]	; 0x28
 8012434:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012436:	62fb      	str	r3, [r7, #44]	; 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 8012438:	f107 0314 	add.w	r3, r7, #20
 801243c:	461a      	mov	r2, r3
 801243e:	6879      	ldr	r1, [r7, #4]
 8012440:	68b8      	ldr	r0, [r7, #8]
 8012442:	f7f1 fb60 	bl	8003b06 <osThreadNew>
 8012446:	4603      	mov	r3, r0
#endif
}
 8012448:	4618      	mov	r0, r3
 801244a:	3738      	adds	r7, #56	; 0x38
 801244c:	46bd      	mov	sp, r7
 801244e:	bd80      	pop	{r7, pc}

08012450 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8012450:	b580      	push	{r7, lr}
 8012452:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 8012454:	4b04      	ldr	r3, [pc, #16]	; (8012468 <sys_arch_protect+0x18>)
 8012456:	681b      	ldr	r3, [r3, #0]
 8012458:	f04f 31ff 	mov.w	r1, #4294967295
 801245c:	4618      	mov	r0, r3
 801245e:	f7f1 fc85 	bl	8003d6c <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 8012462:	2301      	movs	r3, #1
}
 8012464:	4618      	mov	r0, r3
 8012466:	bd80      	pop	{r7, pc}
 8012468:	20008370 	.word	0x20008370

0801246c <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801246c:	b580      	push	{r7, lr}
 801246e:	b082      	sub	sp, #8
 8012470:	af00      	add	r7, sp, #0
 8012472:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8012474:	4b04      	ldr	r3, [pc, #16]	; (8012488 <sys_arch_unprotect+0x1c>)
 8012476:	681b      	ldr	r3, [r3, #0]
 8012478:	4618      	mov	r0, r3
 801247a:	f7f1 fcc2 	bl	8003e02 <osMutexRelease>
}
 801247e:	bf00      	nop
 8012480:	3708      	adds	r7, #8
 8012482:	46bd      	mov	sp, r7
 8012484:	bd80      	pop	{r7, pc}
 8012486:	bf00      	nop
 8012488:	20008370 	.word	0x20008370

0801248c <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 801248c:	b580      	push	{r7, lr}
 801248e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8012490:	4b06      	ldr	r3, [pc, #24]	; (80124ac <MX_CRC_Init+0x20>)
 8012492:	4a07      	ldr	r2, [pc, #28]	; (80124b0 <MX_CRC_Init+0x24>)
 8012494:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8012496:	4805      	ldr	r0, [pc, #20]	; (80124ac <MX_CRC_Init+0x20>)
 8012498:	f7ee f9e4 	bl	8000864 <HAL_CRC_Init>
 801249c:	4603      	mov	r3, r0
 801249e:	2b00      	cmp	r3, #0
 80124a0:	d001      	beq.n	80124a6 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80124a2:	f000 ff7d 	bl	80133a0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80124a6:	bf00      	nop
 80124a8:	bd80      	pop	{r7, pc}
 80124aa:	bf00      	nop
 80124ac:	20008374 	.word	0x20008374
 80124b0:	40023000 	.word	0x40023000

080124b4 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80124b4:	b480      	push	{r7}
 80124b6:	b085      	sub	sp, #20
 80124b8:	af00      	add	r7, sp, #0
 80124ba:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80124bc:	687b      	ldr	r3, [r7, #4]
 80124be:	681b      	ldr	r3, [r3, #0]
 80124c0:	4a0b      	ldr	r2, [pc, #44]	; (80124f0 <HAL_CRC_MspInit+0x3c>)
 80124c2:	4293      	cmp	r3, r2
 80124c4:	d10d      	bne.n	80124e2 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80124c6:	2300      	movs	r3, #0
 80124c8:	60fb      	str	r3, [r7, #12]
 80124ca:	4b0a      	ldr	r3, [pc, #40]	; (80124f4 <HAL_CRC_MspInit+0x40>)
 80124cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80124ce:	4a09      	ldr	r2, [pc, #36]	; (80124f4 <HAL_CRC_MspInit+0x40>)
 80124d0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80124d4:	6313      	str	r3, [r2, #48]	; 0x30
 80124d6:	4b07      	ldr	r3, [pc, #28]	; (80124f4 <HAL_CRC_MspInit+0x40>)
 80124d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80124da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80124de:	60fb      	str	r3, [r7, #12]
 80124e0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80124e2:	bf00      	nop
 80124e4:	3714      	adds	r7, #20
 80124e6:	46bd      	mov	sp, r7
 80124e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124ec:	4770      	bx	lr
 80124ee:	bf00      	nop
 80124f0:	40023000 	.word	0x40023000
 80124f4:	40023800 	.word	0x40023800

080124f8 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80124f8:	b580      	push	{r7, lr}
 80124fa:	b08e      	sub	sp, #56	; 0x38
 80124fc:	af00      	add	r7, sp, #0
 80124fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012500:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012504:	2200      	movs	r2, #0
 8012506:	601a      	str	r2, [r3, #0]
 8012508:	605a      	str	r2, [r3, #4]
 801250a:	609a      	str	r2, [r3, #8]
 801250c:	60da      	str	r2, [r3, #12]
 801250e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8012510:	687b      	ldr	r3, [r7, #4]
 8012512:	681b      	ldr	r3, [r3, #0]
 8012514:	4a4a      	ldr	r2, [pc, #296]	; (8012640 <HAL_ETH_MspInit+0x148>)
 8012516:	4293      	cmp	r3, r2
 8012518:	f040 808d 	bne.w	8012636 <HAL_ETH_MspInit+0x13e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 801251c:	2300      	movs	r3, #0
 801251e:	623b      	str	r3, [r7, #32]
 8012520:	4b48      	ldr	r3, [pc, #288]	; (8012644 <HAL_ETH_MspInit+0x14c>)
 8012522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012524:	4a47      	ldr	r2, [pc, #284]	; (8012644 <HAL_ETH_MspInit+0x14c>)
 8012526:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 801252a:	6313      	str	r3, [r2, #48]	; 0x30
 801252c:	4b45      	ldr	r3, [pc, #276]	; (8012644 <HAL_ETH_MspInit+0x14c>)
 801252e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012530:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012534:	623b      	str	r3, [r7, #32]
 8012536:	6a3b      	ldr	r3, [r7, #32]
 8012538:	2300      	movs	r3, #0
 801253a:	61fb      	str	r3, [r7, #28]
 801253c:	4b41      	ldr	r3, [pc, #260]	; (8012644 <HAL_ETH_MspInit+0x14c>)
 801253e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012540:	4a40      	ldr	r2, [pc, #256]	; (8012644 <HAL_ETH_MspInit+0x14c>)
 8012542:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8012546:	6313      	str	r3, [r2, #48]	; 0x30
 8012548:	4b3e      	ldr	r3, [pc, #248]	; (8012644 <HAL_ETH_MspInit+0x14c>)
 801254a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801254c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8012550:	61fb      	str	r3, [r7, #28]
 8012552:	69fb      	ldr	r3, [r7, #28]
 8012554:	2300      	movs	r3, #0
 8012556:	61bb      	str	r3, [r7, #24]
 8012558:	4b3a      	ldr	r3, [pc, #232]	; (8012644 <HAL_ETH_MspInit+0x14c>)
 801255a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801255c:	4a39      	ldr	r2, [pc, #228]	; (8012644 <HAL_ETH_MspInit+0x14c>)
 801255e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8012562:	6313      	str	r3, [r2, #48]	; 0x30
 8012564:	4b37      	ldr	r3, [pc, #220]	; (8012644 <HAL_ETH_MspInit+0x14c>)
 8012566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012568:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801256c:	61bb      	str	r3, [r7, #24]
 801256e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8012570:	2300      	movs	r3, #0
 8012572:	617b      	str	r3, [r7, #20]
 8012574:	4b33      	ldr	r3, [pc, #204]	; (8012644 <HAL_ETH_MspInit+0x14c>)
 8012576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012578:	4a32      	ldr	r2, [pc, #200]	; (8012644 <HAL_ETH_MspInit+0x14c>)
 801257a:	f043 0304 	orr.w	r3, r3, #4
 801257e:	6313      	str	r3, [r2, #48]	; 0x30
 8012580:	4b30      	ldr	r3, [pc, #192]	; (8012644 <HAL_ETH_MspInit+0x14c>)
 8012582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012584:	f003 0304 	and.w	r3, r3, #4
 8012588:	617b      	str	r3, [r7, #20]
 801258a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801258c:	2300      	movs	r3, #0
 801258e:	613b      	str	r3, [r7, #16]
 8012590:	4b2c      	ldr	r3, [pc, #176]	; (8012644 <HAL_ETH_MspInit+0x14c>)
 8012592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012594:	4a2b      	ldr	r2, [pc, #172]	; (8012644 <HAL_ETH_MspInit+0x14c>)
 8012596:	f043 0301 	orr.w	r3, r3, #1
 801259a:	6313      	str	r3, [r2, #48]	; 0x30
 801259c:	4b29      	ldr	r3, [pc, #164]	; (8012644 <HAL_ETH_MspInit+0x14c>)
 801259e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80125a0:	f003 0301 	and.w	r3, r3, #1
 80125a4:	613b      	str	r3, [r7, #16]
 80125a6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80125a8:	2300      	movs	r3, #0
 80125aa:	60fb      	str	r3, [r7, #12]
 80125ac:	4b25      	ldr	r3, [pc, #148]	; (8012644 <HAL_ETH_MspInit+0x14c>)
 80125ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80125b0:	4a24      	ldr	r2, [pc, #144]	; (8012644 <HAL_ETH_MspInit+0x14c>)
 80125b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80125b6:	6313      	str	r3, [r2, #48]	; 0x30
 80125b8:	4b22      	ldr	r3, [pc, #136]	; (8012644 <HAL_ETH_MspInit+0x14c>)
 80125ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80125bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80125c0:	60fb      	str	r3, [r7, #12]
 80125c2:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    PG14     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80125c4:	2332      	movs	r3, #50	; 0x32
 80125c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80125c8:	2302      	movs	r3, #2
 80125ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80125cc:	2300      	movs	r3, #0
 80125ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80125d0:	2303      	movs	r3, #3
 80125d2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80125d4:	230b      	movs	r3, #11
 80125d6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80125d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80125dc:	4619      	mov	r1, r3
 80125de:	481a      	ldr	r0, [pc, #104]	; (8012648 <HAL_ETH_MspInit+0x150>)
 80125e0:	f7ef fd40 	bl	8002064 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80125e4:	2386      	movs	r3, #134	; 0x86
 80125e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80125e8:	2302      	movs	r3, #2
 80125ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80125ec:	2300      	movs	r3, #0
 80125ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80125f0:	2303      	movs	r3, #3
 80125f2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80125f4:	230b      	movs	r3, #11
 80125f6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80125f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80125fc:	4619      	mov	r1, r3
 80125fe:	4813      	ldr	r0, [pc, #76]	; (801264c <HAL_ETH_MspInit+0x154>)
 8012600:	f7ef fd30 	bl	8002064 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 8012604:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8012608:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801260a:	2302      	movs	r3, #2
 801260c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801260e:	2300      	movs	r3, #0
 8012610:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012612:	2303      	movs	r3, #3
 8012614:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8012616:	230b      	movs	r3, #11
 8012618:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 801261a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801261e:	4619      	mov	r1, r3
 8012620:	480b      	ldr	r0, [pc, #44]	; (8012650 <HAL_ETH_MspInit+0x158>)
 8012622:	f7ef fd1f 	bl	8002064 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8012626:	2200      	movs	r2, #0
 8012628:	2105      	movs	r1, #5
 801262a:	203d      	movs	r0, #61	; 0x3d
 801262c:	f7ee f8d6 	bl	80007dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8012630:	203d      	movs	r0, #61	; 0x3d
 8012632:	f7ee f8ff 	bl	8000834 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8012636:	bf00      	nop
 8012638:	3738      	adds	r7, #56	; 0x38
 801263a:	46bd      	mov	sp, r7
 801263c:	bd80      	pop	{r7, pc}
 801263e:	bf00      	nop
 8012640:	40028000 	.word	0x40028000
 8012644:	40023800 	.word	0x40023800
 8012648:	40020800 	.word	0x40020800
 801264c:	40020000 	.word	0x40020000
 8012650:	40021800 	.word	0x40021800

08012654 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8012654:	b580      	push	{r7, lr}
 8012656:	b082      	sub	sp, #8
 8012658:	af00      	add	r7, sp, #0
 801265a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 801265c:	4b04      	ldr	r3, [pc, #16]	; (8012670 <HAL_ETH_RxCpltCallback+0x1c>)
 801265e:	681b      	ldr	r3, [r3, #0]
 8012660:	4618      	mov	r0, r3
 8012662:	f7f1 fce7 	bl	8004034 <osSemaphoreRelease>
}
 8012666:	bf00      	nop
 8012668:	3708      	adds	r7, #8
 801266a:	46bd      	mov	sp, r7
 801266c:	bd80      	pop	{r7, pc}
 801266e:	bf00      	nop
 8012670:	2000b41c 	.word	0x2000b41c

08012674 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8012674:	b580      	push	{r7, lr}
 8012676:	b08e      	sub	sp, #56	; 0x38
 8012678:	af00      	add	r7, sp, #0
 801267a:	6078      	str	r0, [r7, #4]
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 801267c:	4b51      	ldr	r3, [pc, #324]	; (80127c4 <low_level_init+0x150>)
 801267e:	4a52      	ldr	r2, [pc, #328]	; (80127c8 <low_level_init+0x154>)
 8012680:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8012682:	4b50      	ldr	r3, [pc, #320]	; (80127c4 <low_level_init+0x150>)
 8012684:	2201      	movs	r2, #1
 8012686:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8012688:	4b4e      	ldr	r3, [pc, #312]	; (80127c4 <low_level_init+0x150>)
 801268a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 801268e:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8012690:	4b4c      	ldr	r3, [pc, #304]	; (80127c4 <low_level_init+0x150>)
 8012692:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8012696:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8710A_PHY_ADDRESS;
 8012698:	4b4a      	ldr	r3, [pc, #296]	; (80127c4 <low_level_init+0x150>)
 801269a:	2200      	movs	r2, #0
 801269c:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 801269e:	2300      	movs	r3, #0
 80126a0:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 80126a2:	2380      	movs	r3, #128	; 0x80
 80126a4:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 80126a6:	23e1      	movs	r3, #225	; 0xe1
 80126a8:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 80126aa:	2300      	movs	r3, #0
 80126ac:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 80126ae:	2300      	movs	r3, #0
 80126b0:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 80126b2:	2300      	movs	r3, #0
 80126b4:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 80126b6:	4a43      	ldr	r2, [pc, #268]	; (80127c4 <low_level_init+0x150>)
 80126b8:	f107 0308 	add.w	r3, r7, #8
 80126bc:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 80126be:	4b41      	ldr	r3, [pc, #260]	; (80127c4 <low_level_init+0x150>)
 80126c0:	2201      	movs	r2, #1
 80126c2:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 80126c4:	4b3f      	ldr	r3, [pc, #252]	; (80127c4 <low_level_init+0x150>)
 80126c6:	2200      	movs	r2, #0
 80126c8:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 80126ca:	4b3e      	ldr	r3, [pc, #248]	; (80127c4 <low_level_init+0x150>)
 80126cc:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80126d0:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80126d2:	483c      	ldr	r0, [pc, #240]	; (80127c4 <low_level_init+0x150>)
 80126d4:	f7ee f8f0 	bl	80008b8 <HAL_ETH_Init>
 80126d8:	4603      	mov	r3, r0
 80126da:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

  if (hal_eth_init_status == HAL_OK)
 80126de:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80126e2:	2b00      	cmp	r3, #0
 80126e4:	d108      	bne.n	80126f8 <low_level_init+0x84>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 80126e6:	687b      	ldr	r3, [r7, #4]
 80126e8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80126ec:	f043 0304 	orr.w	r3, r3, #4
 80126f0:	b2da      	uxtb	r2, r3
 80126f2:	687b      	ldr	r3, [r7, #4]
 80126f4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 80126f8:	2304      	movs	r3, #4
 80126fa:	4a34      	ldr	r2, [pc, #208]	; (80127cc <low_level_init+0x158>)
 80126fc:	4934      	ldr	r1, [pc, #208]	; (80127d0 <low_level_init+0x15c>)
 80126fe:	4831      	ldr	r0, [pc, #196]	; (80127c4 <low_level_init+0x150>)
 8012700:	f7ee fac6 	bl	8000c90 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8012704:	2304      	movs	r3, #4
 8012706:	4a33      	ldr	r2, [pc, #204]	; (80127d4 <low_level_init+0x160>)
 8012708:	4933      	ldr	r1, [pc, #204]	; (80127d8 <low_level_init+0x164>)
 801270a:	482e      	ldr	r0, [pc, #184]	; (80127c4 <low_level_init+0x150>)
 801270c:	f7ee fb28 	bl	8000d60 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8012710:	687b      	ldr	r3, [r7, #4]
 8012712:	2206      	movs	r2, #6
 8012714:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8012718:	4b2a      	ldr	r3, [pc, #168]	; (80127c4 <low_level_init+0x150>)
 801271a:	695b      	ldr	r3, [r3, #20]
 801271c:	781a      	ldrb	r2, [r3, #0]
 801271e:	687b      	ldr	r3, [r7, #4]
 8012720:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8012724:	4b27      	ldr	r3, [pc, #156]	; (80127c4 <low_level_init+0x150>)
 8012726:	695b      	ldr	r3, [r3, #20]
 8012728:	785a      	ldrb	r2, [r3, #1]
 801272a:	687b      	ldr	r3, [r7, #4]
 801272c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8012730:	4b24      	ldr	r3, [pc, #144]	; (80127c4 <low_level_init+0x150>)
 8012732:	695b      	ldr	r3, [r3, #20]
 8012734:	789a      	ldrb	r2, [r3, #2]
 8012736:	687b      	ldr	r3, [r7, #4]
 8012738:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 801273c:	4b21      	ldr	r3, [pc, #132]	; (80127c4 <low_level_init+0x150>)
 801273e:	695b      	ldr	r3, [r3, #20]
 8012740:	78da      	ldrb	r2, [r3, #3]
 8012742:	687b      	ldr	r3, [r7, #4]
 8012744:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8012748:	4b1e      	ldr	r3, [pc, #120]	; (80127c4 <low_level_init+0x150>)
 801274a:	695b      	ldr	r3, [r3, #20]
 801274c:	791a      	ldrb	r2, [r3, #4]
 801274e:	687b      	ldr	r3, [r7, #4]
 8012750:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8012754:	4b1b      	ldr	r3, [pc, #108]	; (80127c4 <low_level_init+0x150>)
 8012756:	695b      	ldr	r3, [r3, #20]
 8012758:	795a      	ldrb	r2, [r3, #5]
 801275a:	687b      	ldr	r3, [r7, #4]
 801275c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 8012760:	687b      	ldr	r3, [r7, #4]
 8012762:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8012766:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8012768:	687b      	ldr	r3, [r7, #4]
 801276a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801276e:	f043 030a 	orr.w	r3, r3, #10
 8012772:	b2da      	uxtb	r2, r3
 8012774:	687b      	ldr	r3, [r7, #4]
 8012776:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  s_xSemaphore = osSemaphoreNew(1, 1, NULL);
 801277a:	2200      	movs	r2, #0
 801277c:	2101      	movs	r1, #1
 801277e:	2001      	movs	r0, #1
 8012780:	f7f1 fb7c 	bl	8003e7c <osSemaphoreNew>
 8012784:	4603      	mov	r3, r0
 8012786:	4a15      	ldr	r2, [pc, #84]	; (80127dc <low_level_init+0x168>)
 8012788:	6013      	str	r3, [r2, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 801278a:	f107 0310 	add.w	r3, r7, #16
 801278e:	2224      	movs	r2, #36	; 0x24
 8012790:	2100      	movs	r1, #0
 8012792:	4618      	mov	r0, r3
 8012794:	f001 faeb 	bl	8013d6e <memset>
  attributes.name = "EthIf";
 8012798:	4b11      	ldr	r3, [pc, #68]	; (80127e0 <low_level_init+0x16c>)
 801279a:	613b      	str	r3, [r7, #16]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 801279c:	f44f 73af 	mov.w	r3, #350	; 0x15e
 80127a0:	627b      	str	r3, [r7, #36]	; 0x24
  attributes.priority = osPriorityRealtime;
 80127a2:	2330      	movs	r3, #48	; 0x30
 80127a4:	62bb      	str	r3, [r7, #40]	; 0x28
  osThreadNew(ethernetif_input, netif, &attributes);
 80127a6:	f107 0310 	add.w	r3, r7, #16
 80127aa:	461a      	mov	r2, r3
 80127ac:	6879      	ldr	r1, [r7, #4]
 80127ae:	480d      	ldr	r0, [pc, #52]	; (80127e4 <low_level_init+0x170>)
 80127b0:	f7f1 f9a9 	bl	8003b06 <osThreadNew>
/* USER CODE END OS_THREAD_NEW_CMSIS_RTOS_V2 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 80127b4:	4803      	ldr	r0, [pc, #12]	; (80127c4 <low_level_init+0x150>)
 80127b6:	f7ee fe0f 	bl	80013d8 <HAL_ETH_Start>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 80127ba:	bf00      	nop
 80127bc:	3738      	adds	r7, #56	; 0x38
 80127be:	46bd      	mov	sp, r7
 80127c0:	bd80      	pop	{r7, pc}
 80127c2:	bf00      	nop
 80127c4:	2000b420 	.word	0x2000b420
 80127c8:	40028000 	.word	0x40028000
 80127cc:	20009c4c 	.word	0x20009c4c
 80127d0:	200083fc 	.word	0x200083fc
 80127d4:	2000847c 	.word	0x2000847c
 80127d8:	2000837c 	.word	0x2000837c
 80127dc:	2000b41c 	.word	0x2000b41c
 80127e0:	08017910 	.word	0x08017910
 80127e4:	08012a89 	.word	0x08012a89

080127e8 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80127e8:	b580      	push	{r7, lr}
 80127ea:	b08a      	sub	sp, #40	; 0x28
 80127ec:	af00      	add	r7, sp, #0
 80127ee:	6078      	str	r0, [r7, #4]
 80127f0:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 80127f2:	4b4b      	ldr	r3, [pc, #300]	; (8012920 <low_level_output+0x138>)
 80127f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80127f6:	689b      	ldr	r3, [r3, #8]
 80127f8:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 80127fa:	2300      	movs	r3, #0
 80127fc:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 80127fe:	2300      	movs	r3, #0
 8012800:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8012802:	2300      	movs	r3, #0
 8012804:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8012806:	2300      	movs	r3, #0
 8012808:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 801280a:	4b45      	ldr	r3, [pc, #276]	; (8012920 <low_level_output+0x138>)
 801280c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801280e:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8012810:	2300      	movs	r3, #0
 8012812:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8012814:	683b      	ldr	r3, [r7, #0]
 8012816:	623b      	str	r3, [r7, #32]
 8012818:	e05a      	b.n	80128d0 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 801281a:	69bb      	ldr	r3, [r7, #24]
 801281c:	681b      	ldr	r3, [r3, #0]
 801281e:	2b00      	cmp	r3, #0
 8012820:	da03      	bge.n	801282a <low_level_output+0x42>
      {
        errval = ERR_USE;
 8012822:	23f8      	movs	r3, #248	; 0xf8
 8012824:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8012828:	e05c      	b.n	80128e4 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 801282a:	6a3b      	ldr	r3, [r7, #32]
 801282c:	895b      	ldrh	r3, [r3, #10]
 801282e:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8012830:	2300      	movs	r3, #0
 8012832:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8012834:	e02f      	b.n	8012896 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8012836:	69fa      	ldr	r2, [r7, #28]
 8012838:	693b      	ldr	r3, [r7, #16]
 801283a:	18d0      	adds	r0, r2, r3
 801283c:	6a3b      	ldr	r3, [r7, #32]
 801283e:	685a      	ldr	r2, [r3, #4]
 8012840:	68bb      	ldr	r3, [r7, #8]
 8012842:	18d1      	adds	r1, r2, r3
 8012844:	693b      	ldr	r3, [r7, #16]
 8012846:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 801284a:	3304      	adds	r3, #4
 801284c:	461a      	mov	r2, r3
 801284e:	f001 fa80 	bl	8013d52 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8012852:	69bb      	ldr	r3, [r7, #24]
 8012854:	68db      	ldr	r3, [r3, #12]
 8012856:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8012858:	69bb      	ldr	r3, [r7, #24]
 801285a:	681b      	ldr	r3, [r3, #0]
 801285c:	2b00      	cmp	r3, #0
 801285e:	da03      	bge.n	8012868 <low_level_output+0x80>
        {
          errval = ERR_USE;
 8012860:	23f8      	movs	r3, #248	; 0xf8
 8012862:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8012866:	e03d      	b.n	80128e4 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8012868:	69bb      	ldr	r3, [r7, #24]
 801286a:	689b      	ldr	r3, [r3, #8]
 801286c:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 801286e:	693a      	ldr	r2, [r7, #16]
 8012870:	68fb      	ldr	r3, [r7, #12]
 8012872:	4413      	add	r3, r2
 8012874:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8012878:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 801287a:	68ba      	ldr	r2, [r7, #8]
 801287c:	693b      	ldr	r3, [r7, #16]
 801287e:	1ad3      	subs	r3, r2, r3
 8012880:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8012884:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8012886:	697a      	ldr	r2, [r7, #20]
 8012888:	693b      	ldr	r3, [r7, #16]
 801288a:	1ad3      	subs	r3, r2, r3
 801288c:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8012890:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8012892:	2300      	movs	r3, #0
 8012894:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8012896:	68fa      	ldr	r2, [r7, #12]
 8012898:	693b      	ldr	r3, [r7, #16]
 801289a:	4413      	add	r3, r2
 801289c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80128a0:	4293      	cmp	r3, r2
 80128a2:	d8c8      	bhi.n	8012836 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 80128a4:	69fa      	ldr	r2, [r7, #28]
 80128a6:	693b      	ldr	r3, [r7, #16]
 80128a8:	18d0      	adds	r0, r2, r3
 80128aa:	6a3b      	ldr	r3, [r7, #32]
 80128ac:	685a      	ldr	r2, [r3, #4]
 80128ae:	68bb      	ldr	r3, [r7, #8]
 80128b0:	4413      	add	r3, r2
 80128b2:	68fa      	ldr	r2, [r7, #12]
 80128b4:	4619      	mov	r1, r3
 80128b6:	f001 fa4c 	bl	8013d52 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 80128ba:	693a      	ldr	r2, [r7, #16]
 80128bc:	68fb      	ldr	r3, [r7, #12]
 80128be:	4413      	add	r3, r2
 80128c0:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 80128c2:	697a      	ldr	r2, [r7, #20]
 80128c4:	68fb      	ldr	r3, [r7, #12]
 80128c6:	4413      	add	r3, r2
 80128c8:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 80128ca:	6a3b      	ldr	r3, [r7, #32]
 80128cc:	681b      	ldr	r3, [r3, #0]
 80128ce:	623b      	str	r3, [r7, #32]
 80128d0:	6a3b      	ldr	r3, [r7, #32]
 80128d2:	2b00      	cmp	r3, #0
 80128d4:	d1a1      	bne.n	801281a <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 80128d6:	6979      	ldr	r1, [r7, #20]
 80128d8:	4811      	ldr	r0, [pc, #68]	; (8012920 <low_level_output+0x138>)
 80128da:	f7ee faad 	bl	8000e38 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 80128de:	2300      	movs	r3, #0
 80128e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 80128e4:	4b0e      	ldr	r3, [pc, #56]	; (8012920 <low_level_output+0x138>)
 80128e6:	681b      	ldr	r3, [r3, #0]
 80128e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80128ec:	695b      	ldr	r3, [r3, #20]
 80128ee:	f003 0320 	and.w	r3, r3, #32
 80128f2:	2b00      	cmp	r3, #0
 80128f4:	d00d      	beq.n	8012912 <low_level_output+0x12a>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 80128f6:	4b0a      	ldr	r3, [pc, #40]	; (8012920 <low_level_output+0x138>)
 80128f8:	681b      	ldr	r3, [r3, #0]
 80128fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80128fe:	461a      	mov	r2, r3
 8012900:	2320      	movs	r3, #32
 8012902:	6153      	str	r3, [r2, #20]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8012904:	4b06      	ldr	r3, [pc, #24]	; (8012920 <low_level_output+0x138>)
 8012906:	681b      	ldr	r3, [r3, #0]
 8012908:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801290c:	461a      	mov	r2, r3
 801290e:	2300      	movs	r3, #0
 8012910:	6053      	str	r3, [r2, #4]
  }
  return errval;
 8012912:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8012916:	4618      	mov	r0, r3
 8012918:	3728      	adds	r7, #40	; 0x28
 801291a:	46bd      	mov	sp, r7
 801291c:	bd80      	pop	{r7, pc}
 801291e:	bf00      	nop
 8012920:	2000b420 	.word	0x2000b420

08012924 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8012924:	b580      	push	{r7, lr}
 8012926:	b08c      	sub	sp, #48	; 0x30
 8012928:	af00      	add	r7, sp, #0
 801292a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 801292c:	2300      	movs	r3, #0
 801292e:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8012930:	2300      	movs	r3, #0
 8012932:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8012934:	2300      	movs	r3, #0
 8012936:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8012938:	2300      	movs	r3, #0
 801293a:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 801293c:	2300      	movs	r3, #0
 801293e:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8012940:	2300      	movs	r3, #0
 8012942:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8012944:	2300      	movs	r3, #0
 8012946:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 8012948:	484e      	ldr	r0, [pc, #312]	; (8012a84 <low_level_input+0x160>)
 801294a:	f7ee fb5f 	bl	800100c <HAL_ETH_GetReceivedFrame_IT>
 801294e:	4603      	mov	r3, r0
 8012950:	2b00      	cmp	r3, #0
 8012952:	d001      	beq.n	8012958 <low_level_input+0x34>

    return NULL;
 8012954:	2300      	movs	r3, #0
 8012956:	e091      	b.n	8012a7c <low_level_input+0x158>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8012958:	4b4a      	ldr	r3, [pc, #296]	; (8012a84 <low_level_input+0x160>)
 801295a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801295c:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 801295e:	4b49      	ldr	r3, [pc, #292]	; (8012a84 <low_level_input+0x160>)
 8012960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012962:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8012964:	89fb      	ldrh	r3, [r7, #14]
 8012966:	2b00      	cmp	r3, #0
 8012968:	d007      	beq.n	801297a <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 801296a:	89fb      	ldrh	r3, [r7, #14]
 801296c:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8012970:	4619      	mov	r1, r3
 8012972:	2000      	movs	r0, #0
 8012974:	f7f6 f8bc 	bl	8008af0 <pbuf_alloc>
 8012978:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 801297a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801297c:	2b00      	cmp	r3, #0
 801297e:	d04b      	beq.n	8012a18 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8012980:	4b40      	ldr	r3, [pc, #256]	; (8012a84 <low_level_input+0x160>)
 8012982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012984:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8012986:	2300      	movs	r3, #0
 8012988:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 801298a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801298c:	62bb      	str	r3, [r7, #40]	; 0x28
 801298e:	e040      	b.n	8012a12 <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8012990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012992:	895b      	ldrh	r3, [r3, #10]
 8012994:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8012996:	2300      	movs	r3, #0
 8012998:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 801299a:	e021      	b.n	80129e0 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 801299c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801299e:	685a      	ldr	r2, [r3, #4]
 80129a0:	69bb      	ldr	r3, [r7, #24]
 80129a2:	18d0      	adds	r0, r2, r3
 80129a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80129a6:	69fb      	ldr	r3, [r7, #28]
 80129a8:	18d1      	adds	r1, r2, r3
 80129aa:	69fb      	ldr	r3, [r7, #28]
 80129ac:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 80129b0:	3304      	adds	r3, #4
 80129b2:	461a      	mov	r2, r3
 80129b4:	f001 f9cd 	bl	8013d52 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80129b8:	6a3b      	ldr	r3, [r7, #32]
 80129ba:	68db      	ldr	r3, [r3, #12]
 80129bc:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 80129be:	6a3b      	ldr	r3, [r7, #32]
 80129c0:	689b      	ldr	r3, [r3, #8]
 80129c2:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 80129c4:	69fa      	ldr	r2, [r7, #28]
 80129c6:	697b      	ldr	r3, [r7, #20]
 80129c8:	4413      	add	r3, r2
 80129ca:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 80129ce:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 80129d0:	69ba      	ldr	r2, [r7, #24]
 80129d2:	69fb      	ldr	r3, [r7, #28]
 80129d4:	1ad3      	subs	r3, r2, r3
 80129d6:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80129da:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 80129dc:	2300      	movs	r3, #0
 80129de:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80129e0:	697a      	ldr	r2, [r7, #20]
 80129e2:	69fb      	ldr	r3, [r7, #28]
 80129e4:	4413      	add	r3, r2
 80129e6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80129ea:	4293      	cmp	r3, r2
 80129ec:	d8d6      	bhi.n	801299c <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 80129ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129f0:	685a      	ldr	r2, [r3, #4]
 80129f2:	69bb      	ldr	r3, [r7, #24]
 80129f4:	18d0      	adds	r0, r2, r3
 80129f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80129f8:	69fb      	ldr	r3, [r7, #28]
 80129fa:	4413      	add	r3, r2
 80129fc:	697a      	ldr	r2, [r7, #20]
 80129fe:	4619      	mov	r1, r3
 8012a00:	f001 f9a7 	bl	8013d52 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8012a04:	69fa      	ldr	r2, [r7, #28]
 8012a06:	697b      	ldr	r3, [r7, #20]
 8012a08:	4413      	add	r3, r2
 8012a0a:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8012a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a0e:	681b      	ldr	r3, [r3, #0]
 8012a10:	62bb      	str	r3, [r7, #40]	; 0x28
 8012a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a14:	2b00      	cmp	r3, #0
 8012a16:	d1bb      	bne.n	8012990 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8012a18:	4b1a      	ldr	r3, [pc, #104]	; (8012a84 <low_level_input+0x160>)
 8012a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012a1c:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8012a1e:	2300      	movs	r3, #0
 8012a20:	613b      	str	r3, [r7, #16]
 8012a22:	e00b      	b.n	8012a3c <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8012a24:	6a3b      	ldr	r3, [r7, #32]
 8012a26:	681b      	ldr	r3, [r3, #0]
 8012a28:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8012a2c:	6a3b      	ldr	r3, [r7, #32]
 8012a2e:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8012a30:	6a3b      	ldr	r3, [r7, #32]
 8012a32:	68db      	ldr	r3, [r3, #12]
 8012a34:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8012a36:	693b      	ldr	r3, [r7, #16]
 8012a38:	3301      	adds	r3, #1
 8012a3a:	613b      	str	r3, [r7, #16]
 8012a3c:	4b11      	ldr	r3, [pc, #68]	; (8012a84 <low_level_input+0x160>)
 8012a3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012a40:	693a      	ldr	r2, [r7, #16]
 8012a42:	429a      	cmp	r2, r3
 8012a44:	d3ee      	bcc.n	8012a24 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 8012a46:	4b0f      	ldr	r3, [pc, #60]	; (8012a84 <low_level_input+0x160>)
 8012a48:	2200      	movs	r2, #0
 8012a4a:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8012a4c:	4b0d      	ldr	r3, [pc, #52]	; (8012a84 <low_level_input+0x160>)
 8012a4e:	681b      	ldr	r3, [r3, #0]
 8012a50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012a54:	695b      	ldr	r3, [r3, #20]
 8012a56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012a5a:	2b00      	cmp	r3, #0
 8012a5c:	d00d      	beq.n	8012a7a <low_level_input+0x156>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8012a5e:	4b09      	ldr	r3, [pc, #36]	; (8012a84 <low_level_input+0x160>)
 8012a60:	681b      	ldr	r3, [r3, #0]
 8012a62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012a66:	461a      	mov	r2, r3
 8012a68:	2380      	movs	r3, #128	; 0x80
 8012a6a:	6153      	str	r3, [r2, #20]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8012a6c:	4b05      	ldr	r3, [pc, #20]	; (8012a84 <low_level_input+0x160>)
 8012a6e:	681b      	ldr	r3, [r3, #0]
 8012a70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012a74:	461a      	mov	r2, r3
 8012a76:	2300      	movs	r3, #0
 8012a78:	6093      	str	r3, [r2, #8]
  }
  return p;
 8012a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8012a7c:	4618      	mov	r0, r3
 8012a7e:	3730      	adds	r7, #48	; 0x30
 8012a80:	46bd      	mov	sp, r7
 8012a82:	bd80      	pop	{r7, pc}
 8012a84:	2000b420 	.word	0x2000b420

08012a88 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 8012a88:	b580      	push	{r7, lr}
 8012a8a:	b084      	sub	sp, #16
 8012a8c:	af00      	add	r7, sp, #0
 8012a8e:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 8012a90:	687b      	ldr	r3, [r7, #4]
 8012a92:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreAcquire(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8012a94:	4b12      	ldr	r3, [pc, #72]	; (8012ae0 <ethernetif_input+0x58>)
 8012a96:	681b      	ldr	r3, [r3, #0]
 8012a98:	f04f 31ff 	mov.w	r1, #4294967295
 8012a9c:	4618      	mov	r0, r3
 8012a9e:	f7f1 fa77 	bl	8003f90 <osSemaphoreAcquire>
 8012aa2:	4603      	mov	r3, r0
 8012aa4:	2b00      	cmp	r3, #0
 8012aa6:	d1f5      	bne.n	8012a94 <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 8012aa8:	480e      	ldr	r0, [pc, #56]	; (8012ae4 <ethernetif_input+0x5c>)
 8012aaa:	f7ff fc95 	bl	80123d8 <sys_mutex_lock>
        p = low_level_input( netif );
 8012aae:	68f8      	ldr	r0, [r7, #12]
 8012ab0:	f7ff ff38 	bl	8012924 <low_level_input>
 8012ab4:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 8012ab6:	68bb      	ldr	r3, [r7, #8]
 8012ab8:	2b00      	cmp	r3, #0
 8012aba:	d00a      	beq.n	8012ad2 <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 8012abc:	68fb      	ldr	r3, [r7, #12]
 8012abe:	691b      	ldr	r3, [r3, #16]
 8012ac0:	68f9      	ldr	r1, [r7, #12]
 8012ac2:	68b8      	ldr	r0, [r7, #8]
 8012ac4:	4798      	blx	r3
 8012ac6:	4603      	mov	r3, r0
 8012ac8:	2b00      	cmp	r3, #0
 8012aca:	d002      	beq.n	8012ad2 <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 8012acc:	68b8      	ldr	r0, [r7, #8]
 8012ace:	f7f6 faf3 	bl	80090b8 <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 8012ad2:	4804      	ldr	r0, [pc, #16]	; (8012ae4 <ethernetif_input+0x5c>)
 8012ad4:	f7ff fc8f 	bl	80123f6 <sys_mutex_unlock>
      } while(p!=NULL);
 8012ad8:	68bb      	ldr	r3, [r7, #8]
 8012ada:	2b00      	cmp	r3, #0
 8012adc:	d1e4      	bne.n	8012aa8 <ethernetif_input+0x20>
    if (osSemaphoreAcquire(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8012ade:	e7d9      	b.n	8012a94 <ethernetif_input+0xc>
 8012ae0:	2000b41c 	.word	0x2000b41c
 8012ae4:	20004abc 	.word	0x20004abc

08012ae8 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8012ae8:	b580      	push	{r7, lr}
 8012aea:	b082      	sub	sp, #8
 8012aec:	af00      	add	r7, sp, #0
 8012aee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8012af0:	687b      	ldr	r3, [r7, #4]
 8012af2:	2b00      	cmp	r3, #0
 8012af4:	d106      	bne.n	8012b04 <ethernetif_init+0x1c>
 8012af6:	4b0e      	ldr	r3, [pc, #56]	; (8012b30 <ethernetif_init+0x48>)
 8012af8:	f240 2226 	movw	r2, #550	; 0x226
 8012afc:	490d      	ldr	r1, [pc, #52]	; (8012b34 <ethernetif_init+0x4c>)
 8012afe:	480e      	ldr	r0, [pc, #56]	; (8012b38 <ethernetif_init+0x50>)
 8012b00:	f001 f9d2 	bl	8013ea8 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8012b04:	687b      	ldr	r3, [r7, #4]
 8012b06:	2273      	movs	r2, #115	; 0x73
 8012b08:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8012b0c:	687b      	ldr	r3, [r7, #4]
 8012b0e:	2274      	movs	r2, #116	; 0x74
 8012b10:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8012b14:	687b      	ldr	r3, [r7, #4]
 8012b16:	4a09      	ldr	r2, [pc, #36]	; (8012b3c <ethernetif_init+0x54>)
 8012b18:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8012b1a:	687b      	ldr	r3, [r7, #4]
 8012b1c:	4a08      	ldr	r2, [pc, #32]	; (8012b40 <ethernetif_init+0x58>)
 8012b1e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8012b20:	6878      	ldr	r0, [r7, #4]
 8012b22:	f7ff fda7 	bl	8012674 <low_level_init>

  return ERR_OK;
 8012b26:	2300      	movs	r3, #0
}
 8012b28:	4618      	mov	r0, r3
 8012b2a:	3708      	adds	r7, #8
 8012b2c:	46bd      	mov	sp, r7
 8012b2e:	bd80      	pop	{r7, pc}
 8012b30:	08017918 	.word	0x08017918
 8012b34:	0801792c 	.word	0x0801792c
 8012b38:	0801793c 	.word	0x0801793c
 8012b3c:	080105b5 	.word	0x080105b5
 8012b40:	080127e9 	.word	0x080127e9

08012b44 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8012b44:	b580      	push	{r7, lr}
 8012b46:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8012b48:	f7ed fd4a 	bl	80005e0 <HAL_GetTick>
 8012b4c:	4603      	mov	r3, r0
}
 8012b4e:	4618      	mov	r0, r3
 8012b50:	bd80      	pop	{r7, pc}
	...

08012b54 <ethernetif_set_link>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void* argument)

{
 8012b54:	b580      	push	{r7, lr}
 8012b56:	b084      	sub	sp, #16
 8012b58:	af00      	add	r7, sp, #0
 8012b5a:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8012b5c:	2300      	movs	r3, #0
 8012b5e:	60bb      	str	r3, [r7, #8]
  struct link_str *link_arg = (struct link_str *)argument;
 8012b60:	687b      	ldr	r3, [r7, #4]
 8012b62:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8012b64:	f107 0308 	add.w	r3, r7, #8
 8012b68:	461a      	mov	r2, r3
 8012b6a:	2101      	movs	r1, #1
 8012b6c:	4816      	ldr	r0, [pc, #88]	; (8012bc8 <ethernetif_set_link+0x74>)
 8012b6e:	f7ee fb4d 	bl	800120c <HAL_ETH_ReadPHYRegister>

    regvalue &= PHY_LINKED_STATUS;
 8012b72:	68bb      	ldr	r3, [r7, #8]
 8012b74:	f003 0304 	and.w	r3, r3, #4
 8012b78:	60bb      	str	r3, [r7, #8]

    /* Check whether the netif link down and the PHY link is up */
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 8012b7a:	68fb      	ldr	r3, [r7, #12]
 8012b7c:	681b      	ldr	r3, [r3, #0]
 8012b7e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012b82:	f003 0304 	and.w	r3, r3, #4
 8012b86:	2b00      	cmp	r3, #0
 8012b88:	d108      	bne.n	8012b9c <ethernetif_set_link+0x48>
 8012b8a:	68bb      	ldr	r3, [r7, #8]
 8012b8c:	2b00      	cmp	r3, #0
 8012b8e:	d005      	beq.n	8012b9c <ethernetif_set_link+0x48>
    {
      /* network cable is connected */
      netif_set_link_up(link_arg->netif);
 8012b90:	68fb      	ldr	r3, [r7, #12]
 8012b92:	681b      	ldr	r3, [r3, #0]
 8012b94:	4618      	mov	r0, r3
 8012b96:	f7f5 fe7d 	bl	8008894 <netif_set_link_up>
 8012b9a:	e011      	b.n	8012bc0 <ethernetif_set_link+0x6c>
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 8012b9c:	68fb      	ldr	r3, [r7, #12]
 8012b9e:	681b      	ldr	r3, [r3, #0]
 8012ba0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012ba4:	089b      	lsrs	r3, r3, #2
 8012ba6:	f003 0301 	and.w	r3, r3, #1
 8012baa:	b2db      	uxtb	r3, r3
 8012bac:	2b00      	cmp	r3, #0
 8012bae:	d007      	beq.n	8012bc0 <ethernetif_set_link+0x6c>
 8012bb0:	68bb      	ldr	r3, [r7, #8]
 8012bb2:	2b00      	cmp	r3, #0
 8012bb4:	d104      	bne.n	8012bc0 <ethernetif_set_link+0x6c>
    {
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
 8012bb6:	68fb      	ldr	r3, [r7, #12]
 8012bb8:	681b      	ldr	r3, [r3, #0]
 8012bba:	4618      	mov	r0, r3
 8012bbc:	f7f5 fe9e 	bl	80088fc <netif_set_link_down>
    }

    /* Suspend thread for 200 ms */
    osDelay(200);
 8012bc0:	20c8      	movs	r0, #200	; 0xc8
 8012bc2:	f7f1 f832 	bl	8003c2a <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8012bc6:	e7cd      	b.n	8012b64 <ethernetif_set_link+0x10>
 8012bc8:	2000b420 	.word	0x2000b420

08012bcc <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8012bcc:	b580      	push	{r7, lr}
 8012bce:	b084      	sub	sp, #16
 8012bd0:	af00      	add	r7, sp, #0
 8012bd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8012bd4:	2300      	movs	r3, #0
 8012bd6:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8012bd8:	2300      	movs	r3, #0
 8012bda:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8012bdc:	687b      	ldr	r3, [r7, #4]
 8012bde:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012be2:	089b      	lsrs	r3, r3, #2
 8012be4:	f003 0301 	and.w	r3, r3, #1
 8012be8:	b2db      	uxtb	r3, r3
 8012bea:	2b00      	cmp	r3, #0
 8012bec:	d079      	beq.n	8012ce2 <ethernetif_update_config+0x116>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8012bee:	4b42      	ldr	r3, [pc, #264]	; (8012cf8 <ethernetif_update_config+0x12c>)
 8012bf0:	685b      	ldr	r3, [r3, #4]
 8012bf2:	2b00      	cmp	r3, #0
 8012bf4:	d03f      	beq.n	8012c76 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8012bf6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8012bfa:	2100      	movs	r1, #0
 8012bfc:	483e      	ldr	r0, [pc, #248]	; (8012cf8 <ethernetif_update_config+0x12c>)
 8012bfe:	f7ee fb79 	bl	80012f4 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 8012c02:	f7ed fced 	bl	80005e0 <HAL_GetTick>
 8012c06:	4603      	mov	r3, r0
 8012c08:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8012c0a:	f107 0308 	add.w	r3, r7, #8
 8012c0e:	461a      	mov	r2, r3
 8012c10:	2101      	movs	r1, #1
 8012c12:	4839      	ldr	r0, [pc, #228]	; (8012cf8 <ethernetif_update_config+0x12c>)
 8012c14:	f7ee fafa 	bl	800120c <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8012c18:	f7ed fce2 	bl	80005e0 <HAL_GetTick>
 8012c1c:	4602      	mov	r2, r0
 8012c1e:	68fb      	ldr	r3, [r7, #12]
 8012c20:	1ad3      	subs	r3, r2, r3
 8012c22:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8012c26:	d828      	bhi.n	8012c7a <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8012c28:	68bb      	ldr	r3, [r7, #8]
 8012c2a:	f003 0320 	and.w	r3, r3, #32
 8012c2e:	2b00      	cmp	r3, #0
 8012c30:	d0eb      	beq.n	8012c0a <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8012c32:	f107 0308 	add.w	r3, r7, #8
 8012c36:	461a      	mov	r2, r3
 8012c38:	2110      	movs	r1, #16
 8012c3a:	482f      	ldr	r0, [pc, #188]	; (8012cf8 <ethernetif_update_config+0x12c>)
 8012c3c:	f7ee fae6 	bl	800120c <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8012c40:	68bb      	ldr	r3, [r7, #8]
 8012c42:	f003 0304 	and.w	r3, r3, #4
 8012c46:	2b00      	cmp	r3, #0
 8012c48:	d004      	beq.n	8012c54 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8012c4a:	4b2b      	ldr	r3, [pc, #172]	; (8012cf8 <ethernetif_update_config+0x12c>)
 8012c4c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8012c50:	60da      	str	r2, [r3, #12]
 8012c52:	e002      	b.n	8012c5a <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8012c54:	4b28      	ldr	r3, [pc, #160]	; (8012cf8 <ethernetif_update_config+0x12c>)
 8012c56:	2200      	movs	r2, #0
 8012c58:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8012c5a:	68bb      	ldr	r3, [r7, #8]
 8012c5c:	f003 0302 	and.w	r3, r3, #2
 8012c60:	2b00      	cmp	r3, #0
 8012c62:	d003      	beq.n	8012c6c <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8012c64:	4b24      	ldr	r3, [pc, #144]	; (8012cf8 <ethernetif_update_config+0x12c>)
 8012c66:	2200      	movs	r2, #0
 8012c68:	609a      	str	r2, [r3, #8]
 8012c6a:	e032      	b.n	8012cd2 <ethernetif_update_config+0x106>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8012c6c:	4b22      	ldr	r3, [pc, #136]	; (8012cf8 <ethernetif_update_config+0x12c>)
 8012c6e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8012c72:	609a      	str	r2, [r3, #8]
 8012c74:	e02d      	b.n	8012cd2 <ethernetif_update_config+0x106>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8012c76:	bf00      	nop
 8012c78:	e000      	b.n	8012c7c <ethernetif_update_config+0xb0>
          goto error;
 8012c7a:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
 8012c7c:	4b1e      	ldr	r3, [pc, #120]	; (8012cf8 <ethernetif_update_config+0x12c>)
 8012c7e:	689b      	ldr	r3, [r3, #8]
 8012c80:	2b00      	cmp	r3, #0
 8012c82:	d009      	beq.n	8012c98 <ethernetif_update_config+0xcc>
 8012c84:	4b1c      	ldr	r3, [pc, #112]	; (8012cf8 <ethernetif_update_config+0x12c>)
 8012c86:	689b      	ldr	r3, [r3, #8]
 8012c88:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8012c8c:	d004      	beq.n	8012c98 <ethernetif_update_config+0xcc>
 8012c8e:	f240 21ce 	movw	r1, #718	; 0x2ce
 8012c92:	481a      	ldr	r0, [pc, #104]	; (8012cfc <ethernetif_update_config+0x130>)
 8012c94:	f000 fb89 	bl	80133aa <assert_failed>
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));
 8012c98:	4b17      	ldr	r3, [pc, #92]	; (8012cf8 <ethernetif_update_config+0x12c>)
 8012c9a:	68db      	ldr	r3, [r3, #12]
 8012c9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8012ca0:	d008      	beq.n	8012cb4 <ethernetif_update_config+0xe8>
 8012ca2:	4b15      	ldr	r3, [pc, #84]	; (8012cf8 <ethernetif_update_config+0x12c>)
 8012ca4:	68db      	ldr	r3, [r3, #12]
 8012ca6:	2b00      	cmp	r3, #0
 8012ca8:	d004      	beq.n	8012cb4 <ethernetif_update_config+0xe8>
 8012caa:	f240 21cf 	movw	r1, #719	; 0x2cf
 8012cae:	4813      	ldr	r0, [pc, #76]	; (8012cfc <ethernetif_update_config+0x130>)
 8012cb0:	f000 fb7b 	bl	80133aa <assert_failed>

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8012cb4:	4b10      	ldr	r3, [pc, #64]	; (8012cf8 <ethernetif_update_config+0x12c>)
 8012cb6:	68db      	ldr	r3, [r3, #12]
 8012cb8:	08db      	lsrs	r3, r3, #3
 8012cba:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8012cbc:	4b0e      	ldr	r3, [pc, #56]	; (8012cf8 <ethernetif_update_config+0x12c>)
 8012cbe:	689b      	ldr	r3, [r3, #8]
 8012cc0:	085b      	lsrs	r3, r3, #1
 8012cc2:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8012cc4:	4313      	orrs	r3, r2
 8012cc6:	b29b      	uxth	r3, r3
 8012cc8:	461a      	mov	r2, r3
 8012cca:	2100      	movs	r1, #0
 8012ccc:	480a      	ldr	r0, [pc, #40]	; (8012cf8 <ethernetif_update_config+0x12c>)
 8012cce:	f7ee fb11 	bl	80012f4 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8012cd2:	2100      	movs	r1, #0
 8012cd4:	4808      	ldr	r0, [pc, #32]	; (8012cf8 <ethernetif_update_config+0x12c>)
 8012cd6:	f7ee fbdd 	bl	8001494 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 8012cda:	4807      	ldr	r0, [pc, #28]	; (8012cf8 <ethernetif_update_config+0x12c>)
 8012cdc:	f7ee fb7c 	bl	80013d8 <HAL_ETH_Start>
 8012ce0:	e002      	b.n	8012ce8 <ethernetif_update_config+0x11c>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8012ce2:	4805      	ldr	r0, [pc, #20]	; (8012cf8 <ethernetif_update_config+0x12c>)
 8012ce4:	f7ee fba7 	bl	8001436 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8012ce8:	6878      	ldr	r0, [r7, #4]
 8012cea:	f000 f809 	bl	8012d00 <ethernetif_notify_conn_changed>
}
 8012cee:	bf00      	nop
 8012cf0:	3710      	adds	r7, #16
 8012cf2:	46bd      	mov	sp, r7
 8012cf4:	bd80      	pop	{r7, pc}
 8012cf6:	bf00      	nop
 8012cf8:	2000b420 	.word	0x2000b420
 8012cfc:	08017918 	.word	0x08017918

08012d00 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8012d00:	b480      	push	{r7}
 8012d02:	b083      	sub	sp, #12
 8012d04:	af00      	add	r7, sp, #0
 8012d06:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8012d08:	bf00      	nop
 8012d0a:	370c      	adds	r7, #12
 8012d0c:	46bd      	mov	sp, r7
 8012d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d12:	4770      	bx	lr

08012d14 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8012d14:	b580      	push	{r7, lr}
 8012d16:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8012d18:	4a04      	ldr	r2, [pc, #16]	; (8012d2c <MX_FREERTOS_Init+0x18>)
 8012d1a:	2100      	movs	r1, #0
 8012d1c:	4804      	ldr	r0, [pc, #16]	; (8012d30 <MX_FREERTOS_Init+0x1c>)
 8012d1e:	f7f0 fef2 	bl	8003b06 <osThreadNew>
 8012d22:	4603      	mov	r3, r0
 8012d24:	4a03      	ldr	r2, [pc, #12]	; (8012d34 <MX_FREERTOS_Init+0x20>)
 8012d26:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8012d28:	bf00      	nop
 8012d2a:	bd80      	pop	{r7, pc}
 8012d2c:	08017ae4 	.word	0x08017ae4
 8012d30:	08012d39 	.word	0x08012d39
 8012d34:	2000b468 	.word	0x2000b468

08012d38 <StartDefaultTask>:
  * @retval None
  */
extern void tcp_echoserver_init(void);
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8012d38:	b580      	push	{r7, lr}
 8012d3a:	b082      	sub	sp, #8
 8012d3c:	af00      	add	r7, sp, #0
 8012d3e:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8012d40:	f000 f93e 	bl	8012fc0 <MX_LWIP_Init>
  tcp_echoserver_init();
 8012d44:	f000 fcb2 	bl	80136ac <tcp_echoserver_init>
  /* USER CODE BEGIN StartDefaultTask */
  static int ms_count = 0;
   /* Infinite loop */
   for(;;)
   {
     if (ms_count > 1000)
 8012d48:	4b0b      	ldr	r3, [pc, #44]	; (8012d78 <StartDefaultTask+0x40>)
 8012d4a:	681b      	ldr	r3, [r3, #0]
 8012d4c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8012d50:	dd08      	ble.n	8012d64 <StartDefaultTask+0x2c>
     {
       ms_count = 0;
 8012d52:	4b09      	ldr	r3, [pc, #36]	; (8012d78 <StartDefaultTask+0x40>)
 8012d54:	2200      	movs	r2, #0
 8012d56:	601a      	str	r2, [r3, #0]
       HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8012d58:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8012d5c:	4807      	ldr	r0, [pc, #28]	; (8012d7c <StartDefaultTask+0x44>)
 8012d5e:	f7ef fc95 	bl	800268c <HAL_GPIO_TogglePin>
 8012d62:	e004      	b.n	8012d6e <StartDefaultTask+0x36>
     }else
     {
       ms_count++;
 8012d64:	4b04      	ldr	r3, [pc, #16]	; (8012d78 <StartDefaultTask+0x40>)
 8012d66:	681b      	ldr	r3, [r3, #0]
 8012d68:	3301      	adds	r3, #1
 8012d6a:	4a03      	ldr	r2, [pc, #12]	; (8012d78 <StartDefaultTask+0x40>)
 8012d6c:	6013      	str	r3, [r2, #0]
     }

     osDelay(1);
 8012d6e:	2001      	movs	r0, #1
 8012d70:	f7f0 ff5b 	bl	8003c2a <osDelay>
     if (ms_count > 1000)
 8012d74:	e7e8      	b.n	8012d48 <StartDefaultTask+0x10>
 8012d76:	bf00      	nop
 8012d78:	2000b46c 	.word	0x2000b46c
 8012d7c:	40020800 	.word	0x40020800

08012d80 <MX_GPIO_Init>:
     PD1   ------> CAN1_TX
     PB5   ------> CAN2_RX
     PB6   ------> CAN2_TX
*/
void MX_GPIO_Init(void)
{
 8012d80:	b580      	push	{r7, lr}
 8012d82:	b08e      	sub	sp, #56	; 0x38
 8012d84:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012d86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012d8a:	2200      	movs	r2, #0
 8012d8c:	601a      	str	r2, [r3, #0]
 8012d8e:	605a      	str	r2, [r3, #4]
 8012d90:	609a      	str	r2, [r3, #8]
 8012d92:	60da      	str	r2, [r3, #12]
 8012d94:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8012d96:	2300      	movs	r3, #0
 8012d98:	623b      	str	r3, [r7, #32]
 8012d9a:	4b81      	ldr	r3, [pc, #516]	; (8012fa0 <MX_GPIO_Init+0x220>)
 8012d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012d9e:	4a80      	ldr	r2, [pc, #512]	; (8012fa0 <MX_GPIO_Init+0x220>)
 8012da0:	f043 0310 	orr.w	r3, r3, #16
 8012da4:	6313      	str	r3, [r2, #48]	; 0x30
 8012da6:	4b7e      	ldr	r3, [pc, #504]	; (8012fa0 <MX_GPIO_Init+0x220>)
 8012da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012daa:	f003 0310 	and.w	r3, r3, #16
 8012dae:	623b      	str	r3, [r7, #32]
 8012db0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8012db2:	2300      	movs	r3, #0
 8012db4:	61fb      	str	r3, [r7, #28]
 8012db6:	4b7a      	ldr	r3, [pc, #488]	; (8012fa0 <MX_GPIO_Init+0x220>)
 8012db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012dba:	4a79      	ldr	r2, [pc, #484]	; (8012fa0 <MX_GPIO_Init+0x220>)
 8012dbc:	f043 0304 	orr.w	r3, r3, #4
 8012dc0:	6313      	str	r3, [r2, #48]	; 0x30
 8012dc2:	4b77      	ldr	r3, [pc, #476]	; (8012fa0 <MX_GPIO_Init+0x220>)
 8012dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012dc6:	f003 0304 	and.w	r3, r3, #4
 8012dca:	61fb      	str	r3, [r7, #28]
 8012dcc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8012dce:	2300      	movs	r3, #0
 8012dd0:	61bb      	str	r3, [r7, #24]
 8012dd2:	4b73      	ldr	r3, [pc, #460]	; (8012fa0 <MX_GPIO_Init+0x220>)
 8012dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012dd6:	4a72      	ldr	r2, [pc, #456]	; (8012fa0 <MX_GPIO_Init+0x220>)
 8012dd8:	f043 0320 	orr.w	r3, r3, #32
 8012ddc:	6313      	str	r3, [r2, #48]	; 0x30
 8012dde:	4b70      	ldr	r3, [pc, #448]	; (8012fa0 <MX_GPIO_Init+0x220>)
 8012de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012de2:	f003 0320 	and.w	r3, r3, #32
 8012de6:	61bb      	str	r3, [r7, #24]
 8012de8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8012dea:	2300      	movs	r3, #0
 8012dec:	617b      	str	r3, [r7, #20]
 8012dee:	4b6c      	ldr	r3, [pc, #432]	; (8012fa0 <MX_GPIO_Init+0x220>)
 8012df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012df2:	4a6b      	ldr	r2, [pc, #428]	; (8012fa0 <MX_GPIO_Init+0x220>)
 8012df4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012df8:	6313      	str	r3, [r2, #48]	; 0x30
 8012dfa:	4b69      	ldr	r3, [pc, #420]	; (8012fa0 <MX_GPIO_Init+0x220>)
 8012dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012dfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012e02:	617b      	str	r3, [r7, #20]
 8012e04:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8012e06:	2300      	movs	r3, #0
 8012e08:	613b      	str	r3, [r7, #16]
 8012e0a:	4b65      	ldr	r3, [pc, #404]	; (8012fa0 <MX_GPIO_Init+0x220>)
 8012e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012e0e:	4a64      	ldr	r2, [pc, #400]	; (8012fa0 <MX_GPIO_Init+0x220>)
 8012e10:	f043 0301 	orr.w	r3, r3, #1
 8012e14:	6313      	str	r3, [r2, #48]	; 0x30
 8012e16:	4b62      	ldr	r3, [pc, #392]	; (8012fa0 <MX_GPIO_Init+0x220>)
 8012e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012e1a:	f003 0301 	and.w	r3, r3, #1
 8012e1e:	613b      	str	r3, [r7, #16]
 8012e20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8012e22:	2300      	movs	r3, #0
 8012e24:	60fb      	str	r3, [r7, #12]
 8012e26:	4b5e      	ldr	r3, [pc, #376]	; (8012fa0 <MX_GPIO_Init+0x220>)
 8012e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012e2a:	4a5d      	ldr	r2, [pc, #372]	; (8012fa0 <MX_GPIO_Init+0x220>)
 8012e2c:	f043 0302 	orr.w	r3, r3, #2
 8012e30:	6313      	str	r3, [r2, #48]	; 0x30
 8012e32:	4b5b      	ldr	r3, [pc, #364]	; (8012fa0 <MX_GPIO_Init+0x220>)
 8012e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012e36:	f003 0302 	and.w	r3, r3, #2
 8012e3a:	60fb      	str	r3, [r7, #12]
 8012e3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8012e3e:	2300      	movs	r3, #0
 8012e40:	60bb      	str	r3, [r7, #8]
 8012e42:	4b57      	ldr	r3, [pc, #348]	; (8012fa0 <MX_GPIO_Init+0x220>)
 8012e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012e46:	4a56      	ldr	r2, [pc, #344]	; (8012fa0 <MX_GPIO_Init+0x220>)
 8012e48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012e4c:	6313      	str	r3, [r2, #48]	; 0x30
 8012e4e:	4b54      	ldr	r3, [pc, #336]	; (8012fa0 <MX_GPIO_Init+0x220>)
 8012e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012e52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012e56:	60bb      	str	r3, [r7, #8]
 8012e58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8012e5a:	2300      	movs	r3, #0
 8012e5c:	607b      	str	r3, [r7, #4]
 8012e5e:	4b50      	ldr	r3, [pc, #320]	; (8012fa0 <MX_GPIO_Init+0x220>)
 8012e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012e62:	4a4f      	ldr	r2, [pc, #316]	; (8012fa0 <MX_GPIO_Init+0x220>)
 8012e64:	f043 0308 	orr.w	r3, r3, #8
 8012e68:	6313      	str	r3, [r2, #48]	; 0x30
 8012e6a:	4b4d      	ldr	r3, [pc, #308]	; (8012fa0 <MX_GPIO_Init+0x220>)
 8012e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012e6e:	f003 0308 	and.w	r3, r3, #8
 8012e72:	607b      	str	r3, [r7, #4]
 8012e74:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8012e76:	2200      	movs	r2, #0
 8012e78:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8012e7c:	4849      	ldr	r0, [pc, #292]	; (8012fa4 <MX_GPIO_Init+0x224>)
 8012e7e:	f7ef fbd3 	bl	8002628 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 PE7 PE8 PE9
                           PE10 PE11 PE12 PE13
                           PE14 PE15 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8012e82:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012e86:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8012e88:	2303      	movs	r3, #3
 8012e8a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012e8c:	2300      	movs	r3, #0
 8012e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8012e90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012e94:	4619      	mov	r1, r3
 8012e96:	4844      	ldr	r0, [pc, #272]	; (8012fa8 <MX_GPIO_Init+0x228>)
 8012e98:	f7ef f8e4 	bl	8002064 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8012e9c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8012ea0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8012ea2:	2301      	movs	r3, #1
 8012ea4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8012ea6:	2302      	movs	r3, #2
 8012ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012eaa:	2300      	movs	r3, #0
 8012eac:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8012eae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012eb2:	4619      	mov	r1, r3
 8012eb4:	483b      	ldr	r0, [pc, #236]	; (8012fa4 <MX_GPIO_Init+0x224>)
 8012eb6:	f7ef f8d5 	bl	8002064 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 PF3
                           PF4 PF5 PF6 PF7
                           PF8 PF9 PF10 PF11
                           PF12 PF13 PF14 PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8012eba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012ebe:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8012ec0:	2303      	movs	r3, #3
 8012ec2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012ec4:	2300      	movs	r3, #0
 8012ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8012ec8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012ecc:	4619      	mov	r1, r3
 8012ece:	4837      	ldr	r0, [pc, #220]	; (8012fac <MX_GPIO_Init+0x22c>)
 8012ed0:	f7ef f8c8 	bl	8002064 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC2 PC3 PC6
                           PC7 PC8 PC9 PC10
                           PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6
 8012ed4:	f641 73cd 	movw	r3, #8141	; 0x1fcd
 8012ed8:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8012eda:	2303      	movs	r3, #3
 8012edc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012ede:	2300      	movs	r3, #0
 8012ee0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8012ee2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012ee6:	4619      	mov	r1, r3
 8012ee8:	482e      	ldr	r0, [pc, #184]	; (8012fa4 <MX_GPIO_Init+0x224>)
 8012eea:	f7ef f8bb 	bl	8002064 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA3 PA4 PA5
                           PA6 PA8 PA9 PA10
                           PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8012eee:	f649 7379 	movw	r3, #40825	; 0x9f79
 8012ef2:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8012ef4:	2303      	movs	r3, #3
 8012ef6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012ef8:	2300      	movs	r3, #0
 8012efa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012efc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012f00:	4619      	mov	r1, r3
 8012f02:	482b      	ldr	r0, [pc, #172]	; (8012fb0 <MX_GPIO_Init+0x230>)
 8012f04:	f7ef f8ae 	bl	8002064 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB3 PB4 PB7
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8012f08:	f64f 739f 	movw	r3, #65439	; 0xff9f
 8012f0c:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8012f0e:	2303      	movs	r3, #3
 8012f10:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012f12:	2300      	movs	r3, #0
 8012f14:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8012f16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012f1a:	4619      	mov	r1, r3
 8012f1c:	4825      	ldr	r0, [pc, #148]	; (8012fb4 <MX_GPIO_Init+0x234>)
 8012f1e:	f7ef f8a1 	bl	8002064 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 PG2 PG3
                           PG4 PG5 PG6 PG7
                           PG8 PG9 PG10 PG12
                           PG15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8012f22:	f249 73ff 	movw	r3, #38911	; 0x97ff
 8012f26:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8012f28:	2303      	movs	r3, #3
 8012f2a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012f2c:	2300      	movs	r3, #0
 8012f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8012f30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012f34:	4619      	mov	r1, r3
 8012f36:	4820      	ldr	r0, [pc, #128]	; (8012fb8 <MX_GPIO_Init+0x238>)
 8012f38:	f7ef f894 	bl	8002064 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PD14 PD15
                           PD2 PD3 PD4 PD5
                           PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8012f3c:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8012f40:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8012f42:	2303      	movs	r3, #3
 8012f44:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012f46:	2300      	movs	r3, #0
 8012f48:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8012f4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012f4e:	4619      	mov	r1, r3
 8012f50:	481a      	ldr	r0, [pc, #104]	; (8012fbc <MX_GPIO_Init+0x23c>)
 8012f52:	f7ef f887 	bl	8002064 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8012f56:	2303      	movs	r3, #3
 8012f58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012f5a:	2302      	movs	r3, #2
 8012f5c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012f5e:	2300      	movs	r3, #0
 8012f60:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012f62:	2303      	movs	r3, #3
 8012f64:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8012f66:	2309      	movs	r3, #9
 8012f68:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8012f6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012f6e:	4619      	mov	r1, r3
 8012f70:	4812      	ldr	r0, [pc, #72]	; (8012fbc <MX_GPIO_Init+0x23c>)
 8012f72:	f7ef f877 	bl	8002064 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8012f76:	2360      	movs	r3, #96	; 0x60
 8012f78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012f7a:	2302      	movs	r3, #2
 8012f7c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012f7e:	2300      	movs	r3, #0
 8012f80:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012f82:	2303      	movs	r3, #3
 8012f84:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8012f86:	2309      	movs	r3, #9
 8012f88:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8012f8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012f8e:	4619      	mov	r1, r3
 8012f90:	4808      	ldr	r0, [pc, #32]	; (8012fb4 <MX_GPIO_Init+0x234>)
 8012f92:	f7ef f867 	bl	8002064 <HAL_GPIO_Init>

}
 8012f96:	bf00      	nop
 8012f98:	3738      	adds	r7, #56	; 0x38
 8012f9a:	46bd      	mov	sp, r7
 8012f9c:	bd80      	pop	{r7, pc}
 8012f9e:	bf00      	nop
 8012fa0:	40023800 	.word	0x40023800
 8012fa4:	40020800 	.word	0x40020800
 8012fa8:	40021000 	.word	0x40021000
 8012fac:	40021400 	.word	0x40021400
 8012fb0:	40020000 	.word	0x40020000
 8012fb4:	40020400 	.word	0x40020400
 8012fb8:	40021800 	.word	0x40021800
 8012fbc:	40020c00 	.word	0x40020c00

08012fc0 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8012fc0:	b580      	push	{r7, lr}
 8012fc2:	b084      	sub	sp, #16
 8012fc4:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8012fc6:	4ba0      	ldr	r3, [pc, #640]	; (8013248 <MX_LWIP_Init+0x288>)
 8012fc8:	22c0      	movs	r2, #192	; 0xc0
 8012fca:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8012fcc:	4b9e      	ldr	r3, [pc, #632]	; (8013248 <MX_LWIP_Init+0x288>)
 8012fce:	22a8      	movs	r2, #168	; 0xa8
 8012fd0:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 8012fd2:	4b9d      	ldr	r3, [pc, #628]	; (8013248 <MX_LWIP_Init+0x288>)
 8012fd4:	2201      	movs	r2, #1
 8012fd6:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 109;
 8012fd8:	4b9b      	ldr	r3, [pc, #620]	; (8013248 <MX_LWIP_Init+0x288>)
 8012fda:	226d      	movs	r2, #109	; 0x6d
 8012fdc:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8012fde:	4b9b      	ldr	r3, [pc, #620]	; (801324c <MX_LWIP_Init+0x28c>)
 8012fe0:	22ff      	movs	r2, #255	; 0xff
 8012fe2:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8012fe4:	4b99      	ldr	r3, [pc, #612]	; (801324c <MX_LWIP_Init+0x28c>)
 8012fe6:	22ff      	movs	r2, #255	; 0xff
 8012fe8:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8012fea:	4b98      	ldr	r3, [pc, #608]	; (801324c <MX_LWIP_Init+0x28c>)
 8012fec:	22ff      	movs	r2, #255	; 0xff
 8012fee:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8012ff0:	4b96      	ldr	r3, [pc, #600]	; (801324c <MX_LWIP_Init+0x28c>)
 8012ff2:	2200      	movs	r2, #0
 8012ff4:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8012ff6:	4b96      	ldr	r3, [pc, #600]	; (8013250 <MX_LWIP_Init+0x290>)
 8012ff8:	22c0      	movs	r2, #192	; 0xc0
 8012ffa:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8012ffc:	4b94      	ldr	r3, [pc, #592]	; (8013250 <MX_LWIP_Init+0x290>)
 8012ffe:	22a8      	movs	r2, #168	; 0xa8
 8013000:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 8013002:	4b93      	ldr	r3, [pc, #588]	; (8013250 <MX_LWIP_Init+0x290>)
 8013004:	2201      	movs	r2, #1
 8013006:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8013008:	4b91      	ldr	r3, [pc, #580]	; (8013250 <MX_LWIP_Init+0x290>)
 801300a:	2201      	movs	r2, #1
 801300c:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 801300e:	2100      	movs	r1, #0
 8013010:	2000      	movs	r0, #0
 8013012:	f7f4 fc5b 	bl	80078cc <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8013016:	4b8c      	ldr	r3, [pc, #560]	; (8013248 <MX_LWIP_Init+0x288>)
 8013018:	781b      	ldrb	r3, [r3, #0]
 801301a:	061a      	lsls	r2, r3, #24
 801301c:	4b8a      	ldr	r3, [pc, #552]	; (8013248 <MX_LWIP_Init+0x288>)
 801301e:	785b      	ldrb	r3, [r3, #1]
 8013020:	041b      	lsls	r3, r3, #16
 8013022:	431a      	orrs	r2, r3
 8013024:	4b88      	ldr	r3, [pc, #544]	; (8013248 <MX_LWIP_Init+0x288>)
 8013026:	789b      	ldrb	r3, [r3, #2]
 8013028:	021b      	lsls	r3, r3, #8
 801302a:	4313      	orrs	r3, r2
 801302c:	4a86      	ldr	r2, [pc, #536]	; (8013248 <MX_LWIP_Init+0x288>)
 801302e:	78d2      	ldrb	r2, [r2, #3]
 8013030:	4313      	orrs	r3, r2
 8013032:	061a      	lsls	r2, r3, #24
 8013034:	4b84      	ldr	r3, [pc, #528]	; (8013248 <MX_LWIP_Init+0x288>)
 8013036:	781b      	ldrb	r3, [r3, #0]
 8013038:	0619      	lsls	r1, r3, #24
 801303a:	4b83      	ldr	r3, [pc, #524]	; (8013248 <MX_LWIP_Init+0x288>)
 801303c:	785b      	ldrb	r3, [r3, #1]
 801303e:	041b      	lsls	r3, r3, #16
 8013040:	4319      	orrs	r1, r3
 8013042:	4b81      	ldr	r3, [pc, #516]	; (8013248 <MX_LWIP_Init+0x288>)
 8013044:	789b      	ldrb	r3, [r3, #2]
 8013046:	021b      	lsls	r3, r3, #8
 8013048:	430b      	orrs	r3, r1
 801304a:	497f      	ldr	r1, [pc, #508]	; (8013248 <MX_LWIP_Init+0x288>)
 801304c:	78c9      	ldrb	r1, [r1, #3]
 801304e:	430b      	orrs	r3, r1
 8013050:	021b      	lsls	r3, r3, #8
 8013052:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8013056:	431a      	orrs	r2, r3
 8013058:	4b7b      	ldr	r3, [pc, #492]	; (8013248 <MX_LWIP_Init+0x288>)
 801305a:	781b      	ldrb	r3, [r3, #0]
 801305c:	0619      	lsls	r1, r3, #24
 801305e:	4b7a      	ldr	r3, [pc, #488]	; (8013248 <MX_LWIP_Init+0x288>)
 8013060:	785b      	ldrb	r3, [r3, #1]
 8013062:	041b      	lsls	r3, r3, #16
 8013064:	4319      	orrs	r1, r3
 8013066:	4b78      	ldr	r3, [pc, #480]	; (8013248 <MX_LWIP_Init+0x288>)
 8013068:	789b      	ldrb	r3, [r3, #2]
 801306a:	021b      	lsls	r3, r3, #8
 801306c:	430b      	orrs	r3, r1
 801306e:	4976      	ldr	r1, [pc, #472]	; (8013248 <MX_LWIP_Init+0x288>)
 8013070:	78c9      	ldrb	r1, [r1, #3]
 8013072:	430b      	orrs	r3, r1
 8013074:	0a1b      	lsrs	r3, r3, #8
 8013076:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801307a:	431a      	orrs	r2, r3
 801307c:	4b72      	ldr	r3, [pc, #456]	; (8013248 <MX_LWIP_Init+0x288>)
 801307e:	781b      	ldrb	r3, [r3, #0]
 8013080:	0619      	lsls	r1, r3, #24
 8013082:	4b71      	ldr	r3, [pc, #452]	; (8013248 <MX_LWIP_Init+0x288>)
 8013084:	785b      	ldrb	r3, [r3, #1]
 8013086:	041b      	lsls	r3, r3, #16
 8013088:	4319      	orrs	r1, r3
 801308a:	4b6f      	ldr	r3, [pc, #444]	; (8013248 <MX_LWIP_Init+0x288>)
 801308c:	789b      	ldrb	r3, [r3, #2]
 801308e:	021b      	lsls	r3, r3, #8
 8013090:	430b      	orrs	r3, r1
 8013092:	496d      	ldr	r1, [pc, #436]	; (8013248 <MX_LWIP_Init+0x288>)
 8013094:	78c9      	ldrb	r1, [r1, #3]
 8013096:	430b      	orrs	r3, r1
 8013098:	0e1b      	lsrs	r3, r3, #24
 801309a:	4313      	orrs	r3, r2
 801309c:	4a6d      	ldr	r2, [pc, #436]	; (8013254 <MX_LWIP_Init+0x294>)
 801309e:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80130a0:	4b6a      	ldr	r3, [pc, #424]	; (801324c <MX_LWIP_Init+0x28c>)
 80130a2:	781b      	ldrb	r3, [r3, #0]
 80130a4:	061a      	lsls	r2, r3, #24
 80130a6:	4b69      	ldr	r3, [pc, #420]	; (801324c <MX_LWIP_Init+0x28c>)
 80130a8:	785b      	ldrb	r3, [r3, #1]
 80130aa:	041b      	lsls	r3, r3, #16
 80130ac:	431a      	orrs	r2, r3
 80130ae:	4b67      	ldr	r3, [pc, #412]	; (801324c <MX_LWIP_Init+0x28c>)
 80130b0:	789b      	ldrb	r3, [r3, #2]
 80130b2:	021b      	lsls	r3, r3, #8
 80130b4:	4313      	orrs	r3, r2
 80130b6:	4a65      	ldr	r2, [pc, #404]	; (801324c <MX_LWIP_Init+0x28c>)
 80130b8:	78d2      	ldrb	r2, [r2, #3]
 80130ba:	4313      	orrs	r3, r2
 80130bc:	061a      	lsls	r2, r3, #24
 80130be:	4b63      	ldr	r3, [pc, #396]	; (801324c <MX_LWIP_Init+0x28c>)
 80130c0:	781b      	ldrb	r3, [r3, #0]
 80130c2:	0619      	lsls	r1, r3, #24
 80130c4:	4b61      	ldr	r3, [pc, #388]	; (801324c <MX_LWIP_Init+0x28c>)
 80130c6:	785b      	ldrb	r3, [r3, #1]
 80130c8:	041b      	lsls	r3, r3, #16
 80130ca:	4319      	orrs	r1, r3
 80130cc:	4b5f      	ldr	r3, [pc, #380]	; (801324c <MX_LWIP_Init+0x28c>)
 80130ce:	789b      	ldrb	r3, [r3, #2]
 80130d0:	021b      	lsls	r3, r3, #8
 80130d2:	430b      	orrs	r3, r1
 80130d4:	495d      	ldr	r1, [pc, #372]	; (801324c <MX_LWIP_Init+0x28c>)
 80130d6:	78c9      	ldrb	r1, [r1, #3]
 80130d8:	430b      	orrs	r3, r1
 80130da:	021b      	lsls	r3, r3, #8
 80130dc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80130e0:	431a      	orrs	r2, r3
 80130e2:	4b5a      	ldr	r3, [pc, #360]	; (801324c <MX_LWIP_Init+0x28c>)
 80130e4:	781b      	ldrb	r3, [r3, #0]
 80130e6:	0619      	lsls	r1, r3, #24
 80130e8:	4b58      	ldr	r3, [pc, #352]	; (801324c <MX_LWIP_Init+0x28c>)
 80130ea:	785b      	ldrb	r3, [r3, #1]
 80130ec:	041b      	lsls	r3, r3, #16
 80130ee:	4319      	orrs	r1, r3
 80130f0:	4b56      	ldr	r3, [pc, #344]	; (801324c <MX_LWIP_Init+0x28c>)
 80130f2:	789b      	ldrb	r3, [r3, #2]
 80130f4:	021b      	lsls	r3, r3, #8
 80130f6:	430b      	orrs	r3, r1
 80130f8:	4954      	ldr	r1, [pc, #336]	; (801324c <MX_LWIP_Init+0x28c>)
 80130fa:	78c9      	ldrb	r1, [r1, #3]
 80130fc:	430b      	orrs	r3, r1
 80130fe:	0a1b      	lsrs	r3, r3, #8
 8013100:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8013104:	431a      	orrs	r2, r3
 8013106:	4b51      	ldr	r3, [pc, #324]	; (801324c <MX_LWIP_Init+0x28c>)
 8013108:	781b      	ldrb	r3, [r3, #0]
 801310a:	0619      	lsls	r1, r3, #24
 801310c:	4b4f      	ldr	r3, [pc, #316]	; (801324c <MX_LWIP_Init+0x28c>)
 801310e:	785b      	ldrb	r3, [r3, #1]
 8013110:	041b      	lsls	r3, r3, #16
 8013112:	4319      	orrs	r1, r3
 8013114:	4b4d      	ldr	r3, [pc, #308]	; (801324c <MX_LWIP_Init+0x28c>)
 8013116:	789b      	ldrb	r3, [r3, #2]
 8013118:	021b      	lsls	r3, r3, #8
 801311a:	430b      	orrs	r3, r1
 801311c:	494b      	ldr	r1, [pc, #300]	; (801324c <MX_LWIP_Init+0x28c>)
 801311e:	78c9      	ldrb	r1, [r1, #3]
 8013120:	430b      	orrs	r3, r1
 8013122:	0e1b      	lsrs	r3, r3, #24
 8013124:	4313      	orrs	r3, r2
 8013126:	4a4c      	ldr	r2, [pc, #304]	; (8013258 <MX_LWIP_Init+0x298>)
 8013128:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 801312a:	4b49      	ldr	r3, [pc, #292]	; (8013250 <MX_LWIP_Init+0x290>)
 801312c:	781b      	ldrb	r3, [r3, #0]
 801312e:	061a      	lsls	r2, r3, #24
 8013130:	4b47      	ldr	r3, [pc, #284]	; (8013250 <MX_LWIP_Init+0x290>)
 8013132:	785b      	ldrb	r3, [r3, #1]
 8013134:	041b      	lsls	r3, r3, #16
 8013136:	431a      	orrs	r2, r3
 8013138:	4b45      	ldr	r3, [pc, #276]	; (8013250 <MX_LWIP_Init+0x290>)
 801313a:	789b      	ldrb	r3, [r3, #2]
 801313c:	021b      	lsls	r3, r3, #8
 801313e:	4313      	orrs	r3, r2
 8013140:	4a43      	ldr	r2, [pc, #268]	; (8013250 <MX_LWIP_Init+0x290>)
 8013142:	78d2      	ldrb	r2, [r2, #3]
 8013144:	4313      	orrs	r3, r2
 8013146:	061a      	lsls	r2, r3, #24
 8013148:	4b41      	ldr	r3, [pc, #260]	; (8013250 <MX_LWIP_Init+0x290>)
 801314a:	781b      	ldrb	r3, [r3, #0]
 801314c:	0619      	lsls	r1, r3, #24
 801314e:	4b40      	ldr	r3, [pc, #256]	; (8013250 <MX_LWIP_Init+0x290>)
 8013150:	785b      	ldrb	r3, [r3, #1]
 8013152:	041b      	lsls	r3, r3, #16
 8013154:	4319      	orrs	r1, r3
 8013156:	4b3e      	ldr	r3, [pc, #248]	; (8013250 <MX_LWIP_Init+0x290>)
 8013158:	789b      	ldrb	r3, [r3, #2]
 801315a:	021b      	lsls	r3, r3, #8
 801315c:	430b      	orrs	r3, r1
 801315e:	493c      	ldr	r1, [pc, #240]	; (8013250 <MX_LWIP_Init+0x290>)
 8013160:	78c9      	ldrb	r1, [r1, #3]
 8013162:	430b      	orrs	r3, r1
 8013164:	021b      	lsls	r3, r3, #8
 8013166:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 801316a:	431a      	orrs	r2, r3
 801316c:	4b38      	ldr	r3, [pc, #224]	; (8013250 <MX_LWIP_Init+0x290>)
 801316e:	781b      	ldrb	r3, [r3, #0]
 8013170:	0619      	lsls	r1, r3, #24
 8013172:	4b37      	ldr	r3, [pc, #220]	; (8013250 <MX_LWIP_Init+0x290>)
 8013174:	785b      	ldrb	r3, [r3, #1]
 8013176:	041b      	lsls	r3, r3, #16
 8013178:	4319      	orrs	r1, r3
 801317a:	4b35      	ldr	r3, [pc, #212]	; (8013250 <MX_LWIP_Init+0x290>)
 801317c:	789b      	ldrb	r3, [r3, #2]
 801317e:	021b      	lsls	r3, r3, #8
 8013180:	430b      	orrs	r3, r1
 8013182:	4933      	ldr	r1, [pc, #204]	; (8013250 <MX_LWIP_Init+0x290>)
 8013184:	78c9      	ldrb	r1, [r1, #3]
 8013186:	430b      	orrs	r3, r1
 8013188:	0a1b      	lsrs	r3, r3, #8
 801318a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801318e:	431a      	orrs	r2, r3
 8013190:	4b2f      	ldr	r3, [pc, #188]	; (8013250 <MX_LWIP_Init+0x290>)
 8013192:	781b      	ldrb	r3, [r3, #0]
 8013194:	0619      	lsls	r1, r3, #24
 8013196:	4b2e      	ldr	r3, [pc, #184]	; (8013250 <MX_LWIP_Init+0x290>)
 8013198:	785b      	ldrb	r3, [r3, #1]
 801319a:	041b      	lsls	r3, r3, #16
 801319c:	4319      	orrs	r1, r3
 801319e:	4b2c      	ldr	r3, [pc, #176]	; (8013250 <MX_LWIP_Init+0x290>)
 80131a0:	789b      	ldrb	r3, [r3, #2]
 80131a2:	021b      	lsls	r3, r3, #8
 80131a4:	430b      	orrs	r3, r1
 80131a6:	492a      	ldr	r1, [pc, #168]	; (8013250 <MX_LWIP_Init+0x290>)
 80131a8:	78c9      	ldrb	r1, [r1, #3]
 80131aa:	430b      	orrs	r3, r1
 80131ac:	0e1b      	lsrs	r3, r3, #24
 80131ae:	4313      	orrs	r3, r2
 80131b0:	4a2a      	ldr	r2, [pc, #168]	; (801325c <MX_LWIP_Init+0x29c>)
 80131b2:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 80131b4:	4b2a      	ldr	r3, [pc, #168]	; (8013260 <MX_LWIP_Init+0x2a0>)
 80131b6:	9302      	str	r3, [sp, #8]
 80131b8:	4b2a      	ldr	r3, [pc, #168]	; (8013264 <MX_LWIP_Init+0x2a4>)
 80131ba:	9301      	str	r3, [sp, #4]
 80131bc:	2300      	movs	r3, #0
 80131be:	9300      	str	r3, [sp, #0]
 80131c0:	4b26      	ldr	r3, [pc, #152]	; (801325c <MX_LWIP_Init+0x29c>)
 80131c2:	4a25      	ldr	r2, [pc, #148]	; (8013258 <MX_LWIP_Init+0x298>)
 80131c4:	4923      	ldr	r1, [pc, #140]	; (8013254 <MX_LWIP_Init+0x294>)
 80131c6:	4828      	ldr	r0, [pc, #160]	; (8013268 <MX_LWIP_Init+0x2a8>)
 80131c8:	f7f5 f904 	bl	80083d4 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80131cc:	4826      	ldr	r0, [pc, #152]	; (8013268 <MX_LWIP_Init+0x2a8>)
 80131ce:	f7f5 fab3 	bl	8008738 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 80131d2:	4b25      	ldr	r3, [pc, #148]	; (8013268 <MX_LWIP_Init+0x2a8>)
 80131d4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80131d8:	089b      	lsrs	r3, r3, #2
 80131da:	f003 0301 	and.w	r3, r3, #1
 80131de:	b2db      	uxtb	r3, r3
 80131e0:	2b00      	cmp	r3, #0
 80131e2:	d003      	beq.n	80131ec <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 80131e4:	4820      	ldr	r0, [pc, #128]	; (8013268 <MX_LWIP_Init+0x2a8>)
 80131e6:	f7f5 fab7 	bl	8008758 <netif_set_up>
 80131ea:	e002      	b.n	80131f2 <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 80131ec:	481e      	ldr	r0, [pc, #120]	; (8013268 <MX_LWIP_Init+0x2a8>)
 80131ee:	f7f5 fb1f 	bl	8008830 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 80131f2:	491e      	ldr	r1, [pc, #120]	; (801326c <MX_LWIP_Init+0x2ac>)
 80131f4:	481c      	ldr	r0, [pc, #112]	; (8013268 <MX_LWIP_Init+0x2a8>)
 80131f6:	f7f5 fbb1 	bl	800895c <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  Netif_LinkSemaphore = osSemaphoreNew(1, 1, NULL);
 80131fa:	2200      	movs	r2, #0
 80131fc:	2101      	movs	r1, #1
 80131fe:	2001      	movs	r0, #1
 8013200:	f7f0 fe3c 	bl	8003e7c <osSemaphoreNew>
 8013204:	4603      	mov	r3, r0
 8013206:	4a1a      	ldr	r2, [pc, #104]	; (8013270 <MX_LWIP_Init+0x2b0>)
 8013208:	6013      	str	r3, [r2, #0]

  link_arg.netif = &gnetif;
 801320a:	4b1a      	ldr	r3, [pc, #104]	; (8013274 <MX_LWIP_Init+0x2b4>)
 801320c:	4a16      	ldr	r2, [pc, #88]	; (8013268 <MX_LWIP_Init+0x2a8>)
 801320e:	601a      	str	r2, [r3, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 8013210:	4b17      	ldr	r3, [pc, #92]	; (8013270 <MX_LWIP_Init+0x2b0>)
 8013212:	681b      	ldr	r3, [r3, #0]
 8013214:	4a17      	ldr	r2, [pc, #92]	; (8013274 <MX_LWIP_Init+0x2b4>)
 8013216:	6053      	str	r3, [r2, #4]
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8013218:	2224      	movs	r2, #36	; 0x24
 801321a:	2100      	movs	r1, #0
 801321c:	4816      	ldr	r0, [pc, #88]	; (8013278 <MX_LWIP_Init+0x2b8>)
 801321e:	f000 fda6 	bl	8013d6e <memset>
  attributes.name = "LinkThr";
 8013222:	4b15      	ldr	r3, [pc, #84]	; (8013278 <MX_LWIP_Init+0x2b8>)
 8013224:	4a15      	ldr	r2, [pc, #84]	; (801327c <MX_LWIP_Init+0x2bc>)
 8013226:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8013228:	4b13      	ldr	r3, [pc, #76]	; (8013278 <MX_LWIP_Init+0x2b8>)
 801322a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801322e:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 8013230:	4b11      	ldr	r3, [pc, #68]	; (8013278 <MX_LWIP_Init+0x2b8>)
 8013232:	2210      	movs	r2, #16
 8013234:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernetif_set_link, &link_arg, &attributes);
 8013236:	4a10      	ldr	r2, [pc, #64]	; (8013278 <MX_LWIP_Init+0x2b8>)
 8013238:	490e      	ldr	r1, [pc, #56]	; (8013274 <MX_LWIP_Init+0x2b4>)
 801323a:	4811      	ldr	r0, [pc, #68]	; (8013280 <MX_LWIP_Init+0x2c0>)
 801323c:	f7f0 fc63 	bl	8003b06 <osThreadNew>
/* USER CODE END OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8013240:	bf00      	nop
 8013242:	46bd      	mov	sp, r7
 8013244:	bd80      	pop	{r7, pc}
 8013246:	bf00      	nop
 8013248:	2000b4bc 	.word	0x2000b4bc
 801324c:	2000b4c0 	.word	0x2000b4c0
 8013250:	2000b4c4 	.word	0x2000b4c4
 8013254:	2000b4b0 	.word	0x2000b4b0
 8013258:	2000b4b4 	.word	0x2000b4b4
 801325c:	2000b4b8 	.word	0x2000b4b8
 8013260:	08007809 	.word	0x08007809
 8013264:	08012ae9 	.word	0x08012ae9
 8013268:	2000b47c 	.word	0x2000b47c
 801326c:	08012bcd 	.word	0x08012bcd
 8013270:	2000b470 	.word	0x2000b470
 8013274:	2000b474 	.word	0x2000b474
 8013278:	2000b4c8 	.word	0x2000b4c8
 801327c:	08017970 	.word	0x08017970
 8013280:	08012b55 	.word	0x08012b55

08013284 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8013284:	b580      	push	{r7, lr}
 8013286:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8013288:	f7ed f974 	bl	8000574 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 801328c:	f000 f80c 	bl	80132a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8013290:	f7ff fd76 	bl	8012d80 <MX_GPIO_Init>
  MX_CRC_Init();
 8013294:	f7ff f8fa 	bl	801248c <MX_CRC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8013298:	f7f0 fbd6 	bl	8003a48 <osKernelInitialize>
  MX_FREERTOS_Init();
 801329c:	f7ff fd3a 	bl	8012d14 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 80132a0:	f7f0 fbf6 	bl	8003a90 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80132a4:	e7fe      	b.n	80132a4 <main+0x20>
	...

080132a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80132a8:	b580      	push	{r7, lr}
 80132aa:	b094      	sub	sp, #80	; 0x50
 80132ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80132ae:	f107 0320 	add.w	r3, r7, #32
 80132b2:	2230      	movs	r2, #48	; 0x30
 80132b4:	2100      	movs	r1, #0
 80132b6:	4618      	mov	r0, r3
 80132b8:	f000 fd59 	bl	8013d6e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80132bc:	f107 030c 	add.w	r3, r7, #12
 80132c0:	2200      	movs	r2, #0
 80132c2:	601a      	str	r2, [r3, #0]
 80132c4:	605a      	str	r2, [r3, #4]
 80132c6:	609a      	str	r2, [r3, #8]
 80132c8:	60da      	str	r2, [r3, #12]
 80132ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80132cc:	2300      	movs	r3, #0
 80132ce:	60bb      	str	r3, [r7, #8]
 80132d0:	4b28      	ldr	r3, [pc, #160]	; (8013374 <SystemClock_Config+0xcc>)
 80132d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80132d4:	4a27      	ldr	r2, [pc, #156]	; (8013374 <SystemClock_Config+0xcc>)
 80132d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80132da:	6413      	str	r3, [r2, #64]	; 0x40
 80132dc:	4b25      	ldr	r3, [pc, #148]	; (8013374 <SystemClock_Config+0xcc>)
 80132de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80132e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80132e4:	60bb      	str	r3, [r7, #8]
 80132e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80132e8:	2300      	movs	r3, #0
 80132ea:	607b      	str	r3, [r7, #4]
 80132ec:	4b22      	ldr	r3, [pc, #136]	; (8013378 <SystemClock_Config+0xd0>)
 80132ee:	681b      	ldr	r3, [r3, #0]
 80132f0:	4a21      	ldr	r2, [pc, #132]	; (8013378 <SystemClock_Config+0xd0>)
 80132f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80132f6:	6013      	str	r3, [r2, #0]
 80132f8:	4b1f      	ldr	r3, [pc, #124]	; (8013378 <SystemClock_Config+0xd0>)
 80132fa:	681b      	ldr	r3, [r3, #0]
 80132fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8013300:	607b      	str	r3, [r7, #4]
 8013302:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8013304:	2302      	movs	r3, #2
 8013306:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8013308:	2301      	movs	r3, #1
 801330a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 801330c:	2310      	movs	r3, #16
 801330e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8013310:	2302      	movs	r3, #2
 8013312:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8013314:	2300      	movs	r3, #0
 8013316:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8013318:	2308      	movs	r3, #8
 801331a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 801331c:	23a8      	movs	r3, #168	; 0xa8
 801331e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8013320:	2302      	movs	r3, #2
 8013322:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8013324:	2304      	movs	r3, #4
 8013326:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8013328:	f107 0320 	add.w	r3, r7, #32
 801332c:	4618      	mov	r0, r3
 801332e:	f7ef f9d5 	bl	80026dc <HAL_RCC_OscConfig>
 8013332:	4603      	mov	r3, r0
 8013334:	2b00      	cmp	r3, #0
 8013336:	d001      	beq.n	801333c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8013338:	f000 f832 	bl	80133a0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 801333c:	230f      	movs	r3, #15
 801333e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8013340:	2302      	movs	r3, #2
 8013342:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8013344:	2300      	movs	r3, #0
 8013346:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8013348:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 801334c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 801334e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013352:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8013354:	f107 030c 	add.w	r3, r7, #12
 8013358:	2105      	movs	r1, #5
 801335a:	4618      	mov	r0, r3
 801335c:	f7ef fce6 	bl	8002d2c <HAL_RCC_ClockConfig>
 8013360:	4603      	mov	r3, r0
 8013362:	2b00      	cmp	r3, #0
 8013364:	d001      	beq.n	801336a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8013366:	f000 f81b 	bl	80133a0 <Error_Handler>
  }
}
 801336a:	bf00      	nop
 801336c:	3750      	adds	r7, #80	; 0x50
 801336e:	46bd      	mov	sp, r7
 8013370:	bd80      	pop	{r7, pc}
 8013372:	bf00      	nop
 8013374:	40023800 	.word	0x40023800
 8013378:	40007000 	.word	0x40007000

0801337c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 801337c:	b580      	push	{r7, lr}
 801337e:	b082      	sub	sp, #8
 8013380:	af00      	add	r7, sp, #0
 8013382:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8013384:	687b      	ldr	r3, [r7, #4]
 8013386:	681b      	ldr	r3, [r3, #0]
 8013388:	4a04      	ldr	r2, [pc, #16]	; (801339c <HAL_TIM_PeriodElapsedCallback+0x20>)
 801338a:	4293      	cmp	r3, r2
 801338c:	d101      	bne.n	8013392 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 801338e:	f7ed f913 	bl	80005b8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8013392:	bf00      	nop
 8013394:	3708      	adds	r7, #8
 8013396:	46bd      	mov	sp, r7
 8013398:	bd80      	pop	{r7, pc}
 801339a:	bf00      	nop
 801339c:	40010000 	.word	0x40010000

080133a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80133a0:	b480      	push	{r7}
 80133a2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80133a4:	b672      	cpsid	i
}
 80133a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80133a8:	e7fe      	b.n	80133a8 <Error_Handler+0x8>

080133aa <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 80133aa:	b480      	push	{r7}
 80133ac:	b083      	sub	sp, #12
 80133ae:	af00      	add	r7, sp, #0
 80133b0:	6078      	str	r0, [r7, #4]
 80133b2:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 80133b4:	bf00      	nop
 80133b6:	370c      	adds	r7, #12
 80133b8:	46bd      	mov	sp, r7
 80133ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133be:	4770      	bx	lr

080133c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80133c0:	b580      	push	{r7, lr}
 80133c2:	b082      	sub	sp, #8
 80133c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80133c6:	2300      	movs	r3, #0
 80133c8:	607b      	str	r3, [r7, #4]
 80133ca:	4b12      	ldr	r3, [pc, #72]	; (8013414 <HAL_MspInit+0x54>)
 80133cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80133ce:	4a11      	ldr	r2, [pc, #68]	; (8013414 <HAL_MspInit+0x54>)
 80133d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80133d4:	6453      	str	r3, [r2, #68]	; 0x44
 80133d6:	4b0f      	ldr	r3, [pc, #60]	; (8013414 <HAL_MspInit+0x54>)
 80133d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80133da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80133de:	607b      	str	r3, [r7, #4]
 80133e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80133e2:	2300      	movs	r3, #0
 80133e4:	603b      	str	r3, [r7, #0]
 80133e6:	4b0b      	ldr	r3, [pc, #44]	; (8013414 <HAL_MspInit+0x54>)
 80133e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80133ea:	4a0a      	ldr	r2, [pc, #40]	; (8013414 <HAL_MspInit+0x54>)
 80133ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80133f0:	6413      	str	r3, [r2, #64]	; 0x40
 80133f2:	4b08      	ldr	r3, [pc, #32]	; (8013414 <HAL_MspInit+0x54>)
 80133f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80133f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80133fa:	603b      	str	r3, [r7, #0]
 80133fc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80133fe:	2200      	movs	r2, #0
 8013400:	210f      	movs	r1, #15
 8013402:	f06f 0001 	mvn.w	r0, #1
 8013406:	f7ed f9e9 	bl	80007dc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 801340a:	bf00      	nop
 801340c:	3708      	adds	r7, #8
 801340e:	46bd      	mov	sp, r7
 8013410:	bd80      	pop	{r7, pc}
 8013412:	bf00      	nop
 8013414:	40023800 	.word	0x40023800

08013418 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8013418:	b580      	push	{r7, lr}
 801341a:	b08c      	sub	sp, #48	; 0x30
 801341c:	af00      	add	r7, sp, #0
 801341e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8013420:	2300      	movs	r3, #0
 8013422:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8013424:	2300      	movs	r3, #0
 8013426:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8013428:	2200      	movs	r2, #0
 801342a:	6879      	ldr	r1, [r7, #4]
 801342c:	2019      	movs	r0, #25
 801342e:	f7ed f9d5 	bl	80007dc <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8013432:	2019      	movs	r0, #25
 8013434:	f7ed f9fe 	bl	8000834 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8013438:	2300      	movs	r3, #0
 801343a:	60fb      	str	r3, [r7, #12]
 801343c:	4b1f      	ldr	r3, [pc, #124]	; (80134bc <HAL_InitTick+0xa4>)
 801343e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013440:	4a1e      	ldr	r2, [pc, #120]	; (80134bc <HAL_InitTick+0xa4>)
 8013442:	f043 0301 	orr.w	r3, r3, #1
 8013446:	6453      	str	r3, [r2, #68]	; 0x44
 8013448:	4b1c      	ldr	r3, [pc, #112]	; (80134bc <HAL_InitTick+0xa4>)
 801344a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801344c:	f003 0301 	and.w	r3, r3, #1
 8013450:	60fb      	str	r3, [r7, #12]
 8013452:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8013454:	f107 0210 	add.w	r2, r7, #16
 8013458:	f107 0314 	add.w	r3, r7, #20
 801345c:	4611      	mov	r1, r2
 801345e:	4618      	mov	r0, r3
 8013460:	f7ef fed8 	bl	8003214 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8013464:	f7ef fec2 	bl	80031ec <HAL_RCC_GetPCLK2Freq>
 8013468:	4603      	mov	r3, r0
 801346a:	005b      	lsls	r3, r3, #1
 801346c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 801346e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013470:	4a13      	ldr	r2, [pc, #76]	; (80134c0 <HAL_InitTick+0xa8>)
 8013472:	fba2 2303 	umull	r2, r3, r2, r3
 8013476:	0c9b      	lsrs	r3, r3, #18
 8013478:	3b01      	subs	r3, #1
 801347a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 801347c:	4b11      	ldr	r3, [pc, #68]	; (80134c4 <HAL_InitTick+0xac>)
 801347e:	4a12      	ldr	r2, [pc, #72]	; (80134c8 <HAL_InitTick+0xb0>)
 8013480:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8013482:	4b10      	ldr	r3, [pc, #64]	; (80134c4 <HAL_InitTick+0xac>)
 8013484:	f240 32e7 	movw	r2, #999	; 0x3e7
 8013488:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 801348a:	4a0e      	ldr	r2, [pc, #56]	; (80134c4 <HAL_InitTick+0xac>)
 801348c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801348e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8013490:	4b0c      	ldr	r3, [pc, #48]	; (80134c4 <HAL_InitTick+0xac>)
 8013492:	2200      	movs	r2, #0
 8013494:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8013496:	4b0b      	ldr	r3, [pc, #44]	; (80134c4 <HAL_InitTick+0xac>)
 8013498:	2200      	movs	r2, #0
 801349a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 801349c:	4809      	ldr	r0, [pc, #36]	; (80134c4 <HAL_InitTick+0xac>)
 801349e:	f7ef feeb 	bl	8003278 <HAL_TIM_Base_Init>
 80134a2:	4603      	mov	r3, r0
 80134a4:	2b00      	cmp	r3, #0
 80134a6:	d104      	bne.n	80134b2 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80134a8:	4806      	ldr	r0, [pc, #24]	; (80134c4 <HAL_InitTick+0xac>)
 80134aa:	f7ef ffdf 	bl	800346c <HAL_TIM_Base_Start_IT>
 80134ae:	4603      	mov	r3, r0
 80134b0:	e000      	b.n	80134b4 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80134b2:	2301      	movs	r3, #1
}
 80134b4:	4618      	mov	r0, r3
 80134b6:	3730      	adds	r7, #48	; 0x30
 80134b8:	46bd      	mov	sp, r7
 80134ba:	bd80      	pop	{r7, pc}
 80134bc:	40023800 	.word	0x40023800
 80134c0:	431bde83 	.word	0x431bde83
 80134c4:	2000b4ec 	.word	0x2000b4ec
 80134c8:	40010000 	.word	0x40010000

080134cc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80134cc:	b580      	push	{r7, lr}
 80134ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80134d0:	4802      	ldr	r0, [pc, #8]	; (80134dc <TIM1_UP_TIM10_IRQHandler+0x10>)
 80134d2:	f7f0 f891 	bl	80035f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80134d6:	bf00      	nop
 80134d8:	bd80      	pop	{r7, pc}
 80134da:	bf00      	nop
 80134dc:	2000b4ec 	.word	0x2000b4ec

080134e0 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 80134e0:	b580      	push	{r7, lr}
 80134e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80134e4:	4802      	ldr	r0, [pc, #8]	; (80134f0 <ETH_IRQHandler+0x10>)
 80134e6:	f7ed fe19 	bl	800111c <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 80134ea:	bf00      	nop
 80134ec:	bd80      	pop	{r7, pc}
 80134ee:	bf00      	nop
 80134f0:	2000b420 	.word	0x2000b420

080134f4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80134f4:	b480      	push	{r7}
 80134f6:	af00      	add	r7, sp, #0
	return 1;
 80134f8:	2301      	movs	r3, #1
}
 80134fa:	4618      	mov	r0, r3
 80134fc:	46bd      	mov	sp, r7
 80134fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013502:	4770      	bx	lr

08013504 <_kill>:

int _kill(int pid, int sig)
{
 8013504:	b480      	push	{r7}
 8013506:	b083      	sub	sp, #12
 8013508:	af00      	add	r7, sp, #0
 801350a:	6078      	str	r0, [r7, #4]
 801350c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 801350e:	4b05      	ldr	r3, [pc, #20]	; (8013524 <_kill+0x20>)
 8013510:	2216      	movs	r2, #22
 8013512:	601a      	str	r2, [r3, #0]
	return -1;
 8013514:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013518:	4618      	mov	r0, r3
 801351a:	370c      	adds	r7, #12
 801351c:	46bd      	mov	sp, r7
 801351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013522:	4770      	bx	lr
 8013524:	2000b548 	.word	0x2000b548

08013528 <_exit>:

void _exit (int status)
{
 8013528:	b580      	push	{r7, lr}
 801352a:	b082      	sub	sp, #8
 801352c:	af00      	add	r7, sp, #0
 801352e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8013530:	f04f 31ff 	mov.w	r1, #4294967295
 8013534:	6878      	ldr	r0, [r7, #4]
 8013536:	f7ff ffe5 	bl	8013504 <_kill>
	while (1) {}		/* Make sure we hang here */
 801353a:	e7fe      	b.n	801353a <_exit+0x12>

0801353c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 801353c:	b580      	push	{r7, lr}
 801353e:	b086      	sub	sp, #24
 8013540:	af00      	add	r7, sp, #0
 8013542:	60f8      	str	r0, [r7, #12]
 8013544:	60b9      	str	r1, [r7, #8]
 8013546:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8013548:	2300      	movs	r3, #0
 801354a:	617b      	str	r3, [r7, #20]
 801354c:	e00a      	b.n	8013564 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 801354e:	f3af 8000 	nop.w
 8013552:	4601      	mov	r1, r0
 8013554:	68bb      	ldr	r3, [r7, #8]
 8013556:	1c5a      	adds	r2, r3, #1
 8013558:	60ba      	str	r2, [r7, #8]
 801355a:	b2ca      	uxtb	r2, r1
 801355c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 801355e:	697b      	ldr	r3, [r7, #20]
 8013560:	3301      	adds	r3, #1
 8013562:	617b      	str	r3, [r7, #20]
 8013564:	697a      	ldr	r2, [r7, #20]
 8013566:	687b      	ldr	r3, [r7, #4]
 8013568:	429a      	cmp	r2, r3
 801356a:	dbf0      	blt.n	801354e <_read+0x12>
	}

return len;
 801356c:	687b      	ldr	r3, [r7, #4]
}
 801356e:	4618      	mov	r0, r3
 8013570:	3718      	adds	r7, #24
 8013572:	46bd      	mov	sp, r7
 8013574:	bd80      	pop	{r7, pc}

08013576 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8013576:	b580      	push	{r7, lr}
 8013578:	b086      	sub	sp, #24
 801357a:	af00      	add	r7, sp, #0
 801357c:	60f8      	str	r0, [r7, #12]
 801357e:	60b9      	str	r1, [r7, #8]
 8013580:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8013582:	2300      	movs	r3, #0
 8013584:	617b      	str	r3, [r7, #20]
 8013586:	e009      	b.n	801359c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8013588:	68bb      	ldr	r3, [r7, #8]
 801358a:	1c5a      	adds	r2, r3, #1
 801358c:	60ba      	str	r2, [r7, #8]
 801358e:	781b      	ldrb	r3, [r3, #0]
 8013590:	4618      	mov	r0, r3
 8013592:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8013596:	697b      	ldr	r3, [r7, #20]
 8013598:	3301      	adds	r3, #1
 801359a:	617b      	str	r3, [r7, #20]
 801359c:	697a      	ldr	r2, [r7, #20]
 801359e:	687b      	ldr	r3, [r7, #4]
 80135a0:	429a      	cmp	r2, r3
 80135a2:	dbf1      	blt.n	8013588 <_write+0x12>
	}
	return len;
 80135a4:	687b      	ldr	r3, [r7, #4]
}
 80135a6:	4618      	mov	r0, r3
 80135a8:	3718      	adds	r7, #24
 80135aa:	46bd      	mov	sp, r7
 80135ac:	bd80      	pop	{r7, pc}

080135ae <_close>:

int _close(int file)
{
 80135ae:	b480      	push	{r7}
 80135b0:	b083      	sub	sp, #12
 80135b2:	af00      	add	r7, sp, #0
 80135b4:	6078      	str	r0, [r7, #4]
	return -1;
 80135b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80135ba:	4618      	mov	r0, r3
 80135bc:	370c      	adds	r7, #12
 80135be:	46bd      	mov	sp, r7
 80135c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135c4:	4770      	bx	lr

080135c6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80135c6:	b480      	push	{r7}
 80135c8:	b083      	sub	sp, #12
 80135ca:	af00      	add	r7, sp, #0
 80135cc:	6078      	str	r0, [r7, #4]
 80135ce:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80135d0:	683b      	ldr	r3, [r7, #0]
 80135d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80135d6:	605a      	str	r2, [r3, #4]
	return 0;
 80135d8:	2300      	movs	r3, #0
}
 80135da:	4618      	mov	r0, r3
 80135dc:	370c      	adds	r7, #12
 80135de:	46bd      	mov	sp, r7
 80135e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135e4:	4770      	bx	lr

080135e6 <_isatty>:

int _isatty(int file)
{
 80135e6:	b480      	push	{r7}
 80135e8:	b083      	sub	sp, #12
 80135ea:	af00      	add	r7, sp, #0
 80135ec:	6078      	str	r0, [r7, #4]
	return 1;
 80135ee:	2301      	movs	r3, #1
}
 80135f0:	4618      	mov	r0, r3
 80135f2:	370c      	adds	r7, #12
 80135f4:	46bd      	mov	sp, r7
 80135f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135fa:	4770      	bx	lr

080135fc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80135fc:	b480      	push	{r7}
 80135fe:	b085      	sub	sp, #20
 8013600:	af00      	add	r7, sp, #0
 8013602:	60f8      	str	r0, [r7, #12]
 8013604:	60b9      	str	r1, [r7, #8]
 8013606:	607a      	str	r2, [r7, #4]
	return 0;
 8013608:	2300      	movs	r3, #0
}
 801360a:	4618      	mov	r0, r3
 801360c:	3714      	adds	r7, #20
 801360e:	46bd      	mov	sp, r7
 8013610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013614:	4770      	bx	lr
	...

08013618 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8013618:	b480      	push	{r7}
 801361a:	b087      	sub	sp, #28
 801361c:	af00      	add	r7, sp, #0
 801361e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8013620:	4a14      	ldr	r2, [pc, #80]	; (8013674 <_sbrk+0x5c>)
 8013622:	4b15      	ldr	r3, [pc, #84]	; (8013678 <_sbrk+0x60>)
 8013624:	1ad3      	subs	r3, r2, r3
 8013626:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8013628:	697b      	ldr	r3, [r7, #20]
 801362a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 801362c:	4b13      	ldr	r3, [pc, #76]	; (801367c <_sbrk+0x64>)
 801362e:	681b      	ldr	r3, [r3, #0]
 8013630:	2b00      	cmp	r3, #0
 8013632:	d102      	bne.n	801363a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8013634:	4b11      	ldr	r3, [pc, #68]	; (801367c <_sbrk+0x64>)
 8013636:	4a12      	ldr	r2, [pc, #72]	; (8013680 <_sbrk+0x68>)
 8013638:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 801363a:	4b10      	ldr	r3, [pc, #64]	; (801367c <_sbrk+0x64>)
 801363c:	681a      	ldr	r2, [r3, #0]
 801363e:	687b      	ldr	r3, [r7, #4]
 8013640:	4413      	add	r3, r2
 8013642:	693a      	ldr	r2, [r7, #16]
 8013644:	429a      	cmp	r2, r3
 8013646:	d205      	bcs.n	8013654 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8013648:	4b0e      	ldr	r3, [pc, #56]	; (8013684 <_sbrk+0x6c>)
 801364a:	220c      	movs	r2, #12
 801364c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 801364e:	f04f 33ff 	mov.w	r3, #4294967295
 8013652:	e009      	b.n	8013668 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8013654:	4b09      	ldr	r3, [pc, #36]	; (801367c <_sbrk+0x64>)
 8013656:	681b      	ldr	r3, [r3, #0]
 8013658:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 801365a:	4b08      	ldr	r3, [pc, #32]	; (801367c <_sbrk+0x64>)
 801365c:	681a      	ldr	r2, [r3, #0]
 801365e:	687b      	ldr	r3, [r7, #4]
 8013660:	4413      	add	r3, r2
 8013662:	4a06      	ldr	r2, [pc, #24]	; (801367c <_sbrk+0x64>)
 8013664:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8013666:	68fb      	ldr	r3, [r7, #12]
}
 8013668:	4618      	mov	r0, r3
 801366a:	371c      	adds	r7, #28
 801366c:	46bd      	mov	sp, r7
 801366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013672:	4770      	bx	lr
 8013674:	20020000 	.word	0x20020000
 8013678:	00000400 	.word	0x00000400
 801367c:	2000b534 	.word	0x2000b534
 8013680:	2000b550 	.word	0x2000b550
 8013684:	2000b548 	.word	0x2000b548

08013688 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8013688:	b480      	push	{r7}
 801368a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 801368c:	4b06      	ldr	r3, [pc, #24]	; (80136a8 <SystemInit+0x20>)
 801368e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013692:	4a05      	ldr	r2, [pc, #20]	; (80136a8 <SystemInit+0x20>)
 8013694:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8013698:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 801369c:	bf00      	nop
 801369e:	46bd      	mov	sp, r7
 80136a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136a4:	4770      	bx	lr
 80136a6:	bf00      	nop
 80136a8:	e000ed00 	.word	0xe000ed00

080136ac <tcp_echoserver_init>:
  * @brief  Initializes the tcp echo server
  * @param  None
  * @retval None
  */
void tcp_echoserver_init(void)
{
 80136ac:	b580      	push	{r7, lr}
 80136ae:	b082      	sub	sp, #8
 80136b0:	af00      	add	r7, sp, #0
  /* create new tcp pcb */
  tcp_echoserver_pcb = tcp_new();
 80136b2:	f7f7 fb55 	bl	800ad60 <tcp_new>
 80136b6:	4603      	mov	r3, r0
 80136b8:	4a16      	ldr	r2, [pc, #88]	; (8013714 <tcp_echoserver_init+0x68>)
 80136ba:	6013      	str	r3, [r2, #0]
  // The memory block is dynamically assigned, and it is necessary to judge whether it is created.
  if (tcp_echoserver_pcb != NULL)
 80136bc:	4b15      	ldr	r3, [pc, #84]	; (8013714 <tcp_echoserver_init+0x68>)
 80136be:	681b      	ldr	r3, [r3, #0]
 80136c0:	2b00      	cmp	r3, #0
 80136c2:	d022      	beq.n	801370a <tcp_echoserver_init+0x5e>
    err_t err;

    /*
    	     For the TCP control block we created, bind the first IP of this unit, and port 7
    */
    err = tcp_bind(tcp_echoserver_pcb, IP_ADDR_ANY, 7);
 80136c4:	4b13      	ldr	r3, [pc, #76]	; (8013714 <tcp_echoserver_init+0x68>)
 80136c6:	681b      	ldr	r3, [r3, #0]
 80136c8:	2207      	movs	r2, #7
 80136ca:	4913      	ldr	r1, [pc, #76]	; (8013718 <tcp_echoserver_init+0x6c>)
 80136cc:	4618      	mov	r0, r3
 80136ce:	f7f6 faa3 	bl	8009c18 <tcp_bind>
 80136d2:	4603      	mov	r3, r0
 80136d4:	71fb      	strb	r3, [r7, #7]

    if (err == ERR_OK)
 80136d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80136da:	2b00      	cmp	r3, #0
 80136dc:	d10f      	bne.n	80136fe <tcp_echoserver_init+0x52>
    {
      /*
      	       Open monitor
      	       Monitor return value is a new TCP control block. If you listen success, the previous control block will release it.
      */
      tcp_echoserver_pcb = tcp_listen(tcp_echoserver_pcb);
 80136de:	4b0d      	ldr	r3, [pc, #52]	; (8013714 <tcp_echoserver_init+0x68>)
 80136e0:	681b      	ldr	r3, [r3, #0]
 80136e2:	21ff      	movs	r1, #255	; 0xff
 80136e4:	4618      	mov	r0, r3
 80136e6:	f7f6 fb4f 	bl	8009d88 <tcp_listen_with_backlog>
 80136ea:	4603      	mov	r3, r0
 80136ec:	4a09      	ldr	r2, [pc, #36]	; (8013714 <tcp_echoserver_init+0x68>)
 80136ee:	6013      	str	r3, [r2, #0]

      /*
      	       Waiting for client connection
      	       This is implemented in the form of a callback, that is, TCP_ECHOSERVER_ACCEPT
      */
      tcp_accept(tcp_echoserver_pcb, tcp_echoserver_accept);
 80136f0:	4b08      	ldr	r3, [pc, #32]	; (8013714 <tcp_echoserver_init+0x68>)
 80136f2:	681b      	ldr	r3, [r3, #0]
 80136f4:	4909      	ldr	r1, [pc, #36]	; (801371c <tcp_echoserver_init+0x70>)
 80136f6:	4618      	mov	r0, r3
 80136f8:	f7f7 fbb2 	bl	800ae60 <tcp_accept>
      	       If the binding failed, release the TCP control block
      */
      memp_free(MEMP_TCP_PCB, tcp_echoserver_pcb);
    }
  }
}
 80136fc:	e005      	b.n	801370a <tcp_echoserver_init+0x5e>
      memp_free(MEMP_TCP_PCB, tcp_echoserver_pcb);
 80136fe:	4b05      	ldr	r3, [pc, #20]	; (8013714 <tcp_echoserver_init+0x68>)
 8013700:	681b      	ldr	r3, [r3, #0]
 8013702:	4619      	mov	r1, r3
 8013704:	2001      	movs	r0, #1
 8013706:	f7f4 fe33 	bl	8008370 <memp_free>
}
 801370a:	bf00      	nop
 801370c:	3708      	adds	r7, #8
 801370e:	46bd      	mov	sp, r7
 8013710:	bd80      	pop	{r7, pc}
 8013712:	bf00      	nop
 8013714:	2000b538 	.word	0x2000b538
 8013718:	08017ad0 	.word	0x08017ad0
 801371c:	08013721 	.word	0x08013721

08013720 <tcp_echoserver_accept>:
     * @Param newPCB: Point to the control block of the client's TCP
  * @param  err: not used
  * @retval err_t: error status
  */
static err_t tcp_echoserver_accept(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 8013720:	b580      	push	{r7, lr}
 8013722:	b086      	sub	sp, #24
 8013724:	af00      	add	r7, sp, #0
 8013726:	60f8      	str	r0, [r7, #12]
 8013728:	60b9      	str	r1, [r7, #8]
 801372a:	4613      	mov	r3, r2
 801372c:	71fb      	strb	r3, [r7, #7]

  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  /* Set the priority of the client's TCP to the lowest */
  tcp_setprio(newpcb, TCP_PRIO_MIN);
 801372e:	2101      	movs	r1, #1
 8013730:	68b8      	ldr	r0, [r7, #8]
 8013732:	f7f7 f923 	bl	800a97c <tcp_setprio>

  /* Dynamically assigned TCP_ECHOSERVER_STRUCT */
  es = (struct tcp_echoserver_struct *)mem_malloc(sizeof(struct tcp_echoserver_struct));
 8013736:	200c      	movs	r0, #12
 8013738:	f7f4 fc46 	bl	8007fc8 <mem_malloc>
 801373c:	6138      	str	r0, [r7, #16]
  // Only involve dynamic allocation, it is necessary to judge whether the return address is correct.
    if (es != NULL)
 801373e:	693b      	ldr	r3, [r7, #16]
 8013740:	2b00      	cmp	r3, #0
 8013742:	d01f      	beq.n	8013784 <tcp_echoserver_accept+0x64>
  {
    // The status of the current Server is completed for customer access
    es->state = ES_ACCEPTED;
 8013744:	693b      	ldr	r3, [r7, #16]
 8013746:	2201      	movs	r2, #1
 8013748:	701a      	strb	r2, [r3, #0]
    // PCB points to the customer's TCP control block
    es->pcb = newpcb;
 801374a:	693b      	ldr	r3, [r7, #16]
 801374c:	68ba      	ldr	r2, [r7, #8]
 801374e:	605a      	str	r2, [r3, #4]
    // Researchers, assignment is 0
    es->retries = 0;
 8013750:	693b      	ldr	r3, [r7, #16]
 8013752:	2200      	movs	r2, #0
 8013754:	705a      	strb	r2, [r3, #1]
    // Data receiving / send buffer points to empty
    es->p = NULL;
 8013756:	693b      	ldr	r3, [r7, #16]
 8013758:	2200      	movs	r2, #0
 801375a:	609a      	str	r2, [r3, #8]

    /*
    	     There are a lot of members in each PCB control block. There is a member to store parameters related to the current TCP.
    	     TCP_ECHOSERVER_STRUCT with our entire program, as a parameter is incorporated into our PCB control block
    */
    tcp_arg(newpcb, es);
 801375c:	6939      	ldr	r1, [r7, #16]
 801375e:	68b8      	ldr	r0, [r7, #8]
 8013760:	f7f7 fb06 	bl	800ad70 <tcp_arg>

    /*
    	     Initialize the received callback function TCP_ECHOSERVER_RECV
    */
    tcp_recv(newpcb, tcp_echoserver_recv);
 8013764:	490d      	ldr	r1, [pc, #52]	; (801379c <tcp_echoserver_accept+0x7c>)
 8013766:	68b8      	ldr	r0, [r7, #8]
 8013768:	f7f7 fb14 	bl	800ad94 <tcp_recv>

    /* Tune function after initialization errors */
    tcp_err(newpcb, tcp_echoserver_error);
 801376c:	490c      	ldr	r1, [pc, #48]	; (80137a0 <tcp_echoserver_accept+0x80>)
 801376e:	68b8      	ldr	r0, [r7, #8]
 8013770:	f7f7 fb54 	bl	800ae1c <tcp_err>

    /* Initialize the callback function of the polling, but the intercal value is 0, that is, the polling function is not enabled */
    tcp_poll(newpcb, tcp_echoserver_poll, 0);
 8013774:	2200      	movs	r2, #0
 8013776:	490b      	ldr	r1, [pc, #44]	; (80137a4 <tcp_echoserver_accept+0x84>)
 8013778:	68b8      	ldr	r0, [r7, #8]
 801377a:	f7f7 fb89 	bl	800ae90 <tcp_poll>

    ret_err = ERR_OK;
 801377e:	2300      	movs	r3, #0
 8013780:	75fb      	strb	r3, [r7, #23]
 8013782:	e005      	b.n	8013790 <tcp_echoserver_accept+0x70>
  }// Create TCP_ECHOSERVER_STRUCT failed
  else
  {
    /* Turn off TCP connection */
    tcp_echoserver_connection_close(newpcb, es);
 8013784:	6939      	ldr	r1, [r7, #16]
 8013786:	68b8      	ldr	r0, [r7, #8]
 8013788:	f000 f965 	bl	8013a56 <tcp_echoserver_connection_close>
    /* Return to Memory Allocation Failure */
    ret_err = ERR_MEM;
 801378c:	23ff      	movs	r3, #255	; 0xff
 801378e:	75fb      	strb	r3, [r7, #23]
  }
  return ret_err;
 8013790:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013794:	4618      	mov	r0, r3
 8013796:	3718      	adds	r7, #24
 8013798:	46bd      	mov	sp, r7
 801379a:	bd80      	pop	{r7, pc}
 801379c:	080137a9 	.word	0x080137a9
 80137a0:	080138dd 	.word	0x080138dd
 80137a4:	08013901 	.word	0x08013901

080137a8 <tcp_echoserver_recv>:
     * @Param PBUF: Points to the buffer that receives the data, this PBUF is automatically assigned after receiving the data inside the LWIP.
     * @Param Err: Error message
  * @retval err_t: error code
  */
static err_t tcp_echoserver_recv(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err)
{
 80137a8:	b580      	push	{r7, lr}
 80137aa:	b088      	sub	sp, #32
 80137ac:	af00      	add	r7, sp, #0
 80137ae:	60f8      	str	r0, [r7, #12]
 80137b0:	60b9      	str	r1, [r7, #8]
 80137b2:	607a      	str	r2, [r7, #4]
 80137b4:	70fb      	strb	r3, [r7, #3]
  struct tcp_echoserver_struct *es;
  err_t ret_err;

  LWIP_ASSERT("arg != NULL",arg != NULL);
 80137b6:	68fb      	ldr	r3, [r7, #12]
 80137b8:	2b00      	cmp	r3, #0
 80137ba:	d105      	bne.n	80137c8 <tcp_echoserver_recv+0x20>
 80137bc:	4b43      	ldr	r3, [pc, #268]	; (80138cc <tcp_echoserver_recv+0x124>)
 80137be:	22a6      	movs	r2, #166	; 0xa6
 80137c0:	4943      	ldr	r1, [pc, #268]	; (80138d0 <tcp_echoserver_recv+0x128>)
 80137c2:	4844      	ldr	r0, [pc, #272]	; (80138d4 <tcp_echoserver_recv+0x12c>)
 80137c4:	f000 fb70 	bl	8013ea8 <iprintf>
  // Get the current TCP_ECHOSERVER_STRUCT
  es = (struct tcp_echoserver_struct *)arg;
 80137c8:	68fb      	ldr	r3, [r7, #12]
 80137ca:	61bb      	str	r3, [r7, #24]

  /* The received data is empty */
  if (p == NULL)
 80137cc:	687b      	ldr	r3, [r7, #4]
 80137ce:	2b00      	cmp	r3, #0
 80137d0:	d116      	bne.n	8013800 <tcp_echoserver_recv+0x58>
  {
    /* Change state is off */
    es->state = ES_CLOSING;
 80137d2:	69bb      	ldr	r3, [r7, #24]
 80137d4:	2203      	movs	r2, #3
 80137d6:	701a      	strb	r2, [r3, #0]
    // Judgment Do we also need to send data
    if(es->p == NULL)
 80137d8:	69bb      	ldr	r3, [r7, #24]
 80137da:	689b      	ldr	r3, [r3, #8]
 80137dc:	2b00      	cmp	r3, #0
 80137de:	d104      	bne.n	80137ea <tcp_echoserver_recv+0x42>
    {
       /* Do not send, directly turn off TCP connection */
       tcp_echoserver_connection_close(tpcb, es);
 80137e0:	69b9      	ldr	r1, [r7, #24]
 80137e2:	68b8      	ldr	r0, [r7, #8]
 80137e4:	f000 f937 	bl	8013a56 <tcp_echoserver_connection_close>
 80137e8:	e007      	b.n	80137fa <tcp_echoserver_recv+0x52>
    }
    else
    {
      /* Create a callback function after sending data */
      tcp_sent(tpcb, tcp_echoserver_sent);
 80137ea:	493b      	ldr	r1, [pc, #236]	; (80138d8 <tcp_echoserver_recv+0x130>)
 80137ec:	68b8      	ldr	r0, [r7, #8]
 80137ee:	f7f7 faf3 	bl	800add8 <tcp_sent>

      /* Trigger send, real send to NIC */
      tcp_echoserver_send(tpcb, es);
 80137f2:	69b9      	ldr	r1, [r7, #24]
 80137f4:	68b8      	ldr	r0, [r7, #8]
 80137f6:	f000 f8db 	bl	80139b0 <tcp_echoserver_send>
    }
    ret_err = ERR_OK;
 80137fa:	2300      	movs	r3, #0
 80137fc:	77fb      	strb	r3, [r7, #31]
 80137fe:	e05f      	b.n	80138c0 <tcp_echoserver_recv+0x118>
  }
  /* Received data, but generated error */
  else if(err != ERR_OK)
 8013800:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8013804:	2b00      	cmp	r3, #0
 8013806:	d00b      	beq.n	8013820 <tcp_echoserver_recv+0x78>
  {
    /* Release the received buffer */
    if (p != NULL)
 8013808:	687b      	ldr	r3, [r7, #4]
 801380a:	2b00      	cmp	r3, #0
 801380c:	d005      	beq.n	801381a <tcp_echoserver_recv+0x72>
    {
      es->p = NULL;
 801380e:	69bb      	ldr	r3, [r7, #24]
 8013810:	2200      	movs	r2, #0
 8013812:	609a      	str	r2, [r3, #8]
      pbuf_free(p);
 8013814:	6878      	ldr	r0, [r7, #4]
 8013816:	f7f5 fc4f 	bl	80090b8 <pbuf_free>
    }
    ret_err = err;
 801381a:	78fb      	ldrb	r3, [r7, #3]
 801381c:	77fb      	strb	r3, [r7, #31]
 801381e:	e04f      	b.n	80138c0 <tcp_echoserver_recv+0x118>
  }
  else if(es->state == ES_ACCEPTED)
 8013820:	69bb      	ldr	r3, [r7, #24]
 8013822:	781b      	ldrb	r3, [r3, #0]
 8013824:	2b01      	cmp	r3, #1
 8013826:	d110      	bne.n	801384a <tcp_echoserver_recv+0xa2>
  {
    /* Change status is received */
    es->state = ES_RECEIVED;
 8013828:	69bb      	ldr	r3, [r7, #24]
 801382a:	2202      	movs	r2, #2
 801382c:	701a      	strb	r2, [r3, #0]

    /* Use the address of the received PBUF to access our local structure */
    es->p = p;
 801382e:	69bb      	ldr	r3, [r7, #24]
 8013830:	687a      	ldr	r2, [r7, #4]
 8013832:	609a      	str	r2, [r3, #8]

    /* Answer ------ Our function is echo, echo */
    tcp_sent(tpcb, tcp_echoserver_sent);
 8013834:	4928      	ldr	r1, [pc, #160]	; (80138d8 <tcp_echoserver_recv+0x130>)
 8013836:	68b8      	ldr	r0, [r7, #8]
 8013838:	f7f7 face 	bl	800add8 <tcp_sent>

    /* Send data directly to NIC */
    tcp_echoserver_send(tpcb, es);
 801383c:	69b9      	ldr	r1, [r7, #24]
 801383e:	68b8      	ldr	r0, [r7, #8]
 8013840:	f000 f8b6 	bl	80139b0 <tcp_echoserver_send>

    ret_err = ERR_OK;
 8013844:	2300      	movs	r3, #0
 8013846:	77fb      	strb	r3, [r7, #31]
 8013848:	e03a      	b.n	80138c0 <tcp_echoserver_recv+0x118>
  }
  else if (es->state == ES_RECEIVED)
 801384a:	69bb      	ldr	r3, [r7, #24]
 801384c:	781b      	ldrb	r3, [r3, #0]
 801384e:	2b02      	cmp	r3, #2
 8013850:	d115      	bne.n	801387e <tcp_echoserver_recv+0xd6>
  {
    /* Judging that our transmission buffer is not issued, no */
    if(es->p == NULL)
 8013852:	69bb      	ldr	r3, [r7, #24]
 8013854:	689b      	ldr	r3, [r3, #8]
 8013856:	2b00      	cmp	r3, #0
 8013858:	d107      	bne.n	801386a <tcp_echoserver_recv+0xc2>
    {
      // Store PBUF
      es->p = p;
 801385a:	69bb      	ldr	r3, [r7, #24]
 801385c:	687a      	ldr	r2, [r7, #4]
 801385e:	609a      	str	r2, [r3, #8]

      /* Transfer */
      tcp_echoserver_send(tpcb, es);
 8013860:	69b9      	ldr	r1, [r7, #24]
 8013862:	68b8      	ldr	r0, [r7, #8]
 8013864:	f000 f8a4 	bl	80139b0 <tcp_echoserver_send>
 8013868:	e006      	b.n	8013878 <tcp_echoserver_recv+0xd0>
      struct pbuf *ptr;

      /*
      	       Since the data is not sent, data connection is required.
      */
      ptr = es->p;// Get the address to be sent to
 801386a:	69bb      	ldr	r3, [r7, #24]
 801386c:	689b      	ldr	r3, [r3, #8]
 801386e:	617b      	str	r3, [r7, #20]
      pbuf_chain(ptr,p);// Tail connection
 8013870:	6879      	ldr	r1, [r7, #4]
 8013872:	6978      	ldr	r0, [r7, #20]
 8013874:	f7f5 fd44 	bl	8009300 <pbuf_chain>
    }
    ret_err = ERR_OK;
 8013878:	2300      	movs	r3, #0
 801387a:	77fb      	strb	r3, [r7, #31]
 801387c:	e020      	b.n	80138c0 <tcp_echoserver_recv+0x118>
  }// Is in a closed state
  else if(es->state == ES_CLOSING)
 801387e:	69bb      	ldr	r3, [r7, #24]
 8013880:	781b      	ldrb	r3, [r3, #0]
 8013882:	2b03      	cmp	r3, #3
 8013884:	d10e      	bne.n	80138a4 <tcp_echoserver_recv+0xfc>
  {
    /*
    	     Release PBUF
    */
    tcp_recved(tpcb, p->tot_len);
 8013886:	687b      	ldr	r3, [r7, #4]
 8013888:	891b      	ldrh	r3, [r3, #8]
 801388a:	4619      	mov	r1, r3
 801388c:	68b8      	ldr	r0, [r7, #8]
 801388e:	f7f6 fb91 	bl	8009fb4 <tcp_recved>
    es->p = NULL;
 8013892:	69bb      	ldr	r3, [r7, #24]
 8013894:	2200      	movs	r2, #0
 8013896:	609a      	str	r2, [r3, #8]
    pbuf_free(p);
 8013898:	6878      	ldr	r0, [r7, #4]
 801389a:	f7f5 fc0d 	bl	80090b8 <pbuf_free>
    ret_err = ERR_OK;
 801389e:	2300      	movs	r3, #0
 80138a0:	77fb      	strb	r3, [r7, #31]
 80138a2:	e00d      	b.n	80138c0 <tcp_echoserver_recv+0x118>
  }
  else
  {
    /* Release PBUF */
    tcp_recved(tpcb, p->tot_len);
 80138a4:	687b      	ldr	r3, [r7, #4]
 80138a6:	891b      	ldrh	r3, [r3, #8]
 80138a8:	4619      	mov	r1, r3
 80138aa:	68b8      	ldr	r0, [r7, #8]
 80138ac:	f7f6 fb82 	bl	8009fb4 <tcp_recved>
    es->p = NULL;
 80138b0:	69bb      	ldr	r3, [r7, #24]
 80138b2:	2200      	movs	r2, #0
 80138b4:	609a      	str	r2, [r3, #8]
    pbuf_free(p);
 80138b6:	6878      	ldr	r0, [r7, #4]
 80138b8:	f7f5 fbfe 	bl	80090b8 <pbuf_free>
    ret_err = ERR_OK;
 80138bc:	2300      	movs	r3, #0
 80138be:	77fb      	strb	r3, [r7, #31]
  }
  return ret_err;
 80138c0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80138c4:	4618      	mov	r0, r3
 80138c6:	3720      	adds	r7, #32
 80138c8:	46bd      	mov	sp, r7
 80138ca:	bd80      	pop	{r7, pc}
 80138cc:	08017978 	.word	0x08017978
 80138d0:	0801798c 	.word	0x0801798c
 80138d4:	08017998 	.word	0x08017998
 80138d8:	08013961 	.word	0x08013961

080138dc <tcp_echoserver_error>:
     * @Param Arg: Point us TCP_ECHOSERVER_STRUCT
  * @param  err: not used
  * @retval None
  */
static void tcp_echoserver_error(void *arg, err_t err)
{
 80138dc:	b580      	push	{r7, lr}
 80138de:	b084      	sub	sp, #16
 80138e0:	af00      	add	r7, sp, #0
 80138e2:	6078      	str	r0, [r7, #4]
 80138e4:	460b      	mov	r3, r1
 80138e6:	70fb      	strb	r3, [r7, #3]
  struct tcp_echoserver_struct *es;

  LWIP_UNUSED_ARG(err);

  es = (struct tcp_echoserver_struct *)arg;
 80138e8:	687b      	ldr	r3, [r7, #4]
 80138ea:	60fb      	str	r3, [r7, #12]
  if (es != NULL)
 80138ec:	68fb      	ldr	r3, [r7, #12]
 80138ee:	2b00      	cmp	r3, #0
 80138f0:	d002      	beq.n	80138f8 <tcp_echoserver_error+0x1c>
  {
    /* Release TCP_ECHOSERVER_STRUCT */
    mem_free(es);
 80138f2:	68f8      	ldr	r0, [r7, #12]
 80138f4:	f7f4 f9ce 	bl	8007c94 <mem_free>
  }
}
 80138f8:	bf00      	nop
 80138fa:	3710      	adds	r7, #16
 80138fc:	46bd      	mov	sp, r7
 80138fe:	bd80      	pop	{r7, pc}

08013900 <tcp_echoserver_poll>:
  * @param  arg: pointer on argument passed to callback
  * @param  tpcb: pointer on the tcp_pcb for the current tcp connection
  * @retval err_t: error code
  */
static err_t tcp_echoserver_poll(void *arg, struct tcp_pcb *tpcb)
{
 8013900:	b580      	push	{r7, lr}
 8013902:	b084      	sub	sp, #16
 8013904:	af00      	add	r7, sp, #0
 8013906:	6078      	str	r0, [r7, #4]
 8013908:	6039      	str	r1, [r7, #0]
  err_t ret_err;
  struct tcp_echoserver_struct *es;

  es = (struct tcp_echoserver_struct *)arg;
 801390a:	687b      	ldr	r3, [r7, #4]
 801390c:	60bb      	str	r3, [r7, #8]
  if (es != NULL)
 801390e:	68bb      	ldr	r3, [r7, #8]
 8013910:	2b00      	cmp	r3, #0
 8013912:	d017      	beq.n	8013944 <tcp_echoserver_poll+0x44>
  {
    // There is a data need to be sent
    if (es->p != NULL)
 8013914:	68bb      	ldr	r3, [r7, #8]
 8013916:	689b      	ldr	r3, [r3, #8]
 8013918:	2b00      	cmp	r3, #0
 801391a:	d008      	beq.n	801392e <tcp_echoserver_poll+0x2e>
    {

      tcp_sent(tpcb, tcp_echoserver_sent);
 801391c:	490f      	ldr	r1, [pc, #60]	; (801395c <tcp_echoserver_poll+0x5c>)
 801391e:	6838      	ldr	r0, [r7, #0]
 8013920:	f7f7 fa5a 	bl	800add8 <tcp_sent>
      /* there is a remaining pbuf (chain) , try to send data */
      tcp_echoserver_send(tpcb, es);
 8013924:	68b9      	ldr	r1, [r7, #8]
 8013926:	6838      	ldr	r0, [r7, #0]
 8013928:	f000 f842 	bl	80139b0 <tcp_echoserver_send>
 801392c:	e007      	b.n	801393e <tcp_echoserver_poll+0x3e>
    }
    else
    {
      /* Determined whether the status is turned off */
      if(es->state == ES_CLOSING)
 801392e:	68bb      	ldr	r3, [r7, #8]
 8013930:	781b      	ldrb	r3, [r3, #0]
 8013932:	2b03      	cmp	r3, #3
 8013934:	d103      	bne.n	801393e <tcp_echoserver_poll+0x3e>
      {
        /* Turn off TCP connection */
        tcp_echoserver_connection_close(tpcb, es);
 8013936:	68b9      	ldr	r1, [r7, #8]
 8013938:	6838      	ldr	r0, [r7, #0]
 801393a:	f000 f88c 	bl	8013a56 <tcp_echoserver_connection_close>
      }
    }
    ret_err = ERR_OK;
 801393e:	2300      	movs	r3, #0
 8013940:	73fb      	strb	r3, [r7, #15]
 8013942:	e004      	b.n	801394e <tcp_echoserver_poll+0x4e>
  }	//No TCP_ECHOSERVER_STRUCT
  else
  {
    /* Terminate TCP tasks */
    tcp_abort(tpcb);
 8013944:	6838      	ldr	r0, [r7, #0]
 8013946:	f7f6 f95b 	bl	8009c00 <tcp_abort>
    ret_err = ERR_ABRT;
 801394a:	23f3      	movs	r3, #243	; 0xf3
 801394c:	73fb      	strb	r3, [r7, #15]
  }
  return ret_err;
 801394e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013952:	4618      	mov	r0, r3
 8013954:	3710      	adds	r7, #16
 8013956:	46bd      	mov	sp, r7
 8013958:	bd80      	pop	{r7, pc}
 801395a:	bf00      	nop
 801395c:	08013961 	.word	0x08013961

08013960 <tcp_echoserver_sent>:
     * @Brief When the send is complete, call this callback function
  * @param  None
  * @retval None
  */
static err_t tcp_echoserver_sent(void *arg, struct tcp_pcb *tpcb, u16_t len)
{
 8013960:	b580      	push	{r7, lr}
 8013962:	b086      	sub	sp, #24
 8013964:	af00      	add	r7, sp, #0
 8013966:	60f8      	str	r0, [r7, #12]
 8013968:	60b9      	str	r1, [r7, #8]
 801396a:	4613      	mov	r3, r2
 801396c:	80fb      	strh	r3, [r7, #6]
  struct tcp_echoserver_struct *es;

  LWIP_UNUSED_ARG(len);

  es = (struct tcp_echoserver_struct *)arg;
 801396e:	68fb      	ldr	r3, [r7, #12]
 8013970:	617b      	str	r3, [r7, #20]
  es->retries = 0;
 8013972:	697b      	ldr	r3, [r7, #20]
 8013974:	2200      	movs	r2, #0
 8013976:	705a      	strb	r2, [r3, #1]

  if(es->p != NULL)
 8013978:	697b      	ldr	r3, [r7, #20]
 801397a:	689b      	ldr	r3, [r3, #8]
 801397c:	2b00      	cmp	r3, #0
 801397e:	d008      	beq.n	8013992 <tcp_echoserver_sent+0x32>
  {
    /* There is also data needs to continue to send */
    tcp_sent(tpcb, tcp_echoserver_sent);
 8013980:	490a      	ldr	r1, [pc, #40]	; (80139ac <tcp_echoserver_sent+0x4c>)
 8013982:	68b8      	ldr	r0, [r7, #8]
 8013984:	f7f7 fa28 	bl	800add8 <tcp_sent>
    tcp_echoserver_send(tpcb, es);
 8013988:	6979      	ldr	r1, [r7, #20]
 801398a:	68b8      	ldr	r0, [r7, #8]
 801398c:	f000 f810 	bl	80139b0 <tcp_echoserver_send>
 8013990:	e007      	b.n	80139a2 <tcp_echoserver_sent+0x42>
  }
  else
  {
    /* Need to close, we close */
    if(es->state == ES_CLOSING)
 8013992:	697b      	ldr	r3, [r7, #20]
 8013994:	781b      	ldrb	r3, [r3, #0]
 8013996:	2b03      	cmp	r3, #3
 8013998:	d103      	bne.n	80139a2 <tcp_echoserver_sent+0x42>
      tcp_echoserver_connection_close(tpcb, es);
 801399a:	6979      	ldr	r1, [r7, #20]
 801399c:	68b8      	ldr	r0, [r7, #8]
 801399e:	f000 f85a 	bl	8013a56 <tcp_echoserver_connection_close>
  }
  return ERR_OK;
 80139a2:	2300      	movs	r3, #0
}
 80139a4:	4618      	mov	r0, r3
 80139a6:	3718      	adds	r7, #24
 80139a8:	46bd      	mov	sp, r7
 80139aa:	bd80      	pop	{r7, pc}
 80139ac:	08013961 	.word	0x08013961

080139b0 <tcp_echoserver_send>:
  * @param  tpcb: pointer on the tcp_pcb connection
  * @param  es: pointer on echo_state structure
  * @retval None
  */
static void tcp_echoserver_send(struct tcp_pcb *tpcb, struct tcp_echoserver_struct *es)
{
 80139b0:	b580      	push	{r7, lr}
 80139b2:	b086      	sub	sp, #24
 80139b4:	af00      	add	r7, sp, #0
 80139b6:	6078      	str	r0, [r7, #4]
 80139b8:	6039      	str	r1, [r7, #0]
  struct pbuf *ptr;
  err_t wr_err = ERR_OK;
 80139ba:	2300      	movs	r3, #0
 80139bc:	75fb      	strb	r3, [r7, #23]
    	     1, TCP task has no error
    	     2, the data to be sent
    	     3, the data to be sent, the length is less than the TCP transmission length
    	     3.1, TCP sends BUF, there are restrictions, not infinite, we want to send the length, can not be greater than it, if it is greater than it will be wrong
    */
  while ((wr_err == ERR_OK) &&
 80139be:	e036      	b.n	8013a2e <tcp_echoserver_send+0x7e>
         (es->p != NULL) &&
         (es->p->len <= tcp_sndbuf(tpcb)))
  {

    /* Get the PBUF pointer to be sent */
    ptr = es->p;
 80139c0:	683b      	ldr	r3, [r7, #0]
 80139c2:	689b      	ldr	r3, [r3, #8]
 80139c4:	613b      	str	r3, [r7, #16]

    /* Call WRITE to send, send it to the NIC */
    wr_err = tcp_write(tpcb, ptr->payload, ptr->len, 1);
 80139c6:	693b      	ldr	r3, [r7, #16]
 80139c8:	6859      	ldr	r1, [r3, #4]
 80139ca:	693b      	ldr	r3, [r7, #16]
 80139cc:	895a      	ldrh	r2, [r3, #10]
 80139ce:	2301      	movs	r3, #1
 80139d0:	6878      	ldr	r0, [r7, #4]
 80139d2:	f7fa f90f 	bl	800dbf4 <tcp_write>
 80139d6:	4603      	mov	r3, r0
 80139d8:	75fb      	strb	r3, [r7, #23]

    if (wr_err == ERR_OK)
 80139da:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80139de:	2b00      	cmp	r3, #0
 80139e0:	d11d      	bne.n	8013a1e <tcp_echoserver_send+0x6e>
    {
      u16_t plen;
      u8_t freed;
	  // Get the remaining length
      plen = ptr->len;
 80139e2:	693b      	ldr	r3, [r7, #16]
 80139e4:	895b      	ldrh	r3, [r3, #10]
 80139e6:	81fb      	strh	r3, [r7, #14]

      /* If there are other in this PBUF list, then send */
      es->p = ptr->next;
 80139e8:	693b      	ldr	r3, [r7, #16]
 80139ea:	681a      	ldr	r2, [r3, #0]
 80139ec:	683b      	ldr	r3, [r7, #0]
 80139ee:	609a      	str	r2, [r3, #8]

      if(es->p != NULL)
 80139f0:	683b      	ldr	r3, [r7, #0]
 80139f2:	689b      	ldr	r3, [r3, #8]
 80139f4:	2b00      	cmp	r3, #0
 80139f6:	d004      	beq.n	8013a02 <tcp_echoserver_send+0x52>
      {
        /* Refresh count value */
        pbuf_ref(es->p);
 80139f8:	683b      	ldr	r3, [r7, #0]
 80139fa:	689b      	ldr	r3, [r3, #8]
 80139fc:	4618      	mov	r0, r3
 80139fe:	f7f5 fc01 	bl	8009204 <pbuf_ref>

     /*  */
      do
      {
        /* Release PBUF */
        freed = pbuf_free(ptr);
 8013a02:	6938      	ldr	r0, [r7, #16]
 8013a04:	f7f5 fb58 	bl	80090b8 <pbuf_free>
 8013a08:	4603      	mov	r3, r0
 8013a0a:	737b      	strb	r3, [r7, #13]
      }
      while(freed == 0);
 8013a0c:	7b7b      	ldrb	r3, [r7, #13]
 8013a0e:	2b00      	cmp	r3, #0
 8013a10:	d0f7      	beq.n	8013a02 <tcp_echoserver_send+0x52>
     /* Receive */
     tcp_recved(tpcb, plen);
 8013a12:	89fb      	ldrh	r3, [r7, #14]
 8013a14:	4619      	mov	r1, r3
 8013a16:	6878      	ldr	r0, [r7, #4]
 8013a18:	f7f6 facc 	bl	8009fb4 <tcp_recved>
 8013a1c:	e007      	b.n	8013a2e <tcp_echoserver_send+0x7e>
   }
   else if(wr_err == ERR_MEM)
 8013a1e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8013a22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013a26:	d102      	bne.n	8013a2e <tcp_echoserver_send+0x7e>
   {
      /* Reissue */
     es->p = ptr;
 8013a28:	683b      	ldr	r3, [r7, #0]
 8013a2a:	693a      	ldr	r2, [r7, #16]
 8013a2c:	609a      	str	r2, [r3, #8]
  while ((wr_err == ERR_OK) &&
 8013a2e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8013a32:	2b00      	cmp	r3, #0
 8013a34:	d10b      	bne.n	8013a4e <tcp_echoserver_send+0x9e>
         (es->p != NULL) &&
 8013a36:	683b      	ldr	r3, [r7, #0]
 8013a38:	689b      	ldr	r3, [r3, #8]
  while ((wr_err == ERR_OK) &&
 8013a3a:	2b00      	cmp	r3, #0
 8013a3c:	d007      	beq.n	8013a4e <tcp_echoserver_send+0x9e>
         (es->p->len <= tcp_sndbuf(tpcb)))
 8013a3e:	683b      	ldr	r3, [r7, #0]
 8013a40:	689b      	ldr	r3, [r3, #8]
 8013a42:	895a      	ldrh	r2, [r3, #10]
 8013a44:	687b      	ldr	r3, [r7, #4]
 8013a46:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
         (es->p != NULL) &&
 8013a4a:	429a      	cmp	r2, r3
 8013a4c:	d9b8      	bls.n	80139c0 <tcp_echoserver_send+0x10>
   else
   {
     /* other problem ?? */
   }
  }
}
 8013a4e:	bf00      	nop
 8013a50:	3718      	adds	r7, #24
 8013a52:	46bd      	mov	sp, r7
 8013a54:	bd80      	pop	{r7, pc}

08013a56 <tcp_echoserver_connection_close>:
  * @param  tcp_pcb: pointer on the tcp connection
  * @param  es: pointer on echo_state structure
  * @retval None
  */
static void tcp_echoserver_connection_close(struct tcp_pcb *tpcb, struct tcp_echoserver_struct *es)
{
 8013a56:	b580      	push	{r7, lr}
 8013a58:	b082      	sub	sp, #8
 8013a5a:	af00      	add	r7, sp, #0
 8013a5c:	6078      	str	r0, [r7, #4]
 8013a5e:	6039      	str	r1, [r7, #0]

  /* Transplanted all callback functions */
  tcp_arg(tpcb, NULL);
 8013a60:	2100      	movs	r1, #0
 8013a62:	6878      	ldr	r0, [r7, #4]
 8013a64:	f7f7 f984 	bl	800ad70 <tcp_arg>
  tcp_sent(tpcb, NULL);
 8013a68:	2100      	movs	r1, #0
 8013a6a:	6878      	ldr	r0, [r7, #4]
 8013a6c:	f7f7 f9b4 	bl	800add8 <tcp_sent>
  tcp_recv(tpcb, NULL);
 8013a70:	2100      	movs	r1, #0
 8013a72:	6878      	ldr	r0, [r7, #4]
 8013a74:	f7f7 f98e 	bl	800ad94 <tcp_recv>
  tcp_err(tpcb, NULL);
 8013a78:	2100      	movs	r1, #0
 8013a7a:	6878      	ldr	r0, [r7, #4]
 8013a7c:	f7f7 f9ce 	bl	800ae1c <tcp_err>
  tcp_poll(tpcb, NULL, 0);
 8013a80:	2200      	movs	r2, #0
 8013a82:	2100      	movs	r1, #0
 8013a84:	6878      	ldr	r0, [r7, #4]
 8013a86:	f7f7 fa03 	bl	800ae90 <tcp_poll>

  /* Release TCP_ECHOSERVER_STRUCT Memory Space */
  if (es != NULL)
 8013a8a:	683b      	ldr	r3, [r7, #0]
 8013a8c:	2b00      	cmp	r3, #0
 8013a8e:	d002      	beq.n	8013a96 <tcp_echoserver_connection_close+0x40>
  {
    mem_free(es);
 8013a90:	6838      	ldr	r0, [r7, #0]
 8013a92:	f7f4 f8ff 	bl	8007c94 <mem_free>
  }

  /* Close the TCP connection, here the PCB control block is released */
  tcp_close(tpcb);
 8013a96:	6878      	ldr	r0, [r7, #4]
 8013a98:	f7f5 ffc8 	bl	8009a2c <tcp_close>
}
 8013a9c:	bf00      	nop
 8013a9e:	3708      	adds	r7, #8
 8013aa0:	46bd      	mov	sp, r7
 8013aa2:	bd80      	pop	{r7, pc}

08013aa4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8013aa4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8013adc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8013aa8:	480d      	ldr	r0, [pc, #52]	; (8013ae0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8013aaa:	490e      	ldr	r1, [pc, #56]	; (8013ae4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8013aac:	4a0e      	ldr	r2, [pc, #56]	; (8013ae8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8013aae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8013ab0:	e002      	b.n	8013ab8 <LoopCopyDataInit>

08013ab2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8013ab2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8013ab4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8013ab6:	3304      	adds	r3, #4

08013ab8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8013ab8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8013aba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8013abc:	d3f9      	bcc.n	8013ab2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8013abe:	4a0b      	ldr	r2, [pc, #44]	; (8013aec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8013ac0:	4c0b      	ldr	r4, [pc, #44]	; (8013af0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8013ac2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8013ac4:	e001      	b.n	8013aca <LoopFillZerobss>

08013ac6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8013ac6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8013ac8:	3204      	adds	r2, #4

08013aca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8013aca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8013acc:	d3fb      	bcc.n	8013ac6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8013ace:	f7ff fddb 	bl	8013688 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8013ad2:	f000 f907 	bl	8013ce4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8013ad6:	f7ff fbd5 	bl	8013284 <main>
  bx  lr    
 8013ada:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8013adc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8013ae0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8013ae4:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8013ae8:	08017c78 	.word	0x08017c78
  ldr r2, =_sbss
 8013aec:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8013af0:	2000b54c 	.word	0x2000b54c

08013af4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8013af4:	e7fe      	b.n	8013af4 <ADC_IRQHandler>
	...

08013af8 <std>:
 8013af8:	2300      	movs	r3, #0
 8013afa:	b510      	push	{r4, lr}
 8013afc:	4604      	mov	r4, r0
 8013afe:	e9c0 3300 	strd	r3, r3, [r0]
 8013b02:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013b06:	6083      	str	r3, [r0, #8]
 8013b08:	8181      	strh	r1, [r0, #12]
 8013b0a:	6643      	str	r3, [r0, #100]	; 0x64
 8013b0c:	81c2      	strh	r2, [r0, #14]
 8013b0e:	6183      	str	r3, [r0, #24]
 8013b10:	4619      	mov	r1, r3
 8013b12:	2208      	movs	r2, #8
 8013b14:	305c      	adds	r0, #92	; 0x5c
 8013b16:	f000 f92a 	bl	8013d6e <memset>
 8013b1a:	4b05      	ldr	r3, [pc, #20]	; (8013b30 <std+0x38>)
 8013b1c:	6263      	str	r3, [r4, #36]	; 0x24
 8013b1e:	4b05      	ldr	r3, [pc, #20]	; (8013b34 <std+0x3c>)
 8013b20:	62a3      	str	r3, [r4, #40]	; 0x28
 8013b22:	4b05      	ldr	r3, [pc, #20]	; (8013b38 <std+0x40>)
 8013b24:	62e3      	str	r3, [r4, #44]	; 0x2c
 8013b26:	4b05      	ldr	r3, [pc, #20]	; (8013b3c <std+0x44>)
 8013b28:	6224      	str	r4, [r4, #32]
 8013b2a:	6323      	str	r3, [r4, #48]	; 0x30
 8013b2c:	bd10      	pop	{r4, pc}
 8013b2e:	bf00      	nop
 8013b30:	08014049 	.word	0x08014049
 8013b34:	0801406b 	.word	0x0801406b
 8013b38:	080140a3 	.word	0x080140a3
 8013b3c:	080140c7 	.word	0x080140c7

08013b40 <_cleanup_r>:
 8013b40:	4901      	ldr	r1, [pc, #4]	; (8013b48 <_cleanup_r+0x8>)
 8013b42:	f000 b8af 	b.w	8013ca4 <_fwalk_reent>
 8013b46:	bf00      	nop
 8013b48:	0801425d 	.word	0x0801425d

08013b4c <__sfmoreglue>:
 8013b4c:	b570      	push	{r4, r5, r6, lr}
 8013b4e:	2268      	movs	r2, #104	; 0x68
 8013b50:	1e4d      	subs	r5, r1, #1
 8013b52:	4355      	muls	r5, r2
 8013b54:	460e      	mov	r6, r1
 8013b56:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8013b5a:	f000 f931 	bl	8013dc0 <_malloc_r>
 8013b5e:	4604      	mov	r4, r0
 8013b60:	b140      	cbz	r0, 8013b74 <__sfmoreglue+0x28>
 8013b62:	2100      	movs	r1, #0
 8013b64:	e9c0 1600 	strd	r1, r6, [r0]
 8013b68:	300c      	adds	r0, #12
 8013b6a:	60a0      	str	r0, [r4, #8]
 8013b6c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8013b70:	f000 f8fd 	bl	8013d6e <memset>
 8013b74:	4620      	mov	r0, r4
 8013b76:	bd70      	pop	{r4, r5, r6, pc}

08013b78 <__sfp_lock_acquire>:
 8013b78:	4801      	ldr	r0, [pc, #4]	; (8013b80 <__sfp_lock_acquire+0x8>)
 8013b7a:	f000 b8d8 	b.w	8013d2e <__retarget_lock_acquire_recursive>
 8013b7e:	bf00      	nop
 8013b80:	2000b53d 	.word	0x2000b53d

08013b84 <__sfp_lock_release>:
 8013b84:	4801      	ldr	r0, [pc, #4]	; (8013b8c <__sfp_lock_release+0x8>)
 8013b86:	f000 b8d3 	b.w	8013d30 <__retarget_lock_release_recursive>
 8013b8a:	bf00      	nop
 8013b8c:	2000b53d 	.word	0x2000b53d

08013b90 <__sinit_lock_acquire>:
 8013b90:	4801      	ldr	r0, [pc, #4]	; (8013b98 <__sinit_lock_acquire+0x8>)
 8013b92:	f000 b8cc 	b.w	8013d2e <__retarget_lock_acquire_recursive>
 8013b96:	bf00      	nop
 8013b98:	2000b53e 	.word	0x2000b53e

08013b9c <__sinit_lock_release>:
 8013b9c:	4801      	ldr	r0, [pc, #4]	; (8013ba4 <__sinit_lock_release+0x8>)
 8013b9e:	f000 b8c7 	b.w	8013d30 <__retarget_lock_release_recursive>
 8013ba2:	bf00      	nop
 8013ba4:	2000b53e 	.word	0x2000b53e

08013ba8 <__sinit>:
 8013ba8:	b510      	push	{r4, lr}
 8013baa:	4604      	mov	r4, r0
 8013bac:	f7ff fff0 	bl	8013b90 <__sinit_lock_acquire>
 8013bb0:	69a3      	ldr	r3, [r4, #24]
 8013bb2:	b11b      	cbz	r3, 8013bbc <__sinit+0x14>
 8013bb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013bb8:	f7ff bff0 	b.w	8013b9c <__sinit_lock_release>
 8013bbc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8013bc0:	6523      	str	r3, [r4, #80]	; 0x50
 8013bc2:	4b13      	ldr	r3, [pc, #76]	; (8013c10 <__sinit+0x68>)
 8013bc4:	4a13      	ldr	r2, [pc, #76]	; (8013c14 <__sinit+0x6c>)
 8013bc6:	681b      	ldr	r3, [r3, #0]
 8013bc8:	62a2      	str	r2, [r4, #40]	; 0x28
 8013bca:	42a3      	cmp	r3, r4
 8013bcc:	bf04      	itt	eq
 8013bce:	2301      	moveq	r3, #1
 8013bd0:	61a3      	streq	r3, [r4, #24]
 8013bd2:	4620      	mov	r0, r4
 8013bd4:	f000 f820 	bl	8013c18 <__sfp>
 8013bd8:	6060      	str	r0, [r4, #4]
 8013bda:	4620      	mov	r0, r4
 8013bdc:	f000 f81c 	bl	8013c18 <__sfp>
 8013be0:	60a0      	str	r0, [r4, #8]
 8013be2:	4620      	mov	r0, r4
 8013be4:	f000 f818 	bl	8013c18 <__sfp>
 8013be8:	2200      	movs	r2, #0
 8013bea:	60e0      	str	r0, [r4, #12]
 8013bec:	2104      	movs	r1, #4
 8013bee:	6860      	ldr	r0, [r4, #4]
 8013bf0:	f7ff ff82 	bl	8013af8 <std>
 8013bf4:	68a0      	ldr	r0, [r4, #8]
 8013bf6:	2201      	movs	r2, #1
 8013bf8:	2109      	movs	r1, #9
 8013bfa:	f7ff ff7d 	bl	8013af8 <std>
 8013bfe:	68e0      	ldr	r0, [r4, #12]
 8013c00:	2202      	movs	r2, #2
 8013c02:	2112      	movs	r1, #18
 8013c04:	f7ff ff78 	bl	8013af8 <std>
 8013c08:	2301      	movs	r3, #1
 8013c0a:	61a3      	str	r3, [r4, #24]
 8013c0c:	e7d2      	b.n	8013bb4 <__sinit+0xc>
 8013c0e:	bf00      	nop
 8013c10:	08017b80 	.word	0x08017b80
 8013c14:	08013b41 	.word	0x08013b41

08013c18 <__sfp>:
 8013c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013c1a:	4607      	mov	r7, r0
 8013c1c:	f7ff ffac 	bl	8013b78 <__sfp_lock_acquire>
 8013c20:	4b1e      	ldr	r3, [pc, #120]	; (8013c9c <__sfp+0x84>)
 8013c22:	681e      	ldr	r6, [r3, #0]
 8013c24:	69b3      	ldr	r3, [r6, #24]
 8013c26:	b913      	cbnz	r3, 8013c2e <__sfp+0x16>
 8013c28:	4630      	mov	r0, r6
 8013c2a:	f7ff ffbd 	bl	8013ba8 <__sinit>
 8013c2e:	3648      	adds	r6, #72	; 0x48
 8013c30:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8013c34:	3b01      	subs	r3, #1
 8013c36:	d503      	bpl.n	8013c40 <__sfp+0x28>
 8013c38:	6833      	ldr	r3, [r6, #0]
 8013c3a:	b30b      	cbz	r3, 8013c80 <__sfp+0x68>
 8013c3c:	6836      	ldr	r6, [r6, #0]
 8013c3e:	e7f7      	b.n	8013c30 <__sfp+0x18>
 8013c40:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8013c44:	b9d5      	cbnz	r5, 8013c7c <__sfp+0x64>
 8013c46:	4b16      	ldr	r3, [pc, #88]	; (8013ca0 <__sfp+0x88>)
 8013c48:	60e3      	str	r3, [r4, #12]
 8013c4a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8013c4e:	6665      	str	r5, [r4, #100]	; 0x64
 8013c50:	f000 f86c 	bl	8013d2c <__retarget_lock_init_recursive>
 8013c54:	f7ff ff96 	bl	8013b84 <__sfp_lock_release>
 8013c58:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8013c5c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8013c60:	6025      	str	r5, [r4, #0]
 8013c62:	61a5      	str	r5, [r4, #24]
 8013c64:	2208      	movs	r2, #8
 8013c66:	4629      	mov	r1, r5
 8013c68:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8013c6c:	f000 f87f 	bl	8013d6e <memset>
 8013c70:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8013c74:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8013c78:	4620      	mov	r0, r4
 8013c7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013c7c:	3468      	adds	r4, #104	; 0x68
 8013c7e:	e7d9      	b.n	8013c34 <__sfp+0x1c>
 8013c80:	2104      	movs	r1, #4
 8013c82:	4638      	mov	r0, r7
 8013c84:	f7ff ff62 	bl	8013b4c <__sfmoreglue>
 8013c88:	4604      	mov	r4, r0
 8013c8a:	6030      	str	r0, [r6, #0]
 8013c8c:	2800      	cmp	r0, #0
 8013c8e:	d1d5      	bne.n	8013c3c <__sfp+0x24>
 8013c90:	f7ff ff78 	bl	8013b84 <__sfp_lock_release>
 8013c94:	230c      	movs	r3, #12
 8013c96:	603b      	str	r3, [r7, #0]
 8013c98:	e7ee      	b.n	8013c78 <__sfp+0x60>
 8013c9a:	bf00      	nop
 8013c9c:	08017b80 	.word	0x08017b80
 8013ca0:	ffff0001 	.word	0xffff0001

08013ca4 <_fwalk_reent>:
 8013ca4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013ca8:	4606      	mov	r6, r0
 8013caa:	4688      	mov	r8, r1
 8013cac:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8013cb0:	2700      	movs	r7, #0
 8013cb2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013cb6:	f1b9 0901 	subs.w	r9, r9, #1
 8013cba:	d505      	bpl.n	8013cc8 <_fwalk_reent+0x24>
 8013cbc:	6824      	ldr	r4, [r4, #0]
 8013cbe:	2c00      	cmp	r4, #0
 8013cc0:	d1f7      	bne.n	8013cb2 <_fwalk_reent+0xe>
 8013cc2:	4638      	mov	r0, r7
 8013cc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013cc8:	89ab      	ldrh	r3, [r5, #12]
 8013cca:	2b01      	cmp	r3, #1
 8013ccc:	d907      	bls.n	8013cde <_fwalk_reent+0x3a>
 8013cce:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013cd2:	3301      	adds	r3, #1
 8013cd4:	d003      	beq.n	8013cde <_fwalk_reent+0x3a>
 8013cd6:	4629      	mov	r1, r5
 8013cd8:	4630      	mov	r0, r6
 8013cda:	47c0      	blx	r8
 8013cdc:	4307      	orrs	r7, r0
 8013cde:	3568      	adds	r5, #104	; 0x68
 8013ce0:	e7e9      	b.n	8013cb6 <_fwalk_reent+0x12>
	...

08013ce4 <__libc_init_array>:
 8013ce4:	b570      	push	{r4, r5, r6, lr}
 8013ce6:	4d0d      	ldr	r5, [pc, #52]	; (8013d1c <__libc_init_array+0x38>)
 8013ce8:	4c0d      	ldr	r4, [pc, #52]	; (8013d20 <__libc_init_array+0x3c>)
 8013cea:	1b64      	subs	r4, r4, r5
 8013cec:	10a4      	asrs	r4, r4, #2
 8013cee:	2600      	movs	r6, #0
 8013cf0:	42a6      	cmp	r6, r4
 8013cf2:	d109      	bne.n	8013d08 <__libc_init_array+0x24>
 8013cf4:	4d0b      	ldr	r5, [pc, #44]	; (8013d24 <__libc_init_array+0x40>)
 8013cf6:	4c0c      	ldr	r4, [pc, #48]	; (8013d28 <__libc_init_array+0x44>)
 8013cf8:	f001 f802 	bl	8014d00 <_init>
 8013cfc:	1b64      	subs	r4, r4, r5
 8013cfe:	10a4      	asrs	r4, r4, #2
 8013d00:	2600      	movs	r6, #0
 8013d02:	42a6      	cmp	r6, r4
 8013d04:	d105      	bne.n	8013d12 <__libc_init_array+0x2e>
 8013d06:	bd70      	pop	{r4, r5, r6, pc}
 8013d08:	f855 3b04 	ldr.w	r3, [r5], #4
 8013d0c:	4798      	blx	r3
 8013d0e:	3601      	adds	r6, #1
 8013d10:	e7ee      	b.n	8013cf0 <__libc_init_array+0xc>
 8013d12:	f855 3b04 	ldr.w	r3, [r5], #4
 8013d16:	4798      	blx	r3
 8013d18:	3601      	adds	r6, #1
 8013d1a:	e7f2      	b.n	8013d02 <__libc_init_array+0x1e>
 8013d1c:	08017c70 	.word	0x08017c70
 8013d20:	08017c70 	.word	0x08017c70
 8013d24:	08017c70 	.word	0x08017c70
 8013d28:	08017c74 	.word	0x08017c74

08013d2c <__retarget_lock_init_recursive>:
 8013d2c:	4770      	bx	lr

08013d2e <__retarget_lock_acquire_recursive>:
 8013d2e:	4770      	bx	lr

08013d30 <__retarget_lock_release_recursive>:
 8013d30:	4770      	bx	lr

08013d32 <memcmp>:
 8013d32:	b510      	push	{r4, lr}
 8013d34:	3901      	subs	r1, #1
 8013d36:	4402      	add	r2, r0
 8013d38:	4290      	cmp	r0, r2
 8013d3a:	d101      	bne.n	8013d40 <memcmp+0xe>
 8013d3c:	2000      	movs	r0, #0
 8013d3e:	e005      	b.n	8013d4c <memcmp+0x1a>
 8013d40:	7803      	ldrb	r3, [r0, #0]
 8013d42:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8013d46:	42a3      	cmp	r3, r4
 8013d48:	d001      	beq.n	8013d4e <memcmp+0x1c>
 8013d4a:	1b18      	subs	r0, r3, r4
 8013d4c:	bd10      	pop	{r4, pc}
 8013d4e:	3001      	adds	r0, #1
 8013d50:	e7f2      	b.n	8013d38 <memcmp+0x6>

08013d52 <memcpy>:
 8013d52:	440a      	add	r2, r1
 8013d54:	4291      	cmp	r1, r2
 8013d56:	f100 33ff 	add.w	r3, r0, #4294967295
 8013d5a:	d100      	bne.n	8013d5e <memcpy+0xc>
 8013d5c:	4770      	bx	lr
 8013d5e:	b510      	push	{r4, lr}
 8013d60:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013d64:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013d68:	4291      	cmp	r1, r2
 8013d6a:	d1f9      	bne.n	8013d60 <memcpy+0xe>
 8013d6c:	bd10      	pop	{r4, pc}

08013d6e <memset>:
 8013d6e:	4402      	add	r2, r0
 8013d70:	4603      	mov	r3, r0
 8013d72:	4293      	cmp	r3, r2
 8013d74:	d100      	bne.n	8013d78 <memset+0xa>
 8013d76:	4770      	bx	lr
 8013d78:	f803 1b01 	strb.w	r1, [r3], #1
 8013d7c:	e7f9      	b.n	8013d72 <memset+0x4>
	...

08013d80 <sbrk_aligned>:
 8013d80:	b570      	push	{r4, r5, r6, lr}
 8013d82:	4e0e      	ldr	r6, [pc, #56]	; (8013dbc <sbrk_aligned+0x3c>)
 8013d84:	460c      	mov	r4, r1
 8013d86:	6831      	ldr	r1, [r6, #0]
 8013d88:	4605      	mov	r5, r0
 8013d8a:	b911      	cbnz	r1, 8013d92 <sbrk_aligned+0x12>
 8013d8c:	f000 f94c 	bl	8014028 <_sbrk_r>
 8013d90:	6030      	str	r0, [r6, #0]
 8013d92:	4621      	mov	r1, r4
 8013d94:	4628      	mov	r0, r5
 8013d96:	f000 f947 	bl	8014028 <_sbrk_r>
 8013d9a:	1c43      	adds	r3, r0, #1
 8013d9c:	d00a      	beq.n	8013db4 <sbrk_aligned+0x34>
 8013d9e:	1cc4      	adds	r4, r0, #3
 8013da0:	f024 0403 	bic.w	r4, r4, #3
 8013da4:	42a0      	cmp	r0, r4
 8013da6:	d007      	beq.n	8013db8 <sbrk_aligned+0x38>
 8013da8:	1a21      	subs	r1, r4, r0
 8013daa:	4628      	mov	r0, r5
 8013dac:	f000 f93c 	bl	8014028 <_sbrk_r>
 8013db0:	3001      	adds	r0, #1
 8013db2:	d101      	bne.n	8013db8 <sbrk_aligned+0x38>
 8013db4:	f04f 34ff 	mov.w	r4, #4294967295
 8013db8:	4620      	mov	r0, r4
 8013dba:	bd70      	pop	{r4, r5, r6, pc}
 8013dbc:	2000b544 	.word	0x2000b544

08013dc0 <_malloc_r>:
 8013dc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013dc4:	1ccd      	adds	r5, r1, #3
 8013dc6:	f025 0503 	bic.w	r5, r5, #3
 8013dca:	3508      	adds	r5, #8
 8013dcc:	2d0c      	cmp	r5, #12
 8013dce:	bf38      	it	cc
 8013dd0:	250c      	movcc	r5, #12
 8013dd2:	2d00      	cmp	r5, #0
 8013dd4:	4607      	mov	r7, r0
 8013dd6:	db01      	blt.n	8013ddc <_malloc_r+0x1c>
 8013dd8:	42a9      	cmp	r1, r5
 8013dda:	d905      	bls.n	8013de8 <_malloc_r+0x28>
 8013ddc:	230c      	movs	r3, #12
 8013dde:	603b      	str	r3, [r7, #0]
 8013de0:	2600      	movs	r6, #0
 8013de2:	4630      	mov	r0, r6
 8013de4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013de8:	4e2e      	ldr	r6, [pc, #184]	; (8013ea4 <_malloc_r+0xe4>)
 8013dea:	f000 fa9f 	bl	801432c <__malloc_lock>
 8013dee:	6833      	ldr	r3, [r6, #0]
 8013df0:	461c      	mov	r4, r3
 8013df2:	bb34      	cbnz	r4, 8013e42 <_malloc_r+0x82>
 8013df4:	4629      	mov	r1, r5
 8013df6:	4638      	mov	r0, r7
 8013df8:	f7ff ffc2 	bl	8013d80 <sbrk_aligned>
 8013dfc:	1c43      	adds	r3, r0, #1
 8013dfe:	4604      	mov	r4, r0
 8013e00:	d14d      	bne.n	8013e9e <_malloc_r+0xde>
 8013e02:	6834      	ldr	r4, [r6, #0]
 8013e04:	4626      	mov	r6, r4
 8013e06:	2e00      	cmp	r6, #0
 8013e08:	d140      	bne.n	8013e8c <_malloc_r+0xcc>
 8013e0a:	6823      	ldr	r3, [r4, #0]
 8013e0c:	4631      	mov	r1, r6
 8013e0e:	4638      	mov	r0, r7
 8013e10:	eb04 0803 	add.w	r8, r4, r3
 8013e14:	f000 f908 	bl	8014028 <_sbrk_r>
 8013e18:	4580      	cmp	r8, r0
 8013e1a:	d13a      	bne.n	8013e92 <_malloc_r+0xd2>
 8013e1c:	6821      	ldr	r1, [r4, #0]
 8013e1e:	3503      	adds	r5, #3
 8013e20:	1a6d      	subs	r5, r5, r1
 8013e22:	f025 0503 	bic.w	r5, r5, #3
 8013e26:	3508      	adds	r5, #8
 8013e28:	2d0c      	cmp	r5, #12
 8013e2a:	bf38      	it	cc
 8013e2c:	250c      	movcc	r5, #12
 8013e2e:	4629      	mov	r1, r5
 8013e30:	4638      	mov	r0, r7
 8013e32:	f7ff ffa5 	bl	8013d80 <sbrk_aligned>
 8013e36:	3001      	adds	r0, #1
 8013e38:	d02b      	beq.n	8013e92 <_malloc_r+0xd2>
 8013e3a:	6823      	ldr	r3, [r4, #0]
 8013e3c:	442b      	add	r3, r5
 8013e3e:	6023      	str	r3, [r4, #0]
 8013e40:	e00e      	b.n	8013e60 <_malloc_r+0xa0>
 8013e42:	6822      	ldr	r2, [r4, #0]
 8013e44:	1b52      	subs	r2, r2, r5
 8013e46:	d41e      	bmi.n	8013e86 <_malloc_r+0xc6>
 8013e48:	2a0b      	cmp	r2, #11
 8013e4a:	d916      	bls.n	8013e7a <_malloc_r+0xba>
 8013e4c:	1961      	adds	r1, r4, r5
 8013e4e:	42a3      	cmp	r3, r4
 8013e50:	6025      	str	r5, [r4, #0]
 8013e52:	bf18      	it	ne
 8013e54:	6059      	strne	r1, [r3, #4]
 8013e56:	6863      	ldr	r3, [r4, #4]
 8013e58:	bf08      	it	eq
 8013e5a:	6031      	streq	r1, [r6, #0]
 8013e5c:	5162      	str	r2, [r4, r5]
 8013e5e:	604b      	str	r3, [r1, #4]
 8013e60:	4638      	mov	r0, r7
 8013e62:	f104 060b 	add.w	r6, r4, #11
 8013e66:	f000 fa67 	bl	8014338 <__malloc_unlock>
 8013e6a:	f026 0607 	bic.w	r6, r6, #7
 8013e6e:	1d23      	adds	r3, r4, #4
 8013e70:	1af2      	subs	r2, r6, r3
 8013e72:	d0b6      	beq.n	8013de2 <_malloc_r+0x22>
 8013e74:	1b9b      	subs	r3, r3, r6
 8013e76:	50a3      	str	r3, [r4, r2]
 8013e78:	e7b3      	b.n	8013de2 <_malloc_r+0x22>
 8013e7a:	6862      	ldr	r2, [r4, #4]
 8013e7c:	42a3      	cmp	r3, r4
 8013e7e:	bf0c      	ite	eq
 8013e80:	6032      	streq	r2, [r6, #0]
 8013e82:	605a      	strne	r2, [r3, #4]
 8013e84:	e7ec      	b.n	8013e60 <_malloc_r+0xa0>
 8013e86:	4623      	mov	r3, r4
 8013e88:	6864      	ldr	r4, [r4, #4]
 8013e8a:	e7b2      	b.n	8013df2 <_malloc_r+0x32>
 8013e8c:	4634      	mov	r4, r6
 8013e8e:	6876      	ldr	r6, [r6, #4]
 8013e90:	e7b9      	b.n	8013e06 <_malloc_r+0x46>
 8013e92:	230c      	movs	r3, #12
 8013e94:	603b      	str	r3, [r7, #0]
 8013e96:	4638      	mov	r0, r7
 8013e98:	f000 fa4e 	bl	8014338 <__malloc_unlock>
 8013e9c:	e7a1      	b.n	8013de2 <_malloc_r+0x22>
 8013e9e:	6025      	str	r5, [r4, #0]
 8013ea0:	e7de      	b.n	8013e60 <_malloc_r+0xa0>
 8013ea2:	bf00      	nop
 8013ea4:	2000b540 	.word	0x2000b540

08013ea8 <iprintf>:
 8013ea8:	b40f      	push	{r0, r1, r2, r3}
 8013eaa:	4b0a      	ldr	r3, [pc, #40]	; (8013ed4 <iprintf+0x2c>)
 8013eac:	b513      	push	{r0, r1, r4, lr}
 8013eae:	681c      	ldr	r4, [r3, #0]
 8013eb0:	b124      	cbz	r4, 8013ebc <iprintf+0x14>
 8013eb2:	69a3      	ldr	r3, [r4, #24]
 8013eb4:	b913      	cbnz	r3, 8013ebc <iprintf+0x14>
 8013eb6:	4620      	mov	r0, r4
 8013eb8:	f7ff fe76 	bl	8013ba8 <__sinit>
 8013ebc:	ab05      	add	r3, sp, #20
 8013ebe:	9a04      	ldr	r2, [sp, #16]
 8013ec0:	68a1      	ldr	r1, [r4, #8]
 8013ec2:	9301      	str	r3, [sp, #4]
 8013ec4:	4620      	mov	r0, r4
 8013ec6:	f000 fab3 	bl	8014430 <_vfiprintf_r>
 8013eca:	b002      	add	sp, #8
 8013ecc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013ed0:	b004      	add	sp, #16
 8013ed2:	4770      	bx	lr
 8013ed4:	2000001c 	.word	0x2000001c

08013ed8 <rand>:
 8013ed8:	4b16      	ldr	r3, [pc, #88]	; (8013f34 <rand+0x5c>)
 8013eda:	b510      	push	{r4, lr}
 8013edc:	681c      	ldr	r4, [r3, #0]
 8013ede:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8013ee0:	b9b3      	cbnz	r3, 8013f10 <rand+0x38>
 8013ee2:	2018      	movs	r0, #24
 8013ee4:	f000 fa1a 	bl	801431c <malloc>
 8013ee8:	63a0      	str	r0, [r4, #56]	; 0x38
 8013eea:	b928      	cbnz	r0, 8013ef8 <rand+0x20>
 8013eec:	4602      	mov	r2, r0
 8013eee:	4b12      	ldr	r3, [pc, #72]	; (8013f38 <rand+0x60>)
 8013ef0:	4812      	ldr	r0, [pc, #72]	; (8013f3c <rand+0x64>)
 8013ef2:	214e      	movs	r1, #78	; 0x4e
 8013ef4:	f000 f8fe 	bl	80140f4 <__assert_func>
 8013ef8:	4a11      	ldr	r2, [pc, #68]	; (8013f40 <rand+0x68>)
 8013efa:	4b12      	ldr	r3, [pc, #72]	; (8013f44 <rand+0x6c>)
 8013efc:	e9c0 2300 	strd	r2, r3, [r0]
 8013f00:	4b11      	ldr	r3, [pc, #68]	; (8013f48 <rand+0x70>)
 8013f02:	6083      	str	r3, [r0, #8]
 8013f04:	230b      	movs	r3, #11
 8013f06:	8183      	strh	r3, [r0, #12]
 8013f08:	2201      	movs	r2, #1
 8013f0a:	2300      	movs	r3, #0
 8013f0c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8013f10:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8013f12:	4a0e      	ldr	r2, [pc, #56]	; (8013f4c <rand+0x74>)
 8013f14:	6920      	ldr	r0, [r4, #16]
 8013f16:	6963      	ldr	r3, [r4, #20]
 8013f18:	490d      	ldr	r1, [pc, #52]	; (8013f50 <rand+0x78>)
 8013f1a:	4342      	muls	r2, r0
 8013f1c:	fb01 2203 	mla	r2, r1, r3, r2
 8013f20:	fba0 0101 	umull	r0, r1, r0, r1
 8013f24:	1c43      	adds	r3, r0, #1
 8013f26:	eb42 0001 	adc.w	r0, r2, r1
 8013f2a:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8013f2e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8013f32:	bd10      	pop	{r4, pc}
 8013f34:	2000001c 	.word	0x2000001c
 8013f38:	08017b84 	.word	0x08017b84
 8013f3c:	08017b9b 	.word	0x08017b9b
 8013f40:	abcd330e 	.word	0xabcd330e
 8013f44:	e66d1234 	.word	0xe66d1234
 8013f48:	0005deec 	.word	0x0005deec
 8013f4c:	5851f42d 	.word	0x5851f42d
 8013f50:	4c957f2d 	.word	0x4c957f2d

08013f54 <cleanup_glue>:
 8013f54:	b538      	push	{r3, r4, r5, lr}
 8013f56:	460c      	mov	r4, r1
 8013f58:	6809      	ldr	r1, [r1, #0]
 8013f5a:	4605      	mov	r5, r0
 8013f5c:	b109      	cbz	r1, 8013f62 <cleanup_glue+0xe>
 8013f5e:	f7ff fff9 	bl	8013f54 <cleanup_glue>
 8013f62:	4621      	mov	r1, r4
 8013f64:	4628      	mov	r0, r5
 8013f66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013f6a:	f000 b9eb 	b.w	8014344 <_free_r>
	...

08013f70 <_reclaim_reent>:
 8013f70:	4b2c      	ldr	r3, [pc, #176]	; (8014024 <_reclaim_reent+0xb4>)
 8013f72:	681b      	ldr	r3, [r3, #0]
 8013f74:	4283      	cmp	r3, r0
 8013f76:	b570      	push	{r4, r5, r6, lr}
 8013f78:	4604      	mov	r4, r0
 8013f7a:	d051      	beq.n	8014020 <_reclaim_reent+0xb0>
 8013f7c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8013f7e:	b143      	cbz	r3, 8013f92 <_reclaim_reent+0x22>
 8013f80:	68db      	ldr	r3, [r3, #12]
 8013f82:	2b00      	cmp	r3, #0
 8013f84:	d14a      	bne.n	801401c <_reclaim_reent+0xac>
 8013f86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013f88:	6819      	ldr	r1, [r3, #0]
 8013f8a:	b111      	cbz	r1, 8013f92 <_reclaim_reent+0x22>
 8013f8c:	4620      	mov	r0, r4
 8013f8e:	f000 f9d9 	bl	8014344 <_free_r>
 8013f92:	6961      	ldr	r1, [r4, #20]
 8013f94:	b111      	cbz	r1, 8013f9c <_reclaim_reent+0x2c>
 8013f96:	4620      	mov	r0, r4
 8013f98:	f000 f9d4 	bl	8014344 <_free_r>
 8013f9c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8013f9e:	b111      	cbz	r1, 8013fa6 <_reclaim_reent+0x36>
 8013fa0:	4620      	mov	r0, r4
 8013fa2:	f000 f9cf 	bl	8014344 <_free_r>
 8013fa6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8013fa8:	b111      	cbz	r1, 8013fb0 <_reclaim_reent+0x40>
 8013faa:	4620      	mov	r0, r4
 8013fac:	f000 f9ca 	bl	8014344 <_free_r>
 8013fb0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8013fb2:	b111      	cbz	r1, 8013fba <_reclaim_reent+0x4a>
 8013fb4:	4620      	mov	r0, r4
 8013fb6:	f000 f9c5 	bl	8014344 <_free_r>
 8013fba:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8013fbc:	b111      	cbz	r1, 8013fc4 <_reclaim_reent+0x54>
 8013fbe:	4620      	mov	r0, r4
 8013fc0:	f000 f9c0 	bl	8014344 <_free_r>
 8013fc4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8013fc6:	b111      	cbz	r1, 8013fce <_reclaim_reent+0x5e>
 8013fc8:	4620      	mov	r0, r4
 8013fca:	f000 f9bb 	bl	8014344 <_free_r>
 8013fce:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8013fd0:	b111      	cbz	r1, 8013fd8 <_reclaim_reent+0x68>
 8013fd2:	4620      	mov	r0, r4
 8013fd4:	f000 f9b6 	bl	8014344 <_free_r>
 8013fd8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013fda:	b111      	cbz	r1, 8013fe2 <_reclaim_reent+0x72>
 8013fdc:	4620      	mov	r0, r4
 8013fde:	f000 f9b1 	bl	8014344 <_free_r>
 8013fe2:	69a3      	ldr	r3, [r4, #24]
 8013fe4:	b1e3      	cbz	r3, 8014020 <_reclaim_reent+0xb0>
 8013fe6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8013fe8:	4620      	mov	r0, r4
 8013fea:	4798      	blx	r3
 8013fec:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8013fee:	b1b9      	cbz	r1, 8014020 <_reclaim_reent+0xb0>
 8013ff0:	4620      	mov	r0, r4
 8013ff2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013ff6:	f7ff bfad 	b.w	8013f54 <cleanup_glue>
 8013ffa:	5949      	ldr	r1, [r1, r5]
 8013ffc:	b941      	cbnz	r1, 8014010 <_reclaim_reent+0xa0>
 8013ffe:	3504      	adds	r5, #4
 8014000:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014002:	2d80      	cmp	r5, #128	; 0x80
 8014004:	68d9      	ldr	r1, [r3, #12]
 8014006:	d1f8      	bne.n	8013ffa <_reclaim_reent+0x8a>
 8014008:	4620      	mov	r0, r4
 801400a:	f000 f99b 	bl	8014344 <_free_r>
 801400e:	e7ba      	b.n	8013f86 <_reclaim_reent+0x16>
 8014010:	680e      	ldr	r6, [r1, #0]
 8014012:	4620      	mov	r0, r4
 8014014:	f000 f996 	bl	8014344 <_free_r>
 8014018:	4631      	mov	r1, r6
 801401a:	e7ef      	b.n	8013ffc <_reclaim_reent+0x8c>
 801401c:	2500      	movs	r5, #0
 801401e:	e7ef      	b.n	8014000 <_reclaim_reent+0x90>
 8014020:	bd70      	pop	{r4, r5, r6, pc}
 8014022:	bf00      	nop
 8014024:	2000001c 	.word	0x2000001c

08014028 <_sbrk_r>:
 8014028:	b538      	push	{r3, r4, r5, lr}
 801402a:	4d06      	ldr	r5, [pc, #24]	; (8014044 <_sbrk_r+0x1c>)
 801402c:	2300      	movs	r3, #0
 801402e:	4604      	mov	r4, r0
 8014030:	4608      	mov	r0, r1
 8014032:	602b      	str	r3, [r5, #0]
 8014034:	f7ff faf0 	bl	8013618 <_sbrk>
 8014038:	1c43      	adds	r3, r0, #1
 801403a:	d102      	bne.n	8014042 <_sbrk_r+0x1a>
 801403c:	682b      	ldr	r3, [r5, #0]
 801403e:	b103      	cbz	r3, 8014042 <_sbrk_r+0x1a>
 8014040:	6023      	str	r3, [r4, #0]
 8014042:	bd38      	pop	{r3, r4, r5, pc}
 8014044:	2000b548 	.word	0x2000b548

08014048 <__sread>:
 8014048:	b510      	push	{r4, lr}
 801404a:	460c      	mov	r4, r1
 801404c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014050:	f000 fcb2 	bl	80149b8 <_read_r>
 8014054:	2800      	cmp	r0, #0
 8014056:	bfab      	itete	ge
 8014058:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801405a:	89a3      	ldrhlt	r3, [r4, #12]
 801405c:	181b      	addge	r3, r3, r0
 801405e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8014062:	bfac      	ite	ge
 8014064:	6563      	strge	r3, [r4, #84]	; 0x54
 8014066:	81a3      	strhlt	r3, [r4, #12]
 8014068:	bd10      	pop	{r4, pc}

0801406a <__swrite>:
 801406a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801406e:	461f      	mov	r7, r3
 8014070:	898b      	ldrh	r3, [r1, #12]
 8014072:	05db      	lsls	r3, r3, #23
 8014074:	4605      	mov	r5, r0
 8014076:	460c      	mov	r4, r1
 8014078:	4616      	mov	r6, r2
 801407a:	d505      	bpl.n	8014088 <__swrite+0x1e>
 801407c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014080:	2302      	movs	r3, #2
 8014082:	2200      	movs	r2, #0
 8014084:	f000 f938 	bl	80142f8 <_lseek_r>
 8014088:	89a3      	ldrh	r3, [r4, #12]
 801408a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801408e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014092:	81a3      	strh	r3, [r4, #12]
 8014094:	4632      	mov	r2, r6
 8014096:	463b      	mov	r3, r7
 8014098:	4628      	mov	r0, r5
 801409a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801409e:	f000 b817 	b.w	80140d0 <_write_r>

080140a2 <__sseek>:
 80140a2:	b510      	push	{r4, lr}
 80140a4:	460c      	mov	r4, r1
 80140a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80140aa:	f000 f925 	bl	80142f8 <_lseek_r>
 80140ae:	1c43      	adds	r3, r0, #1
 80140b0:	89a3      	ldrh	r3, [r4, #12]
 80140b2:	bf15      	itete	ne
 80140b4:	6560      	strne	r0, [r4, #84]	; 0x54
 80140b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80140ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80140be:	81a3      	strheq	r3, [r4, #12]
 80140c0:	bf18      	it	ne
 80140c2:	81a3      	strhne	r3, [r4, #12]
 80140c4:	bd10      	pop	{r4, pc}

080140c6 <__sclose>:
 80140c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80140ca:	f000 b831 	b.w	8014130 <_close_r>
	...

080140d0 <_write_r>:
 80140d0:	b538      	push	{r3, r4, r5, lr}
 80140d2:	4d07      	ldr	r5, [pc, #28]	; (80140f0 <_write_r+0x20>)
 80140d4:	4604      	mov	r4, r0
 80140d6:	4608      	mov	r0, r1
 80140d8:	4611      	mov	r1, r2
 80140da:	2200      	movs	r2, #0
 80140dc:	602a      	str	r2, [r5, #0]
 80140de:	461a      	mov	r2, r3
 80140e0:	f7ff fa49 	bl	8013576 <_write>
 80140e4:	1c43      	adds	r3, r0, #1
 80140e6:	d102      	bne.n	80140ee <_write_r+0x1e>
 80140e8:	682b      	ldr	r3, [r5, #0]
 80140ea:	b103      	cbz	r3, 80140ee <_write_r+0x1e>
 80140ec:	6023      	str	r3, [r4, #0]
 80140ee:	bd38      	pop	{r3, r4, r5, pc}
 80140f0:	2000b548 	.word	0x2000b548

080140f4 <__assert_func>:
 80140f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80140f6:	4614      	mov	r4, r2
 80140f8:	461a      	mov	r2, r3
 80140fa:	4b09      	ldr	r3, [pc, #36]	; (8014120 <__assert_func+0x2c>)
 80140fc:	681b      	ldr	r3, [r3, #0]
 80140fe:	4605      	mov	r5, r0
 8014100:	68d8      	ldr	r0, [r3, #12]
 8014102:	b14c      	cbz	r4, 8014118 <__assert_func+0x24>
 8014104:	4b07      	ldr	r3, [pc, #28]	; (8014124 <__assert_func+0x30>)
 8014106:	9100      	str	r1, [sp, #0]
 8014108:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801410c:	4906      	ldr	r1, [pc, #24]	; (8014128 <__assert_func+0x34>)
 801410e:	462b      	mov	r3, r5
 8014110:	f000 f8e0 	bl	80142d4 <fiprintf>
 8014114:	f000 fd22 	bl	8014b5c <abort>
 8014118:	4b04      	ldr	r3, [pc, #16]	; (801412c <__assert_func+0x38>)
 801411a:	461c      	mov	r4, r3
 801411c:	e7f3      	b.n	8014106 <__assert_func+0x12>
 801411e:	bf00      	nop
 8014120:	2000001c 	.word	0x2000001c
 8014124:	08017bf6 	.word	0x08017bf6
 8014128:	08017c03 	.word	0x08017c03
 801412c:	08017c31 	.word	0x08017c31

08014130 <_close_r>:
 8014130:	b538      	push	{r3, r4, r5, lr}
 8014132:	4d06      	ldr	r5, [pc, #24]	; (801414c <_close_r+0x1c>)
 8014134:	2300      	movs	r3, #0
 8014136:	4604      	mov	r4, r0
 8014138:	4608      	mov	r0, r1
 801413a:	602b      	str	r3, [r5, #0]
 801413c:	f7ff fa37 	bl	80135ae <_close>
 8014140:	1c43      	adds	r3, r0, #1
 8014142:	d102      	bne.n	801414a <_close_r+0x1a>
 8014144:	682b      	ldr	r3, [r5, #0]
 8014146:	b103      	cbz	r3, 801414a <_close_r+0x1a>
 8014148:	6023      	str	r3, [r4, #0]
 801414a:	bd38      	pop	{r3, r4, r5, pc}
 801414c:	2000b548 	.word	0x2000b548

08014150 <__sflush_r>:
 8014150:	898a      	ldrh	r2, [r1, #12]
 8014152:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014156:	4605      	mov	r5, r0
 8014158:	0710      	lsls	r0, r2, #28
 801415a:	460c      	mov	r4, r1
 801415c:	d458      	bmi.n	8014210 <__sflush_r+0xc0>
 801415e:	684b      	ldr	r3, [r1, #4]
 8014160:	2b00      	cmp	r3, #0
 8014162:	dc05      	bgt.n	8014170 <__sflush_r+0x20>
 8014164:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8014166:	2b00      	cmp	r3, #0
 8014168:	dc02      	bgt.n	8014170 <__sflush_r+0x20>
 801416a:	2000      	movs	r0, #0
 801416c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014170:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014172:	2e00      	cmp	r6, #0
 8014174:	d0f9      	beq.n	801416a <__sflush_r+0x1a>
 8014176:	2300      	movs	r3, #0
 8014178:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801417c:	682f      	ldr	r7, [r5, #0]
 801417e:	602b      	str	r3, [r5, #0]
 8014180:	d032      	beq.n	80141e8 <__sflush_r+0x98>
 8014182:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014184:	89a3      	ldrh	r3, [r4, #12]
 8014186:	075a      	lsls	r2, r3, #29
 8014188:	d505      	bpl.n	8014196 <__sflush_r+0x46>
 801418a:	6863      	ldr	r3, [r4, #4]
 801418c:	1ac0      	subs	r0, r0, r3
 801418e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014190:	b10b      	cbz	r3, 8014196 <__sflush_r+0x46>
 8014192:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014194:	1ac0      	subs	r0, r0, r3
 8014196:	2300      	movs	r3, #0
 8014198:	4602      	mov	r2, r0
 801419a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801419c:	6a21      	ldr	r1, [r4, #32]
 801419e:	4628      	mov	r0, r5
 80141a0:	47b0      	blx	r6
 80141a2:	1c43      	adds	r3, r0, #1
 80141a4:	89a3      	ldrh	r3, [r4, #12]
 80141a6:	d106      	bne.n	80141b6 <__sflush_r+0x66>
 80141a8:	6829      	ldr	r1, [r5, #0]
 80141aa:	291d      	cmp	r1, #29
 80141ac:	d82c      	bhi.n	8014208 <__sflush_r+0xb8>
 80141ae:	4a2a      	ldr	r2, [pc, #168]	; (8014258 <__sflush_r+0x108>)
 80141b0:	40ca      	lsrs	r2, r1
 80141b2:	07d6      	lsls	r6, r2, #31
 80141b4:	d528      	bpl.n	8014208 <__sflush_r+0xb8>
 80141b6:	2200      	movs	r2, #0
 80141b8:	6062      	str	r2, [r4, #4]
 80141ba:	04d9      	lsls	r1, r3, #19
 80141bc:	6922      	ldr	r2, [r4, #16]
 80141be:	6022      	str	r2, [r4, #0]
 80141c0:	d504      	bpl.n	80141cc <__sflush_r+0x7c>
 80141c2:	1c42      	adds	r2, r0, #1
 80141c4:	d101      	bne.n	80141ca <__sflush_r+0x7a>
 80141c6:	682b      	ldr	r3, [r5, #0]
 80141c8:	b903      	cbnz	r3, 80141cc <__sflush_r+0x7c>
 80141ca:	6560      	str	r0, [r4, #84]	; 0x54
 80141cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80141ce:	602f      	str	r7, [r5, #0]
 80141d0:	2900      	cmp	r1, #0
 80141d2:	d0ca      	beq.n	801416a <__sflush_r+0x1a>
 80141d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80141d8:	4299      	cmp	r1, r3
 80141da:	d002      	beq.n	80141e2 <__sflush_r+0x92>
 80141dc:	4628      	mov	r0, r5
 80141de:	f000 f8b1 	bl	8014344 <_free_r>
 80141e2:	2000      	movs	r0, #0
 80141e4:	6360      	str	r0, [r4, #52]	; 0x34
 80141e6:	e7c1      	b.n	801416c <__sflush_r+0x1c>
 80141e8:	6a21      	ldr	r1, [r4, #32]
 80141ea:	2301      	movs	r3, #1
 80141ec:	4628      	mov	r0, r5
 80141ee:	47b0      	blx	r6
 80141f0:	1c41      	adds	r1, r0, #1
 80141f2:	d1c7      	bne.n	8014184 <__sflush_r+0x34>
 80141f4:	682b      	ldr	r3, [r5, #0]
 80141f6:	2b00      	cmp	r3, #0
 80141f8:	d0c4      	beq.n	8014184 <__sflush_r+0x34>
 80141fa:	2b1d      	cmp	r3, #29
 80141fc:	d001      	beq.n	8014202 <__sflush_r+0xb2>
 80141fe:	2b16      	cmp	r3, #22
 8014200:	d101      	bne.n	8014206 <__sflush_r+0xb6>
 8014202:	602f      	str	r7, [r5, #0]
 8014204:	e7b1      	b.n	801416a <__sflush_r+0x1a>
 8014206:	89a3      	ldrh	r3, [r4, #12]
 8014208:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801420c:	81a3      	strh	r3, [r4, #12]
 801420e:	e7ad      	b.n	801416c <__sflush_r+0x1c>
 8014210:	690f      	ldr	r7, [r1, #16]
 8014212:	2f00      	cmp	r7, #0
 8014214:	d0a9      	beq.n	801416a <__sflush_r+0x1a>
 8014216:	0793      	lsls	r3, r2, #30
 8014218:	680e      	ldr	r6, [r1, #0]
 801421a:	bf08      	it	eq
 801421c:	694b      	ldreq	r3, [r1, #20]
 801421e:	600f      	str	r7, [r1, #0]
 8014220:	bf18      	it	ne
 8014222:	2300      	movne	r3, #0
 8014224:	eba6 0807 	sub.w	r8, r6, r7
 8014228:	608b      	str	r3, [r1, #8]
 801422a:	f1b8 0f00 	cmp.w	r8, #0
 801422e:	dd9c      	ble.n	801416a <__sflush_r+0x1a>
 8014230:	6a21      	ldr	r1, [r4, #32]
 8014232:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014234:	4643      	mov	r3, r8
 8014236:	463a      	mov	r2, r7
 8014238:	4628      	mov	r0, r5
 801423a:	47b0      	blx	r6
 801423c:	2800      	cmp	r0, #0
 801423e:	dc06      	bgt.n	801424e <__sflush_r+0xfe>
 8014240:	89a3      	ldrh	r3, [r4, #12]
 8014242:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014246:	81a3      	strh	r3, [r4, #12]
 8014248:	f04f 30ff 	mov.w	r0, #4294967295
 801424c:	e78e      	b.n	801416c <__sflush_r+0x1c>
 801424e:	4407      	add	r7, r0
 8014250:	eba8 0800 	sub.w	r8, r8, r0
 8014254:	e7e9      	b.n	801422a <__sflush_r+0xda>
 8014256:	bf00      	nop
 8014258:	20400001 	.word	0x20400001

0801425c <_fflush_r>:
 801425c:	b538      	push	{r3, r4, r5, lr}
 801425e:	690b      	ldr	r3, [r1, #16]
 8014260:	4605      	mov	r5, r0
 8014262:	460c      	mov	r4, r1
 8014264:	b913      	cbnz	r3, 801426c <_fflush_r+0x10>
 8014266:	2500      	movs	r5, #0
 8014268:	4628      	mov	r0, r5
 801426a:	bd38      	pop	{r3, r4, r5, pc}
 801426c:	b118      	cbz	r0, 8014276 <_fflush_r+0x1a>
 801426e:	6983      	ldr	r3, [r0, #24]
 8014270:	b90b      	cbnz	r3, 8014276 <_fflush_r+0x1a>
 8014272:	f7ff fc99 	bl	8013ba8 <__sinit>
 8014276:	4b14      	ldr	r3, [pc, #80]	; (80142c8 <_fflush_r+0x6c>)
 8014278:	429c      	cmp	r4, r3
 801427a:	d11b      	bne.n	80142b4 <_fflush_r+0x58>
 801427c:	686c      	ldr	r4, [r5, #4]
 801427e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014282:	2b00      	cmp	r3, #0
 8014284:	d0ef      	beq.n	8014266 <_fflush_r+0xa>
 8014286:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8014288:	07d0      	lsls	r0, r2, #31
 801428a:	d404      	bmi.n	8014296 <_fflush_r+0x3a>
 801428c:	0599      	lsls	r1, r3, #22
 801428e:	d402      	bmi.n	8014296 <_fflush_r+0x3a>
 8014290:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014292:	f7ff fd4c 	bl	8013d2e <__retarget_lock_acquire_recursive>
 8014296:	4628      	mov	r0, r5
 8014298:	4621      	mov	r1, r4
 801429a:	f7ff ff59 	bl	8014150 <__sflush_r>
 801429e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80142a0:	07da      	lsls	r2, r3, #31
 80142a2:	4605      	mov	r5, r0
 80142a4:	d4e0      	bmi.n	8014268 <_fflush_r+0xc>
 80142a6:	89a3      	ldrh	r3, [r4, #12]
 80142a8:	059b      	lsls	r3, r3, #22
 80142aa:	d4dd      	bmi.n	8014268 <_fflush_r+0xc>
 80142ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80142ae:	f7ff fd3f 	bl	8013d30 <__retarget_lock_release_recursive>
 80142b2:	e7d9      	b.n	8014268 <_fflush_r+0xc>
 80142b4:	4b05      	ldr	r3, [pc, #20]	; (80142cc <_fflush_r+0x70>)
 80142b6:	429c      	cmp	r4, r3
 80142b8:	d101      	bne.n	80142be <_fflush_r+0x62>
 80142ba:	68ac      	ldr	r4, [r5, #8]
 80142bc:	e7df      	b.n	801427e <_fflush_r+0x22>
 80142be:	4b04      	ldr	r3, [pc, #16]	; (80142d0 <_fflush_r+0x74>)
 80142c0:	429c      	cmp	r4, r3
 80142c2:	bf08      	it	eq
 80142c4:	68ec      	ldreq	r4, [r5, #12]
 80142c6:	e7da      	b.n	801427e <_fflush_r+0x22>
 80142c8:	08017b40 	.word	0x08017b40
 80142cc:	08017b60 	.word	0x08017b60
 80142d0:	08017b20 	.word	0x08017b20

080142d4 <fiprintf>:
 80142d4:	b40e      	push	{r1, r2, r3}
 80142d6:	b503      	push	{r0, r1, lr}
 80142d8:	4601      	mov	r1, r0
 80142da:	ab03      	add	r3, sp, #12
 80142dc:	4805      	ldr	r0, [pc, #20]	; (80142f4 <fiprintf+0x20>)
 80142de:	f853 2b04 	ldr.w	r2, [r3], #4
 80142e2:	6800      	ldr	r0, [r0, #0]
 80142e4:	9301      	str	r3, [sp, #4]
 80142e6:	f000 f8a3 	bl	8014430 <_vfiprintf_r>
 80142ea:	b002      	add	sp, #8
 80142ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80142f0:	b003      	add	sp, #12
 80142f2:	4770      	bx	lr
 80142f4:	2000001c 	.word	0x2000001c

080142f8 <_lseek_r>:
 80142f8:	b538      	push	{r3, r4, r5, lr}
 80142fa:	4d07      	ldr	r5, [pc, #28]	; (8014318 <_lseek_r+0x20>)
 80142fc:	4604      	mov	r4, r0
 80142fe:	4608      	mov	r0, r1
 8014300:	4611      	mov	r1, r2
 8014302:	2200      	movs	r2, #0
 8014304:	602a      	str	r2, [r5, #0]
 8014306:	461a      	mov	r2, r3
 8014308:	f7ff f978 	bl	80135fc <_lseek>
 801430c:	1c43      	adds	r3, r0, #1
 801430e:	d102      	bne.n	8014316 <_lseek_r+0x1e>
 8014310:	682b      	ldr	r3, [r5, #0]
 8014312:	b103      	cbz	r3, 8014316 <_lseek_r+0x1e>
 8014314:	6023      	str	r3, [r4, #0]
 8014316:	bd38      	pop	{r3, r4, r5, pc}
 8014318:	2000b548 	.word	0x2000b548

0801431c <malloc>:
 801431c:	4b02      	ldr	r3, [pc, #8]	; (8014328 <malloc+0xc>)
 801431e:	4601      	mov	r1, r0
 8014320:	6818      	ldr	r0, [r3, #0]
 8014322:	f7ff bd4d 	b.w	8013dc0 <_malloc_r>
 8014326:	bf00      	nop
 8014328:	2000001c 	.word	0x2000001c

0801432c <__malloc_lock>:
 801432c:	4801      	ldr	r0, [pc, #4]	; (8014334 <__malloc_lock+0x8>)
 801432e:	f7ff bcfe 	b.w	8013d2e <__retarget_lock_acquire_recursive>
 8014332:	bf00      	nop
 8014334:	2000b53c 	.word	0x2000b53c

08014338 <__malloc_unlock>:
 8014338:	4801      	ldr	r0, [pc, #4]	; (8014340 <__malloc_unlock+0x8>)
 801433a:	f7ff bcf9 	b.w	8013d30 <__retarget_lock_release_recursive>
 801433e:	bf00      	nop
 8014340:	2000b53c 	.word	0x2000b53c

08014344 <_free_r>:
 8014344:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014346:	2900      	cmp	r1, #0
 8014348:	d044      	beq.n	80143d4 <_free_r+0x90>
 801434a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801434e:	9001      	str	r0, [sp, #4]
 8014350:	2b00      	cmp	r3, #0
 8014352:	f1a1 0404 	sub.w	r4, r1, #4
 8014356:	bfb8      	it	lt
 8014358:	18e4      	addlt	r4, r4, r3
 801435a:	f7ff ffe7 	bl	801432c <__malloc_lock>
 801435e:	4a1e      	ldr	r2, [pc, #120]	; (80143d8 <_free_r+0x94>)
 8014360:	9801      	ldr	r0, [sp, #4]
 8014362:	6813      	ldr	r3, [r2, #0]
 8014364:	b933      	cbnz	r3, 8014374 <_free_r+0x30>
 8014366:	6063      	str	r3, [r4, #4]
 8014368:	6014      	str	r4, [r2, #0]
 801436a:	b003      	add	sp, #12
 801436c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014370:	f7ff bfe2 	b.w	8014338 <__malloc_unlock>
 8014374:	42a3      	cmp	r3, r4
 8014376:	d908      	bls.n	801438a <_free_r+0x46>
 8014378:	6825      	ldr	r5, [r4, #0]
 801437a:	1961      	adds	r1, r4, r5
 801437c:	428b      	cmp	r3, r1
 801437e:	bf01      	itttt	eq
 8014380:	6819      	ldreq	r1, [r3, #0]
 8014382:	685b      	ldreq	r3, [r3, #4]
 8014384:	1949      	addeq	r1, r1, r5
 8014386:	6021      	streq	r1, [r4, #0]
 8014388:	e7ed      	b.n	8014366 <_free_r+0x22>
 801438a:	461a      	mov	r2, r3
 801438c:	685b      	ldr	r3, [r3, #4]
 801438e:	b10b      	cbz	r3, 8014394 <_free_r+0x50>
 8014390:	42a3      	cmp	r3, r4
 8014392:	d9fa      	bls.n	801438a <_free_r+0x46>
 8014394:	6811      	ldr	r1, [r2, #0]
 8014396:	1855      	adds	r5, r2, r1
 8014398:	42a5      	cmp	r5, r4
 801439a:	d10b      	bne.n	80143b4 <_free_r+0x70>
 801439c:	6824      	ldr	r4, [r4, #0]
 801439e:	4421      	add	r1, r4
 80143a0:	1854      	adds	r4, r2, r1
 80143a2:	42a3      	cmp	r3, r4
 80143a4:	6011      	str	r1, [r2, #0]
 80143a6:	d1e0      	bne.n	801436a <_free_r+0x26>
 80143a8:	681c      	ldr	r4, [r3, #0]
 80143aa:	685b      	ldr	r3, [r3, #4]
 80143ac:	6053      	str	r3, [r2, #4]
 80143ae:	4421      	add	r1, r4
 80143b0:	6011      	str	r1, [r2, #0]
 80143b2:	e7da      	b.n	801436a <_free_r+0x26>
 80143b4:	d902      	bls.n	80143bc <_free_r+0x78>
 80143b6:	230c      	movs	r3, #12
 80143b8:	6003      	str	r3, [r0, #0]
 80143ba:	e7d6      	b.n	801436a <_free_r+0x26>
 80143bc:	6825      	ldr	r5, [r4, #0]
 80143be:	1961      	adds	r1, r4, r5
 80143c0:	428b      	cmp	r3, r1
 80143c2:	bf04      	itt	eq
 80143c4:	6819      	ldreq	r1, [r3, #0]
 80143c6:	685b      	ldreq	r3, [r3, #4]
 80143c8:	6063      	str	r3, [r4, #4]
 80143ca:	bf04      	itt	eq
 80143cc:	1949      	addeq	r1, r1, r5
 80143ce:	6021      	streq	r1, [r4, #0]
 80143d0:	6054      	str	r4, [r2, #4]
 80143d2:	e7ca      	b.n	801436a <_free_r+0x26>
 80143d4:	b003      	add	sp, #12
 80143d6:	bd30      	pop	{r4, r5, pc}
 80143d8:	2000b540 	.word	0x2000b540

080143dc <__sfputc_r>:
 80143dc:	6893      	ldr	r3, [r2, #8]
 80143de:	3b01      	subs	r3, #1
 80143e0:	2b00      	cmp	r3, #0
 80143e2:	b410      	push	{r4}
 80143e4:	6093      	str	r3, [r2, #8]
 80143e6:	da08      	bge.n	80143fa <__sfputc_r+0x1e>
 80143e8:	6994      	ldr	r4, [r2, #24]
 80143ea:	42a3      	cmp	r3, r4
 80143ec:	db01      	blt.n	80143f2 <__sfputc_r+0x16>
 80143ee:	290a      	cmp	r1, #10
 80143f0:	d103      	bne.n	80143fa <__sfputc_r+0x1e>
 80143f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80143f6:	f000 baf1 	b.w	80149dc <__swbuf_r>
 80143fa:	6813      	ldr	r3, [r2, #0]
 80143fc:	1c58      	adds	r0, r3, #1
 80143fe:	6010      	str	r0, [r2, #0]
 8014400:	7019      	strb	r1, [r3, #0]
 8014402:	4608      	mov	r0, r1
 8014404:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014408:	4770      	bx	lr

0801440a <__sfputs_r>:
 801440a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801440c:	4606      	mov	r6, r0
 801440e:	460f      	mov	r7, r1
 8014410:	4614      	mov	r4, r2
 8014412:	18d5      	adds	r5, r2, r3
 8014414:	42ac      	cmp	r4, r5
 8014416:	d101      	bne.n	801441c <__sfputs_r+0x12>
 8014418:	2000      	movs	r0, #0
 801441a:	e007      	b.n	801442c <__sfputs_r+0x22>
 801441c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014420:	463a      	mov	r2, r7
 8014422:	4630      	mov	r0, r6
 8014424:	f7ff ffda 	bl	80143dc <__sfputc_r>
 8014428:	1c43      	adds	r3, r0, #1
 801442a:	d1f3      	bne.n	8014414 <__sfputs_r+0xa>
 801442c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014430 <_vfiprintf_r>:
 8014430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014434:	460d      	mov	r5, r1
 8014436:	b09d      	sub	sp, #116	; 0x74
 8014438:	4614      	mov	r4, r2
 801443a:	4698      	mov	r8, r3
 801443c:	4606      	mov	r6, r0
 801443e:	b118      	cbz	r0, 8014448 <_vfiprintf_r+0x18>
 8014440:	6983      	ldr	r3, [r0, #24]
 8014442:	b90b      	cbnz	r3, 8014448 <_vfiprintf_r+0x18>
 8014444:	f7ff fbb0 	bl	8013ba8 <__sinit>
 8014448:	4b89      	ldr	r3, [pc, #548]	; (8014670 <_vfiprintf_r+0x240>)
 801444a:	429d      	cmp	r5, r3
 801444c:	d11b      	bne.n	8014486 <_vfiprintf_r+0x56>
 801444e:	6875      	ldr	r5, [r6, #4]
 8014450:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014452:	07d9      	lsls	r1, r3, #31
 8014454:	d405      	bmi.n	8014462 <_vfiprintf_r+0x32>
 8014456:	89ab      	ldrh	r3, [r5, #12]
 8014458:	059a      	lsls	r2, r3, #22
 801445a:	d402      	bmi.n	8014462 <_vfiprintf_r+0x32>
 801445c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801445e:	f7ff fc66 	bl	8013d2e <__retarget_lock_acquire_recursive>
 8014462:	89ab      	ldrh	r3, [r5, #12]
 8014464:	071b      	lsls	r3, r3, #28
 8014466:	d501      	bpl.n	801446c <_vfiprintf_r+0x3c>
 8014468:	692b      	ldr	r3, [r5, #16]
 801446a:	b9eb      	cbnz	r3, 80144a8 <_vfiprintf_r+0x78>
 801446c:	4629      	mov	r1, r5
 801446e:	4630      	mov	r0, r6
 8014470:	f000 fb06 	bl	8014a80 <__swsetup_r>
 8014474:	b1c0      	cbz	r0, 80144a8 <_vfiprintf_r+0x78>
 8014476:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014478:	07dc      	lsls	r4, r3, #31
 801447a:	d50e      	bpl.n	801449a <_vfiprintf_r+0x6a>
 801447c:	f04f 30ff 	mov.w	r0, #4294967295
 8014480:	b01d      	add	sp, #116	; 0x74
 8014482:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014486:	4b7b      	ldr	r3, [pc, #492]	; (8014674 <_vfiprintf_r+0x244>)
 8014488:	429d      	cmp	r5, r3
 801448a:	d101      	bne.n	8014490 <_vfiprintf_r+0x60>
 801448c:	68b5      	ldr	r5, [r6, #8]
 801448e:	e7df      	b.n	8014450 <_vfiprintf_r+0x20>
 8014490:	4b79      	ldr	r3, [pc, #484]	; (8014678 <_vfiprintf_r+0x248>)
 8014492:	429d      	cmp	r5, r3
 8014494:	bf08      	it	eq
 8014496:	68f5      	ldreq	r5, [r6, #12]
 8014498:	e7da      	b.n	8014450 <_vfiprintf_r+0x20>
 801449a:	89ab      	ldrh	r3, [r5, #12]
 801449c:	0598      	lsls	r0, r3, #22
 801449e:	d4ed      	bmi.n	801447c <_vfiprintf_r+0x4c>
 80144a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80144a2:	f7ff fc45 	bl	8013d30 <__retarget_lock_release_recursive>
 80144a6:	e7e9      	b.n	801447c <_vfiprintf_r+0x4c>
 80144a8:	2300      	movs	r3, #0
 80144aa:	9309      	str	r3, [sp, #36]	; 0x24
 80144ac:	2320      	movs	r3, #32
 80144ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80144b2:	f8cd 800c 	str.w	r8, [sp, #12]
 80144b6:	2330      	movs	r3, #48	; 0x30
 80144b8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801467c <_vfiprintf_r+0x24c>
 80144bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80144c0:	f04f 0901 	mov.w	r9, #1
 80144c4:	4623      	mov	r3, r4
 80144c6:	469a      	mov	sl, r3
 80144c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80144cc:	b10a      	cbz	r2, 80144d2 <_vfiprintf_r+0xa2>
 80144ce:	2a25      	cmp	r2, #37	; 0x25
 80144d0:	d1f9      	bne.n	80144c6 <_vfiprintf_r+0x96>
 80144d2:	ebba 0b04 	subs.w	fp, sl, r4
 80144d6:	d00b      	beq.n	80144f0 <_vfiprintf_r+0xc0>
 80144d8:	465b      	mov	r3, fp
 80144da:	4622      	mov	r2, r4
 80144dc:	4629      	mov	r1, r5
 80144de:	4630      	mov	r0, r6
 80144e0:	f7ff ff93 	bl	801440a <__sfputs_r>
 80144e4:	3001      	adds	r0, #1
 80144e6:	f000 80aa 	beq.w	801463e <_vfiprintf_r+0x20e>
 80144ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80144ec:	445a      	add	r2, fp
 80144ee:	9209      	str	r2, [sp, #36]	; 0x24
 80144f0:	f89a 3000 	ldrb.w	r3, [sl]
 80144f4:	2b00      	cmp	r3, #0
 80144f6:	f000 80a2 	beq.w	801463e <_vfiprintf_r+0x20e>
 80144fa:	2300      	movs	r3, #0
 80144fc:	f04f 32ff 	mov.w	r2, #4294967295
 8014500:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014504:	f10a 0a01 	add.w	sl, sl, #1
 8014508:	9304      	str	r3, [sp, #16]
 801450a:	9307      	str	r3, [sp, #28]
 801450c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014510:	931a      	str	r3, [sp, #104]	; 0x68
 8014512:	4654      	mov	r4, sl
 8014514:	2205      	movs	r2, #5
 8014516:	f814 1b01 	ldrb.w	r1, [r4], #1
 801451a:	4858      	ldr	r0, [pc, #352]	; (801467c <_vfiprintf_r+0x24c>)
 801451c:	f7eb fe58 	bl	80001d0 <memchr>
 8014520:	9a04      	ldr	r2, [sp, #16]
 8014522:	b9d8      	cbnz	r0, 801455c <_vfiprintf_r+0x12c>
 8014524:	06d1      	lsls	r1, r2, #27
 8014526:	bf44      	itt	mi
 8014528:	2320      	movmi	r3, #32
 801452a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801452e:	0713      	lsls	r3, r2, #28
 8014530:	bf44      	itt	mi
 8014532:	232b      	movmi	r3, #43	; 0x2b
 8014534:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014538:	f89a 3000 	ldrb.w	r3, [sl]
 801453c:	2b2a      	cmp	r3, #42	; 0x2a
 801453e:	d015      	beq.n	801456c <_vfiprintf_r+0x13c>
 8014540:	9a07      	ldr	r2, [sp, #28]
 8014542:	4654      	mov	r4, sl
 8014544:	2000      	movs	r0, #0
 8014546:	f04f 0c0a 	mov.w	ip, #10
 801454a:	4621      	mov	r1, r4
 801454c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014550:	3b30      	subs	r3, #48	; 0x30
 8014552:	2b09      	cmp	r3, #9
 8014554:	d94e      	bls.n	80145f4 <_vfiprintf_r+0x1c4>
 8014556:	b1b0      	cbz	r0, 8014586 <_vfiprintf_r+0x156>
 8014558:	9207      	str	r2, [sp, #28]
 801455a:	e014      	b.n	8014586 <_vfiprintf_r+0x156>
 801455c:	eba0 0308 	sub.w	r3, r0, r8
 8014560:	fa09 f303 	lsl.w	r3, r9, r3
 8014564:	4313      	orrs	r3, r2
 8014566:	9304      	str	r3, [sp, #16]
 8014568:	46a2      	mov	sl, r4
 801456a:	e7d2      	b.n	8014512 <_vfiprintf_r+0xe2>
 801456c:	9b03      	ldr	r3, [sp, #12]
 801456e:	1d19      	adds	r1, r3, #4
 8014570:	681b      	ldr	r3, [r3, #0]
 8014572:	9103      	str	r1, [sp, #12]
 8014574:	2b00      	cmp	r3, #0
 8014576:	bfbb      	ittet	lt
 8014578:	425b      	neglt	r3, r3
 801457a:	f042 0202 	orrlt.w	r2, r2, #2
 801457e:	9307      	strge	r3, [sp, #28]
 8014580:	9307      	strlt	r3, [sp, #28]
 8014582:	bfb8      	it	lt
 8014584:	9204      	strlt	r2, [sp, #16]
 8014586:	7823      	ldrb	r3, [r4, #0]
 8014588:	2b2e      	cmp	r3, #46	; 0x2e
 801458a:	d10c      	bne.n	80145a6 <_vfiprintf_r+0x176>
 801458c:	7863      	ldrb	r3, [r4, #1]
 801458e:	2b2a      	cmp	r3, #42	; 0x2a
 8014590:	d135      	bne.n	80145fe <_vfiprintf_r+0x1ce>
 8014592:	9b03      	ldr	r3, [sp, #12]
 8014594:	1d1a      	adds	r2, r3, #4
 8014596:	681b      	ldr	r3, [r3, #0]
 8014598:	9203      	str	r2, [sp, #12]
 801459a:	2b00      	cmp	r3, #0
 801459c:	bfb8      	it	lt
 801459e:	f04f 33ff 	movlt.w	r3, #4294967295
 80145a2:	3402      	adds	r4, #2
 80145a4:	9305      	str	r3, [sp, #20]
 80145a6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801468c <_vfiprintf_r+0x25c>
 80145aa:	7821      	ldrb	r1, [r4, #0]
 80145ac:	2203      	movs	r2, #3
 80145ae:	4650      	mov	r0, sl
 80145b0:	f7eb fe0e 	bl	80001d0 <memchr>
 80145b4:	b140      	cbz	r0, 80145c8 <_vfiprintf_r+0x198>
 80145b6:	2340      	movs	r3, #64	; 0x40
 80145b8:	eba0 000a 	sub.w	r0, r0, sl
 80145bc:	fa03 f000 	lsl.w	r0, r3, r0
 80145c0:	9b04      	ldr	r3, [sp, #16]
 80145c2:	4303      	orrs	r3, r0
 80145c4:	3401      	adds	r4, #1
 80145c6:	9304      	str	r3, [sp, #16]
 80145c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80145cc:	482c      	ldr	r0, [pc, #176]	; (8014680 <_vfiprintf_r+0x250>)
 80145ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80145d2:	2206      	movs	r2, #6
 80145d4:	f7eb fdfc 	bl	80001d0 <memchr>
 80145d8:	2800      	cmp	r0, #0
 80145da:	d03f      	beq.n	801465c <_vfiprintf_r+0x22c>
 80145dc:	4b29      	ldr	r3, [pc, #164]	; (8014684 <_vfiprintf_r+0x254>)
 80145de:	bb1b      	cbnz	r3, 8014628 <_vfiprintf_r+0x1f8>
 80145e0:	9b03      	ldr	r3, [sp, #12]
 80145e2:	3307      	adds	r3, #7
 80145e4:	f023 0307 	bic.w	r3, r3, #7
 80145e8:	3308      	adds	r3, #8
 80145ea:	9303      	str	r3, [sp, #12]
 80145ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80145ee:	443b      	add	r3, r7
 80145f0:	9309      	str	r3, [sp, #36]	; 0x24
 80145f2:	e767      	b.n	80144c4 <_vfiprintf_r+0x94>
 80145f4:	fb0c 3202 	mla	r2, ip, r2, r3
 80145f8:	460c      	mov	r4, r1
 80145fa:	2001      	movs	r0, #1
 80145fc:	e7a5      	b.n	801454a <_vfiprintf_r+0x11a>
 80145fe:	2300      	movs	r3, #0
 8014600:	3401      	adds	r4, #1
 8014602:	9305      	str	r3, [sp, #20]
 8014604:	4619      	mov	r1, r3
 8014606:	f04f 0c0a 	mov.w	ip, #10
 801460a:	4620      	mov	r0, r4
 801460c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014610:	3a30      	subs	r2, #48	; 0x30
 8014612:	2a09      	cmp	r2, #9
 8014614:	d903      	bls.n	801461e <_vfiprintf_r+0x1ee>
 8014616:	2b00      	cmp	r3, #0
 8014618:	d0c5      	beq.n	80145a6 <_vfiprintf_r+0x176>
 801461a:	9105      	str	r1, [sp, #20]
 801461c:	e7c3      	b.n	80145a6 <_vfiprintf_r+0x176>
 801461e:	fb0c 2101 	mla	r1, ip, r1, r2
 8014622:	4604      	mov	r4, r0
 8014624:	2301      	movs	r3, #1
 8014626:	e7f0      	b.n	801460a <_vfiprintf_r+0x1da>
 8014628:	ab03      	add	r3, sp, #12
 801462a:	9300      	str	r3, [sp, #0]
 801462c:	462a      	mov	r2, r5
 801462e:	4b16      	ldr	r3, [pc, #88]	; (8014688 <_vfiprintf_r+0x258>)
 8014630:	a904      	add	r1, sp, #16
 8014632:	4630      	mov	r0, r6
 8014634:	f3af 8000 	nop.w
 8014638:	4607      	mov	r7, r0
 801463a:	1c78      	adds	r0, r7, #1
 801463c:	d1d6      	bne.n	80145ec <_vfiprintf_r+0x1bc>
 801463e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014640:	07d9      	lsls	r1, r3, #31
 8014642:	d405      	bmi.n	8014650 <_vfiprintf_r+0x220>
 8014644:	89ab      	ldrh	r3, [r5, #12]
 8014646:	059a      	lsls	r2, r3, #22
 8014648:	d402      	bmi.n	8014650 <_vfiprintf_r+0x220>
 801464a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801464c:	f7ff fb70 	bl	8013d30 <__retarget_lock_release_recursive>
 8014650:	89ab      	ldrh	r3, [r5, #12]
 8014652:	065b      	lsls	r3, r3, #25
 8014654:	f53f af12 	bmi.w	801447c <_vfiprintf_r+0x4c>
 8014658:	9809      	ldr	r0, [sp, #36]	; 0x24
 801465a:	e711      	b.n	8014480 <_vfiprintf_r+0x50>
 801465c:	ab03      	add	r3, sp, #12
 801465e:	9300      	str	r3, [sp, #0]
 8014660:	462a      	mov	r2, r5
 8014662:	4b09      	ldr	r3, [pc, #36]	; (8014688 <_vfiprintf_r+0x258>)
 8014664:	a904      	add	r1, sp, #16
 8014666:	4630      	mov	r0, r6
 8014668:	f000 f880 	bl	801476c <_printf_i>
 801466c:	e7e4      	b.n	8014638 <_vfiprintf_r+0x208>
 801466e:	bf00      	nop
 8014670:	08017b40 	.word	0x08017b40
 8014674:	08017b60 	.word	0x08017b60
 8014678:	08017b20 	.word	0x08017b20
 801467c:	08017c32 	.word	0x08017c32
 8014680:	08017c3c 	.word	0x08017c3c
 8014684:	00000000 	.word	0x00000000
 8014688:	0801440b 	.word	0x0801440b
 801468c:	08017c38 	.word	0x08017c38

08014690 <_printf_common>:
 8014690:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014694:	4616      	mov	r6, r2
 8014696:	4699      	mov	r9, r3
 8014698:	688a      	ldr	r2, [r1, #8]
 801469a:	690b      	ldr	r3, [r1, #16]
 801469c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80146a0:	4293      	cmp	r3, r2
 80146a2:	bfb8      	it	lt
 80146a4:	4613      	movlt	r3, r2
 80146a6:	6033      	str	r3, [r6, #0]
 80146a8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80146ac:	4607      	mov	r7, r0
 80146ae:	460c      	mov	r4, r1
 80146b0:	b10a      	cbz	r2, 80146b6 <_printf_common+0x26>
 80146b2:	3301      	adds	r3, #1
 80146b4:	6033      	str	r3, [r6, #0]
 80146b6:	6823      	ldr	r3, [r4, #0]
 80146b8:	0699      	lsls	r1, r3, #26
 80146ba:	bf42      	ittt	mi
 80146bc:	6833      	ldrmi	r3, [r6, #0]
 80146be:	3302      	addmi	r3, #2
 80146c0:	6033      	strmi	r3, [r6, #0]
 80146c2:	6825      	ldr	r5, [r4, #0]
 80146c4:	f015 0506 	ands.w	r5, r5, #6
 80146c8:	d106      	bne.n	80146d8 <_printf_common+0x48>
 80146ca:	f104 0a19 	add.w	sl, r4, #25
 80146ce:	68e3      	ldr	r3, [r4, #12]
 80146d0:	6832      	ldr	r2, [r6, #0]
 80146d2:	1a9b      	subs	r3, r3, r2
 80146d4:	42ab      	cmp	r3, r5
 80146d6:	dc26      	bgt.n	8014726 <_printf_common+0x96>
 80146d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80146dc:	1e13      	subs	r3, r2, #0
 80146de:	6822      	ldr	r2, [r4, #0]
 80146e0:	bf18      	it	ne
 80146e2:	2301      	movne	r3, #1
 80146e4:	0692      	lsls	r2, r2, #26
 80146e6:	d42b      	bmi.n	8014740 <_printf_common+0xb0>
 80146e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80146ec:	4649      	mov	r1, r9
 80146ee:	4638      	mov	r0, r7
 80146f0:	47c0      	blx	r8
 80146f2:	3001      	adds	r0, #1
 80146f4:	d01e      	beq.n	8014734 <_printf_common+0xa4>
 80146f6:	6823      	ldr	r3, [r4, #0]
 80146f8:	68e5      	ldr	r5, [r4, #12]
 80146fa:	6832      	ldr	r2, [r6, #0]
 80146fc:	f003 0306 	and.w	r3, r3, #6
 8014700:	2b04      	cmp	r3, #4
 8014702:	bf08      	it	eq
 8014704:	1aad      	subeq	r5, r5, r2
 8014706:	68a3      	ldr	r3, [r4, #8]
 8014708:	6922      	ldr	r2, [r4, #16]
 801470a:	bf0c      	ite	eq
 801470c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014710:	2500      	movne	r5, #0
 8014712:	4293      	cmp	r3, r2
 8014714:	bfc4      	itt	gt
 8014716:	1a9b      	subgt	r3, r3, r2
 8014718:	18ed      	addgt	r5, r5, r3
 801471a:	2600      	movs	r6, #0
 801471c:	341a      	adds	r4, #26
 801471e:	42b5      	cmp	r5, r6
 8014720:	d11a      	bne.n	8014758 <_printf_common+0xc8>
 8014722:	2000      	movs	r0, #0
 8014724:	e008      	b.n	8014738 <_printf_common+0xa8>
 8014726:	2301      	movs	r3, #1
 8014728:	4652      	mov	r2, sl
 801472a:	4649      	mov	r1, r9
 801472c:	4638      	mov	r0, r7
 801472e:	47c0      	blx	r8
 8014730:	3001      	adds	r0, #1
 8014732:	d103      	bne.n	801473c <_printf_common+0xac>
 8014734:	f04f 30ff 	mov.w	r0, #4294967295
 8014738:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801473c:	3501      	adds	r5, #1
 801473e:	e7c6      	b.n	80146ce <_printf_common+0x3e>
 8014740:	18e1      	adds	r1, r4, r3
 8014742:	1c5a      	adds	r2, r3, #1
 8014744:	2030      	movs	r0, #48	; 0x30
 8014746:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801474a:	4422      	add	r2, r4
 801474c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8014750:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014754:	3302      	adds	r3, #2
 8014756:	e7c7      	b.n	80146e8 <_printf_common+0x58>
 8014758:	2301      	movs	r3, #1
 801475a:	4622      	mov	r2, r4
 801475c:	4649      	mov	r1, r9
 801475e:	4638      	mov	r0, r7
 8014760:	47c0      	blx	r8
 8014762:	3001      	adds	r0, #1
 8014764:	d0e6      	beq.n	8014734 <_printf_common+0xa4>
 8014766:	3601      	adds	r6, #1
 8014768:	e7d9      	b.n	801471e <_printf_common+0x8e>
	...

0801476c <_printf_i>:
 801476c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014770:	7e0f      	ldrb	r7, [r1, #24]
 8014772:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8014774:	2f78      	cmp	r7, #120	; 0x78
 8014776:	4691      	mov	r9, r2
 8014778:	4680      	mov	r8, r0
 801477a:	460c      	mov	r4, r1
 801477c:	469a      	mov	sl, r3
 801477e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8014782:	d807      	bhi.n	8014794 <_printf_i+0x28>
 8014784:	2f62      	cmp	r7, #98	; 0x62
 8014786:	d80a      	bhi.n	801479e <_printf_i+0x32>
 8014788:	2f00      	cmp	r7, #0
 801478a:	f000 80d8 	beq.w	801493e <_printf_i+0x1d2>
 801478e:	2f58      	cmp	r7, #88	; 0x58
 8014790:	f000 80a3 	beq.w	80148da <_printf_i+0x16e>
 8014794:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014798:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801479c:	e03a      	b.n	8014814 <_printf_i+0xa8>
 801479e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80147a2:	2b15      	cmp	r3, #21
 80147a4:	d8f6      	bhi.n	8014794 <_printf_i+0x28>
 80147a6:	a101      	add	r1, pc, #4	; (adr r1, 80147ac <_printf_i+0x40>)
 80147a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80147ac:	08014805 	.word	0x08014805
 80147b0:	08014819 	.word	0x08014819
 80147b4:	08014795 	.word	0x08014795
 80147b8:	08014795 	.word	0x08014795
 80147bc:	08014795 	.word	0x08014795
 80147c0:	08014795 	.word	0x08014795
 80147c4:	08014819 	.word	0x08014819
 80147c8:	08014795 	.word	0x08014795
 80147cc:	08014795 	.word	0x08014795
 80147d0:	08014795 	.word	0x08014795
 80147d4:	08014795 	.word	0x08014795
 80147d8:	08014925 	.word	0x08014925
 80147dc:	08014849 	.word	0x08014849
 80147e0:	08014907 	.word	0x08014907
 80147e4:	08014795 	.word	0x08014795
 80147e8:	08014795 	.word	0x08014795
 80147ec:	08014947 	.word	0x08014947
 80147f0:	08014795 	.word	0x08014795
 80147f4:	08014849 	.word	0x08014849
 80147f8:	08014795 	.word	0x08014795
 80147fc:	08014795 	.word	0x08014795
 8014800:	0801490f 	.word	0x0801490f
 8014804:	682b      	ldr	r3, [r5, #0]
 8014806:	1d1a      	adds	r2, r3, #4
 8014808:	681b      	ldr	r3, [r3, #0]
 801480a:	602a      	str	r2, [r5, #0]
 801480c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014810:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014814:	2301      	movs	r3, #1
 8014816:	e0a3      	b.n	8014960 <_printf_i+0x1f4>
 8014818:	6820      	ldr	r0, [r4, #0]
 801481a:	6829      	ldr	r1, [r5, #0]
 801481c:	0606      	lsls	r6, r0, #24
 801481e:	f101 0304 	add.w	r3, r1, #4
 8014822:	d50a      	bpl.n	801483a <_printf_i+0xce>
 8014824:	680e      	ldr	r6, [r1, #0]
 8014826:	602b      	str	r3, [r5, #0]
 8014828:	2e00      	cmp	r6, #0
 801482a:	da03      	bge.n	8014834 <_printf_i+0xc8>
 801482c:	232d      	movs	r3, #45	; 0x2d
 801482e:	4276      	negs	r6, r6
 8014830:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014834:	485e      	ldr	r0, [pc, #376]	; (80149b0 <_printf_i+0x244>)
 8014836:	230a      	movs	r3, #10
 8014838:	e019      	b.n	801486e <_printf_i+0x102>
 801483a:	680e      	ldr	r6, [r1, #0]
 801483c:	602b      	str	r3, [r5, #0]
 801483e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8014842:	bf18      	it	ne
 8014844:	b236      	sxthne	r6, r6
 8014846:	e7ef      	b.n	8014828 <_printf_i+0xbc>
 8014848:	682b      	ldr	r3, [r5, #0]
 801484a:	6820      	ldr	r0, [r4, #0]
 801484c:	1d19      	adds	r1, r3, #4
 801484e:	6029      	str	r1, [r5, #0]
 8014850:	0601      	lsls	r1, r0, #24
 8014852:	d501      	bpl.n	8014858 <_printf_i+0xec>
 8014854:	681e      	ldr	r6, [r3, #0]
 8014856:	e002      	b.n	801485e <_printf_i+0xf2>
 8014858:	0646      	lsls	r6, r0, #25
 801485a:	d5fb      	bpl.n	8014854 <_printf_i+0xe8>
 801485c:	881e      	ldrh	r6, [r3, #0]
 801485e:	4854      	ldr	r0, [pc, #336]	; (80149b0 <_printf_i+0x244>)
 8014860:	2f6f      	cmp	r7, #111	; 0x6f
 8014862:	bf0c      	ite	eq
 8014864:	2308      	moveq	r3, #8
 8014866:	230a      	movne	r3, #10
 8014868:	2100      	movs	r1, #0
 801486a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801486e:	6865      	ldr	r5, [r4, #4]
 8014870:	60a5      	str	r5, [r4, #8]
 8014872:	2d00      	cmp	r5, #0
 8014874:	bfa2      	ittt	ge
 8014876:	6821      	ldrge	r1, [r4, #0]
 8014878:	f021 0104 	bicge.w	r1, r1, #4
 801487c:	6021      	strge	r1, [r4, #0]
 801487e:	b90e      	cbnz	r6, 8014884 <_printf_i+0x118>
 8014880:	2d00      	cmp	r5, #0
 8014882:	d04d      	beq.n	8014920 <_printf_i+0x1b4>
 8014884:	4615      	mov	r5, r2
 8014886:	fbb6 f1f3 	udiv	r1, r6, r3
 801488a:	fb03 6711 	mls	r7, r3, r1, r6
 801488e:	5dc7      	ldrb	r7, [r0, r7]
 8014890:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8014894:	4637      	mov	r7, r6
 8014896:	42bb      	cmp	r3, r7
 8014898:	460e      	mov	r6, r1
 801489a:	d9f4      	bls.n	8014886 <_printf_i+0x11a>
 801489c:	2b08      	cmp	r3, #8
 801489e:	d10b      	bne.n	80148b8 <_printf_i+0x14c>
 80148a0:	6823      	ldr	r3, [r4, #0]
 80148a2:	07de      	lsls	r6, r3, #31
 80148a4:	d508      	bpl.n	80148b8 <_printf_i+0x14c>
 80148a6:	6923      	ldr	r3, [r4, #16]
 80148a8:	6861      	ldr	r1, [r4, #4]
 80148aa:	4299      	cmp	r1, r3
 80148ac:	bfde      	ittt	le
 80148ae:	2330      	movle	r3, #48	; 0x30
 80148b0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80148b4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80148b8:	1b52      	subs	r2, r2, r5
 80148ba:	6122      	str	r2, [r4, #16]
 80148bc:	f8cd a000 	str.w	sl, [sp]
 80148c0:	464b      	mov	r3, r9
 80148c2:	aa03      	add	r2, sp, #12
 80148c4:	4621      	mov	r1, r4
 80148c6:	4640      	mov	r0, r8
 80148c8:	f7ff fee2 	bl	8014690 <_printf_common>
 80148cc:	3001      	adds	r0, #1
 80148ce:	d14c      	bne.n	801496a <_printf_i+0x1fe>
 80148d0:	f04f 30ff 	mov.w	r0, #4294967295
 80148d4:	b004      	add	sp, #16
 80148d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80148da:	4835      	ldr	r0, [pc, #212]	; (80149b0 <_printf_i+0x244>)
 80148dc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80148e0:	6829      	ldr	r1, [r5, #0]
 80148e2:	6823      	ldr	r3, [r4, #0]
 80148e4:	f851 6b04 	ldr.w	r6, [r1], #4
 80148e8:	6029      	str	r1, [r5, #0]
 80148ea:	061d      	lsls	r5, r3, #24
 80148ec:	d514      	bpl.n	8014918 <_printf_i+0x1ac>
 80148ee:	07df      	lsls	r7, r3, #31
 80148f0:	bf44      	itt	mi
 80148f2:	f043 0320 	orrmi.w	r3, r3, #32
 80148f6:	6023      	strmi	r3, [r4, #0]
 80148f8:	b91e      	cbnz	r6, 8014902 <_printf_i+0x196>
 80148fa:	6823      	ldr	r3, [r4, #0]
 80148fc:	f023 0320 	bic.w	r3, r3, #32
 8014900:	6023      	str	r3, [r4, #0]
 8014902:	2310      	movs	r3, #16
 8014904:	e7b0      	b.n	8014868 <_printf_i+0xfc>
 8014906:	6823      	ldr	r3, [r4, #0]
 8014908:	f043 0320 	orr.w	r3, r3, #32
 801490c:	6023      	str	r3, [r4, #0]
 801490e:	2378      	movs	r3, #120	; 0x78
 8014910:	4828      	ldr	r0, [pc, #160]	; (80149b4 <_printf_i+0x248>)
 8014912:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8014916:	e7e3      	b.n	80148e0 <_printf_i+0x174>
 8014918:	0659      	lsls	r1, r3, #25
 801491a:	bf48      	it	mi
 801491c:	b2b6      	uxthmi	r6, r6
 801491e:	e7e6      	b.n	80148ee <_printf_i+0x182>
 8014920:	4615      	mov	r5, r2
 8014922:	e7bb      	b.n	801489c <_printf_i+0x130>
 8014924:	682b      	ldr	r3, [r5, #0]
 8014926:	6826      	ldr	r6, [r4, #0]
 8014928:	6961      	ldr	r1, [r4, #20]
 801492a:	1d18      	adds	r0, r3, #4
 801492c:	6028      	str	r0, [r5, #0]
 801492e:	0635      	lsls	r5, r6, #24
 8014930:	681b      	ldr	r3, [r3, #0]
 8014932:	d501      	bpl.n	8014938 <_printf_i+0x1cc>
 8014934:	6019      	str	r1, [r3, #0]
 8014936:	e002      	b.n	801493e <_printf_i+0x1d2>
 8014938:	0670      	lsls	r0, r6, #25
 801493a:	d5fb      	bpl.n	8014934 <_printf_i+0x1c8>
 801493c:	8019      	strh	r1, [r3, #0]
 801493e:	2300      	movs	r3, #0
 8014940:	6123      	str	r3, [r4, #16]
 8014942:	4615      	mov	r5, r2
 8014944:	e7ba      	b.n	80148bc <_printf_i+0x150>
 8014946:	682b      	ldr	r3, [r5, #0]
 8014948:	1d1a      	adds	r2, r3, #4
 801494a:	602a      	str	r2, [r5, #0]
 801494c:	681d      	ldr	r5, [r3, #0]
 801494e:	6862      	ldr	r2, [r4, #4]
 8014950:	2100      	movs	r1, #0
 8014952:	4628      	mov	r0, r5
 8014954:	f7eb fc3c 	bl	80001d0 <memchr>
 8014958:	b108      	cbz	r0, 801495e <_printf_i+0x1f2>
 801495a:	1b40      	subs	r0, r0, r5
 801495c:	6060      	str	r0, [r4, #4]
 801495e:	6863      	ldr	r3, [r4, #4]
 8014960:	6123      	str	r3, [r4, #16]
 8014962:	2300      	movs	r3, #0
 8014964:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014968:	e7a8      	b.n	80148bc <_printf_i+0x150>
 801496a:	6923      	ldr	r3, [r4, #16]
 801496c:	462a      	mov	r2, r5
 801496e:	4649      	mov	r1, r9
 8014970:	4640      	mov	r0, r8
 8014972:	47d0      	blx	sl
 8014974:	3001      	adds	r0, #1
 8014976:	d0ab      	beq.n	80148d0 <_printf_i+0x164>
 8014978:	6823      	ldr	r3, [r4, #0]
 801497a:	079b      	lsls	r3, r3, #30
 801497c:	d413      	bmi.n	80149a6 <_printf_i+0x23a>
 801497e:	68e0      	ldr	r0, [r4, #12]
 8014980:	9b03      	ldr	r3, [sp, #12]
 8014982:	4298      	cmp	r0, r3
 8014984:	bfb8      	it	lt
 8014986:	4618      	movlt	r0, r3
 8014988:	e7a4      	b.n	80148d4 <_printf_i+0x168>
 801498a:	2301      	movs	r3, #1
 801498c:	4632      	mov	r2, r6
 801498e:	4649      	mov	r1, r9
 8014990:	4640      	mov	r0, r8
 8014992:	47d0      	blx	sl
 8014994:	3001      	adds	r0, #1
 8014996:	d09b      	beq.n	80148d0 <_printf_i+0x164>
 8014998:	3501      	adds	r5, #1
 801499a:	68e3      	ldr	r3, [r4, #12]
 801499c:	9903      	ldr	r1, [sp, #12]
 801499e:	1a5b      	subs	r3, r3, r1
 80149a0:	42ab      	cmp	r3, r5
 80149a2:	dcf2      	bgt.n	801498a <_printf_i+0x21e>
 80149a4:	e7eb      	b.n	801497e <_printf_i+0x212>
 80149a6:	2500      	movs	r5, #0
 80149a8:	f104 0619 	add.w	r6, r4, #25
 80149ac:	e7f5      	b.n	801499a <_printf_i+0x22e>
 80149ae:	bf00      	nop
 80149b0:	08017c43 	.word	0x08017c43
 80149b4:	08017c54 	.word	0x08017c54

080149b8 <_read_r>:
 80149b8:	b538      	push	{r3, r4, r5, lr}
 80149ba:	4d07      	ldr	r5, [pc, #28]	; (80149d8 <_read_r+0x20>)
 80149bc:	4604      	mov	r4, r0
 80149be:	4608      	mov	r0, r1
 80149c0:	4611      	mov	r1, r2
 80149c2:	2200      	movs	r2, #0
 80149c4:	602a      	str	r2, [r5, #0]
 80149c6:	461a      	mov	r2, r3
 80149c8:	f7fe fdb8 	bl	801353c <_read>
 80149cc:	1c43      	adds	r3, r0, #1
 80149ce:	d102      	bne.n	80149d6 <_read_r+0x1e>
 80149d0:	682b      	ldr	r3, [r5, #0]
 80149d2:	b103      	cbz	r3, 80149d6 <_read_r+0x1e>
 80149d4:	6023      	str	r3, [r4, #0]
 80149d6:	bd38      	pop	{r3, r4, r5, pc}
 80149d8:	2000b548 	.word	0x2000b548

080149dc <__swbuf_r>:
 80149dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80149de:	460e      	mov	r6, r1
 80149e0:	4614      	mov	r4, r2
 80149e2:	4605      	mov	r5, r0
 80149e4:	b118      	cbz	r0, 80149ee <__swbuf_r+0x12>
 80149e6:	6983      	ldr	r3, [r0, #24]
 80149e8:	b90b      	cbnz	r3, 80149ee <__swbuf_r+0x12>
 80149ea:	f7ff f8dd 	bl	8013ba8 <__sinit>
 80149ee:	4b21      	ldr	r3, [pc, #132]	; (8014a74 <__swbuf_r+0x98>)
 80149f0:	429c      	cmp	r4, r3
 80149f2:	d12b      	bne.n	8014a4c <__swbuf_r+0x70>
 80149f4:	686c      	ldr	r4, [r5, #4]
 80149f6:	69a3      	ldr	r3, [r4, #24]
 80149f8:	60a3      	str	r3, [r4, #8]
 80149fa:	89a3      	ldrh	r3, [r4, #12]
 80149fc:	071a      	lsls	r2, r3, #28
 80149fe:	d52f      	bpl.n	8014a60 <__swbuf_r+0x84>
 8014a00:	6923      	ldr	r3, [r4, #16]
 8014a02:	b36b      	cbz	r3, 8014a60 <__swbuf_r+0x84>
 8014a04:	6923      	ldr	r3, [r4, #16]
 8014a06:	6820      	ldr	r0, [r4, #0]
 8014a08:	1ac0      	subs	r0, r0, r3
 8014a0a:	6963      	ldr	r3, [r4, #20]
 8014a0c:	b2f6      	uxtb	r6, r6
 8014a0e:	4283      	cmp	r3, r0
 8014a10:	4637      	mov	r7, r6
 8014a12:	dc04      	bgt.n	8014a1e <__swbuf_r+0x42>
 8014a14:	4621      	mov	r1, r4
 8014a16:	4628      	mov	r0, r5
 8014a18:	f7ff fc20 	bl	801425c <_fflush_r>
 8014a1c:	bb30      	cbnz	r0, 8014a6c <__swbuf_r+0x90>
 8014a1e:	68a3      	ldr	r3, [r4, #8]
 8014a20:	3b01      	subs	r3, #1
 8014a22:	60a3      	str	r3, [r4, #8]
 8014a24:	6823      	ldr	r3, [r4, #0]
 8014a26:	1c5a      	adds	r2, r3, #1
 8014a28:	6022      	str	r2, [r4, #0]
 8014a2a:	701e      	strb	r6, [r3, #0]
 8014a2c:	6963      	ldr	r3, [r4, #20]
 8014a2e:	3001      	adds	r0, #1
 8014a30:	4283      	cmp	r3, r0
 8014a32:	d004      	beq.n	8014a3e <__swbuf_r+0x62>
 8014a34:	89a3      	ldrh	r3, [r4, #12]
 8014a36:	07db      	lsls	r3, r3, #31
 8014a38:	d506      	bpl.n	8014a48 <__swbuf_r+0x6c>
 8014a3a:	2e0a      	cmp	r6, #10
 8014a3c:	d104      	bne.n	8014a48 <__swbuf_r+0x6c>
 8014a3e:	4621      	mov	r1, r4
 8014a40:	4628      	mov	r0, r5
 8014a42:	f7ff fc0b 	bl	801425c <_fflush_r>
 8014a46:	b988      	cbnz	r0, 8014a6c <__swbuf_r+0x90>
 8014a48:	4638      	mov	r0, r7
 8014a4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014a4c:	4b0a      	ldr	r3, [pc, #40]	; (8014a78 <__swbuf_r+0x9c>)
 8014a4e:	429c      	cmp	r4, r3
 8014a50:	d101      	bne.n	8014a56 <__swbuf_r+0x7a>
 8014a52:	68ac      	ldr	r4, [r5, #8]
 8014a54:	e7cf      	b.n	80149f6 <__swbuf_r+0x1a>
 8014a56:	4b09      	ldr	r3, [pc, #36]	; (8014a7c <__swbuf_r+0xa0>)
 8014a58:	429c      	cmp	r4, r3
 8014a5a:	bf08      	it	eq
 8014a5c:	68ec      	ldreq	r4, [r5, #12]
 8014a5e:	e7ca      	b.n	80149f6 <__swbuf_r+0x1a>
 8014a60:	4621      	mov	r1, r4
 8014a62:	4628      	mov	r0, r5
 8014a64:	f000 f80c 	bl	8014a80 <__swsetup_r>
 8014a68:	2800      	cmp	r0, #0
 8014a6a:	d0cb      	beq.n	8014a04 <__swbuf_r+0x28>
 8014a6c:	f04f 37ff 	mov.w	r7, #4294967295
 8014a70:	e7ea      	b.n	8014a48 <__swbuf_r+0x6c>
 8014a72:	bf00      	nop
 8014a74:	08017b40 	.word	0x08017b40
 8014a78:	08017b60 	.word	0x08017b60
 8014a7c:	08017b20 	.word	0x08017b20

08014a80 <__swsetup_r>:
 8014a80:	4b32      	ldr	r3, [pc, #200]	; (8014b4c <__swsetup_r+0xcc>)
 8014a82:	b570      	push	{r4, r5, r6, lr}
 8014a84:	681d      	ldr	r5, [r3, #0]
 8014a86:	4606      	mov	r6, r0
 8014a88:	460c      	mov	r4, r1
 8014a8a:	b125      	cbz	r5, 8014a96 <__swsetup_r+0x16>
 8014a8c:	69ab      	ldr	r3, [r5, #24]
 8014a8e:	b913      	cbnz	r3, 8014a96 <__swsetup_r+0x16>
 8014a90:	4628      	mov	r0, r5
 8014a92:	f7ff f889 	bl	8013ba8 <__sinit>
 8014a96:	4b2e      	ldr	r3, [pc, #184]	; (8014b50 <__swsetup_r+0xd0>)
 8014a98:	429c      	cmp	r4, r3
 8014a9a:	d10f      	bne.n	8014abc <__swsetup_r+0x3c>
 8014a9c:	686c      	ldr	r4, [r5, #4]
 8014a9e:	89a3      	ldrh	r3, [r4, #12]
 8014aa0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014aa4:	0719      	lsls	r1, r3, #28
 8014aa6:	d42c      	bmi.n	8014b02 <__swsetup_r+0x82>
 8014aa8:	06dd      	lsls	r5, r3, #27
 8014aaa:	d411      	bmi.n	8014ad0 <__swsetup_r+0x50>
 8014aac:	2309      	movs	r3, #9
 8014aae:	6033      	str	r3, [r6, #0]
 8014ab0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8014ab4:	81a3      	strh	r3, [r4, #12]
 8014ab6:	f04f 30ff 	mov.w	r0, #4294967295
 8014aba:	e03e      	b.n	8014b3a <__swsetup_r+0xba>
 8014abc:	4b25      	ldr	r3, [pc, #148]	; (8014b54 <__swsetup_r+0xd4>)
 8014abe:	429c      	cmp	r4, r3
 8014ac0:	d101      	bne.n	8014ac6 <__swsetup_r+0x46>
 8014ac2:	68ac      	ldr	r4, [r5, #8]
 8014ac4:	e7eb      	b.n	8014a9e <__swsetup_r+0x1e>
 8014ac6:	4b24      	ldr	r3, [pc, #144]	; (8014b58 <__swsetup_r+0xd8>)
 8014ac8:	429c      	cmp	r4, r3
 8014aca:	bf08      	it	eq
 8014acc:	68ec      	ldreq	r4, [r5, #12]
 8014ace:	e7e6      	b.n	8014a9e <__swsetup_r+0x1e>
 8014ad0:	0758      	lsls	r0, r3, #29
 8014ad2:	d512      	bpl.n	8014afa <__swsetup_r+0x7a>
 8014ad4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014ad6:	b141      	cbz	r1, 8014aea <__swsetup_r+0x6a>
 8014ad8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014adc:	4299      	cmp	r1, r3
 8014ade:	d002      	beq.n	8014ae6 <__swsetup_r+0x66>
 8014ae0:	4630      	mov	r0, r6
 8014ae2:	f7ff fc2f 	bl	8014344 <_free_r>
 8014ae6:	2300      	movs	r3, #0
 8014ae8:	6363      	str	r3, [r4, #52]	; 0x34
 8014aea:	89a3      	ldrh	r3, [r4, #12]
 8014aec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014af0:	81a3      	strh	r3, [r4, #12]
 8014af2:	2300      	movs	r3, #0
 8014af4:	6063      	str	r3, [r4, #4]
 8014af6:	6923      	ldr	r3, [r4, #16]
 8014af8:	6023      	str	r3, [r4, #0]
 8014afa:	89a3      	ldrh	r3, [r4, #12]
 8014afc:	f043 0308 	orr.w	r3, r3, #8
 8014b00:	81a3      	strh	r3, [r4, #12]
 8014b02:	6923      	ldr	r3, [r4, #16]
 8014b04:	b94b      	cbnz	r3, 8014b1a <__swsetup_r+0x9a>
 8014b06:	89a3      	ldrh	r3, [r4, #12]
 8014b08:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014b0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014b10:	d003      	beq.n	8014b1a <__swsetup_r+0x9a>
 8014b12:	4621      	mov	r1, r4
 8014b14:	4630      	mov	r0, r6
 8014b16:	f000 f84d 	bl	8014bb4 <__smakebuf_r>
 8014b1a:	89a0      	ldrh	r0, [r4, #12]
 8014b1c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014b20:	f010 0301 	ands.w	r3, r0, #1
 8014b24:	d00a      	beq.n	8014b3c <__swsetup_r+0xbc>
 8014b26:	2300      	movs	r3, #0
 8014b28:	60a3      	str	r3, [r4, #8]
 8014b2a:	6963      	ldr	r3, [r4, #20]
 8014b2c:	425b      	negs	r3, r3
 8014b2e:	61a3      	str	r3, [r4, #24]
 8014b30:	6923      	ldr	r3, [r4, #16]
 8014b32:	b943      	cbnz	r3, 8014b46 <__swsetup_r+0xc6>
 8014b34:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8014b38:	d1ba      	bne.n	8014ab0 <__swsetup_r+0x30>
 8014b3a:	bd70      	pop	{r4, r5, r6, pc}
 8014b3c:	0781      	lsls	r1, r0, #30
 8014b3e:	bf58      	it	pl
 8014b40:	6963      	ldrpl	r3, [r4, #20]
 8014b42:	60a3      	str	r3, [r4, #8]
 8014b44:	e7f4      	b.n	8014b30 <__swsetup_r+0xb0>
 8014b46:	2000      	movs	r0, #0
 8014b48:	e7f7      	b.n	8014b3a <__swsetup_r+0xba>
 8014b4a:	bf00      	nop
 8014b4c:	2000001c 	.word	0x2000001c
 8014b50:	08017b40 	.word	0x08017b40
 8014b54:	08017b60 	.word	0x08017b60
 8014b58:	08017b20 	.word	0x08017b20

08014b5c <abort>:
 8014b5c:	b508      	push	{r3, lr}
 8014b5e:	2006      	movs	r0, #6
 8014b60:	f000 f890 	bl	8014c84 <raise>
 8014b64:	2001      	movs	r0, #1
 8014b66:	f7fe fcdf 	bl	8013528 <_exit>

08014b6a <__swhatbuf_r>:
 8014b6a:	b570      	push	{r4, r5, r6, lr}
 8014b6c:	460e      	mov	r6, r1
 8014b6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014b72:	2900      	cmp	r1, #0
 8014b74:	b096      	sub	sp, #88	; 0x58
 8014b76:	4614      	mov	r4, r2
 8014b78:	461d      	mov	r5, r3
 8014b7a:	da08      	bge.n	8014b8e <__swhatbuf_r+0x24>
 8014b7c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8014b80:	2200      	movs	r2, #0
 8014b82:	602a      	str	r2, [r5, #0]
 8014b84:	061a      	lsls	r2, r3, #24
 8014b86:	d410      	bmi.n	8014baa <__swhatbuf_r+0x40>
 8014b88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014b8c:	e00e      	b.n	8014bac <__swhatbuf_r+0x42>
 8014b8e:	466a      	mov	r2, sp
 8014b90:	f000 f894 	bl	8014cbc <_fstat_r>
 8014b94:	2800      	cmp	r0, #0
 8014b96:	dbf1      	blt.n	8014b7c <__swhatbuf_r+0x12>
 8014b98:	9a01      	ldr	r2, [sp, #4]
 8014b9a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8014b9e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8014ba2:	425a      	negs	r2, r3
 8014ba4:	415a      	adcs	r2, r3
 8014ba6:	602a      	str	r2, [r5, #0]
 8014ba8:	e7ee      	b.n	8014b88 <__swhatbuf_r+0x1e>
 8014baa:	2340      	movs	r3, #64	; 0x40
 8014bac:	2000      	movs	r0, #0
 8014bae:	6023      	str	r3, [r4, #0]
 8014bb0:	b016      	add	sp, #88	; 0x58
 8014bb2:	bd70      	pop	{r4, r5, r6, pc}

08014bb4 <__smakebuf_r>:
 8014bb4:	898b      	ldrh	r3, [r1, #12]
 8014bb6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014bb8:	079d      	lsls	r5, r3, #30
 8014bba:	4606      	mov	r6, r0
 8014bbc:	460c      	mov	r4, r1
 8014bbe:	d507      	bpl.n	8014bd0 <__smakebuf_r+0x1c>
 8014bc0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8014bc4:	6023      	str	r3, [r4, #0]
 8014bc6:	6123      	str	r3, [r4, #16]
 8014bc8:	2301      	movs	r3, #1
 8014bca:	6163      	str	r3, [r4, #20]
 8014bcc:	b002      	add	sp, #8
 8014bce:	bd70      	pop	{r4, r5, r6, pc}
 8014bd0:	ab01      	add	r3, sp, #4
 8014bd2:	466a      	mov	r2, sp
 8014bd4:	f7ff ffc9 	bl	8014b6a <__swhatbuf_r>
 8014bd8:	9900      	ldr	r1, [sp, #0]
 8014bda:	4605      	mov	r5, r0
 8014bdc:	4630      	mov	r0, r6
 8014bde:	f7ff f8ef 	bl	8013dc0 <_malloc_r>
 8014be2:	b948      	cbnz	r0, 8014bf8 <__smakebuf_r+0x44>
 8014be4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014be8:	059a      	lsls	r2, r3, #22
 8014bea:	d4ef      	bmi.n	8014bcc <__smakebuf_r+0x18>
 8014bec:	f023 0303 	bic.w	r3, r3, #3
 8014bf0:	f043 0302 	orr.w	r3, r3, #2
 8014bf4:	81a3      	strh	r3, [r4, #12]
 8014bf6:	e7e3      	b.n	8014bc0 <__smakebuf_r+0xc>
 8014bf8:	4b0d      	ldr	r3, [pc, #52]	; (8014c30 <__smakebuf_r+0x7c>)
 8014bfa:	62b3      	str	r3, [r6, #40]	; 0x28
 8014bfc:	89a3      	ldrh	r3, [r4, #12]
 8014bfe:	6020      	str	r0, [r4, #0]
 8014c00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014c04:	81a3      	strh	r3, [r4, #12]
 8014c06:	9b00      	ldr	r3, [sp, #0]
 8014c08:	6163      	str	r3, [r4, #20]
 8014c0a:	9b01      	ldr	r3, [sp, #4]
 8014c0c:	6120      	str	r0, [r4, #16]
 8014c0e:	b15b      	cbz	r3, 8014c28 <__smakebuf_r+0x74>
 8014c10:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014c14:	4630      	mov	r0, r6
 8014c16:	f000 f863 	bl	8014ce0 <_isatty_r>
 8014c1a:	b128      	cbz	r0, 8014c28 <__smakebuf_r+0x74>
 8014c1c:	89a3      	ldrh	r3, [r4, #12]
 8014c1e:	f023 0303 	bic.w	r3, r3, #3
 8014c22:	f043 0301 	orr.w	r3, r3, #1
 8014c26:	81a3      	strh	r3, [r4, #12]
 8014c28:	89a0      	ldrh	r0, [r4, #12]
 8014c2a:	4305      	orrs	r5, r0
 8014c2c:	81a5      	strh	r5, [r4, #12]
 8014c2e:	e7cd      	b.n	8014bcc <__smakebuf_r+0x18>
 8014c30:	08013b41 	.word	0x08013b41

08014c34 <_raise_r>:
 8014c34:	291f      	cmp	r1, #31
 8014c36:	b538      	push	{r3, r4, r5, lr}
 8014c38:	4604      	mov	r4, r0
 8014c3a:	460d      	mov	r5, r1
 8014c3c:	d904      	bls.n	8014c48 <_raise_r+0x14>
 8014c3e:	2316      	movs	r3, #22
 8014c40:	6003      	str	r3, [r0, #0]
 8014c42:	f04f 30ff 	mov.w	r0, #4294967295
 8014c46:	bd38      	pop	{r3, r4, r5, pc}
 8014c48:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8014c4a:	b112      	cbz	r2, 8014c52 <_raise_r+0x1e>
 8014c4c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014c50:	b94b      	cbnz	r3, 8014c66 <_raise_r+0x32>
 8014c52:	4620      	mov	r0, r4
 8014c54:	f000 f830 	bl	8014cb8 <_getpid_r>
 8014c58:	462a      	mov	r2, r5
 8014c5a:	4601      	mov	r1, r0
 8014c5c:	4620      	mov	r0, r4
 8014c5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014c62:	f000 b817 	b.w	8014c94 <_kill_r>
 8014c66:	2b01      	cmp	r3, #1
 8014c68:	d00a      	beq.n	8014c80 <_raise_r+0x4c>
 8014c6a:	1c59      	adds	r1, r3, #1
 8014c6c:	d103      	bne.n	8014c76 <_raise_r+0x42>
 8014c6e:	2316      	movs	r3, #22
 8014c70:	6003      	str	r3, [r0, #0]
 8014c72:	2001      	movs	r0, #1
 8014c74:	e7e7      	b.n	8014c46 <_raise_r+0x12>
 8014c76:	2400      	movs	r4, #0
 8014c78:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8014c7c:	4628      	mov	r0, r5
 8014c7e:	4798      	blx	r3
 8014c80:	2000      	movs	r0, #0
 8014c82:	e7e0      	b.n	8014c46 <_raise_r+0x12>

08014c84 <raise>:
 8014c84:	4b02      	ldr	r3, [pc, #8]	; (8014c90 <raise+0xc>)
 8014c86:	4601      	mov	r1, r0
 8014c88:	6818      	ldr	r0, [r3, #0]
 8014c8a:	f7ff bfd3 	b.w	8014c34 <_raise_r>
 8014c8e:	bf00      	nop
 8014c90:	2000001c 	.word	0x2000001c

08014c94 <_kill_r>:
 8014c94:	b538      	push	{r3, r4, r5, lr}
 8014c96:	4d07      	ldr	r5, [pc, #28]	; (8014cb4 <_kill_r+0x20>)
 8014c98:	2300      	movs	r3, #0
 8014c9a:	4604      	mov	r4, r0
 8014c9c:	4608      	mov	r0, r1
 8014c9e:	4611      	mov	r1, r2
 8014ca0:	602b      	str	r3, [r5, #0]
 8014ca2:	f7fe fc2f 	bl	8013504 <_kill>
 8014ca6:	1c43      	adds	r3, r0, #1
 8014ca8:	d102      	bne.n	8014cb0 <_kill_r+0x1c>
 8014caa:	682b      	ldr	r3, [r5, #0]
 8014cac:	b103      	cbz	r3, 8014cb0 <_kill_r+0x1c>
 8014cae:	6023      	str	r3, [r4, #0]
 8014cb0:	bd38      	pop	{r3, r4, r5, pc}
 8014cb2:	bf00      	nop
 8014cb4:	2000b548 	.word	0x2000b548

08014cb8 <_getpid_r>:
 8014cb8:	f7fe bc1c 	b.w	80134f4 <_getpid>

08014cbc <_fstat_r>:
 8014cbc:	b538      	push	{r3, r4, r5, lr}
 8014cbe:	4d07      	ldr	r5, [pc, #28]	; (8014cdc <_fstat_r+0x20>)
 8014cc0:	2300      	movs	r3, #0
 8014cc2:	4604      	mov	r4, r0
 8014cc4:	4608      	mov	r0, r1
 8014cc6:	4611      	mov	r1, r2
 8014cc8:	602b      	str	r3, [r5, #0]
 8014cca:	f7fe fc7c 	bl	80135c6 <_fstat>
 8014cce:	1c43      	adds	r3, r0, #1
 8014cd0:	d102      	bne.n	8014cd8 <_fstat_r+0x1c>
 8014cd2:	682b      	ldr	r3, [r5, #0]
 8014cd4:	b103      	cbz	r3, 8014cd8 <_fstat_r+0x1c>
 8014cd6:	6023      	str	r3, [r4, #0]
 8014cd8:	bd38      	pop	{r3, r4, r5, pc}
 8014cda:	bf00      	nop
 8014cdc:	2000b548 	.word	0x2000b548

08014ce0 <_isatty_r>:
 8014ce0:	b538      	push	{r3, r4, r5, lr}
 8014ce2:	4d06      	ldr	r5, [pc, #24]	; (8014cfc <_isatty_r+0x1c>)
 8014ce4:	2300      	movs	r3, #0
 8014ce6:	4604      	mov	r4, r0
 8014ce8:	4608      	mov	r0, r1
 8014cea:	602b      	str	r3, [r5, #0]
 8014cec:	f7fe fc7b 	bl	80135e6 <_isatty>
 8014cf0:	1c43      	adds	r3, r0, #1
 8014cf2:	d102      	bne.n	8014cfa <_isatty_r+0x1a>
 8014cf4:	682b      	ldr	r3, [r5, #0]
 8014cf6:	b103      	cbz	r3, 8014cfa <_isatty_r+0x1a>
 8014cf8:	6023      	str	r3, [r4, #0]
 8014cfa:	bd38      	pop	{r3, r4, r5, pc}
 8014cfc:	2000b548 	.word	0x2000b548

08014d00 <_init>:
 8014d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014d02:	bf00      	nop
 8014d04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014d06:	bc08      	pop	{r3}
 8014d08:	469e      	mov	lr, r3
 8014d0a:	4770      	bx	lr

08014d0c <_fini>:
 8014d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014d0e:	bf00      	nop
 8014d10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014d12:	bc08      	pop	{r3}
 8014d14:	469e      	mov	lr, r3
 8014d16:	4770      	bx	lr
